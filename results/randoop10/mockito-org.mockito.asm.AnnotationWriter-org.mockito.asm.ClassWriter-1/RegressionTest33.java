import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest33 {

    public static boolean debug = false;

    @Test
    public void test16501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16501");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        int int27 = classReader21.readInt(20);
        int int29 = classReader21.readUnsignedShort(0);
        int int31 = classReader21.readUnsignedShort(1);
        java.lang.String[] strArray32 = classReader21.getInterfaces();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        classWriter35.visitSource("hi!", "");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter35.visit((int) 'a', (int) '4', "", "hi!", "", strArray51);
        byte[] byteArray53 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader54.accept((org.mockito.asm.ClassVisitor) classWriter56, 8);
        char[] charArray65 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj66 = classReader54.readConst((int) (short) 1, charArray65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = classReader21.readUTF8((int) (short) 9, charArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 132864 + "'", int27 == 132864);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 51966 + "'", int29 == 51966);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 65210 + "'", int31 == 65210);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj66 + "' != '" + "\007\000" + "'", obj66, "\007\000");
    }

    @Test
    public void test16502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16502");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (byte) -1, 9);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIntInsn(0, 97);
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test16503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16503");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        int int22 = classWriter1.newNameType("", "\007\000");
        byte[] byteArray23 = classWriter1.toByteArray();
        int int25 = classWriter1.newUTF8("\007\000");
        java.lang.String[] strArray31 = null;
        classWriter1.visit(341012341, 2, "hi!", "\001", "hi!", strArray31);
        int int34 = classWriter1.newUTF8("");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        classWriter40.visitSource("hi!", "");
        classWriter40.visitEnd();
        classWriter40.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter40.visitAnnotation("hi!", true);
        classWriter40.visitEnd();
        byte[] byteArray51 = classWriter40.toByteArray();
        java.lang.Object obj56 = null;
        org.mockito.asm.FieldVisitor fieldVisitor57 = classWriter40.visitField((int) (short) 1792, "\007\000", "hi!", "", obj56);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter64.visitEnd();
        byte[] byteArray66 = classWriter64.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        java.lang.String[] strArray68 = classReader67.getInterfaces();
        java.lang.String str69 = classReader67.getSuperName();
        int int71 = classReader67.readInt(6);
        java.lang.String[] strArray72 = classReader67.getInterfaces();
        classWriter40.visit((int) (byte) 10, 512, "\001", "\001", "\001", strArray72);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor74 = classWriter1.visitMethod((-1107296256), "\007\000", "\007\000", "hi!", strArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 3, 7, -64, -128, 12, 0, 1, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 3, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 4, 0, 2, 0, 4, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 5, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor57);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(strArray72);
    }

    @Test
    public void test16504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16504");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter24.visitEnd();
        classWriter24.visitSource("hi!", "");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter24.visit((int) 'a', (int) '4', "", "hi!", "", strArray40);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        classWriter48.visitSource("hi!", "");
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter48.visit((int) 'a', (int) '4', "", "hi!", "", strArray64);
        classWriter24.visit((int) (byte) 1, 100, "", "hi!", "", strArray64);
        classWriter1.visit(0, 2, "", "hi!", "hi!", strArray64);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter1.visitAnnotation("", true);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        java.lang.String[] strArray78 = null;
        classWriter1.visit(9, 676719, "\001", "hi!", "", strArray78);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(annotationVisitor70);
    }

    @Test
    public void test16505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16505");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classWriter25.toByteArray();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int37 = classWriter32.newMethod("", "", "hi!", false);
        classWriter32.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter32.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter47.visitAnnotation("", true);
        classWriter47.visitSource("", "");
        classWriter47.visitSource("", "hi!");
        int int60 = classWriter47.newField("hi!", "hi!", "hi!");
        int int64 = classWriter47.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter32.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = fieldVisitor65.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = annotationVisitor68.visitAnnotation("hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter25.visitField(9, "", "", "", (java.lang.Object) "hi!");
        classWriter25.visitEnd();
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter79.visitEnd();
        byte[] byteArray81 = classWriter79.toByteArray();
        org.mockito.asm.ClassReader classReader82 = new org.mockito.asm.ClassReader(byteArray81);
        int int84 = classReader82.readUnsignedShort((int) (short) 0);
        int int85 = classReader82.header;
        int int87 = classReader82.readByte(0);
        java.lang.String[] strArray88 = classReader82.getInterfaces();
        java.lang.String[] strArray89 = classReader82.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor90 = classWriter25.visitMethod(33554688, "hi!", "hi!", "\001", strArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor94 = methodVisitor90.visitParameterAnnotation(196612, "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 51966 + "'", int84 == 51966);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 202 + "'", int87 == 202);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(methodVisitor90);
    }

    @Test
    public void test16506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16506");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int29 = classReader20.header;
        java.lang.String[] strArray30 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader20, 14);
        short short34 = classReader20.readShort(14);
        int int35 = classReader20.header;
        int int36 = classReader20.header;
        char[] charArray41 = new char[] { '4', 'a', 'a' };
        java.lang.String str42 = classReader20.readUTF8(97, charArray41);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = classReader20.readLong(512);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 73 + "'", int29 == 73);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 26913 + "'", short34 == (short) 26913);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 73 + "'", int35 == 73);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 73 + "'", int36 == 73);
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "\007\000a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "\007\000a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[\007, \000, a]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\007\000" + "'", str42, "\007\000");
    }

    @Test
    public void test16507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16507");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        int int8 = classReader4.readUnsignedShort(3);
        short short10 = classReader4.readShort(6);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        byte[] byteArray31 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray31);
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String str35 = classReader34.getSuperName();
        java.lang.String[] strArray36 = classReader34.getInterfaces();
        int int38 = classReader34.readUnsignedShort((int) (byte) 0);
        int int40 = classReader34.readUnsignedShort(17);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter43.visitEnd();
        classWriter43.visitSource("hi!", "");
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter43.visit((int) 'a', (int) '4', "", "hi!", "", strArray59);
        byte[] byteArray61 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader62.accept((org.mockito.asm.ClassVisitor) classWriter64, 8);
        char[] charArray73 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj74 = classReader62.readConst((int) (short) 1, charArray73);
        java.lang.Object obj75 = classReader34.readConst((int) (short) 4, charArray73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = classReader4.readClass((int) (short) 2387, charArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2387");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48640 + "'", int8 == 48640);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 51966 + "'", int38 == 51966);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray73), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray73), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray73), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + "\007\000" + "'", obj74, "\007\000");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "Lhi!;");
    }

    @Test
    public void test16508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16508");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int11 = classWriter1.newField("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("", "", "", 0);
        classWriter1.visitInnerClass("hi!", "\007\000", "hi!", (int) (byte) 1);
        classWriter1.visitEnd();
        byte[] byteArray26 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        int int29 = classReader27.readUnsignedShort(3);
        java.lang.String str30 = classReader27.getSuperName();
        int int32 = classReader27.getItem((int) (short) 10);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 0, 7, 0, 4, 12, 0, 4, 0, 4, 9, 0, 5, 0, 6, 7, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 9, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0, 0, 11, 0, 0, 0, 18, 0, 2, 0, 5, 0, 5, 0, 4, 0, 0, 0, 8, 0, 10, 0, 1, 0, 1, 0, 12, 0, 0, 0, 6, 0, 1, 0, 4, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48640 + "'", int29 == 48640);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 78 + "'", int32 == 78);
    }

    @Test
    public void test16509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16509");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        int int10 = classReader4.getAccess();
        int int12 = classReader4.readUnsignedShort((int) (short) 0);
        int int14 = classReader4.readInt(4);
        byte[] byteArray15 = classReader4.b;
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        int int17 = classReader16.header;
        java.lang.Class<?> wildcardClass18 = classReader16.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51966 + "'", int12 == 51966);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test16510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16510");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 1751720193);
        methodVisitor69.visitInsn(29285);
        methodVisitor69.visitInsn((int) (short) 2);
        methodVisitor69.visitVarInsn(3407875, 2);
        methodVisitor69.visitIincInsn(1025, 132864);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16511");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("\001", "\001", "");
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        byte[] byteArray19 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String[] strArray21 = classReader20.getInterfaces();
        short short23 = classReader20.readShort((int) (byte) 1);
        java.lang.String str24 = classReader20.getSuperName();
        long long26 = classReader20.readLong(5);
        int int28 = classReader20.readByte(1);
        int int29 = classReader20.header;
        int int31 = classReader20.readByte(7);
        org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField(88, "hi!", "\001", "hi!", (java.lang.Object) 7);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + short23 + "' != '" + (short) -326 + "'", short23 == (short) -326);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 16777216L + "'", long26 == 16777216L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 254 + "'", int28 == 254);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor32);
    }

    @Test
    public void test16512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16512");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        int int5 = classWriter1.newField("", "", "hi!");
        int int8 = classWriter1.newNameType("", "");
        classWriter1.visitEnd();
        byte[] byteArray10 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("hi!", "", "hi!");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 9, 0, 2, 0, 4, 12, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test16513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16513");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        long long9 = classReader4.readLong(0);
        byte[] byteArray10 = classReader4.b;
        java.lang.String str11 = classReader4.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = classReader4.getItem((int) (short) 17509);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 17509");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3819410108757049344L) + "'", long9 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test16514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16514");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) -1, (int) (byte) -1);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitIincInsn((-1), 7);
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs((int) (short) 3, (-1107296256));
        methodVisitor69.visitVarInsn(25, 26913);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test16515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16515");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray2, (int) (byte) 0, (-1));
        long long7 = classReader5.readLong(12);
        int int8 = classReader5.header;
        int int9 = classReader5.getAccess();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test16516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16516");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn(1399416686, 196613);
        methodVisitor69.visitMaxs(9, (int) (short) 1);
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label[] labelArray92 = new org.mockito.asm.Label[] { label91 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(23, (int) (short) 20, label90, labelArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(labelArray92);
    }

    @Test
    public void test16517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16517");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("", "hi!", "\007\000", (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        byte[] byteArray36 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        java.lang.String[] strArray38 = classReader37.getInterfaces();
        short short40 = classReader37.readShort((int) (byte) 1);
        java.lang.String str41 = classReader37.getSuperName();
        org.mockito.asm.FieldVisitor fieldVisitor42 = classWriter1.visitField(223337, "\007\000", "hi!", "", (java.lang.Object) str41);
        int int45 = classWriter1.newNameType("\007\000", "\001");
        classWriter1.visitSource("hi!", "hi!");
        classWriter1.visitSource("hi!", "\001");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -326 + "'", short40 == (short) -326);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(fieldVisitor42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
    }

    @Test
    public void test16518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16518");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitVarInsn(12, 0);
        methodVisitor69.visitVarInsn(186, 51);
        methodVisitor69.visitIntInsn(119, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = annotationVisitor85.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = annotationVisitor87.visitArray("\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = annotationVisitor87.visitAnnotation("", "\007\000");
        annotationVisitor92.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test16519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16519");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn(47806, "hi!", "\001", "hi!");
        org.mockito.asm.Label label93 = null;
        org.mockito.asm.Label label94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("", "", "\007\000", label93, label94, 26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test16520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16520");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter28.visitAnnotation("hi!", true);
        classWriter28.visitEnd();
        byte[] byteArray46 = classWriter28.toByteArray();
        byte[] byteArray47 = classWriter28.toByteArray();
        int int49 = classWriter28.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int52 = classReader20.getAccess();
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(classReader20, 15);
        java.lang.String[] strArray55 = classReader20.getInterfaces();
        int int57 = classReader20.readByte(20);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(classReader20, (int) 'a');
        int int61 = classReader20.getItem(0);
        int int63 = classReader20.getItem(1);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 11 + "'", int63 == 11);
    }

    @Test
    public void test16521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16521");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitInnerClass("", "\007\000", "", 114);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter21.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = annotationVisitor24.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = annotationVisitor26.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = annotationVisitor26.visitAnnotation("\007\000", "hi!");
        annotationVisitor26.visitEnum("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = annotationVisitor26.visitArray("\007\000");
        annotationVisitor18.visit("\001", (java.lang.Object) "\007\000");
        annotationVisitor18.visitEnum("hi!", "\001", "\001");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test16522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16522");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter30.visitAnnotation("", true);
        int int36 = classWriter30.newNameType("hi!", "hi!");
        classWriter30.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        classWriter48.visitSource("hi!", "");
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter48.visit((int) 'a', (int) '4', "", "hi!", "", strArray64);
        byte[] byteArray66 = classWriter48.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter48.visitAnnotation("", false);
        byte[] byteArray70 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        java.lang.String[] strArray72 = classReader71.getInterfaces();
        classWriter30.visit(51966, (int) 'a', "", "\007\000", "", strArray72);
        classWriter30.visitEnd();
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter30, (int) (byte) 1);
        classWriter30.visitOuterClass("\001", "\001", "\007\000");
        int int85 = classWriter30.newMethod("hi!", "\007\000", "\001", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 12 + "'", int85 == 12);
    }

    @Test
    public void test16523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16523");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        int int13 = classWriter1.newUTF8("hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("hi!", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter1.visitAnnotation("hi!", false);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test16524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16524");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitIntInsn(6, 52);
        methodVisitor69.visitMaxs((int) (short) 26913, 16779008);
        methodVisitor69.visitInsn((int) (short) 26913);
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("hi!", "hi!", "", label94, label95, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test16525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16525");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn((int) (short) 256, "hi!", "", "");
        methodVisitor69.visitFieldInsn(0, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitMaxs((int) (short) 26913, (int) (short) 1792);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor96 = methodVisitor69.visitAnnotation("\001", true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor96);
    }

    @Test
    public void test16526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16526");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "hi!", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("hi!", true);
        annotationVisitor34.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = annotationVisitor34.visitArray("\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test16527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16527");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray2, (int) (byte) 0, (-1));
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray2);
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray2, (int) (short) 0, 51966);
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray2);
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray2);
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray2);
        long long14 = classReader12.readLong(0);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader12.readInt(173);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3819410108757049344L) + "'", long14 == (-3819410108757049344L));
    }

    @Test
    public void test16528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16528");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "\007\000");
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test16529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16529");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        byte[] byteArray9 = classReader4.b;
        int int11 = classReader4.readInt((int) (byte) 1);
        int int12 = classReader4.getAccess();
        int int14 = classReader4.readInt(14);
        byte[] byteArray15 = classReader4.b;
        int int16 = classReader4.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            short short18 = classReader4.readShort(38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 38");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-21316096) + "'", int11 == (-21316096));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test16530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16530");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int37 = classReader20.getAccess();
        java.lang.String str38 = classReader20.getClassName();
        int int39 = classReader20.getAccess();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter41.visitEnd();
        classWriter41.visitSource("hi!", "");
        classWriter41.visitEnd();
        byte[] byteArray47 = classWriter41.toByteArray();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter53.visitAnnotation("", true);
        classWriter53.visitSource("", "");
        classWriter53.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor68 = classWriter53.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter53.visitOuterClass("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor73 = classWriter41.visitField(100, "", "hi!", "", (java.lang.Object) "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter41, (int) (short) 26978);
        int int76 = classReader20.header;
        int int78 = classReader20.getItem(0);
        int int80 = classReader20.readInt(25);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(fieldVisitor68);
        org.junit.Assert.assertNotNull(fieldVisitor73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 73 + "'", int76 == 73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 16779603 + "'", int80 == 16779603);
    }

    @Test
    public void test16531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16531");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitIntInsn(6, 52);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitVarInsn(0, (int) (short) 100);
        methodVisitor69.visitVarInsn(132864, 202);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test16532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16532");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("", "\007\000", "\001", 26);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test16533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16533");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray4);
        int int7 = classReader5.readUnsignedShort((int) (short) 1);
        int int9 = classReader5.readInt(0);
        long long11 = classReader5.readLong(11);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = classReader5.readByte((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-889275714) + "'", int9 == (-889275714));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test16534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16534");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(7);
        methodVisitor69.visitMaxs((int) (byte) 10, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotation("hi!", false);
        org.mockito.asm.Label label91 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test16535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16535");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(1751720193, (int) (short) 1792);
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn(196613, 104);
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitFieldInsn(47806, "\007\000", "\001", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(annotationVisitor94);
    }

    @Test
    public void test16536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16536");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn((-21316096), 186);
        methodVisitor69.visitMaxs((int) (byte) 10, 10);
        methodVisitor69.visitMaxs(16779008, (int) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) 28526, 65542);
        methodVisitor69.visitIincInsn(25966, 2049);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test16537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16537");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        int int25 = classReader21.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        byte[] byteArray46 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader47.accept((org.mockito.asm.ClassVisitor) classWriter49, 8);
        char[] charArray58 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj59 = classReader47.readConst((int) (short) 1, charArray58);
        java.lang.Object obj60 = classReader21.readConst(4, charArray58);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(classReader21, 6);
        int int64 = classWriter62.newClass("\007\000");
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter70.visitEnd();
        classWriter70.visitSource("hi!", "");
        classWriter70.visitEnd();
        byte[] byteArray76 = classWriter70.toByteArray();
        org.mockito.asm.ClassReader classReader77 = new org.mockito.asm.ClassReader(byteArray76);
        int int78 = classReader77.header;
        java.lang.String str79 = classReader77.getSuperName();
        org.mockito.asm.FieldVisitor fieldVisitor80 = classWriter62.visitField(97, "", "hi!", "hi!", (java.lang.Object) str79);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = fieldVisitor80.visitAnnotation("hi!", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + "\007\000" + "'", obj59, "\007\000");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "Lhi!;");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 52 + "'", int78 == 52);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(fieldVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test16538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16538");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(3072, "\001", "\007\000", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test16539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16539");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn(0, "");
        methodVisitor69.visitInsn((int) (short) 26913);
        methodVisitor69.visitCode();
        methodVisitor69.visitMaxs((int) (short) 2, (int) (short) 24832);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16540");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        int int8 = classWriter1.newMethod("hi!", "", "hi!", true);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("\001", "", "hi!", (int) (short) 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test16541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16541");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter28.visitAnnotation("hi!", true);
        classWriter28.visitEnd();
        byte[] byteArray46 = classWriter28.toByteArray();
        byte[] byteArray47 = classWriter28.toByteArray();
        int int49 = classWriter28.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int52 = classReader20.getAccess();
        int int53 = classReader20.getAccess();
        java.lang.String str54 = classReader20.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test16542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16542");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        byte[] byteArray35 = classReader20.b;
        java.lang.String str36 = classReader20.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int38 = classReader20.readByte(1635022194);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test16543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16543");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitVarInsn((int) (short) 29285, (int) (short) 4);
        methodVisitor69.visitTypeInsn(51, "\007\000");
        methodVisitor69.visitIntInsn(1635022194, 47806);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16544");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label71 = null;
        org.mockito.asm.Label label72 = null;
        org.mockito.asm.Label label73 = null;
        methodVisitor69.visitTryCatchBlock(label71, label72, label73, "hi!");
        org.mockito.asm.Label label76 = null;
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        methodVisitor69.visitTryCatchBlock(label76, label77, label78, "\007\000");
        methodVisitor69.visitMultiANewArrayInsn("", 12);
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 28526);
        methodVisitor69.visitInsn(1792);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16545");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) '#', (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn(48640);
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        methodVisitor69.visitTryCatchBlock(label90, label91, label92, "\007\000");
        methodVisitor69.visitMultiANewArrayInsn("hi!", 19);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test16546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16546");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(52);
        methodVisitor69.visitVarInsn(28, 1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn(1763770624, 16777217);
        methodVisitor69.visitIincInsn(29285, 0);
        methodVisitor69.visitVarInsn((int) (short) 97, (int) (byte) -1);
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test16547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16547");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classReader20.b;
        int int38 = classReader20.header;
        byte[] byteArray39 = classReader20.b;
        java.lang.String str40 = classReader20.getClassName();
        java.lang.String str41 = classReader20.getClassName();
        short short43 = classReader20.readShort(116);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) 872);
        int int49 = classWriter45.newField("\007\000", "", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 73 + "'", int38 == 73);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) 1792 + "'", short43 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 11 + "'", int49 == 11);
    }

    @Test
    public void test16548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16548");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        classWriter22.visitOuterClass("hi!", "hi!", "");
        int int31 = classWriter22.newNameType("\001", "hi!");
        java.lang.Object obj36 = null;
        org.mockito.asm.FieldVisitor fieldVisitor37 = classWriter22.visitField(20, "\001", "\007\000", "\001", obj36);
        classWriter22.visitSource("\007\000", "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertNotNull(fieldVisitor37);
    }

    @Test
    public void test16549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16549");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitIincInsn(186, (int) '#');
        methodVisitor69.visitTypeInsn(0, "");
        methodVisitor69.visitCode();
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\001", "\007\000", "\001", label91, label92, 28263);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16550");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "hi!");
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        classWriter1.visitOuterClass("hi!", "hi!", "\001");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
    }

    @Test
    public void test16551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16551");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(52);
        byte[] byteArray2 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("\007\000", "");
        classWriter1.visitInnerClass("hi!", "", "\001", 104);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        byte[] byteArray27 = classWriter25.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter25.visitAnnotation("", true);
        classWriter25.visitOuterClass("", "", "hi!");
        int int39 = classWriter25.newMethod("", "hi!", "hi!", true);
        int int41 = classWriter25.newUTF8("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter25.visitAnnotation("", true);
        classWriter25.visitInnerClass("\007\000", "hi!", "", 3);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter56.visitEnd();
        byte[] byteArray58 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        java.lang.String[] strArray60 = classReader59.getInterfaces();
        java.lang.String str61 = classReader59.getSuperName();
        long long63 = classReader59.readLong((int) (byte) 0);
        java.lang.String str64 = classReader59.getSuperName();
        java.lang.String str65 = classReader59.getSuperName();
        int int66 = classReader59.getAccess();
        java.lang.String[] strArray67 = classReader59.getInterfaces();
        classWriter25.visit((int) (short) -17730, 29285, "\001", "", "\001", strArray67);
        classWriter1.visit(105, 768, "hi!", "\007\000", "\007\000", strArray67);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-3819410108757049344L) + "'", long63 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(strArray67);
    }

    @Test
    public void test16552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16552");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        byte[] byteArray8 = classReader7.b;
        int int10 = classReader7.readInt((int) (short) 1);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(classReader7, 186);
        java.lang.String str13 = classReader7.getSuperName();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-21316096) + "'", int10 == (-21316096));
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test16553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16553");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(48640, "hi!", "hi!", "");
        methodVisitor69.visitEnd();
        methodVisitor69.visitMethodInsn(38, "\001", "", "hi!");
        org.mockito.asm.Label label86 = null;
        int[] intArray90 = new int[] { 65210, 119, 33554688 };
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label[] labelArray92 = new org.mockito.asm.Label[] { label91 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label86, intArray90, labelArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[65210, 119, 33554688]");
        org.junit.Assert.assertNotNull(labelArray92);
    }

    @Test
    public void test16554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16554");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        classWriter26.visitOuterClass("\001", "\001", "\001");
        classWriter26.visitOuterClass("", "\001", "\007\000");
        int int44 = classWriter26.newField("hi!", "hi!", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 11 + "'", int44 == 11);
    }

    @Test
    public void test16555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16555");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        int int18 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        int int24 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        int int33 = classWriter1.newMethod("hi!", "\007\000", "\007\000", false);
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
    }

    @Test
    public void test16556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16556");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitIntInsn((int) (short) 10, (int) (short) 1);
        methodVisitor69.visitMultiANewArrayInsn("", 1919222016);
        org.mockito.asm.Label label87 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber((int) (short) 1536, label87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test16557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16557");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int37 = classReader20.getAccess();
        long long39 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(83886080);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter41, 1);
        byte[] byteArray44 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray44, 15, 73);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = classReader47.readUnsignedShort((int) (short) 872);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 6989595422067222633L + "'", long39 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test16558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16558");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn((int) (short) -326, "");
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(254, "", "\007\000", "hi!");
        methodVisitor69.visitMultiANewArrayInsn("", (-21316096));
        methodVisitor69.visitIincInsn((-1161953280), 65536);
        org.mockito.asm.Label label95 = null;
        org.mockito.asm.Label[] labelArray96 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(1399416686, 65210, label95, labelArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray96);
    }

    @Test
    public void test16559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16559");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int25 = classReader24.getAccess();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader24, (-1));
        java.lang.String[] strArray33 = null;
        classWriter27.visit(0, (int) (byte) 10, "hi!", "\007\000", "hi!", strArray33);
        int int37 = classWriter27.newNameType("hi!", "hi!");
        classWriter27.visitEnd();
        int int40 = classWriter27.newClass("\007\000");
        classWriter27.visitInnerClass("", "\007\000", "hi!", 105);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 11 + "'", int40 == 11);
    }

    @Test
    public void test16560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16560");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        int int18 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("", "hi!", "", 254);
        classWriter1.visitInnerClass("", "", "", 10);
        classWriter1.visitInnerClass("\007\000", "\001", "\001", (int) (short) 24832);
        java.lang.Object obj38 = null;
        org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter1.visitField(65536, "\007\000", "", "", obj38);
        fieldVisitor39.visitEnd();
        fieldVisitor39.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor39);
    }

    @Test
    public void test16561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16561");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        java.lang.String str9 = classReader4.getSuperName();
        java.lang.String str10 = classReader4.getSuperName();
        int int11 = classReader4.getAccess();
        int int13 = classReader4.readInt(4);
        java.lang.String[] strArray14 = classReader4.getInterfaces();
        byte[] byteArray15 = classReader4.b;
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray15, 111, 553713664);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test16562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16562");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        java.lang.String[] strArray24 = classReader21.getInterfaces();
        java.lang.String[] strArray25 = classReader21.getInterfaces();
        int int26 = classReader21.getAccess();
        int int27 = classReader21.header;
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter29.visitAnnotation("", true);
        classWriter29.visitSource("", "");
        classWriter29.visitOuterClass("hi!", "", "");
        int int42 = classWriter29.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter29.visitAnnotation("", true);
        classWriter29.visitOuterClass("", "hi!", "");
        classWriter29.visitInnerClass("hi!", "", "", (int) (short) 1280);
        org.mockito.asm.Attribute[] attributeArray55 = null;
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter29, attributeArray55, 1768711425);
        java.lang.String str58 = classReader21.getSuperName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 73 + "'", int27 == 73);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test16563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16563");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test16564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16564");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitVarInsn(8, (-1));
        methodVisitor69.visitIincInsn((int) (short) 256, (int) (byte) 10);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        org.mockito.asm.Label label86 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(2049, label86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16565");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(100, 11);
        methodVisitor69.visitTypeInsn(1281, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = methodVisitor69.visitAnnotation("", true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test16566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16566");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(1953854053);
        org.mockito.asm.Attribute attribute2 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test16567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16567");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        int int19 = classWriter1.newNameType("\007\000", "hi!");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
    }

    @Test
    public void test16568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16568");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitVarInsn(8, (-1));
        methodVisitor69.visitIincInsn((int) (short) 256, (int) (byte) 10);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16569");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "hi!");
        classWriter1.visitInnerClass("", "hi!", "", (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        classWriter33.visitSource("hi!", "");
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter33.visit((int) 'a', (int) '4', "", "hi!", "", strArray49);
        byte[] byteArray51 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray51);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader52.accept((org.mockito.asm.ClassVisitor) classWriter54, 8);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter58.visitEnd();
        classWriter58.visitSource("", "");
        classReader52.accept((org.mockito.asm.ClassVisitor) classWriter58, 100);
        classWriter58.visitOuterClass("\001", "\001", "\001");
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter75.visitEnd();
        byte[] byteArray77 = classWriter75.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray77);
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray77);
        byte[] byteArray80 = classReader79.b;
        int int82 = classReader79.readUnsignedShort(2);
        int int84 = classReader79.readInt(13);
        java.lang.String str85 = classReader79.getSuperName();
        java.lang.String[] strArray86 = classReader79.getInterfaces();
        classWriter58.visit((int) (byte) 0, 48640, "\001", "\007\000", "", strArray86);
        classWriter1.visit(553713664, 110, "hi!", "\001", "", strArray86);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 47806 + "'", int82 == 47806);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(strArray86);
    }

    @Test
    public void test16570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16570");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        short short10 = classReader4.readShort(9);
        java.lang.String str11 = classReader4.getSuperName();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 256 + "'", short10 == (short) 256);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test16571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16571");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter16.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter16.visitOuterClass("", "", "");
        classWriter16.visitSource("", "");
        int int41 = classWriter16.newNameType("", "hi!");
        byte[] byteArray42 = classWriter16.toByteArray();
        int int46 = classWriter16.newField("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField(0, "hi!", "hi!", "hi!", (java.lang.Object) "");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = fieldVisitor47.visitAnnotation("hi!", true);
        annotationVisitor50.visitEnum("\007\000", "\001", "hi!");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 1, 0, 3, 104, 105, 33, 3, 0, 0, 0, 1, 7, 0, 1, 12, 0, 1, 0, 1, 12, 0, 1, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 2, 0, 2, 0, 2, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 4, 0, 4, 0, 5, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 13 + "'", int46 == 13);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor50);
    }

    @Test
    public void test16572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16572");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("", "hi!", "");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        classWriter1.visitOuterClass("\001", "\007\000", "");
        int int31 = classWriter1.newUTF8("");
        classWriter1.visitInnerClass("\001", "hi!", "", (int) (short) 24948);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
    }

    @Test
    public void test16573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16573");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(1, "", "hi!", "");
        methodVisitor69.visitVarInsn(9, 190);
        methodVisitor69.visitVarInsn(0, 21353);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotation("", true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test16574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16574");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitIntInsn(6, 52);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitVarInsn((int) (short) -17730, 3);
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) 21353);
        methodVisitor69.visitTypeInsn(16777217, "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test16575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16575");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitTypeInsn(186, "");
        methodVisitor69.visitFieldInsn(28, "hi!", "\007\000", "hi!");
        java.lang.Class<?> wildcardClass86 = methodVisitor69.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test16576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16576");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) -1, (int) (byte) -1);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitEnd();
        methodVisitor69.visitIincInsn((int) (short) 2, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitParameterAnnotation(8, "\007\000", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
    }

    @Test
    public void test16577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16577");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int43 = classWriter38.newMethod("", "", "hi!", false);
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter53.visitAnnotation("", true);
        classWriter53.visitSource("", "");
        classWriter53.visitSource("", "hi!");
        int int66 = classWriter53.newField("hi!", "hi!", "hi!");
        int int70 = classWriter53.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter38.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter38.visitAnnotation("", true);
        org.mockito.asm.Attribute[] attributeArray75 = new org.mockito.asm.Attribute[] {};
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, attributeArray75, 256);
        classWriter38.visitEnd();
        classWriter38.visitInnerClass("\007\000", "\007\000", "", 3072);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(attributeArray75);
    }

    @Test
    public void test16578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16578");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int11 = classWriter1.newField("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("", "", "", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", true);
        int int27 = classWriter1.newMethod("hi!", "hi!", "hi!", false);
        classWriter1.visitInnerClass("\001", "", "\007\000", (int) (short) 100);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitOuterClass("\001", "", "\007\000");
        int int41 = classWriter1.newClass("");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
    }

    @Test
    public void test16579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16579");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitIincInsn(196613, (-1));
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        methodVisitor69.visitTryCatchBlock(label80, label81, label82, "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16580");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "hi!");
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        java.lang.String str34 = classReader32.getSuperName();
        long long36 = classReader32.readLong((int) (byte) 0);
        java.lang.String[] strArray37 = classReader32.getInterfaces();
        classWriter1.visit(83886080, 9, "\007\000", "", "hi!", strArray37);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3819410108757049344L) + "'", long36 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test16581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16581");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter1.visitSource("", "");
        int int24 = classWriter1.newClass("hi!");
        classWriter1.visitInnerClass("hi!", "", "hi!", (-889275714));
        byte[] byteArray30 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "\007\000", 0);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter41.visitEnd();
        classWriter41.visitSource("hi!", "");
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter41.visit((int) 'a', (int) '4', "", "hi!", "", strArray57);
        byte[] byteArray59 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader60.accept((org.mockito.asm.ClassVisitor) classWriter62, 8);
        byte[] byteArray65 = classWriter62.toByteArray();
        int int67 = classWriter62.newClass("hi!");
        classWriter62.visitInnerClass("hi!", "", "hi!", (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter62.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = annotationVisitor75.visitAnnotation("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = annotationVisitor75.visitAnnotation("hi!", "");
        annotationVisitor81.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor83 = classWriter1.visitField(256, "\007\000", "", "\007\000", (java.lang.Object) annotationVisitor81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@735b73f6");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 12, 0, 2, 0, 2, 9, 0, 3, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 18, 0, 2, 0, 3, 0, 6, 0, 1, 0, 32, 0, 3, 0, 6, 0, 2, -70, -66, 0, 10, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4 + "'", int67 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test16582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16582");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        methodVisitor69.visitTryCatchBlock(label78, label79, label80, "");
        methodVisitor69.visitIincInsn((int) (byte) 100, (-889275714));
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn(38, 16779008);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotation("\007\000", true);
        methodVisitor69.visitVarInsn((int) (short) 29813, 1869967971);
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor69.visitAnnotation("hi!", true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(annotationVisitor98);
    }

    @Test
    public void test16583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16583");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader20, 13);
        classWriter35.visitInnerClass("hi!", "hi!", "\007\000", 17);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter35.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter35.visitAnnotation("hi!", false);
        classWriter35.visitInnerClass("", "\001", "", (int) (short) 21353);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor46);
    }

    @Test
    public void test16584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16584");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readInt(114);
        java.lang.String[] strArray35 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        classWriter38.visitSource("hi!", "");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter38.visit((int) 'a', (int) '4', "", "hi!", "", strArray54);
        byte[] byteArray56 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray56);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader57.accept((org.mockito.asm.ClassVisitor) classWriter59, 8);
        char[] charArray68 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj69 = classReader57.readConst((int) (short) 1, charArray68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = classReader20.readConst((int) (short) 20, charArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 20");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16779008 + "'", int34 == 16779008);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "\007\000" + "'", obj69, "\007\000");
    }

    @Test
    public void test16585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16585");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        int int10 = classReader4.getAccess();
        int int12 = classReader4.readUnsignedShort((int) (short) 0);
        int int14 = classReader4.readInt(4);
        byte[] byteArray15 = classReader4.b;
        short short17 = classReader4.readShort(15);
        int int19 = classReader4.readUnsignedShort((int) (short) 1);
        int int21 = classReader4.readUnsignedShort((int) (short) 7);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51966 + "'", int12 == 51966);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 65210 + "'", int19 == 65210);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test16586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16586");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        int int74 = classWriter1.newMethod("hi!", "", "", false);
        int int78 = classWriter1.newField("\007\000", "\007\000", "\007\000");
        classWriter1.visitOuterClass("", "", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter1.visitAnnotation("", true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 7 + "'", int74 == 7);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 11 + "'", int78 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test16587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16587");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        int int9 = classReader4.readUnsignedShort(0);
        byte[] byteArray10 = classReader4.b;
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray10, 6, (int) (short) 100);
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray10);
        java.lang.String[] strArray15 = classReader14.getInterfaces();
        byte[] byteArray16 = classReader14.b;
        java.lang.String str17 = classReader14.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = classReader14.getItem(3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51966 + "'", int9 == 51966);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test16588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16588");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String[] strArray21 = classReader20.getInterfaces();
        byte[] byteArray22 = classReader20.b;
        org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray22);
        int int25 = classReader23.readByte(87);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test16589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16589");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        int int35 = classReader20.readInt(13);
        int int36 = classReader20.getAccess();
        byte[] byteArray37 = classReader20.b;
        short short39 = classReader20.readShort(0);
        java.lang.String str40 = classReader20.getSuperName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1751720193 + "'", int35 == 1751720193);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short39 + "' != '" + (short) -13570 + "'", short39 == (short) -13570);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test16590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16590");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        int int22 = classWriter1.newUTF8("\007\000");
        int int27 = classWriter1.newMethod("hi!", "hi!", "", false);
        classWriter1.visitOuterClass("", "", "\001");
        java.lang.Class<?> wildcardClass32 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test16591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16591");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        int int7 = classReader5.readByte(0);
        int int8 = classReader5.header;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = classReader5.readUnsignedShort(1281);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 202 + "'", int7 == 202);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test16592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16592");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader5.getAccess();
        byte[] byteArray7 = classReader5.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(classReader5, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test16593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16593");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int37 = classWriter1.newNameType("", "");
        int int41 = classWriter1.newField("", "hi!", "\007\000");
        classWriter1.visitInnerClass("\007\000", "", "", 1919222016);
        int int48 = classWriter1.newUTF8("hi!");
        int int50 = classWriter1.newUTF8("");
        classWriter1.visitSource("", "\001");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test16594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16594");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        int int17 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter24.visitEnd();
        classWriter24.visitSource("hi!", "");
        classWriter24.visitEnd();
        classWriter24.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter24.visitAnnotation("hi!", false);
        java.lang.Object obj38 = null;
        org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter24.visitField((-1), "", "", "", obj38);
        int int42 = classWriter24.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter24.visitAnnotation("", false);
        org.mockito.asm.FieldVisitor fieldVisitor46 = classWriter1.visitField(52, "", "hi!", "hi!", (java.lang.Object) false);
        byte[] byteArray47 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter53.visitEnd();
        classWriter53.visitSource("hi!", "");
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter53.visit((int) 'a', (int) '4', "", "hi!", "", strArray69);
        byte[] byteArray71 = classWriter53.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader72.accept((org.mockito.asm.ClassVisitor) classWriter74, 8);
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter78.visitEnd();
        classWriter78.visitSource("", "");
        classReader72.accept((org.mockito.asm.ClassVisitor) classWriter78, 100);
        java.lang.String[] strArray85 = classReader72.getInterfaces();
        int int87 = classReader72.readInt(13);
        int int89 = classReader72.readByte(10);
        int int91 = classReader72.readByte((int) '#');
        java.lang.String str92 = classReader72.getClassName();
        int int94 = classReader72.readInt(114);
        byte[] byteArray95 = classReader72.b;
        int int96 = classReader72.getAccess();
        java.lang.String[] strArray97 = classReader72.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor98 = classWriter1.visitMethod(0, "\007\000", "", "", strArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(fieldVisitor39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(fieldVisitor46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 7, 0, 1, 12, 0, 2, 0, 2, 3, 0, 0, 0, 0, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 52, 0, 1, 0, 2, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 0, 3, 0, 9, 0, 0, 0, 10, 0, 1, 0, 3, 0, 4, 0, 2, 0, 2, 0, 10, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 11, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1751720193 + "'", int87 == 1751720193);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 114 + "'", int91 == 114);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 16779008 + "'", int94 == 16779008);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 52 + "'", int96 == 52);
        org.junit.Assert.assertNotNull(strArray97);
    }

    @Test
    public void test16595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16595");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int9 = classWriter1.newUTF8("hi!");
        classWriter1.visitOuterClass("", "", "");
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter20.visitEnd();
        byte[] byteArray22 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray22);
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray22);
        org.mockito.asm.ClassReader classReader25 = new org.mockito.asm.ClassReader(byteArray22);
        int int26 = classReader25.header;
        java.lang.String[] strArray27 = classReader25.getInterfaces();
        classWriter1.visit((int) (short) 26978, 190, "", "hi!", "\007\000", strArray27);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        classWriter34.visitSource("hi!", "");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter34.visit((int) 'a', (int) '4', "", "hi!", "", strArray50);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter58.visitEnd();
        classWriter58.visitSource("hi!", "");
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter58.visit((int) 'a', (int) '4', "", "hi!", "", strArray74);
        classWriter34.visit(2, 7, "", "", "hi!", strArray74);
        classWriter34.visitOuterClass("", "hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = classWriter34.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = annotationVisitor83.visitAnnotation("\007\000", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = annotationVisitor86.visitAnnotation("\001", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor90 = classWriter1.visitField(458752, "", "\001", "", (java.lang.Object) "hi!");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(fieldVisitor90);
    }

    @Test
    public void test16596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16596");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "hi!");
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        java.lang.String str34 = classReader32.getSuperName();
        long long36 = classReader32.readLong((int) (byte) 0);
        java.lang.String[] strArray37 = classReader32.getInterfaces();
        classWriter1.visit(83886080, 9, "\007\000", "", "hi!", strArray37);
        int int40 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("\007\000", "\001", "\001", (int) (short) 26729);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3819410108757049344L) + "'", long36 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test16597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16597");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        int int9 = classReader4.readUnsignedShort(0);
        short short11 = classReader4.readShort((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = classReader4.readUnsignedShort(1768711425);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51966 + "'", int9 == 51966);
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) -326 + "'", short11 == (short) -326);
    }

    @Test
    public void test16598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16598");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        int int29 = classWriter1.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        classWriter36.visitSource("hi!", "");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter36.visit((int) 'a', (int) '4', "", "hi!", "", strArray52);
        classWriter1.visit(10, 73, "", "\007\000", "\007\000", strArray52);
        classWriter1.visitInnerClass("\001", "\007\000", "hi!", 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter1.visitAnnotation("\001", false);
        annotationVisitor62.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(annotationVisitor62);
    }

    @Test
    public void test16599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16599");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        int int74 = classWriter1.newMethod("hi!", "", "", false);
        int int78 = classWriter1.newField("\007\000", "\007\000", "\007\000");
        classWriter1.visitOuterClass("hi!", "", "hi!");
        byte[] byteArray83 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader84 = new org.mockito.asm.ClassReader(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray83, 47806, 116);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 7 + "'", int74 == 7);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 11 + "'", int78 == 11);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 10, 0, 19, 1, 0, 0, 1, 0, 3, 104, 105, 33, 3, 0, 0, 0, 5, 7, 0, 1, 7, 0, 2, 12, 0, 1, 0, 1, 10, 0, 5, 0, 6, 1, 0, 3, 7, -64, -128, 7, 0, 8, 12, 0, 8, 0, 8, 9, 0, 9, 0, 10, 12, 0, 1, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 10, 68, 101, 112, 114, 101, 99, 97, 116, 101, 100, 1, 0, 9, 83, 121, 110, 116, 104, 101, 116, 105, 99, -1, -1, 0, 4, 0, 4, 0, 2, 0, 4, 0, 5, 0, 1, 0, 7, 0, 1, 0, 2, 0, 2, 0, 13, 0, 0, 0, 2, 0, 3, 0, 14, 0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 15, 0, 0, 0, 14, 0, 6, 0, 5, 0, 4, 0, 5, 0, 5, 0, 5, 0, 4, 0, 14, 0, 0, 0, 2, 0, 2, 0, 4, 0, 14, 0, 0, 0, 2, 0, 1, 0, 16, 0, 0, 0, 4, 0, 5, 0, 12, 0, 17, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0]");
    }

    @Test
    public void test16600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16600");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter22.visitAnnotation("\007\000", false);
        int int40 = classWriter22.newMethod("", "hi!", "hi!", false);
        int int42 = classWriter22.newClass("\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
    }

    @Test
    public void test16601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16601");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        int int21 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        int int28 = classWriter1.newNameType("\001", "");
        classWriter1.visitSource("", "\001");
        classWriter1.visitSource("", "hi!");
        classWriter1.visitSource("", "\007\000");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
    }

    @Test
    public void test16602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16602");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitVarInsn(6, 1);
        methodVisitor69.visitMultiANewArrayInsn("", 256);
        methodVisitor69.visitTypeInsn((int) (short) 21353, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test16603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16603");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        int int14 = classWriter1.newUTF8("");
        int int18 = classWriter1.newField("\007\000", "", "\007\000");
        classWriter1.visitInnerClass("", "\001", "", 100);
        classWriter1.visitSource("\007\000", "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
    }

    @Test
    public void test16604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16604");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getClassName();
        short short30 = classReader24.readShort((int) (short) 10);
        int int32 = classReader24.getItem((int) (byte) 0);
        int int33 = classReader24.getAccess();
        int int34 = classReader24.header;
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        byte[] byteArray55 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader56.accept((org.mockito.asm.ClassVisitor) classWriter58, 8);
        int int62 = classReader56.readUnsignedShort((int) (short) 10);
        int int64 = classReader56.readInt(2);
        int int65 = classReader56.header;
        java.lang.String[] strArray66 = classReader56.getInterfaces();
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter(classReader56, 14);
        short short70 = classReader56.readShort(14);
        int int71 = classReader56.header;
        int int72 = classReader56.header;
        char[] charArray77 = new char[] { '4', 'a', 'a' };
        java.lang.String str78 = classReader56.readUTF8(97, charArray77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = classReader24.readUTF8(1635022194, charArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 256 + "'", short30 == (short) 256);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 103 + "'", int34 == 103);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 256 + "'", int62 == 256);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1161953280) + "'", int64 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 73 + "'", int65 == 73);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + short70 + "' != '" + (short) 26913 + "'", short70 == (short) 26913);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 73 + "'", int71 == 73);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 73 + "'", int72 == 73);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "\007\000a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "\007\000a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[\007, \000, a]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\007\000" + "'", str78, "\007\000");
    }

    @Test
    public void test16605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16605");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter16.visitEnd();
        byte[] byteArray18 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        java.lang.String[] strArray20 = classReader19.getInterfaces();
        int int22 = classReader19.readInt((int) (byte) 0);
        java.lang.String str23 = classReader19.getSuperName();
        java.lang.String[] strArray24 = classReader19.getInterfaces();
        java.lang.String[] strArray25 = classReader19.getInterfaces();
        classWriter1.visit(2, (-1), "hi!", "hi!", "hi!", strArray25);
        int int31 = classWriter1.newMethod("", "\007\000", "", false);
        classWriter1.visitEnd();
        int int34 = classWriter1.newClass("");
        classWriter1.visitInnerClass("", "hi!", "hi!", 341012341);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter45.visitEnd();
        classWriter45.visitSource("hi!", "");
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter45.visit((int) 'a', (int) '4', "", "hi!", "", strArray61);
        byte[] byteArray63 = classWriter45.toByteArray();
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray63);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader64.accept((org.mockito.asm.ClassVisitor) classWriter66, 8);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter70.visitEnd();
        classWriter70.visitSource("", "");
        classReader64.accept((org.mockito.asm.ClassVisitor) classWriter70, 100);
        java.lang.String[] strArray77 = classReader64.getInterfaces();
        int int79 = classReader64.readInt(13);
        java.lang.String str80 = classReader64.getSuperName();
        int int81 = classReader64.getAccess();
        java.lang.String str82 = classReader64.getSuperName();
        java.lang.String[] strArray83 = classReader64.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor84 = classWriter1.visitMethod((int) ' ', "hi!", "", "", strArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-889275714) + "'", int22 == (-889275714));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1751720193 + "'", int79 == 1751720193);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 52 + "'", int81 == 52);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(strArray83);
    }

    @Test
    public void test16606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16606");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(9, "", "", "hi!");
        methodVisitor69.visitIincInsn((int) (short) 100, 256);
        methodVisitor69.visitVarInsn(100, 73);
        methodVisitor69.visitIntInsn(1025, (-1161953280));
        methodVisitor69.visitEnd();
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16607");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3, 2, (int) (short) -1);
        java.lang.String[] strArray9 = classReader8.getInterfaces();
        java.lang.String[] strArray10 = classReader8.getInterfaces();
        byte[] byteArray11 = classReader8.b;
        byte[] byteArray12 = classReader8.b;
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test16608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16608");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitTypeInsn((-1161953280), "hi!");
        org.mockito.asm.Label label92 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber((int) (short) 4097, label92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test16609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16609");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newMethod("", "", "hi!", true);
        int int17 = classWriter1.newClass("\007\000");
        classWriter1.visitInnerClass("\001", "\001", "\007\000", 16777223);
        int int27 = classWriter1.newMethod("", "\007\000", "\007\000", true);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
    }

    @Test
    public void test16610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16610");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 65210);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitMaxs(3, 51);
        methodVisitor69.visitMaxs(3, 0);
        methodVisitor69.visitMaxs((int) (short) 1024, 327680);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16611");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int38 = classWriter28.newClass("");
        classWriter28.visitInnerClass("\007\000", "\007\000", "", 52);
        classWriter28.visitSource("\001", "\001");
        classWriter28.visitSource("\001", "\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
    }

    @Test
    public void test16612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16612");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int29 = classReader20.header;
        java.lang.String[] strArray30 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader20, 14);
        classWriter32.visitSource("hi!", "\007\000");
        classWriter32.visitEnd();
        byte[] byteArray37 = classWriter32.toByteArray();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 73 + "'", int29 == 73);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 3, 7, -64, -128]");
    }

    @Test
    public void test16613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16613");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int11 = classWriter1.newField("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("", "", "", 0);
        classWriter1.visitInnerClass("hi!", "\007\000", "hi!", (int) (byte) 1);
        classWriter1.visitEnd();
        byte[] byteArray26 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader27, 51);
        long long31 = classReader27.readLong(50);
        // The following exception was thrown during execution in test generation
        try {
            short short33 = classReader27.readShort(1769171298);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1769171298");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 0, 7, 0, 4, 12, 0, 4, 0, 4, 9, 0, 5, 0, 6, 7, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 9, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0, 0, 11, 0, 0, 0, 18, 0, 2, 0, 5, 0, 5, 0, 4, 0, 0, 0, 8, 0, 10, 0, 1, 0, 1, 0, 12, 0, 0, 0, 6, 0, 1, 0, 4, 0, 0]");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 8029356285160259588L + "'", long31 == 8029356285160259588L);
    }

    @Test
    public void test16614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16614");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        byte[] byteArray26 = classReader24.b;
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        classWriter28.visitSource("", "");
        classWriter28.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor43 = classWriter28.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter28.visitOuterClass("", "", "");
        classWriter28.visitSource("", "");
        int int53 = classWriter28.newNameType("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter28.visitAnnotation("", false);
        classWriter28.visitOuterClass("\007\000", "", "");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (short) 100);
        java.lang.String str63 = classReader24.getSuperName();
        short short65 = classReader24.readShort(5);
        char[] charArray67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = classReader24.readUTF8(190, charArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(fieldVisitor43);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) 0 + "'", short65 == (short) 0);
    }

    @Test
    public void test16615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16615");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("hi!", "hi!");
        int int24 = classWriter1.newField("\007\000", "\007\000", "\007\000");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", (int) (short) 1792);
        classWriter1.visitSource("hi!", "hi!");
        int int35 = classWriter1.newNameType("hi!", "\001");
        classWriter1.visitInnerClass("", "", "", 196613);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
    }

    @Test
    public void test16616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16616");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int3 = classWriter1.newClass("");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        byte[] byteArray12 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        java.lang.String[] strArray14 = classReader13.getInterfaces();
        classWriter1.visit((-889275714), 65210, "hi!", "", "", strArray14);
        classWriter1.visitOuterClass("hi!", "\007\000", "");
        int int21 = classWriter1.newClass("");
        int int23 = classWriter1.newClass("\007\000");
        int int26 = classWriter1.newNameType("", "\001");
        org.mockito.asm.Attribute attribute27 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
    }

    @Test
    public void test16617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16617");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader24, 5);
        int int28 = classReader24.header;
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        classWriter30.visitEnd();
        int int37 = classWriter30.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter30.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter30.visitAnnotation("hi!", true);
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter30, 0);
        long long47 = classReader24.readLong(0);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = classReader24.readInt((int) (short) 29813);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 103 + "'", int28 == 103);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-3819410108757049247L) + "'", long47 == (-3819410108757049247L));
    }

    @Test
    public void test16618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16618");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("hi!", "\001", "\001");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test16619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16619");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
    }

    @Test
    public void test16620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16620");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        byte[] byteArray15 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        java.lang.String[] strArray17 = classReader16.getInterfaces();
        int int18 = classReader16.getAccess();
        int int20 = classReader16.readUnsignedShort(4);
        int int22 = classReader16.readByte(5);
        java.lang.String[] strArray23 = classReader16.getInterfaces();
        classWriter1.visit(2, (int) (short) -1, "", "", "hi!", strArray23);
        int int26 = classWriter1.newClass("");
        classWriter1.visitEnd();
        classWriter1.visitSource("\007\000", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter1.visitAnnotation("\007\000", true);
        classWriter1.visitSource("\001", "\001");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test16621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16621");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", false);
        int int6 = classWriter1.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        classWriter17.visitSource("hi!", "");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter17.visit((int) 'a', (int) '4', "", "hi!", "", strArray33);
        byte[] byteArray35 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader36.accept((org.mockito.asm.ClassVisitor) classWriter38, 8);
        long long42 = classReader36.readLong(7);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter44.visitAnnotation("", true);
        int int50 = classWriter44.newNameType("hi!", "hi!");
        classReader36.accept((org.mockito.asm.ClassVisitor) classWriter44, (int) (byte) 0);
        int int53 = classReader36.getAccess();
        long long55 = classReader36.readLong((int) (short) 10);
        short short57 = classReader36.readShort((int) (short) 100);
        java.lang.String[] strArray58 = classReader36.getInterfaces();
        classWriter1.visit(262147, (int) (short) 3, "\007\000", "hi!", "", strArray58);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 6989595422067222633L + "'", long42 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 72061341013180672L + "'", long55 == 72061341013180672L);
        org.junit.Assert.assertTrue("'" + short57 + "' != '" + (short) 1280 + "'", short57 == (short) 1280);
        org.junit.Assert.assertNotNull(strArray58);
    }

    @Test
    public void test16622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16622");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        int int15 = classWriter1.newMethod("", "", "hi!", true);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        classWriter21.visitSource("hi!", "");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter21.visit((int) 'a', (int) '4', "", "hi!", "", strArray37);
        classWriter21.visitOuterClass("hi!", "", "hi!");
        int int47 = classWriter21.newMethod("hi!", "", "hi!", true);
        classWriter21.visitEnd();
        classWriter21.visitInnerClass("", "\007\000", "\007\000", 51);
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter1.visitField(0, "hi!", "\007\000", "hi!", (java.lang.Object) "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = fieldVisitor54.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = fieldVisitor54.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = annotationVisitor60.visitArray("\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = annotationVisitor62.visitAnnotation("\007\000", "hi!");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
    }

    @Test
    public void test16623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16623");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        int int18 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("", "hi!", "", 254);
        classWriter1.visitInnerClass("", "", "", 10);
        classWriter1.visitInnerClass("\007\000", "\001", "\001", (int) (short) 24832);
        java.lang.Object obj38 = null;
        org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter1.visitField(65536, "\007\000", "", "", obj38);
        fieldVisitor39.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = fieldVisitor39.visitAnnotation("hi!", false);
        org.mockito.asm.Attribute attribute44 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor39.visitAttribute(attribute44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test16624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16624");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitInnerClass("\007\000", "\001", "\001", 676719);
        classWriter1.visitInnerClass("\001", "hi!", "", 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
    }

    @Test
    public void test16625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16625");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter1.visitAnnotation("", true);
        int int41 = classWriter1.newField("hi!", "hi!", "");
        classWriter1.visitOuterClass("", "", "");
        int int48 = classWriter1.newNameType("", "hi!");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        byte[] byteArray53 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        int int55 = classReader54.header;
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 17, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 8, 0, 3, 7, 0, 3, 12, 0, 3, 0, 1, 9, 0, 7, 0, 8, 12, 0, 1, 0, 1, 12, 0, 3, 0, 3, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 100, 0, 3, 0, 1, 0, 2, 0, 12, 0, 0, 0, 2, 0, 6, 0, 13, 0, 0, 0, 2, 0, 3, 0, 0, 0, 3, 0, 14, 0, 0, 0, 4, 0, 2, 0, 11, 0, 15, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 16, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 162 + "'", int55 == 162);
    }

    @Test
    public void test16626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16626");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        int int34 = classReader32.getAccess();
        int int36 = classReader32.readUnsignedShort(4);
        int int38 = classReader32.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter23.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!" };
        classWriter23.visit((int) (byte) 10, (-1), "", "", "", strArray47);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter54.visitEnd();
        classWriter54.visitSource("hi!", "");
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter54.visit((int) 'a', (int) '4', "", "hi!", "", strArray70);
        byte[] byteArray72 = classWriter54.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader73.accept((org.mockito.asm.ClassVisitor) classWriter75, 8);
        long long79 = classReader73.readLong(7);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = classWriter81.visitAnnotation("", true);
        int int87 = classWriter81.newNameType("hi!", "hi!");
        classReader73.accept((org.mockito.asm.ClassVisitor) classWriter81, (int) (byte) 0);
        java.lang.String[] strArray90 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter23.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray90);
        classWriter1.visit((-1), (int) (short) -1, "", "", "hi!", strArray90);
        int int94 = classWriter1.newUTF8("\001");
        byte[] byteArray95 = classWriter1.toByteArray();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 6989595422067222633L + "'", long79 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 6 + "'", int94 == 6);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-54, -2, -70, -66, -1, -1, -1, -1, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 7, 0, 3, 1, 0, 1, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 10, 68, 101, 112, 114, 101, 99, 97, 116, 101, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, -1, -1, 0, 2, 0, 5, 0, 6, 0, 5, 0, 2, 0, 5, 0, 5, 0, 5, 0, 2, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 4, 0, 2, 0, 4, 0, 9, 0, 0, 0, 0, 0, 10, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 11, 0, 0, 0, 10, 0, 2, 0, 3, 0, 0, 0, 3, 0, 0]");
    }

    @Test
    public void test16627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16627");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        classWriter26.visitOuterClass("hi!", "", "hi!");
        byte[] byteArray37 = classWriter26.toByteArray();
        byte[] byteArray38 = classWriter26.toByteArray();
        int int40 = classWriter26.newClass("\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter26.visitAnnotation("hi!", false);
        annotationVisitor43.visitEnum("\001", "\007\000", "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 1, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 4, 0, 5]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 1, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 4, 0, 5]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 11 + "'", int40 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test16628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16628");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", true);
        annotationVisitor17.visitEnum("hi!", "hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor17.visitArray("\007\000");
        annotationVisitor17.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = annotationVisitor17.visitArray("\001");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test16629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16629");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        long long26 = classReader24.readLong((int) (byte) 100);
        int int27 = classReader24.header;
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter29.visitAnnotation("", true);
        classWriter29.visitOuterClass("", "", "hi!");
        int int43 = classWriter29.newMethod("", "hi!", "hi!", true);
        int int45 = classWriter29.newUTF8("hi!");
        classWriter29.visitEnd();
        int int48 = classWriter29.newUTF8("");
        classWriter29.visitEnd();
        classWriter29.visitInnerClass("", "", "\007\000", (int) (short) 256);
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter29, 24948);
        classWriter29.visitSource("", "hi!");
        byte[] byteArray60 = classWriter29.toByteArray();
        int int64 = classWriter29.newField("\001", "\007\000", "\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 8029481630357783296L + "'", long26 == 8029481630357783296L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 103 + "'", int27 == 103);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 19 + "'", int64 == 19);
    }

    @Test
    public void test16630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16630");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(196613, 83886080);
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        methodVisitor69.visitTryCatchBlock(label81, label82, label83, "\007\000");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitParameterAnnotation(88, "hi!", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16631");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        int int19 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "hi!", (int) (byte) 0);
        int int26 = classWriter1.newClass("\007\000");
        java.lang.String[] strArray32 = null;
        classWriter1.visit(7, 186, "\007\000", "\007\000", "", strArray32);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        byte[] byteArray42 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        java.lang.String[] strArray44 = classReader43.getInterfaces();
        java.lang.String str45 = classReader43.getSuperName();
        long long47 = classReader43.readLong((int) (byte) 0);
        java.lang.String[] strArray48 = classReader43.getInterfaces();
        int int49 = classReader43.getAccess();
        java.lang.String str50 = classReader43.getSuperName();
        java.lang.String[] strArray51 = classReader43.getInterfaces();
        classWriter1.visit((int) '4', 33554688, "\001", "", "\001", strArray51);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-3819410108757049344L) + "'", long47 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strArray51);
    }

    @Test
    public void test16632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16632");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("\007\000", "hi!", "hi!", 202);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(100);
        classWriter29.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int43 = classWriter38.newMethod("", "", "hi!", false);
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter53.visitAnnotation("", true);
        classWriter53.visitSource("", "");
        classWriter53.visitSource("", "hi!");
        int int66 = classWriter53.newField("hi!", "hi!", "hi!");
        int int70 = classWriter53.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter38.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter29.visitField((int) (short) 0, "hi!", "hi!", "hi!", (java.lang.Object) "");
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = fieldVisitor72.visitAnnotation("hi!", false);
        fieldVisitor72.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = fieldVisitor72.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = fieldVisitor72.visitAnnotation("hi!", true);
        org.mockito.asm.FieldVisitor fieldVisitor83 = classWriter1.visitField(5, "", "\007\000", "\007\000", (java.lang.Object) "hi!");
        fieldVisitor83.visitEnd();
        fieldVisitor83.visitEnd();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(fieldVisitor83);
    }

    @Test
    public void test16633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16633");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int36 = classWriter1.newConst((java.lang.Object) 7);
        int int40 = classWriter1.newField("", "hi!", "hi!");
        int int42 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", (int) (short) 9);
        classWriter1.visitOuterClass("\007\000", "", "\007\000");
        classWriter1.visitSource("\007\000", "");
        int int58 = classWriter1.newField("\007\000", "", "\007\000");
        int int62 = classWriter1.newField("\007\000", "\007\000", "");
        classWriter1.visitInnerClass("", "", "hi!", 97);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 7 + "'", int36 == 7);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 14 + "'", int58 == 14);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 16 + "'", int62 == 16);
    }

    @Test
    public void test16634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16634");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitSource("\007\000", "");
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = annotationVisitor31.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = annotationVisitor31.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = annotationVisitor35.visitAnnotation("hi!", "");
        annotationVisitor38.visitEnum("", "", "hi!");
        annotationVisitor38.visitEnd();
        annotationVisitor38.visit("", (java.lang.Object) 51966);
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField((int) (byte) 0, "\007\000", "", "\007\000", (java.lang.Object) 51966);
        classWriter1.visitSource("\007\000", "hi!");
        classWriter1.visitSource("\007\000", "hi!");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor47);
    }

    @Test
    public void test16635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16635");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        int int9 = classReader4.readUnsignedShort(0);
        byte[] byteArray10 = classReader4.b;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader4.readUnsignedShort(28526);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51966 + "'", int9 == 51966);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test16636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16636");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn((int) (short) 1, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn(0, "\007\000");
        methodVisitor69.visitIincInsn(1763770624, (int) (byte) -1);
        methodVisitor69.visitEnd();
        methodVisitor69.visitIntInsn(51, 5);
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16637");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int8 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        byte[] byteArray17 = classWriter15.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter15.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        byte[] byteArray29 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        java.lang.String[] strArray31 = classReader30.getInterfaces();
        int int32 = classReader30.getAccess();
        int int34 = classReader30.readUnsignedShort(4);
        int int36 = classReader30.readByte(5);
        java.lang.String[] strArray37 = classReader30.getInterfaces();
        classWriter15.visit(2, (int) (short) -1, "", "", "hi!", strArray37);
        classWriter1.visit(5, (int) 'a', "hi!", "", "\007\000", strArray37);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("\001", "\001", "hi!", (int) (byte) 0);
        classWriter1.visitEnd();
        classWriter1.visitSource("\007\000", "\001");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test16638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16638");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        byte[] byteArray15 = classWriter13.toByteArray();
        byte[] byteArray16 = classWriter13.toByteArray();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        classWriter22.visitSource("hi!", "");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter22.visit((int) 'a', (int) '4', "", "hi!", "", strArray38);
        byte[] byteArray40 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader41.accept((org.mockito.asm.ClassVisitor) classWriter43, 8);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter47.visitEnd();
        classWriter47.visitSource("", "");
        classReader41.accept((org.mockito.asm.ClassVisitor) classWriter47, 100);
        classWriter47.visitOuterClass("hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor58 = classWriter13.visitField(51966, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int59 = classWriter1.newConst((java.lang.Object) "");
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter1.visitAnnotation("\007\000", false);
        classWriter1.visitOuterClass("", "hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter1.visitAnnotation("\001", true);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor75);
    }

    @Test
    public void test16639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16639");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        int int8 = classWriter1.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = annotationVisitor11.visitAnnotation("\007\000", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = annotationVisitor14.visitArray("\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor16.visitArray("");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor18);
    }

    @Test
    public void test16640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16640");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int29 = classReader20.header;
        java.lang.String[] strArray30 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader20, 14);
        short short34 = classReader20.readShort(14);
        int int35 = classReader20.header;
        int int36 = classReader20.header;
        long long38 = classReader20.readLong((int) (short) 2);
        int int40 = classReader20.readInt(0);
        int int41 = classReader20.getAccess();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 73 + "'", int29 == 73);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 26913 + "'", short34 == (short) 26913);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 73 + "'", int35 == 73);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 73 + "'", int36 == 73);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-4990551337073573880L) + "'", long38 == (-4990551337073573880L));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-889275714) + "'", int40 == (-889275714));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
    }

    @Test
    public void test16641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16641");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = annotationVisitor13.visitAnnotation("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor13.visitArray("");
        annotationVisitor13.visitEnum("hi!", "hi!", "");
        annotationVisitor13.visitEnum("\007\000", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = annotationVisitor13.visitAnnotation("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = annotationVisitor13.visitAnnotation("hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = annotationVisitor13.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = annotationVisitor34.visitArray("hi!");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test16642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16642");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int6 = classReader4.getAccess();
        int int8 = classReader4.readUnsignedShort(4);
        int int10 = classReader4.getItem(0);
        short short12 = classReader4.readShort(13);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        classWriter15.visitSource("hi!", "");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter15.visit((int) 'a', (int) '4', "", "hi!", "", strArray31);
        byte[] byteArray33 = classWriter15.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter15.visitAnnotation("", false);
        byte[] byteArray37 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader38, 2);
        byte[] byteArray41 = classReader38.b;
        java.lang.String str42 = classReader38.getSuperName();
        java.lang.String[] strArray43 = classReader38.getInterfaces();
        int int44 = classReader38.header;
        char[] charArray50 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str51 = classReader38.readUTF8(20, charArray50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = classReader4.readClass(83886080, charArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 83886080");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 103 + "'", int44 == 103);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test16643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16643");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label label88 = null;
        methodVisitor69.visitTryCatchBlock(label86, label87, label88, "hi!");
        methodVisitor69.visitVarInsn(52, 254);
        methodVisitor69.visitTypeInsn(1919222016, "");
        methodVisitor69.visitIincInsn(1792, 24948);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test16644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16644");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readInt((int) (byte) 10);
        long long30 = classReader26.readLong(103);
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt((int) (short) 3);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader26.getItem(1763770624);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1763770624");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16777223 + "'", int28 == 16777223);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 562962838716416L + "'", long30 == 562962838716416L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1107296256) + "'", int33 == (-1107296256));
    }

    @Test
    public void test16645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16645");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classWriter25.toByteArray();
        int int28 = classWriter25.newClass("");
        int int31 = classWriter25.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter25.visitAnnotation("", true);
        classWriter25.visitInnerClass("\007\000", "\007\000", "\007\000", (int) (short) 20);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter46.visitEnd();
        byte[] byteArray48 = classWriter46.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        java.lang.String[] strArray50 = classReader49.getInterfaces();
        java.lang.String str51 = classReader49.getSuperName();
        long long53 = classReader49.readLong((int) (byte) 0);
        java.lang.String str54 = classReader49.getSuperName();
        java.lang.String str55 = classReader49.getSuperName();
        int int57 = classReader49.readInt(0);
        java.lang.String[] strArray58 = classReader49.getInterfaces();
        classWriter25.visit((int) (short) 17509, 0, "\007\000", "", "hi!", strArray58);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-3819410108757049344L) + "'", long53 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-889275714) + "'", int57 == (-889275714));
        org.junit.Assert.assertNotNull(strArray58);
    }

    @Test
    public void test16646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16646");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        methodVisitor69.visitMethodInsn((int) (byte) -1, "hi!", "", "hi!");
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitTypeInsn((int) (short) 17509, "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16647");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int43 = classWriter38.newMethod("", "", "hi!", false);
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter53.visitAnnotation("", true);
        classWriter53.visitSource("", "");
        classWriter53.visitSource("", "hi!");
        int int66 = classWriter53.newField("hi!", "hi!", "hi!");
        int int70 = classWriter53.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter38.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter38.visitAnnotation("", true);
        org.mockito.asm.Attribute[] attributeArray75 = new org.mockito.asm.Attribute[] {};
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, attributeArray75, 256);
        byte[] byteArray78 = classReader20.b;
        java.lang.String[] strArray79 = classReader20.getInterfaces();
        byte[] byteArray80 = classReader20.b;
        java.lang.String[] strArray81 = classReader20.getInterfaces();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(attributeArray75);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test16648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16648");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMaxs(5, (int) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn(38, 12);
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test16649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16649");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort(13);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) ' ');
        int int34 = classWriter30.newField("", "", "hi!");
        int int36 = classWriter30.newClass("");
        int int40 = classWriter30.newField("", "\007\000", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter30.visitAnnotation("", true);
        classWriter30.visitInnerClass("", "\007\000", "", 27);
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter30, 100);
        int int53 = classWriter30.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("hi!", "");
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter55.visit((int) 'a', (int) '4', "", "hi!", "", strArray71);
        byte[] byteArray73 = classWriter55.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter55.visitAnnotation("", false);
        annotationVisitor76.visitEnum("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = annotationVisitor76.visitArray("hi!");
        int int83 = classWriter30.newConst((java.lang.Object) "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 1792 + "'", short28 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 11 + "'", int53 == 11);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 12 + "'", int83 == 12);
    }

    @Test
    public void test16650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16650");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(254, (int) ' ');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(202, "", "", "");
        methodVisitor69.visitEnd();
        methodVisitor69.visitVarInsn(52, 29285);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn((int) (byte) -1);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test16651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16651");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(47806, (int) (short) 0);
        methodVisitor69.visitIntInsn(254, 6);
        methodVisitor69.visitMaxs(5, 73);
        methodVisitor69.visitMethodInsn(14, "hi!", "hi!", "hi!");
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label[] labelArray95 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(16784210, (int) (short) -326, label94, labelArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(labelArray95);
    }

    @Test
    public void test16652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16652");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("\001", "\007\000", "\001", 132864);
        int int74 = classWriter1.newMethod("hi!", "\007\000", "hi!", true);
        classWriter1.visitSource("", "hi!");
        byte[] byteArray78 = classWriter1.toByteArray();
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 11 + "'", int74 == 11);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 52, 0, 18, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 3, 0, 3, 1, 0, 1, 1, 7, 0, 6, 1, 0, 3, 7, -64, -128, 7, 0, 8, 12, 0, 8, 0, 3, 11, 0, 4, 0, 10, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 100, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 6, 0, 12, 0, 0, 0, 2, 0, 1, 0, 13, 0, 0, 0, 2, 0, 1, 0, 14, 0, 0, 0, 3, 104, 105, 33, 0, 15, 0, 0, 0, 4, 0, 4, 0, 5, 0, 16, 0, 0, 0, 18, 0, 2, 0, 2, 0, 4, 0, 3, 0, 10, 0, 7, 0, 9, 0, 6, 7, 0, 0, 17, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0]");
    }

    @Test
    public void test16653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16653");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn(48640, "hi!");
        methodVisitor69.visitFieldInsn(1, "", "\007\000", "hi!");
        methodVisitor69.visitIincInsn(88, 8);
        methodVisitor69.visitInsn(186);
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(115, label97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16654");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        byte[] byteArray44 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "hi!", 3);
        classWriter1.visitOuterClass("\007\000", "\007\000", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter1.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = annotationVisitor59.visitArray("hi!");
        annotationVisitor59.visitEnum("", "", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 2, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 7, 0, 3, 0, 4, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor61);
    }

    @Test
    public void test16655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16655");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        int int32 = classWriter26.newNameType("", "\007\000");
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        byte[] byteArray41 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray41);
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray41, 2, (int) (short) -1);
        java.lang.String[] strArray47 = classReader46.getInterfaces();
        classWriter26.visit(29285, (int) (byte) 0, "\007\000", "\007\000", "hi!", strArray47);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter26.visitAnnotation("hi!", false);
        annotationVisitor51.visitEnum("\001", "", "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test16656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16656");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        int int59 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int70 = classWriter65.newMethod("", "", "hi!", false);
        classWriter65.visitEnd();
        classWriter65.visitInnerClass("\007\000", "", "\007\000", 254);
        org.mockito.asm.FieldVisitor fieldVisitor77 = classWriter1.visitField(14, "\007\000", "", "hi!", (java.lang.Object) "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = fieldVisitor77.visitAnnotation("\001", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = fieldVisitor77.visitAnnotation("", false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test16657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16657");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(134283267);
    }

    @Test
    public void test16658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16658");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        int int36 = classReader20.readUnsignedShort((int) (short) 10);
        short short38 = classReader20.readShort((int) (short) 100);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader20, 6);
        byte[] byteArray41 = classReader20.b;
        long long43 = classReader20.readLong(50);
        java.lang.Class<?> wildcardClass44 = classReader20.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 256 + "'", int36 == 256);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 1280 + "'", short38 == (short) 1280);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 72079942622736995L + "'", long43 == 72079942622736995L);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test16659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16659");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn((int) ' ', "", "hi!", "");
        methodVisitor69.visitTypeInsn(114, "\007\000");
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label[] labelArray83 = new org.mockito.asm.Label[] { label82 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(16778088, (int) (short) -17730, label81, labelArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray83);
    }

    @Test
    public void test16660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16660");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(47806, (int) (short) 0);
        methodVisitor69.visitIntInsn(33, (int) (short) 4);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label85 = null;
        int[] intArray87 = new int[] { (short) 26913 };
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label[] labelArray89 = new org.mockito.asm.Label[] { label88 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label85, intArray87, labelArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[26913]");
        org.junit.Assert.assertNotNull(labelArray89);
    }

    @Test
    public void test16661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16661");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 254);
        methodVisitor69.visitInsn(51966);
        methodVisitor69.visitVarInsn(9, (int) (short) 100);
        methodVisitor69.visitTypeInsn(2, "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(87, 1869509376);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16662");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitIntInsn(6, 52);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMethodInsn((int) (short) 29285, "hi!", "hi!", "");
        methodVisitor69.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor96 = methodVisitor69.visitParameterAnnotation(34013185, "", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test16663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16663");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(65210, "hi!", "hi!", "");
        methodVisitor69.visitInsn(254);
        methodVisitor69.visitInsn(2);
        methodVisitor69.visitIincInsn((int) (short) 4, 104);
        methodVisitor69.visitMethodInsn(458754, "\001", "", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16664");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "hi!");
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        java.lang.String str34 = classReader32.getSuperName();
        long long36 = classReader32.readLong((int) (byte) 0);
        java.lang.String[] strArray37 = classReader32.getInterfaces();
        classWriter1.visit(83886080, 9, "\007\000", "", "hi!", strArray37);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int49 = classWriter44.newMethod("", "", "hi!", false);
        classWriter44.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter44.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        classWriter59.visitSource("", "");
        classWriter59.visitSource("", "hi!");
        int int72 = classWriter59.newField("hi!", "hi!", "hi!");
        int int76 = classWriter59.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor77 = classWriter44.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = fieldVisitor77.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = annotationVisitor80.visitAnnotation("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = annotationVisitor83.visitArray("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor86 = classWriter1.visitField(0, "", "\001", "\001", (java.lang.Object) "hi!");
        int int89 = classWriter1.newNameType("", "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3819410108757049344L) + "'", long36 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5 + "'", int76 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(fieldVisitor86);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 13 + "'", int89 == 13);
    }

    @Test
    public void test16665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16665");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        classWriter19.visitSource("hi!", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter19.visit((int) 'a', (int) '4', "", "hi!", "", strArray35);
        byte[] byteArray37 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader38.accept((org.mockito.asm.ClassVisitor) classWriter40, 8);
        byte[] byteArray43 = classWriter40.toByteArray();
        int int45 = classWriter40.newClass("hi!");
        int int46 = classWriter1.newConst((java.lang.Object) int45);
        int int51 = classWriter1.newMethod("", "\007\000", "", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("hi!", "\007\000");
        classWriter1.visitOuterClass("", "\007\000", "\007\000");
        org.mockito.asm.Attribute attribute62 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
    }

    @Test
    public void test16666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16666");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 1399416686);
        methodVisitor69.visitIntInsn(2304, (int) ' ');
        methodVisitor69.visitIntInsn(19, 34013185);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test16667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16667");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitMaxs(9, (-1));
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(8, 8);
        methodVisitor69.visitMaxs((int) (short) -326, 0);
        methodVisitor69.visitMaxs(0, 65535);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
    }

    @Test
    public void test16668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16668");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn((-889275714), "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(0, "", "\007\000", "");
        methodVisitor69.visitInsn(83);
        org.mockito.asm.Attribute attribute94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16669");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitVarInsn(12, 0);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(116, label84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test16670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16670");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        byte[] byteArray15 = classWriter1.toByteArray();
        classWriter1.visitSource("\007\000", "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 12, 0, 1, 0, 1, 12, 0, 2, 0, 2, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 4, 0, 3, 0, 4, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test16671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16671");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt(4);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = classReader4.getItem(13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 13");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test16672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16672");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "\007\000");
        methodVisitor69.visitIincInsn(3, (int) ' ');
        methodVisitor69.visitMaxs(196612, 2049);
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor97 = methodVisitor69.visitParameterAnnotation((int) (short) -326, "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test16673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16673");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitVarInsn(8, (-1));
        methodVisitor69.visitIincInsn((int) (short) 256, (int) (byte) 10);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(13, "", "\007\000", "");
        org.mockito.asm.Label label90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16674");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitTypeInsn(186, "");
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label[] labelArray84 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(196612, (int) (short) 0, label83, labelArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(labelArray84);
    }

    @Test
    public void test16675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16675");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int37 = classWriter1.newNameType("", "");
        byte[] byteArray38 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 8, 0, 3, 12, 0, 1, 0, 1, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 100, 0, 3, 0, 1, 0, 2, 0, 8, 0, 0, 0, 2, 0, 6, 0, 9, 0, 0, 0, 2, 0, 3, 0, 0, 0, 1, 0, 10, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0]");
    }

    @Test
    public void test16676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16676");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        byte[] byteArray35 = classReader20.b;
        java.lang.String str36 = classReader20.getSuperName();
        java.lang.String[] strArray37 = classReader20.getInterfaces();
        int int39 = classReader20.readInt(11);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) 26978);
        int int43 = classWriter41.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter41.visitAnnotation("\001", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 223337 + "'", int39 == 223337);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor46);
    }

    @Test
    public void test16677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16677");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classWriter25.toByteArray();
        byte[] byteArray27 = classWriter25.toByteArray();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) ' ');
        int int37 = classWriter33.newField("", "", "hi!");
        int int39 = classWriter33.newClass("");
        int int41 = classWriter33.newClass("\007\000");
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter(17);
        int int51 = classWriter47.newField("hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter58.visitEnd();
        classWriter58.visitSource("hi!", "");
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter58.visit((int) 'a', (int) '4', "", "hi!", "", strArray74);
        byte[] byteArray76 = classWriter58.toByteArray();
        org.mockito.asm.ClassReader classReader77 = new org.mockito.asm.ClassReader(byteArray76);
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray76);
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray76);
        java.lang.String str80 = classReader79.getSuperName();
        java.lang.String[] strArray81 = classReader79.getInterfaces();
        classWriter47.visit(10, 190, "", "hi!", "\007\000", strArray81);
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter33.visitMethod(12, "hi!", "", "\007\000", strArray81);
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter25.visitMethod(0, "\007\000", "", "", strArray81);
        methodVisitor84.visitMultiANewArrayInsn("hi!", (int) (short) 24948);
        methodVisitor84.visitMultiANewArrayInsn("\007\000", 16784210);
        methodVisitor84.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 7 + "'", int41 == 7);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNotNull(methodVisitor84);
    }

    @Test
    public void test16678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16678");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) -1, (int) (byte) -1);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitVarInsn(7, (int) (short) -17730);
        methodVisitor69.visitIntInsn(20, (int) (short) -1);
        methodVisitor69.visitFieldInsn(1763770624, "hi!", "hi!", "hi!");
        methodVisitor69.visitMaxs(141, 10);
        methodVisitor69.visitInsn((int) (short) 3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
    }

    @Test
    public void test16679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16679");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(768);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        byte[] byteArray15 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        java.lang.String[] strArray17 = classReader16.getInterfaces();
        int int18 = classReader16.getAccess();
        int int20 = classReader16.readUnsignedShort(4);
        int int22 = classReader16.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor23 = classWriter7.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" };
        classWriter7.visit((int) (byte) 10, (-1), "", "", "", strArray31);
        int int34 = classWriter7.newClass("hi!");
        int int36 = classWriter7.newClass("hi!");
        classWriter7.visitInnerClass("hi!", "", "hi!", 1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter7.visitAnnotation("", true);
        java.lang.String[] strArray49 = null;
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter7.visitMethod((int) (short) 1792, "\007\000", "", "hi!", strArray49);
        int int55 = classWriter7.newMethod("\001", "", "hi!", true);
        int int57 = classWriter7.newClass("\001");
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter64.visitEnd();
        byte[] byteArray66 = classWriter64.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        java.lang.String[] strArray68 = classReader67.getInterfaces();
        java.lang.String str69 = classReader67.getSuperName();
        long long71 = classReader67.readLong((int) (byte) 0);
        java.lang.String str72 = classReader67.getSuperName();
        java.lang.String str73 = classReader67.getSuperName();
        int int74 = classReader67.getAccess();
        java.lang.String[] strArray75 = classReader67.getInterfaces();
        classWriter7.visit(24832, 0, "", "\007\000", "hi!", strArray75);
        org.mockito.asm.MethodVisitor methodVisitor77 = classWriter1.visitMethod(0, "hi!", "\001", "\001", strArray75);
        methodVisitor77.visitIincInsn(57174305, 57174305);
        methodVisitor77.visitIntInsn(88, 11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-3819410108757049344L) + "'", long71 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor77);
    }

    @Test
    public void test16680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16680");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "\007\000");
        methodVisitor69.visitIincInsn(3, (int) ' ');
        methodVisitor69.visitMaxs(196612, 2049);
        methodVisitor69.visitIntInsn(23, 223337);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor99 = methodVisitor69.visitParameterAnnotation(1536, "\001", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16681");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        int int35 = classReader20.readInt(13);
        int int36 = classReader20.getAccess();
        byte[] byteArray37 = classReader20.b;
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader20, 872);
        java.lang.String str40 = classReader20.getClassName();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        classWriter42.visitSource("", "");
        int int51 = classWriter42.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter42.visitAnnotation("", false);
        int int56 = classWriter42.newUTF8("");
        classWriter42.visitOuterClass("\007\000", "\007\000", "\001");
        int int65 = classWriter42.newMethod("\007\000", "hi!", "hi!", false);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter42, 132864);
        java.lang.String str68 = classReader20.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1751720193 + "'", int35 == 1751720193);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test16682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16682");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        byte[] byteArray35 = classReader20.b;
        java.lang.String str36 = classReader20.getSuperName();
        java.lang.String[] strArray37 = classReader20.getInterfaces();
        int int39 = classReader20.readByte(10);
        int int41 = classReader20.readUnsignedShort(116);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1792 + "'", int41 == 1792);
    }

    @Test
    public void test16683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16683");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        classWriter26.visitOuterClass("hi!", "", "hi!");
        byte[] byteArray37 = classWriter26.toByteArray();
        int int39 = classWriter26.newClass("hi!");
        classWriter26.visitEnd();
        classWriter26.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter45.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = annotationVisitor48.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = annotationVisitor48.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = annotationVisitor52.visitAnnotation("hi!", "");
        annotationVisitor55.visitEnum("", "", "hi!");
        annotationVisitor55.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = annotationVisitor55.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = annotationVisitor62.visitArray("\007\000");
        int int65 = classWriter26.newConst((java.lang.Object) "\007\000");
        int int67 = classWriter26.newUTF8("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter26.visitAnnotation("hi!", false);
        int int74 = classWriter26.newField("hi!", "\007\000", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 1, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 4, 0, 5]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 11 + "'", int65 == 11);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 13 + "'", int74 == 13);
    }

    @Test
    public void test16684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16684");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int9 = classWriter1.newUTF8("hi!");
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitOuterClass("", "hi!", "");
        classWriter1.visitInnerClass("\001", "hi!", "\001", (int) (short) 24832);
        classWriter1.visitInnerClass("", "\001", "\001", 3);
        classWriter1.visitEnd();
        int int30 = classWriter1.newClass("\001");
        classWriter1.visitInnerClass("\001", "hi!", "", (int) (short) 1536);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
    }

    @Test
    public void test16685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16685");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int36 = classWriter1.newConst((java.lang.Object) 7);
        int int40 = classWriter1.newField("", "hi!", "hi!");
        int int43 = classWriter1.newNameType("\001", "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 7 + "'", int36 == 7);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 11 + "'", int43 == 11);
    }

    @Test
    public void test16686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16686");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        methodVisitor69.visitInsn((int) (byte) 10);
        methodVisitor69.visitFieldInsn((int) (short) 10, "", "\007\000", "hi!");
        methodVisitor69.visitIincInsn(28, 11);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16687");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        byte[] byteArray30 = classWriter28.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter28.visitAnnotation("", true);
        classWriter28.visitOuterClass("", "", "hi!");
        int int42 = classWriter28.newMethod("", "hi!", "hi!", true);
        classWriter28.visitSource("hi!", "");
        classWriter28.visitInnerClass("\007\000", "hi!", "hi!", 202);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter28.visitAnnotation("\007\000", false);
        classWriter28.visitEnd();
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, 33);
        int int57 = classReader20.getAccess();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
    }

    @Test
    public void test16688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16688");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitFieldInsn((int) ' ', "\007\000", "hi!", "hi!");
        methodVisitor69.visitInsn(132864);
        methodVisitor69.visitMultiANewArrayInsn("", 1);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test16689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16689");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = annotationVisitor14.visitArray("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor16.visitArray("\007\000");
        java.lang.Class<?> wildcardClass19 = annotationVisitor16.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test16690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16690");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) -1, (int) (byte) -1);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitVarInsn(7, (int) (short) -17730);
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs((int) (short) -17730, 8);
        org.mockito.asm.Label label86 = null;
        int[] intArray92 = new int[] { (short) 0, 65536, (short) -1, 5203, (short) 29285 };
        org.mockito.asm.Label[] labelArray93 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label86, intArray92, labelArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[0, 65536, -1, 5203, 29285]");
        org.junit.Assert.assertNotNull(labelArray93);
    }

    @Test
    public void test16691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16691");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        byte[] byteArray35 = classReader20.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray35, (int) (byte) 0, 100);
        int int40 = classReader38.readUnsignedShort(1);
        int int42 = classReader38.getItem(0);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int49 = classWriter44.newMethod("", "", "hi!", false);
        classWriter44.visitEnd();
        int int52 = classWriter44.newClass("");
        int int54 = classWriter44.newUTF8("\007\000");
        byte[] byteArray55 = classWriter44.toByteArray();
        classReader38.accept((org.mockito.asm.ClassVisitor) classWriter44, 3);
        int int59 = classReader38.readInt((int) (short) 1);
        short short61 = classReader38.readShort(103);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader38, 154);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 65210 + "'", int40 == 65210);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 1, 0, 3, 7, -64, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-21316096) + "'", int59 == (-21316096));
        org.junit.Assert.assertTrue("'" + short61 + "' != '" + (short) 2 + "'", short61 == (short) 2);
    }

    @Test
    public void test16692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16692");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getClassName();
        int int30 = classReader24.readUnsignedShort(3);
        // The following exception was thrown during execution in test generation
        try {
            long long32 = classReader24.readLong((int) (short) 13312);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 48640 + "'", int30 == 48640);
    }

    @Test
    public void test16693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16693");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        classWriter1.visitEnd();
        int int46 = classWriter1.newUTF8("");
        classWriter1.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("hi!", "");
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter55.visit((int) 'a', (int) '4', "", "hi!", "", strArray71);
        classWriter55.visitInnerClass("hi!", "", "", (int) 'a');
        classWriter55.visitEnd();
        classWriter55.visitSource("", "");
        classWriter55.visitSource("", "\007\000");
        int int86 = classWriter55.newUTF8("\007\000");
        int int89 = classWriter55.newNameType("\001", "\007\000");
        org.mockito.asm.FieldVisitor fieldVisitor90 = classWriter1.visitField(51966, "hi!", "hi!", "\001", (java.lang.Object) "\001");
        classWriter1.visitOuterClass("\007\000", "hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "\001", "\007\000", 25966);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 5 + "'", int86 == 5);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
        org.junit.Assert.assertNotNull(fieldVisitor90);
    }

    @Test
    public void test16694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16694");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter16.visitEnd();
        byte[] byteArray18 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        java.lang.String[] strArray20 = classReader19.getInterfaces();
        int int22 = classReader19.readInt((int) (byte) 0);
        java.lang.String str23 = classReader19.getSuperName();
        java.lang.String[] strArray24 = classReader19.getInterfaces();
        java.lang.String[] strArray25 = classReader19.getInterfaces();
        classWriter1.visit(2, (-1), "hi!", "hi!", "hi!", strArray25);
        int int31 = classWriter1.newMethod("", "\007\000", "", false);
        classWriter1.visitEnd();
        classWriter1.visitSource("\007\000", "hi!");
        int int37 = classWriter1.newUTF8("");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-889275714) + "'", int22 == (-889275714));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test16695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16695");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "\007\000");
        methodVisitor69.visitMaxs(4, (int) (short) 3);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber((int) (short) 256, label95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test16696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16696");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray6 = classReader5.b;
        int int8 = classReader5.readUnsignedShort(2);
        java.lang.String str9 = classReader5.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = classReader5.readLong(28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 47806 + "'", int8 == 47806);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test16697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16697");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn((int) (short) 1, "hi!", "hi!", "hi!");
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test16698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16698");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "hi!", "", 9);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        classWriter31.visitSource("hi!", "");
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter31.visit((int) 'a', (int) '4', "", "hi!", "", strArray47);
        byte[] byteArray49 = classWriter31.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter31.visitAnnotation("", false);
        byte[] byteArray53 = classWriter31.toByteArray();
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter59.visitEnd();
        byte[] byteArray61 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        java.lang.String[] strArray63 = classReader62.getInterfaces();
        short short65 = classReader62.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor66 = classWriter31.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter1.visitField(223337, "hi!", "", "hi!", (java.lang.Object) "hi!");
        java.lang.Class<?> wildcardClass68 = fieldVisitor67.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + short65 + "' != '" + (short) -326 + "'", short65 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor66);
        org.junit.Assert.assertNotNull(fieldVisitor67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test16699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16699");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitMaxs(73, 0);
        methodVisitor69.visitFieldInsn((int) (short) 3, "\007\000", "\001", "");
        org.mockito.asm.Label label83 = null;
        int[] intArray90 = new int[] { 14, 9, (short) 2, (short) 24832, (byte) 100, (short) -326 };
        org.mockito.asm.Label[] labelArray91 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label83, intArray90, labelArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[14, 9, 2, 24832, 100, -326]");
        org.junit.Assert.assertNotNull(labelArray91);
    }

    @Test
    public void test16700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16700");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classWriter28.toByteArray();
        classWriter28.visitOuterClass("hi!", "\001", "\007\000");
        org.mockito.asm.Attribute attribute42 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter28.visitAttribute(attribute42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 7, 0, 1, 7, 0, 2, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 4, 0, 4, 0, 6, 0, 5, 0, 4, 0, 5, 0, 5, 0, 5, 0, 4, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 2, 0, 2, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test16701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16701");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        byte[] byteArray35 = classReader20.b;
        java.lang.String str36 = classReader20.getClassName();
        int int38 = classReader20.readInt(83);
        int int40 = classReader20.readUnsignedShort(103);
        int int41 = classReader20.getAccess();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter43.visitEnd();
        classWriter43.visitSource("hi!", "");
        classWriter43.visitEnd();
        classWriter43.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter43.visitAnnotation("hi!", false);
        java.lang.Object obj57 = null;
        org.mockito.asm.FieldVisitor fieldVisitor58 = classWriter43.visitField((-1), "", "", "", obj57);
        classWriter43.visitEnd();
        classWriter43.visitOuterClass("", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter43.visitAnnotation("hi!", false);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter43, 21353);
        int int69 = classReader20.header;
        int int70 = classReader20.getAccess();
        java.lang.String[] strArray71 = classReader20.getInterfaces();
        short short73 = classReader20.readShort((int) '#');
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 196612 + "'", int38 == 196612);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(fieldVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 73 + "'", int69 == 73);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 52 + "'", int70 == 52);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + short73 + "' != '" + (short) 29285 + "'", short73 == (short) 29285);
    }

    @Test
    public void test16702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16702");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit((int) (byte) 1, 100, "", "hi!", "", strArray41);
        int int48 = classWriter1.newMethod("", "hi!", "", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("", true);
        int int53 = classWriter1.newUTF8("\001");
        classWriter1.visitSource("hi!", "\007\000");
        classWriter1.visitOuterClass("\001", "", "\007\000");
        classWriter1.visitSource("\007\000", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
    }

    @Test
    public void test16703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16703");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("hi!");
        int int16 = classWriter1.newMethod("\007\000", "\007\000", "", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter1.visitAnnotation("\007\000", true);
        classWriter1.visitInnerClass("", "hi!", "hi!", 47806);
        classWriter1.visitSource("hi!", "\007\000");
        int int32 = classWriter1.newMethod("", "hi!", "\001", true);
        byte[] byteArray33 = classWriter1.toByteArray();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 13 + "'", int32 == 13);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 3, 7, -64, -128, 7, 0, 7, 12, 0, 7, 0, 1, 11, 0, 8, 0, 9, 1, 0, 1, 1, 12, 0, 3, 0, 11, 11, 0, 2, 0, 12, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 2, 0, 3, 0, 15, 0, 0, 0, 3, 7, -64, -128, 0, 16, 0, 0, 0, 10, 0, 1, 0, 2, 0, 6, 0, 3, -70, -66, 0, 17, 0, 0, 0, 6, 0, 1, 0, 7, 0, 0]");
    }

    @Test
    public void test16704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16704");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        methodVisitor69.visitMaxs(14, 8);
        methodVisitor69.visitEnd();
        methodVisitor69.visitVarInsn(1025, 33);
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label label93 = null;
        org.mockito.asm.Label label94 = null;
        methodVisitor69.visitTryCatchBlock(label92, label93, label94, "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test16705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16705");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int30 = classReader20.readInt((int) 'a');
        byte[] byteArray31 = classReader20.b;
        java.lang.String[] strArray32 = classReader20.getInterfaces();
        short short34 = classReader20.readShort((int) '#');
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter36.visitAnnotation("", true);
        int int44 = classWriter36.newMethod("", "", "", true);
        java.lang.Object obj49 = null;
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter36.visitField((int) '#', "", "hi!", "", obj49);
        classWriter36.visitEnd();
        classWriter36.visitSource("\007\000", "hi!");
        classWriter36.visitOuterClass("", "\007\000", "\001");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter36, 1751720193);
        int int62 = classReader20.readUnsignedShort(104);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 196613 + "'", int30 == 196613);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 29285 + "'", short34 == (short) 29285);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 512 + "'", int62 == 512);
    }

    @Test
    public void test16706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16706");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        classWriter26.visitOuterClass("hi!", "", "hi!");
        byte[] byteArray37 = classWriter26.toByteArray();
        int int40 = classWriter26.newNameType("\007\000", "\007\000");
        classWriter26.visitEnd();
        classWriter26.visitInnerClass("\007\000", "\007\000", "\007\000", 9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 1, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 4, 0, 5]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 11 + "'", int40 == 11);
    }

    @Test
    public void test16707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16707");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitVarInsn(1, 16778088);
        methodVisitor69.visitMaxs(132864, (int) (byte) -1);
        methodVisitor69.visitMethodInsn((int) (byte) -1, "", "\001", "\001");
        methodVisitor69.visitMaxs((int) (short) 519, 154);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test16708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16708");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("\001", false);
        int int28 = classWriter1.newClass("\001");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
    }

    @Test
    public void test16709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16709");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 254);
        methodVisitor69.visitIntInsn(2, 0);
        methodVisitor69.visitFieldInsn((int) (short) 1024, "\007\000", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test16710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16710");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        long long10 = classReader4.readLong(5);
        byte[] byteArray11 = classReader4.b;
        short short13 = classReader4.readShort(12);
        int int14 = classReader4.header;
        int int16 = classReader4.readByte((int) (short) 4);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = classReader4.getItem(4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 16777216L + "'", long10 == 16777216L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test16711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16711");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        int int32 = classWriter1.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("", "hi!");
        int int40 = classWriter1.newUTF8("\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter1.visitAnnotation("", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test16712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16712");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        java.lang.String[] strArray24 = classReader21.getInterfaces();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        short short28 = classReader21.readShort((int) (byte) 1);
        java.lang.String str29 = classReader21.getClassName();
        int int30 = classReader21.header;
        int int31 = classReader21.getAccess();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader21, 1);
        int int38 = classWriter33.newMethod("hi!", "hi!", "", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -326 + "'", short28 == (short) -326);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 73 + "'", int30 == 73);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
    }

    @Test
    public void test16713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16713");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        byte[] byteArray23 = classWriter21.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter21.visitAnnotation("", true);
        classWriter21.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter44.visitEnd();
        byte[] byteArray46 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        java.lang.String[] strArray48 = classReader47.getInterfaces();
        int int49 = classReader47.getAccess();
        int int51 = classReader47.readUnsignedShort(4);
        int int53 = classReader47.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter38.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!" };
        classWriter38.visit((int) (byte) 10, (-1), "", "", "", strArray62);
        classWriter21.visit((int) (short) 256, 8, "", "hi!", "hi!", strArray62);
        classWriter1.visit((int) (short) -1, (-21316096), "hi!", "", "", strArray62);
        int int67 = classWriter1.newClass("");
        classWriter1.visitOuterClass("hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("\001", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter1.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = annotationVisitor77.visitArray("");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor79);
    }

    @Test
    public void test16714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16714");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        classWriter29.visitSource("", "");
        int int38 = classWriter29.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter29.visitAnnotation("", false);
        int int43 = classWriter29.newUTF8("hi!");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter29, (int) (short) -326);
        int int47 = classReader21.readInt(10);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter49.visitEnd();
        classWriter49.visitSource("hi!", "");
        classWriter49.visitEnd();
        classWriter49.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter49.visitAnnotation("hi!", false);
        classWriter49.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter49.visitAnnotation("hi!", true);
        classWriter49.visitEnd();
        byte[] byteArray67 = classWriter49.toByteArray();
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter49, 1);
        byte[] byteArray70 = classReader21.b;
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter(3);
        classWriter72.visitOuterClass("hi!", "hi!", "");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter72, (int) ' ');
        int int79 = classReader21.getAccess();
        int int80 = classReader21.header;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 16778088 + "'", int47 == 16778088);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 52 + "'", int79 == 52);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 73 + "'", int80 == 73);
    }

    @Test
    public void test16715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16715");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter13.visitAnnotation("", true);
        classWriter13.visitSource("", "");
        classWriter13.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor28 = classWriter13.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter13.visitOuterClass("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(100, "", "hi!", "", (java.lang.Object) "");
        fieldVisitor33.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor33.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor33.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = fieldVisitor33.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = fieldVisitor33.visitAnnotation("", true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(fieldVisitor28);
        org.junit.Assert.assertNotNull(fieldVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor46);
    }

    @Test
    public void test16716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16716");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 7);
        classWriter1.visitOuterClass("hi!", "hi!", "");
        classWriter1.visitOuterClass("\007\000", "hi!", "\007\000");
        classWriter1.visitEnd();
        int int35 = classWriter1.newClass("\001");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 14 + "'", int35 == 14);
    }

    @Test
    public void test16717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16717");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        classWriter19.visitSource("hi!", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter19.visit((int) 'a', (int) '4', "", "hi!", "", strArray35);
        byte[] byteArray37 = classWriter19.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter19.visitAnnotation("", false);
        byte[] byteArray41 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        java.lang.String[] strArray43 = classReader42.getInterfaces();
        classWriter1.visit(51966, (int) 'a', "", "\007\000", "", strArray43);
        byte[] byteArray45 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray45, 19, 154);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, -54, -2, 0, 11, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 7, 0, 2, 1, 0, 3, 7, -64, -128, 7, 0, 5, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 97, 0, 7, 0, 7, 0, 6, 0, 4, 0, 7, 0, 4, 0, 4, 0, 4, 0, 7, 0, 0, 0, 0, 0, 3, 0, 8, 0, 0, 0, 2, 0, 5, 0, 9, 0, 0, 0, 10, 0, 1, 0, 4, 0, 6, 0, 5, -54, -2, 0, 10, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test16718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16718");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classReader20.b;
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        classWriter39.visitSource("hi!", "");
        classWriter39.visitEnd();
        classWriter39.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter39.visitAnnotation("hi!", false);
        java.lang.Object obj53 = null;
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter39.visitField((-1), "", "", "", obj53);
        classWriter39.visitInnerClass("", "", "", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter39.visitAnnotation("", true);
        org.mockito.asm.Attribute attribute63 = null;
        org.mockito.asm.Attribute[] attributeArray64 = new org.mockito.asm.Attribute[] { attribute63 };
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter39, attributeArray64, 256);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter39.visitAnnotation("", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(fieldVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(attributeArray64);
        org.junit.Assert.assertNotNull(annotationVisitor69);
    }

    @Test
    public void test16719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16719");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        int int19 = classWriter1.newNameType("hi!", "hi!");
        int int22 = classWriter1.newNameType("", "");
        classWriter1.visitSource("", "\001");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
    }

    @Test
    public void test16720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16720");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        classWriter1.visitEnd();
        int int46 = classWriter1.newUTF8("");
        int int48 = classWriter1.newUTF8("hi!");
        byte[] byteArray49 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("", "\001", "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 2, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 7, 0, 3, 0, 4, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test16721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16721");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn(256);
        methodVisitor69.visitIntInsn((int) (short) 100, 52);
        methodVisitor69.visitIincInsn(8, 196613);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitVarInsn((int) (short) 1, (int) (short) 519);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test16722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16722");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 97);
        int int4 = classWriter1.newNameType("\007\000", "\007\000");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
    }

    @Test
    public void test16723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16723");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(3);
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("\007\000", true);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int18 = classWriter13.newMethod("", "", "hi!", false);
        classWriter13.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter13.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        classWriter28.visitSource("", "");
        classWriter28.visitSource("", "hi!");
        int int41 = classWriter28.newField("hi!", "hi!", "hi!");
        int int45 = classWriter28.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor46 = classWriter13.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        classWriter13.visitSource("hi!", "");
        classWriter13.visitInnerClass("", "", "", 186);
        org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField(29285, "", "\001", "\001", (java.lang.Object) "");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor46);
        org.junit.Assert.assertNotNull(fieldVisitor55);
    }

    @Test
    public void test16724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16724");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitVarInsn(12, 0);
        methodVisitor69.visitVarInsn(186, 51);
        methodVisitor69.visitIntInsn(119, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIntInsn(103, 119);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotation("\007\000", true);
        annotationVisitor91.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test16725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16725");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitIntInsn((int) ' ', (int) (byte) 0);
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(12, "", "\001", "hi!");
        methodVisitor69.visitMaxs(512, 202);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16726");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classReader20.b;
        java.lang.String str38 = classReader20.getClassName();
        int int40 = classReader20.readByte(0);
        int int41 = classReader20.header;
        java.lang.String[] strArray42 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader20, 18);
        java.lang.String str45 = classReader20.getClassName();
        byte[] byteArray46 = classReader20.b;
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 202 + "'", int40 == 202);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 73 + "'", int41 == 73);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test16727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16727");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int37 = classWriter1.newNameType("", "");
        byte[] byteArray38 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("\007\000", "\007\000", "\001", 34013185);
        byte[] byteArray44 = classWriter1.toByteArray();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 8, 0, 3, 12, 0, 1, 0, 1, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 100, 0, 3, 0, 1, 0, 2, 0, 8, 0, 0, 0, 2, 0, 6, 0, 9, 0, 0, 0, 2, 0, 3, 0, 0, 0, 1, 0, 10, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 8, 0, 3, 12, 0, 1, 0, 1, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 3, 7, -64, -128, 7, 0, 11, 1, 0, 1, 1, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 100, 0, 3, 0, 1, 0, 2, 0, 8, 0, 0, 0, 2, 0, 6, 0, 9, 0, 0, 0, 2, 0, 3, 0, 0, 0, 2, 0, 14, 0, 0, 0, 10, 0, 1, 0, 12, 0, 12, 0, 13, 0, 1, 0, 10, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0]");
    }

    @Test
    public void test16728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16728");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int25 = classReader24.getAccess();
        short short27 = classReader24.readShort(4);
        long long29 = classReader24.readLong(13);
        int int30 = classReader24.header;
        java.lang.String str31 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader24, (int) (short) 10);
        int int35 = classWriter33.newUTF8("");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 7523580940677809920L + "'", long29 == 7523580940677809920L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 103 + "'", int30 == 103);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test16729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16729");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitVarInsn(8, (-1));
        methodVisitor69.visitIincInsn((int) (short) 256, (int) (byte) 10);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(116, (int) (short) 4);
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn((int) (byte) 100);
        methodVisitor69.visitIntInsn(5, 28526);
        methodVisitor69.visitInsn(80);
        methodVisitor69.visitTypeInsn(1281, "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16730");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        byte[] byteArray20 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "", (int) (short) 2);
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", 0);
        byte[] byteArray31 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = classReader32.getItem(51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 14, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 0, 7, 0, 9, 1, 0, 3, 7, -64, -128, 7, 0, 11, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 13, 0, 0, 0, 18, 0, 2, 0, 2, 0, 10, 0, 9, 0, 2, 0, 2, 0, 12, 0, 11, 0, 0, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test16731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16731");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(14);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter30.visit((int) 'a', (int) '4', "", "hi!", "", strArray46);
        byte[] byteArray48 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter51, 8);
        byte[] byteArray54 = classWriter51.toByteArray();
        int int56 = classWriter51.newClass("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter51.visitAnnotation("hi!", true);
        org.mockito.asm.Attribute[] attributeArray60 = new org.mockito.asm.Attribute[] {};
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter51, attributeArray60, 51966);
        int int64 = classReader20.readInt(11);
        java.lang.String[] strArray65 = classReader20.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            long long67 = classReader20.readLong(162);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1763770624 + "'", int28 == 1763770624);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(attributeArray60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 223337 + "'", int64 == 223337);
        org.junit.Assert.assertNotNull(strArray65);
    }

    @Test
    public void test16732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16732");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitTypeInsn(48640, "");
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label label88 = null;
        methodVisitor69.visitTryCatchBlock(label86, label87, label88, "\001");
        methodVisitor69.visitMethodInsn(1869509376, "", "\007\000", "hi!");
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn((int) (short) 20, label97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test16733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16733");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        int int17 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute19 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
    }

    @Test
    public void test16734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16734");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(27);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test16735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16735");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int11 = classWriter1.newField("hi!", "", "hi!");
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        classWriter17.visitSource("hi!", "");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter17.visit((int) 'a', (int) '4', "", "hi!", "", strArray33);
        classWriter17.visitInnerClass("hi!", "", "", (int) 'a');
        int int43 = classWriter17.newField("", "hi!", "hi!");
        int int48 = classWriter17.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter17.visitAnnotation("hi!", false);
        classWriter17.visitOuterClass("", "hi!", "hi!");
        int int59 = classWriter17.newField("hi!", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter1.visitField((int) (short) -1, "", "\007\000", "hi!", (java.lang.Object) int59);
        classWriter1.visitEnd();
        int int64 = classWriter1.newNameType("", "\007\000");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
    }

    @Test
    public void test16736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16736");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter10.visitAnnotation("", true);
        classWriter10.visitSource("", "");
        classWriter10.visitOuterClass("hi!", "", "");
        classWriter10.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter30.visit((int) 'a', (int) '4', "", "hi!", "", strArray46);
        byte[] byteArray48 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter51, 8);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("", "");
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter55, 100);
        java.lang.String[] strArray62 = classReader49.getInterfaces();
        classWriter10.visit((-1), 256, "", "hi!", "", strArray62);
        org.mockito.asm.FieldVisitor fieldVisitor64 = classWriter1.visitField(11, "", "", "\007\000", (java.lang.Object) 256);
        fieldVisitor64.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = fieldVisitor64.visitAnnotation("\001", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = annotationVisitor68.visitAnnotation("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = annotationVisitor68.visitArray("");
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(fieldVisitor64);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor73);
    }

    @Test
    public void test16737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16737");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16738");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        classWriter22.visitOuterClass("", "hi!", "hi!");
        classWriter22.visitOuterClass("", "\007\000", "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test16739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16739");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = annotationVisitor14.visitAnnotation("\007\000", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = annotationVisitor17.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = annotationVisitor17.visitAnnotation("\007\000", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor22.visitArray("\001");
        annotationVisitor24.visitEnum("\001", "\001", "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test16740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16740");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn((int) (short) 256, "hi!", "", "");
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotation("\007\000", true);
        methodVisitor69.visitVarInsn((int) (short) 97, 196612);
        methodVisitor69.visitTypeInsn((-21316096), "hi!");
        methodVisitor69.visitMethodInsn(131073, "\007\000", "\001", "hi!");
        org.mockito.asm.Label label98 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(1953854053, label98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test16741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16741");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        classWriter27.visitSource("hi!", "");
        byte[] byteArray32 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        byte[] byteArray34 = classReader33.b;
        java.lang.String[] strArray35 = classReader33.getInterfaces();
        classWriter1.visit(5, 28, "\001", "hi!", "\001", strArray35);
        classWriter1.visitOuterClass("\001", "hi!", "");
        int int44 = classWriter1.newField("\007\000", "hi!", "\001");
        byte[] byteArray45 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 11 + "'", int44 == 11);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 5, 0, 16, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 1, 0, 1, 1, 7, 0, 5, 12, 0, 3, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 8, 12, 0, 3, 0, 5, 9, 0, 9, 0, 10, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 28, 0, 6, 0, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 12, 0, 0, 0, 2, 0, 3, 0, 13, 0, 0, 0, 4, 0, 6, 0, 7, 0, 14, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 15, 0, 0, 0, 14, 0, 3, 0, 3, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0]");
    }

    @Test
    public void test16742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16742");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        int int31 = classWriter26.newClass("\007\000");
        classWriter26.visitOuterClass("", "", "\007\000");
        classWriter26.visitInnerClass("\007\000", "\001", "\007\000", 17);
        int int42 = classWriter26.newClass("\001");
        classWriter26.visitSource("\007\000", "\007\000");
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter26.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
    }

    @Test
    public void test16743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16743");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        classWriter1.visitSource("hi!", "\007\000");
        int int17 = classWriter1.newClass("\001");
        classWriter1.visitInnerClass("\007\000", "\001", "hi!", 0);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        classWriter29.visitSource("hi!", "");
        classWriter29.visitEnd();
        byte[] byteArray35 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        int int37 = classReader36.getAccess();
        byte[] byteArray38 = classReader36.b;
        long long40 = classReader36.readLong(0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor41 = classWriter1.visitField(1919116612, "", "\007\000", "hi!", (java.lang.Object) classReader36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@4be15318");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 7, 0, 2, 1, 0, 3, 7, -64, -128, 7, 0, 5, 1, 0, 1, 1, 7, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 2, 0, 10, 0, 0, 0, 3, 7, -64, -128, 0, 11, 0, 0, 0, 18, 0, 2, 0, 4, 0, 6, 0, 5, -54, -2, 0, 6, 0, 8, 0, 2, 0, 0, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-3819410108757049344L) + "'", long40 == (-3819410108757049344L));
    }

    @Test
    public void test16744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16744");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int9 = classWriter1.newMethod("", "", "", true);
        java.lang.Object obj14 = null;
        org.mockito.asm.FieldVisitor fieldVisitor15 = classWriter1.visitField((int) '#', "", "hi!", "", obj14);
        classWriter1.visitEnd();
        classWriter1.visitSource("\007\000", "hi!");
        classWriter1.visitOuterClass("", "\007\000", "\001");
        org.mockito.asm.FieldVisitor fieldVisitor29 = classWriter1.visitField(341012341, "\007\000", "\001", "\007\000", (java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = fieldVisitor29.visitAnnotation("\007\000", false);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor15);
        org.junit.Assert.assertNotNull(fieldVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test16745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16745");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn(13, 6);
        methodVisitor69.visitVarInsn(88, 83886080);
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16746");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitIincInsn(48640, (int) (byte) 100);
        methodVisitor69.visitIincInsn(1, 100);
        methodVisitor69.visitFieldInsn(65210, "\007\000", "\001", "\001");
        methodVisitor69.visitIntInsn((int) (short) 5203, 105);
        methodVisitor69.visitMethodInsn((int) (short) 26729, "", "hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor69.visitParameterAnnotation(78, "\001", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16747");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        int int23 = classReader21.readUnsignedShort(2);
        byte[] byteArray24 = classReader21.b;
        int int25 = classReader21.header;
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        byte[] byteArray46 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader47.accept((org.mockito.asm.ClassVisitor) classWriter49, 8);
        char[] charArray58 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj59 = classReader47.readConst((int) (short) 1, charArray58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = classReader21.readClass((int) (short) 1280, charArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1280");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 47806 + "'", int23 == 47806);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 73 + "'", int25 == 73);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + "\007\000" + "'", obj59, "\007\000");
    }

    @Test
    public void test16748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16748");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        byte[] byteArray35 = classReader20.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray35, (int) (byte) 0, 100);
        int int40 = classReader38.readUnsignedShort(1);
        int int42 = classReader38.getItem(0);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int49 = classWriter44.newMethod("", "", "hi!", false);
        classWriter44.visitEnd();
        int int52 = classWriter44.newClass("");
        int int54 = classWriter44.newUTF8("\007\000");
        byte[] byteArray55 = classWriter44.toByteArray();
        classReader38.accept((org.mockito.asm.ClassVisitor) classWriter44, 3);
        int int59 = classReader38.readInt((int) (short) 1);
        byte[] byteArray60 = classReader38.b;
        short short62 = classReader38.readShort(6);
        long long64 = classReader38.readLong(14);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = classReader38.readByte(16779603);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 65210 + "'", int40 == 65210);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 1, 0, 3, 7, -64, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-21316096) + "'", int59 == (-21316096));
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short62 + "' != '" + (short) 97 + "'", short62 == (short) 97);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 7575337147725971458L + "'", long64 == 7575337147725971458L);
    }

    @Test
    public void test16749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16749");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) '#', (int) (byte) 10);
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn(186, 17);
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label[] labelArray93 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn((int) (short) -16896, 196612, label92, labelArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(labelArray93);
    }

    @Test
    public void test16750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16750");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        methodVisitor69.visitTryCatchBlock(label78, label79, label80, "");
        methodVisitor69.visitIincInsn((int) (byte) 100, (-889275714));
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn(38, 16779008);
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label[] labelArray93 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn((int) (short) 24948, 16, label92, labelArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray93);
    }

    @Test
    public void test16751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16751");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter11.visitEnd();
        classWriter11.visitSource("hi!", "");
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter11.visit((int) 'a', (int) '4', "", "hi!", "", strArray27);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        classWriter35.visitSource("hi!", "");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter35.visit((int) 'a', (int) '4', "", "hi!", "", strArray51);
        classWriter11.visit(2, 7, "", "", "hi!", strArray51);
        classWriter1.visit(254, (-889275714), "\007\000", "hi!", "\007\000", strArray51);
        classWriter1.visitSource("\007\000", "");
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter63.visitEnd();
        byte[] byteArray65 = classWriter63.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter63.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter75.visitEnd();
        byte[] byteArray77 = classWriter75.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray77);
        java.lang.String[] strArray79 = classReader78.getInterfaces();
        int int80 = classReader78.getAccess();
        int int82 = classReader78.readUnsignedShort(4);
        int int84 = classReader78.readByte(5);
        java.lang.String[] strArray85 = classReader78.getInterfaces();
        classWriter63.visit(2, (int) (short) -1, "", "", "hi!", strArray85);
        int int88 = classWriter63.newClass("");
        org.mockito.asm.FieldVisitor fieldVisitor89 = classWriter1.visitField((-21316096), "", "\007\000", "\007\000", (java.lang.Object) "");
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = fieldVisitor89.visitAnnotation("\001", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = fieldVisitor89.visitAnnotation("\001", false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(fieldVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test16752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16752");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int29 = classReader20.header;
        java.lang.String[] strArray30 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader20, 14);
        classWriter32.visitSource("hi!", "\007\000");
        classWriter32.visitEnd();
        classWriter32.visitInnerClass("hi!", "", "", (int) (short) 8449);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 73 + "'", int29 == 73);
        org.junit.Assert.assertNotNull(strArray30);
    }

    @Test
    public void test16753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16753");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        int int29 = classReader21.readInt(100);
        java.lang.String str30 = classReader21.getSuperName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 83886080 + "'", int29 == 83886080);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test16754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16754");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        byte[] byteArray15 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        java.lang.String[] strArray17 = classReader16.getInterfaces();
        int int18 = classReader16.getAccess();
        int int20 = classReader16.readUnsignedShort(4);
        int int22 = classReader16.readByte(5);
        java.lang.String[] strArray23 = classReader16.getInterfaces();
        classWriter1.visit(2, (int) (short) -1, "", "", "hi!", strArray23);
        int int26 = classWriter1.newClass("");
        int int31 = classWriter1.newMethod("\007\000", "\007\000", "hi!", true);
        org.mockito.asm.Attribute attribute32 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
    }

    @Test
    public void test16755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16755");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitIntInsn(0, (int) (short) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotation("hi!", true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test16756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16756");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        methodVisitor69.visitIincInsn(16777223, (-21316096));
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        methodVisitor69.visitTryCatchBlock(label88, label89, label90, "");
        methodVisitor69.visitIincInsn((int) (byte) 10, 131073);
        methodVisitor69.visitVarInsn(8, (int) (short) -326);
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test16757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16757");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-1), 5);
        methodVisitor69.visitIincInsn(1792, 0);
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label label93 = null;
        org.mockito.asm.Label label94 = null;
        methodVisitor69.visitTryCatchBlock(label92, label93, label94, "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test16758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16758");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        classWriter26.visitOuterClass("hi!", "", "hi!");
        byte[] byteArray37 = classWriter26.toByteArray();
        byte[] byteArray38 = classWriter26.toByteArray();
        int int40 = classWriter26.newClass("\001");
        int int45 = classWriter26.newMethod("", "\001", "", false);
        classWriter26.visitOuterClass("\007\000", "", "\001");
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter55.visitAnnotation("", true);
        classWriter55.visitSource("", "");
        classWriter55.visitSource("", "hi!");
        int int68 = classWriter55.newField("hi!", "hi!", "hi!");
        classWriter55.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter55.visitSource("", "");
        int int78 = classWriter55.newClass("hi!");
        classWriter55.visitInnerClass("hi!", "", "hi!", (-889275714));
        byte[] byteArray84 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader85 = new org.mockito.asm.ClassReader(byteArray84);
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray84);
        java.lang.String[] strArray87 = classReader86.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor88 = classWriter26.visitMethod((-1161953280), "\001", "", "\007\000", strArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 1, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 4, 0, 5]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 1, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 4, 0, 5]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 11 + "'", int40 == 11);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 13 + "'", int45 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 5 + "'", int68 == 5);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 12, 0, 2, 0, 2, 9, 0, 3, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 18, 0, 2, 0, 3, 0, 6, 0, 1, 0, 32, 0, 3, 0, 6, 0, 2, -70, -66, 0, 10, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray87);
    }

    @Test
    public void test16759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16759");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int29 = classReader20.header;
        java.lang.String[] strArray30 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter32.visitAnnotation("", true);
        classWriter32.visitSource("", "");
        int int41 = classWriter32.newNameType("hi!", "hi!");
        int int46 = classWriter32.newMethod("hi!", "hi!", "hi!", true);
        int int48 = classWriter32.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter32, (int) (short) -1);
        java.lang.String str51 = classReader20.getSuperName();
        java.lang.String str52 = classReader20.getSuperName();
        byte[] byteArray53 = classReader20.b;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 73 + "'", int29 == 73);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test16760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16760");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        classWriter28.visitInnerClass("\001", "\001", "\001", (int) (short) 1792);
        int int43 = classWriter28.newUTF8("\001");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter28.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter28.visitAnnotation("\001", false);
        org.mockito.asm.Attribute attribute52 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter28.visitAttribute(attribute52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test16761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16761");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("\007\000", (int) (byte) -1);
        methodVisitor69.visitInsn(2);
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        methodVisitor69.visitTryCatchBlock(label84, label85, label86, "hi!");
        org.mockito.asm.ClassWriter classWriter90 = new org.mockito.asm.ClassWriter((-1107296256));
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLdcInsn((java.lang.Object) classWriter90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@10faff5e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test16762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16762");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        byte[] byteArray8 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("", "", "", 16777223);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("\001", true);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter23.visitEnd();
        classWriter23.visitSource("hi!", "");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter23.visit((int) 'a', (int) '4', "", "hi!", "", strArray39);
        byte[] byteArray41 = classWriter23.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader42.accept((org.mockito.asm.ClassVisitor) classWriter44, 8);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        classWriter48.visitSource("", "");
        classReader42.accept((org.mockito.asm.ClassVisitor) classWriter48, 100);
        java.lang.String str55 = classReader42.getClassName();
        int int56 = classReader42.header;
        byte[] byteArray57 = classReader42.b;
        java.lang.String str58 = classReader42.getClassName();
        byte[] byteArray59 = classReader42.b;
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter61.visitEnd();
        classWriter61.visitSource("hi!", "");
        classWriter61.visitEnd();
        classWriter61.visitEnd();
        byte[] byteArray68 = classWriter61.toByteArray();
        classWriter61.visitSource("hi!", "\007\000");
        classReader42.accept((org.mockito.asm.ClassVisitor) classWriter61, 9);
        java.lang.String[] strArray74 = classReader42.getInterfaces();
        classWriter1.visit((int) (short) -16896, 134283267, "", "", "\001", strArray74);
        org.mockito.asm.Attribute attribute76 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 73 + "'", int56 == 73);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray74);
    }

    @Test
    public void test16763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16763");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        java.lang.String str9 = classReader4.getSuperName();
        java.lang.String str10 = classReader4.getSuperName();
        int int12 = classReader4.readInt(0);
        int int14 = classReader4.readInt(0);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        classWriter17.visitSource("hi!", "");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter17.visit((int) 'a', (int) '4', "", "hi!", "", strArray33);
        byte[] byteArray35 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray35);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader37, 256);
        int int41 = classReader37.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter44.visitEnd();
        classWriter44.visitSource("hi!", "");
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter44.visit((int) 'a', (int) '4', "", "hi!", "", strArray60);
        byte[] byteArray62 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader63.accept((org.mockito.asm.ClassVisitor) classWriter65, 8);
        char[] charArray74 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj75 = classReader63.readConst((int) (short) 1, charArray74);
        java.lang.Object obj76 = classReader37.readConst(4, charArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = classReader4.readConst(111, charArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 111");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-889275714) + "'", int12 == (-889275714));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-889275714) + "'", int14 == (-889275714));
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "\007\000" + "'", obj75, "\007\000");
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "Lhi!;");
    }

    @Test
    public void test16764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16764");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("", "hi!", "\007\000", (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("", false);
        int int30 = classWriter1.newClass("\001");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        byte[] byteArray55 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray55);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(classReader57, 256);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(classReader57, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter(classReader57, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter65.visitEnd();
        classWriter65.visitSource("", "");
        int int74 = classWriter65.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter65.visitAnnotation("", false);
        int int79 = classWriter65.newUTF8("hi!");
        classReader57.accept((org.mockito.asm.ClassVisitor) classWriter65, (int) (short) -326);
        org.mockito.asm.ClassWriter classWriter88 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter88.visitEnd();
        byte[] byteArray90 = classWriter88.toByteArray();
        org.mockito.asm.ClassReader classReader91 = new org.mockito.asm.ClassReader(byteArray90);
        org.mockito.asm.ClassReader classReader92 = new org.mockito.asm.ClassReader(byteArray90);
        org.mockito.asm.ClassReader classReader95 = new org.mockito.asm.ClassReader(byteArray90, 2, (int) (short) -1);
        org.mockito.asm.ClassReader classReader96 = new org.mockito.asm.ClassReader(byteArray90);
        java.lang.String[] strArray97 = classReader96.getInterfaces();
        classWriter65.visit(1763770624, 5, "hi!", "hi!", "hi!", strArray97);
        classWriter1.visit(1919222016, 52, "hi!", "\007\000", "\007\000", strArray97);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 7 + "'", int30 == 7);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray97);
    }

    @Test
    public void test16765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16765");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter16.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter16.visitOuterClass("", "", "");
        classWriter16.visitSource("", "");
        int int41 = classWriter16.newNameType("", "hi!");
        byte[] byteArray42 = classWriter16.toByteArray();
        int int46 = classWriter16.newField("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField(0, "hi!", "hi!", "hi!", (java.lang.Object) "");
        byte[] byteArray48 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray48, 14, 65210);
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray48, 6, 24832);
        // The following exception was thrown during execution in test generation
        try {
            int int57 = classReader55.readByte(8449);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 1, 0, 3, 104, 105, 33, 3, 0, 0, 0, 1, 7, 0, 1, 12, 0, 1, 0, 1, 12, 0, 1, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 2, 0, 2, 0, 2, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 4, 0, 4, 0, 5, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 13 + "'", int46 == 13);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 8, 0, 1, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 2, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test16766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16766");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        byte[] byteArray35 = classReader20.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray35, (int) (byte) 0, 100);
        int int40 = classReader38.readUnsignedShort(1);
        int int42 = classReader38.getItem(0);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int49 = classWriter44.newMethod("", "", "hi!", false);
        classWriter44.visitEnd();
        int int52 = classWriter44.newClass("");
        int int54 = classWriter44.newUTF8("\007\000");
        byte[] byteArray55 = classWriter44.toByteArray();
        classReader38.accept((org.mockito.asm.ClassVisitor) classWriter44, 3);
        int int59 = classReader38.readInt((int) (short) 1);
        short short61 = classReader38.readShort(103);
        java.lang.String str62 = classReader38.getClassName();
        int int63 = classReader38.header;
        int int64 = classReader38.getAccess();
        java.lang.String str65 = classReader38.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 65210 + "'", int40 == 65210);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 1, 0, 3, 7, -64, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-21316096) + "'", int59 == (-21316096));
        org.junit.Assert.assertTrue("'" + short61 + "' != '" + (short) 2 + "'", short61 == (short) 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 73 + "'", int63 == 73);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test16767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16767");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(132864);
        int int3 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        int int6 = classWriter1.newClass("hi!");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
    }

    @Test
    public void test16768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16768");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit((int) (byte) 1, 100, "", "hi!", "", strArray41);
        int int48 = classWriter1.newMethod("", "hi!", "", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("", true);
        int int54 = classWriter1.newNameType("\001", "\007\000");
        int int57 = classWriter1.newNameType("\007\000", "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
    }

    @Test
    public void test16769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16769");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter1.visitAnnotation("", true);
        int int41 = classWriter1.newField("hi!", "hi!", "");
        int int43 = classWriter1.newClass("\007\000");
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        classWriter50.visitSource("hi!", "");
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter50.visit((int) 'a', (int) '4', "", "hi!", "", strArray66);
        byte[] byteArray68 = classWriter50.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter50.visitAnnotation("", false);
        byte[] byteArray72 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        long long75 = classReader73.readLong((int) (byte) 100);
        int int76 = classReader73.getAccess();
        java.lang.String[] strArray77 = classReader73.getInterfaces();
        classWriter1.visit(111, (int) (short) 2305, "\001", "hi!", "\001", strArray77);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 11 + "'", int43 == 11);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 8029481630357783296L + "'", long75 == 8029481630357783296L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
        org.junit.Assert.assertNotNull(strArray77);
    }

    @Test
    public void test16770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16770");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("\007\000", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test16771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16771");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        int int15 = classWriter1.newMethod("", "", "hi!", true);
        int int20 = classWriter1.newMethod("\001", "hi!", "\001", false);
        int int25 = classWriter1.newMethod("\001", "\001", "hi!", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
    }

    @Test
    public void test16772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16772");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        int int36 = classReader20.readUnsignedShort((int) '#');
        long long38 = classReader20.readLong((int) (short) 9);
        int int40 = classReader20.readInt((int) (short) 3);
        int int41 = classReader20.header;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 29285 + "'", int36 == 29285);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 576742241916756225L + "'", long38 == 576742241916756225L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1107296256) + "'", int40 == (-1107296256));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 73 + "'", int41 == 73);
    }

    @Test
    public void test16773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16773");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(65210, "hi!", "hi!", "");
        methodVisitor69.visitInsn(254);
        methodVisitor69.visitFieldInsn(18, "", "hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor96 = methodVisitor69.visitAnnotation("\007\000", false);
        org.mockito.asm.Label label98 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(80, label98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor96);
    }

    @Test
    public void test16774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16774");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        java.lang.Object obj28 = null;
        org.mockito.asm.FieldVisitor fieldVisitor29 = classWriter23.visitField((-21316096), "hi!", "", "hi!", obj28);
        classWriter23.visitEnd();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        classWriter36.visitSource("hi!", "");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter36.visit((int) 'a', (int) '4', "", "hi!", "", strArray52);
        byte[] byteArray54 = classWriter36.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter36.visitAnnotation("", false);
        byte[] byteArray58 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(classReader59, 2);
        java.lang.String str62 = classReader59.getClassName();
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter(classReader59, 16778088);
        classWriter64.visitEnd();
        int int68 = classWriter64.newNameType("\007\000", "\007\000");
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter74.visitEnd();
        byte[] byteArray76 = classWriter74.toByteArray();
        org.mockito.asm.ClassReader classReader77 = new org.mockito.asm.ClassReader(byteArray76);
        java.lang.String[] strArray78 = classReader77.getInterfaces();
        java.lang.String str79 = classReader77.getSuperName();
        long long81 = classReader77.readLong((int) (byte) 0);
        java.lang.String[] strArray82 = classReader77.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter64.visitMethod((int) (short) 0, "", "hi!", "hi!", strArray82);
        org.mockito.asm.MethodVisitor methodVisitor84 = classWriter23.visitMethod((int) (byte) 10, "hi!", "\007\000", "\007\000", strArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor84.visitParameterAnnotation(129, "", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor29);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-3819410108757049344L) + "'", long81 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNotNull(methodVisitor84);
    }

    @Test
    public void test16775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16775");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        int int26 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitSource("hi!", "");
        int int31 = classWriter1.newClass("hi!");
        int int33 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter1.visitAnnotation("\001", false);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter43.visitEnd();
        byte[] byteArray45 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        int int48 = classReader46.readUnsignedShort((int) (short) 0);
        java.lang.String[] strArray49 = classReader46.getInterfaces();
        classWriter1.visit(129, (int) (short) -13570, "\007\000", "\001", "", strArray49);
        int int52 = classWriter1.newUTF8("hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 51966 + "'", int48 == 51966);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test16776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16776");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int8 = classWriter1.newNameType("hi!", "");
        classWriter1.visitInnerClass("\007\000", "", "hi!", 202);
        byte[] byteArray14 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray14);
        java.lang.String[] strArray16 = classReader15.getInterfaces();
        java.lang.String[] strArray17 = classReader15.getInterfaces();
        int int18 = classReader15.header;
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        classWriter21.visitSource("hi!", "");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter21.visit((int) 'a', (int) '4', "", "hi!", "", strArray37);
        byte[] byteArray39 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray39);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader41, 256);
        int int45 = classReader41.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        classWriter48.visitSource("hi!", "");
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter48.visit((int) 'a', (int) '4', "", "hi!", "", strArray64);
        byte[] byteArray66 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader67.accept((org.mockito.asm.ClassVisitor) classWriter69, 8);
        char[] charArray78 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj79 = classReader67.readConst((int) (short) 1, charArray78);
        java.lang.Object obj80 = classReader41.readConst(4, charArray78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = classReader15.readUTF8(51966, charArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 10, 0, 1, 0, 5, 0, 6, 0, 2, 0, -54]");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 87 + "'", int18 == 87);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj79 + "' != '" + "\007\000" + "'", obj79, "\007\000");
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "Lhi!;");
    }

    @Test
    public void test16777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16777");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String[] strArray21 = classReader20.getInterfaces();
        java.lang.String str22 = classReader20.getSuperName();
        byte[] byteArray23 = classReader20.b;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test16778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16778");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitVarInsn(12, 0);
        methodVisitor69.visitIntInsn(100, (int) (short) 1792);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = annotationVisitor82.visitAnnotation("\007\000", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = annotationVisitor82.visitArray("hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test16779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16779");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        byte[] byteArray9 = classReader4.b;
        short short11 = classReader4.readShort(9);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = classReader4.readInt((int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) 256 + "'", short11 == (short) 256);
    }

    @Test
    public void test16780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16780");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int9 = classWriter1.newMethod("", "", "", true);
        java.lang.Object obj14 = null;
        org.mockito.asm.FieldVisitor fieldVisitor15 = classWriter1.visitField((int) '#', "", "hi!", "", obj14);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = fieldVisitor15.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = fieldVisitor15.visitAnnotation("\007\000", false);
        org.mockito.asm.Attribute attribute22 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor15.visitAttribute(attribute22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor21);
    }

    @Test
    public void test16781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16781");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitFieldInsn(11, "\007\000", "hi!", "");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "\007\000");
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("hi!", "\001", "hi!", label90, label91, 254);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16782");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(9, "", "", "hi!");
        methodVisitor69.visitIincInsn((-21316096), (-889275714));
        methodVisitor69.visitLdcInsn((java.lang.Object) 83886080);
        methodVisitor69.visitMethodInsn(2049, "", "\001", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test16783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16783");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int11 = classWriter1.newField("", "", "");
        classWriter1.visitOuterClass("hi!", "", "\001");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        classWriter21.visitSource("hi!", "");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter21.visit((int) 'a', (int) '4', "", "hi!", "", strArray37);
        byte[] byteArray39 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray39);
        java.lang.String[] strArray42 = classReader41.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor43 = classWriter1.visitMethod(1025, "\007\000", "hi!", "\001", strArray42);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test16784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16784");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int15 = classWriter1.newField("", "hi!", "");
        classWriter1.visitOuterClass("", "hi!", "");
        byte[] byteArray20 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray20, (int) (short) 17509, 2305);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 12, 0, 1, 0, 1, 7, 0, 1, 12, 0, 2, 0, 1, 9, 0, 5, 0, 6, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 2, 0, 1, 0, 9, 0, 0, 0, 0, 0, 10, 0, 0, 0, 4, 0, 5, 0, 6, 0, 11, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test16785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16785");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        byte[] byteArray23 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        classWriter1.visit(5, (int) (short) 10, "", "hi!", "hi!", strArray25);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        byte[] byteArray35 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        java.lang.String[] strArray37 = classReader36.getInterfaces();
        int int39 = classReader36.readInt(4);
        short short41 = classReader36.readShort(13);
        java.lang.String[] strArray42 = classReader36.getInterfaces();
        java.lang.String[] strArray43 = classReader36.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor44 = classWriter1.visitMethod(50, "\007\000", "", "\001", strArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + short41 + "' != '" + (short) 0 + "'", short41 == (short) 0);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test16786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16786");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitMultiANewArrayInsn("hi!", (int) (short) 3);
        methodVisitor69.visitTypeInsn(14, "\007\000");
        methodVisitor69.visitTypeInsn(262147, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotation("\001", true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test16787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16787");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitTypeInsn(13, "hi!");
        methodVisitor69.visitMaxs((int) (short) 0, (int) '4');
        methodVisitor69.visitIincInsn((int) (short) 4, 16779008);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitEnd();
        methodVisitor69.visitIincInsn(129, 103);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test16788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16788");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        int int16 = classWriter1.newUTF8("");
        int int18 = classWriter1.newUTF8("");
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        byte[] byteArray27 = classWriter25.toByteArray();
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray27);
        java.lang.String[] strArray29 = classReader28.getInterfaces();
        java.lang.String str30 = classReader28.getSuperName();
        long long32 = classReader28.readLong((int) (byte) 0);
        java.lang.String[] strArray33 = classReader28.getInterfaces();
        int int34 = classReader28.getAccess();
        java.lang.String str35 = classReader28.getSuperName();
        java.lang.String[] strArray36 = classReader28.getInterfaces();
        classWriter1.visit(1792, 2304, "hi!", "hi!", "\001", strArray36);
        int int42 = classWriter1.newMethod("hi!", "\001", "\001", true);
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-3819410108757049344L) + "'", long32 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
    }

    @Test
    public void test16789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16789");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.Attribute attribute8 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor7);
    }

    @Test
    public void test16790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16790");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        int int10 = classReader4.getAccess();
        java.lang.String str11 = classReader4.getSuperName();
        java.lang.String[] strArray12 = classReader4.getInterfaces();
        java.lang.String[] strArray13 = classReader4.getInterfaces();
        java.lang.String[] strArray14 = classReader4.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader4.readByte(2049);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
    }

    @Test
    public void test16791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16791");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMultiANewArrayInsn("", 9);
        methodVisitor69.visitTypeInsn(256, "\007\000");
        methodVisitor69.visitInsn(83);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test16792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16792");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(254, (int) ' ');
        methodVisitor69.visitInsn((int) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitEnd();
        methodVisitor69.visitTypeInsn(512, "\007\000");
        methodVisitor69.visitCode();
        org.mockito.asm.Label label98 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(1919222016, label98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test16793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16793");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", false);
        int int15 = classWriter1.newUTF8("");
        classWriter1.visitOuterClass("\007\000", "\007\000", "\001");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(16);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        classWriter33.visitSource("hi!", "");
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter33.visit((int) 'a', (int) '4', "", "hi!", "", strArray49);
        byte[] byteArray51 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray51);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader52.accept((org.mockito.asm.ClassVisitor) classWriter54, 8);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter58.visitEnd();
        classWriter58.visitSource("", "");
        classReader52.accept((org.mockito.asm.ClassVisitor) classWriter58, 100);
        java.lang.String[] strArray65 = classReader52.getInterfaces();
        long long67 = classReader52.readLong(28);
        java.lang.String[] strArray68 = classReader52.getInterfaces();
        classWriter26.visit(7, (int) ' ', "", "", "\007\000", strArray68);
        classWriter1.visit(1869509376, 110, "", "\007\000", "\001", strArray68);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 6010448901481723250L + "'", long67 == 6010448901481723250L);
        org.junit.Assert.assertNotNull(strArray68);
    }

    @Test
    public void test16794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16794");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        methodVisitor69.visitTryCatchBlock(label80, label81, label82, "");
        methodVisitor69.visitIntInsn((-889275714), 3);
        methodVisitor69.visitIincInsn(5, (-1161953280));
        methodVisitor69.visitInsn(14);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn((int) (short) 26913);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16795");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray2 = classWriter1.toByteArray();
        int int7 = classWriter1.newMethod("", "hi!", "", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", true);
        java.lang.Class<?> wildcardClass11 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test16796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16796");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        int int8 = classReader4.readUnsignedShort(3);
        int int9 = classReader4.getAccess();
        int int11 = classReader4.readByte((int) (short) 1);
        long long13 = classReader4.readLong((int) (short) 1);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter16.visitEnd();
        classWriter16.visitSource("hi!", "");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter16.visit((int) 'a', (int) '4', "", "hi!", "", strArray32);
        byte[] byteArray34 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader35.accept((org.mockito.asm.ClassVisitor) classWriter37, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter41.visitEnd();
        classWriter41.visitSource("", "");
        classReader35.accept((org.mockito.asm.ClassVisitor) classWriter41, 100);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        classWriter50.visitSource("hi!", "");
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter50.visit((int) 'a', (int) '4', "", "hi!", "", strArray66);
        byte[] byteArray68 = classWriter50.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter50.visitAnnotation("", false);
        byte[] byteArray72 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(classReader73, 2);
        byte[] byteArray76 = classReader73.b;
        java.lang.String str77 = classReader73.getSuperName();
        java.lang.String[] strArray78 = classReader73.getInterfaces();
        int int79 = classReader73.header;
        char[] charArray85 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str86 = classReader73.readUTF8(20, charArray85);
        java.lang.String str87 = classReader35.readUTF8(11, charArray85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj88 = classReader4.readConst(29285, charArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 29285");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48640 + "'", int8 == 48640);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 254 + "'", int11 == 254);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-91551935198396416L) + "'", long13 == (-91551935198396416L));
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 103 + "'", int79 == 103);
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "\007\000a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "\007\000a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[\007, \000, a, 4]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "\007\000" + "'", str87, "\007\000");
    }

    @Test
    public void test16797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16797");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("", "hi!", "hi!", 254);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("\007\000", true);
        classWriter1.visitOuterClass("", "hi!", "\001");
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        classWriter31.visitSource("hi!", "");
        byte[] byteArray36 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader37, 28);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader37, (int) '#');
        int int43 = classReader37.readUnsignedShort(73);
        int int44 = classReader37.getAccess();
        java.lang.String[] strArray45 = classReader37.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor46 = classWriter1.visitMethod((int) (byte) 10, "\001", "\001", "hi!", strArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 256 + "'", int43 == 256);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(strArray45);
    }

    @Test
    public void test16798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16798");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        java.lang.String str35 = classReader20.getSuperName();
        int int36 = classReader20.getAccess();
        java.lang.String str37 = classReader20.getClassName();
        java.lang.String str38 = classReader20.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            short short40 = classReader20.readShort(8449);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8449");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test16799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16799");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("", false);
        org.mockito.asm.Attribute attribute81 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test16800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16800");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = fieldVisitor16.visitAnnotation("", false);
        fieldVisitor16.visitEnd();
        fieldVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = fieldVisitor16.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = fieldVisitor16.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = annotationVisitor27.visitArray("hi!");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test16801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16801");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        fieldVisitor17.visitEnd();
        fieldVisitor17.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = fieldVisitor17.visitAnnotation("\007\000", true);
        fieldVisitor17.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = fieldVisitor17.visitAnnotation("hi!", true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test16802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16802");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "");
        int int21 = classWriter1.newField("", "", "");
        classWriter1.visitOuterClass("hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        classWriter31.visitSource("hi!", "");
        classWriter31.visitEnd();
        classWriter31.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter31.visitAnnotation("hi!", false);
        classWriter31.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter31.visitAnnotation("hi!", true);
        classWriter31.visitEnd();
        byte[] byteArray49 = classWriter31.toByteArray();
        classWriter31.visitEnd();
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter57.visitEnd();
        byte[] byteArray59 = classWriter57.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        java.lang.String[] strArray61 = classReader60.getInterfaces();
        java.lang.String str62 = classReader60.getSuperName();
        long long64 = classReader60.readLong((int) (byte) 0);
        java.lang.String[] strArray65 = classReader60.getInterfaces();
        int int66 = classReader60.getAccess();
        int int68 = classReader60.readUnsignedShort((int) (short) 0);
        int int70 = classReader60.readInt(4);
        java.lang.String[] strArray71 = classReader60.getInterfaces();
        classWriter31.visit(196612, 11, "hi!", "hi!", "", strArray71);
        int int74 = classWriter31.newUTF8("\007\000");
        org.mockito.asm.FieldVisitor fieldVisitor75 = classWriter1.visitField(48640, "", "\007\000", "\007\000", (java.lang.Object) "\007\000");
        classWriter1.visitInnerClass("\007\000", "\001", "", (int) (short) 97);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-3819410108757049344L) + "'", long64 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 51966 + "'", int68 == 51966);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 11 + "'", int74 == 11);
        org.junit.Assert.assertNotNull(fieldVisitor75);
    }

    @Test
    public void test16803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16803");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("\007\000", "", "\007\000");
        classWriter1.visitOuterClass("", "\007\000", "\001");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(annotationVisitor60);
    }

    @Test
    public void test16804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16804");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn(256);
        methodVisitor69.visitIntInsn((int) (short) 100, 52);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        annotationVisitor82.visitEnum("\007\000", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = annotationVisitor82.visitAnnotation("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = annotationVisitor89.visitArray("\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = annotationVisitor89.visitArray("\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test16805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16805");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitIntInsn((int) ' ', (int) (byte) 0);
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(151060483, (int) (short) 0);
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("", 132864);
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor69.visitAnnotation("\001", true);
        methodVisitor69.visitVarInsn(0, 768);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test16806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16806");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitTypeInsn(13, "hi!");
        methodVisitor69.visitMaxs((int) (short) 0, (int) '4');
        methodVisitor69.visitIincInsn((int) (short) 4, 16779008);
        methodVisitor69.visitIntInsn((int) (short) 9, 1399416686);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test16807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16807");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        byte[] byteArray42 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        java.lang.String[] strArray44 = classReader43.getInterfaces();
        int int45 = classReader43.getAccess();
        int int47 = classReader43.readUnsignedShort(4);
        int int49 = classReader43.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter34.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (byte) 10, (-1), "", "", "", strArray58);
        classWriter1.visit((-889275714), 0, "", "hi!", "hi!", strArray58);
        int int65 = classWriter1.newMethod("hi!", "", "hi!", false);
        int int70 = classWriter1.newMethod("\001", "", "", true);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter76.visitEnd();
        byte[] byteArray78 = classWriter76.toByteArray();
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray78);
        java.lang.String[] strArray80 = classReader79.getInterfaces();
        int int82 = classReader79.readInt((int) (byte) 0);
        java.lang.String str83 = classReader79.getSuperName();
        java.lang.String[] strArray84 = classReader79.getInterfaces();
        byte[] byteArray85 = classReader79.b;
        int int86 = classReader79.header;
        long long88 = classReader79.readLong((int) (byte) 0);
        byte[] byteArray89 = classReader79.b;
        byte[] byteArray90 = classReader79.b;
        long long92 = classReader79.readLong(4);
        int int94 = classReader79.readInt((int) (byte) 10);
        org.mockito.asm.FieldVisitor fieldVisitor95 = classWriter1.visitField((int) (short) -13570, "", "hi!", "\001", (java.lang.Object) int94);
        fieldVisitor95.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 12 + "'", int70 == 12);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-889275714) + "'", int82 == (-889275714));
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-3819410108757049344L) + "'", long88 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 65536L + "'", long92 == 65536L);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor95);
    }

    @Test
    public void test16808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16808");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        int int28 = classWriter1.newClass("hi!");
        int int30 = classWriter1.newClass("hi!");
        classWriter1.visitInnerClass("hi!", "", "hi!", 1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("", true);
        java.lang.String[] strArray43 = null;
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter1.visitMethod((int) (short) 1792, "\007\000", "", "hi!", strArray43);
        int int49 = classWriter1.newMethod("\001", "", "hi!", true);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("hi!", "");
        classWriter55.visitEnd();
        classWriter55.visitEnd();
        byte[] byteArray62 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray62);
        long long66 = classReader64.readLong(0);
        java.lang.String[] strArray67 = classReader64.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter1.visitMethod((int) (byte) 10, "\001", "hi!", "", strArray67);
        methodVisitor68.visitMethodInsn(190, "\001", "", "hi!");
        methodVisitor68.visitTypeInsn(104, "hi!");
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor68.visitLocalVariable("hi!", "hi!", "\007\000", label80, label81, (int) (short) 519);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-3819410108757049344L) + "'", long66 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
    }

    @Test
    public void test16809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16809");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        methodVisitor69.visitMethodInsn(8, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        methodVisitor69.visitMethodInsn(47806, "", "", "\001");
        methodVisitor69.visitVarInsn((int) (short) -326, 38);
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test16810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16810");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int37 = classWriter1.newNameType("", "");
        int int41 = classWriter1.newField("\007\000", "\007\000", "\007\000");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 11 + "'", int41 == 11);
    }

    @Test
    public void test16811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16811");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(223337);
        methodVisitor69.visitIntInsn((int) (short) 2049, (int) (byte) 100);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label[] labelArray87 = new org.mockito.asm.Label[] { label86 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(134283267, 33, label85, labelArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(labelArray87);
    }

    @Test
    public void test16812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16812");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        byte[] byteArray24 = classWriter22.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter22.visitAnnotation("", true);
        classWriter22.visitOuterClass("", "", "hi!");
        int int36 = classWriter22.newMethod("", "hi!", "hi!", true);
        int int40 = classWriter22.newField("hi!", "", "hi!");
        classWriter22.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter22.visitAnnotation("hi!", true);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter1.visitField(51966, "\007\000", "hi!", "\007\000", (java.lang.Object) "hi!");
        classWriter1.visitInnerClass("", "", "hi!", (int) (byte) 0);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(fieldVisitor48);
    }

    @Test
    public void test16813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16813");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMaxs(13, (int) (short) -1);
        methodVisitor69.visitVarInsn(196613, (int) '4');
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitIntInsn((-1107296256), (int) (byte) 10);
        org.mockito.asm.Label label94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test16814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16814");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        byte[] byteArray42 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        java.lang.String[] strArray44 = classReader43.getInterfaces();
        int int45 = classReader43.getAccess();
        int int47 = classReader43.readUnsignedShort(4);
        int int49 = classReader43.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter34.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (byte) 10, (-1), "", "", "", strArray58);
        classWriter1.visit((-889275714), 0, "", "hi!", "hi!", strArray58);
        int int65 = classWriter1.newMethod("hi!", "", "hi!", false);
        classWriter1.visitSource("\007\000", "hi!");
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter75.visitEnd();
        byte[] byteArray77 = classWriter75.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray77);
        java.lang.String[] strArray79 = classReader78.getInterfaces();
        java.lang.String str80 = classReader78.getSuperName();
        int int82 = classReader78.readUnsignedShort(3);
        java.lang.String[] strArray83 = classReader78.getInterfaces();
        classWriter1.visit(48640, 256, "", "", "\007\000", strArray83);
        byte[] byteArray85 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray85);
        java.lang.String[] strArray87 = classReader86.getInterfaces();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 48640 + "'", int82 == 48640);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, -66, 0, 0, 15, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 12, 0, 1, 0, 1, 9, 0, 3, 0, 5, 12, 0, 2, 0, 1, 10, 0, 4, 0, 7, 1, 0, 3, 7, -64, -128, 7, 0, 9, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 0, 3, 0, 10, 0, 2, 0, 3, 0, 4, 0, 0, 0, 0, 0, 4, 0, 11, 0, 0, 0, 2, 0, 2, 0, 12, 0, 0, 0, 2, 0, 9, 0, 13, 0, 0, 0, 3, 104, 105, 33, 0, 14, 0, 0, 0, 10, 0, 1, 0, 4, 0, 3, 0, 2, 0, 97]");
        org.junit.Assert.assertNotNull(strArray87);
    }

    @Test
    public void test16815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16815");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        int int35 = classReader20.getAccess();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) 3);
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter37.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
    }

    @Test
    public void test16816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16816");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classReader20.b;
        int int38 = classReader20.header;
        byte[] byteArray39 = classReader20.b;
        java.lang.String str40 = classReader20.getClassName();
        java.lang.String str41 = classReader20.getClassName();
        short short43 = classReader20.readShort(116);
        // The following exception was thrown during execution in test generation
        try {
            short short45 = classReader20.readShort(16779008);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16779008");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 73 + "'", int38 == 73);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + short43 + "' != '" + (short) 1792 + "'", short43 == (short) 1792);
    }

    @Test
    public void test16817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16817");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "");
        int int20 = classWriter1.newClass("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.Attribute attribute24 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor23);
    }

    @Test
    public void test16818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16818");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn(256);
        methodVisitor69.visitIincInsn(29285, 4);
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitMethodInsn((int) (short) 26729, "\007\000", "", "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test16819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16819");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMethodInsn(28, "hi!", "hi!", "\007\000");
        methodVisitor69.visitFieldInsn(13, "\001", "", "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test16820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16820");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(47806);
        int int3 = classWriter1.newClass("hi!");
        int int8 = classWriter1.newMethod("hi!", "\007\000", "\001", false);
        int int10 = classWriter1.newUTF8("");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
    }

    @Test
    public void test16821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16821");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(47806, (int) (short) 0);
        methodVisitor69.visitIntInsn(254, 6);
        methodVisitor69.visitMaxs(5, 73);
        methodVisitor69.visitVarInsn((int) (byte) -1, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test16822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16822");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1280);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter8.visitEnd();
        classWriter8.visitSource("hi!", "");
        java.lang.String[] strArray24 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter8.visit((int) 'a', (int) '4', "", "hi!", "", strArray24);
        byte[] byteArray26 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader27.accept((org.mockito.asm.ClassVisitor) classWriter29, 8);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        classWriter33.visitSource("", "");
        classReader27.accept((org.mockito.asm.ClassVisitor) classWriter33, 100);
        int int44 = classWriter33.newMethod("\001", "", "\001", false);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter51.visitEnd();
        byte[] byteArray53 = classWriter51.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        int int56 = classReader54.readUnsignedShort((int) (short) 0);
        java.lang.String str57 = classReader54.getSuperName();
        short short59 = classReader54.readShort(5);
        java.lang.String[] strArray60 = classReader54.getInterfaces();
        classWriter33.visit(26729, 7, "\001", "", "", strArray60);
        org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(3072, "\001", "\001", "", strArray60);
        org.mockito.asm.Label label63 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor62.visitLabel(label63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 51966 + "'", int56 == 51966);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + short59 + "' != '" + (short) 0 + "'", short59 == (short) 0);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(methodVisitor62);
    }

    @Test
    public void test16823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16823");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(16778088);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter9.visitEnd();
        byte[] byteArray11 = classWriter9.toByteArray();
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray14 = classReader13.b;
        int int16 = classReader13.readUnsignedShort(2);
        java.lang.String[] strArray17 = classReader13.getInterfaces();
        classWriter1.visit(83886080, 1763770624, "hi!", "\007\000", "\007\000", strArray17);
        org.mockito.asm.Attribute attribute19 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 47806 + "'", int16 == 47806);
        org.junit.Assert.assertNotNull(strArray17);
    }

    @Test
    public void test16824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16824");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort(13);
        int int30 = classReader26.getItem(3);
        int int32 = classReader26.readUnsignedShort(8);
        int int34 = classReader26.readInt((int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter36.visitAnnotation("", true);
        int int42 = classWriter36.newNameType("hi!", "hi!");
        int int46 = classWriter36.newField("hi!", "hi!", "hi!");
        classWriter36.visitSource("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter36.visitAnnotation("\007\000", false);
        classWriter36.visitEnd();
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter36, (int) (short) 1280);
        int int56 = classReader26.header;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 1792 + "'", short28 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 17 + "'", int30 == 17);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16777223 + "'", int34 == 16777223);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 73 + "'", int56 == 73);
    }

    @Test
    public void test16825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16825");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classReader20.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        int int39 = classReader38.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classReader38.getItem(1536);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1536");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
    }

    @Test
    public void test16826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16826");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitOuterClass("hi!", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 256);
        classWriter1.visitSource("\001", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter1.visitAnnotation("hi!", true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(annotationVisitor33);
    }

    @Test
    public void test16827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16827");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        annotationVisitor6.visitEnum("hi!", "\007\000", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor12 = annotationVisitor6.visitArray("hi!");
        annotationVisitor12.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor12);
    }

    @Test
    public void test16828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16828");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitSource("", "\007\000");
        int int67 = classWriter1.newField("\007\000", "\007\000", "\007\000");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
    }

    @Test
    public void test16829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16829");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitMultiANewArrayInsn("hi!", 12);
        methodVisitor69.visitVarInsn(1919222016, 0);
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(34013185, "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test16830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16830");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int15 = classWriter1.newField("", "hi!", "");
        classWriter1.visitOuterClass("", "hi!", "");
        int int21 = classWriter1.newClass("");
        int int26 = classWriter1.newMethod("\007\000", "hi!", "", false);
        classWriter1.visitOuterClass("", "", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
    }

    @Test
    public void test16831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16831");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        int int35 = classReader20.readInt(13);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        classWriter37.visitEnd();
        byte[] byteArray43 = classWriter37.toByteArray();
        int int47 = classWriter37.newField("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter37.visitAnnotation("", true);
        int int53 = classWriter37.newNameType("", "hi!");
        byte[] byteArray54 = classWriter37.toByteArray();
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter37, 13);
        java.lang.String str57 = classReader20.getClassName();
        java.lang.String str58 = classReader20.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1751720193 + "'", int35 == 1751720193);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 7 + "'", int47 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 0, 7, 0, 4, 12, 0, 4, 0, 4, 9, 0, 5, 0, 6, 12, 0, 4, 0, 1, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 4, 0, 0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test16832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16832");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newMethod("", "hi!", "hi!", false);
        byte[] byteArray11 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        int int16 = classWriter1.newField("\001", "\001", "\007\000");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter23.visitEnd();
        classWriter23.visitSource("hi!", "");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter23.visit((int) 'a', (int) '4', "", "hi!", "", strArray39);
        byte[] byteArray41 = classWriter23.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray41);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader43, 256);
        java.lang.String[] strArray46 = classReader43.getInterfaces();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(classReader43, (int) (short) 100);
        classWriter48.visitInnerClass("", "", "hi!", 1919222016);
        classWriter48.visitOuterClass("", "", "\001");
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter64.visitEnd();
        classWriter64.visitSource("hi!", "");
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter64.visit((int) 'a', (int) '4', "", "hi!", "", strArray80);
        byte[] byteArray82 = classWriter64.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter64.visitAnnotation("", false);
        byte[] byteArray86 = classWriter64.toByteArray();
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray86);
        java.lang.String str88 = classReader87.getSuperName();
        int int90 = classReader87.readInt(10);
        int int91 = classReader87.header;
        int int93 = classReader87.getItem((int) (short) 4);
        java.lang.String[] strArray94 = classReader87.getInterfaces();
        classWriter48.visit(1768711425, (int) (byte) 1, "\007\000", "hi!", "hi!", strArray94);
        classWriter1.visit(0, (int) (short) 8449, "\001", "\001", "", strArray94);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 3, 0, 3, 10, 0, 2, 0, 4, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 16778088 + "'", int90 == 16778088);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 103 + "'", int91 == 103);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 23 + "'", int93 == 23);
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test16833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16833");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitMaxs((int) (byte) 10, 15);
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        methodVisitor69.visitTryCatchBlock(label89, label90, label91, "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test16834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16834");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int11 = classWriter1.newField("hi!", "", "hi!");
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        classWriter17.visitSource("hi!", "");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter17.visit((int) 'a', (int) '4', "", "hi!", "", strArray33);
        classWriter17.visitInnerClass("hi!", "", "", (int) 'a');
        int int43 = classWriter17.newField("", "hi!", "hi!");
        int int48 = classWriter17.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter17.visitAnnotation("hi!", false);
        classWriter17.visitOuterClass("", "hi!", "hi!");
        int int59 = classWriter17.newField("hi!", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter1.visitField((int) (short) -1, "", "\007\000", "hi!", (java.lang.Object) int59);
        classWriter1.visitInnerClass("hi!", "hi!", "", 73);
        classWriter1.visitEnd();
        int int71 = classWriter1.newMethod("\001", "\001", "", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 9 + "'", int59 == 9);
        org.junit.Assert.assertNotNull(fieldVisitor60);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 13 + "'", int71 == 13);
    }

    @Test
    public void test16835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16835");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        int int28 = classWriter26.newClass("");
        classWriter26.visitOuterClass("hi!", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter26.visitAnnotation("hi!", false);
        classWriter26.visitOuterClass("hi!", "hi!", "hi!");
        int int42 = classWriter26.newNameType("", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter26.visitAnnotation("\001", true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 12 + "'", int42 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test16836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16836");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getClassName();
        short short30 = classReader24.readShort((int) (short) 10);
        int int32 = classReader24.readByte(28);
        int int34 = classReader24.readUnsignedShort(114);
        int int36 = classReader24.readUnsignedShort(73);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = classReader24.getItem(202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 256 + "'", short30 == (short) 256);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 83 + "'", int32 == 83);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 768 + "'", int34 == 768);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 256 + "'", int36 == 256);
    }

    @Test
    public void test16837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16837");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        int int8 = classWriter1.newMethod("hi!", "", "hi!", true);
        int int12 = classWriter1.newField("", "", "");
        int int14 = classWriter1.newClass("\001");
        byte[] byteArray15 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader16 = new org.mockito.asm.ClassReader(byteArray15);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        classWriter19.visitSource("hi!", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter19.visit((int) 'a', (int) '4', "", "hi!", "", strArray35);
        byte[] byteArray37 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader38.accept((org.mockito.asm.ClassVisitor) classWriter40, 8);
        char[] charArray49 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj50 = classReader38.readConst((int) (short) 1, charArray49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = classReader16.readClass((int) (short) 5203, charArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5203");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 3, 104, 105, 33, 7, 0, 1, 1, 0, 0, 12, 0, 3, 0, 1, 11, 0, 2, 0, 4, 7, 0, 3, 12, 0, 3, 0, 3, 9, 0, 6, 0, 7, 1, 0, 1, 1, 7, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + "\007\000" + "'", obj50, "\007\000");
    }

    @Test
    public void test16838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16838");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitInsn((-1));
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitFieldInsn(132864, "", "hi!", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitMaxs(1025, 5);
        methodVisitor69.visitMethodInsn((int) (byte) 100, "", "\007\000", "\001");
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16839");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        byte[] byteArray15 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray15, (int) (short) 26729, (int) (short) 5203);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 12, 0, 1, 0, 1, 12, 0, 2, 0, 2, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 4, 0, 3, 0, 4, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test16840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16840");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        byte[] byteArray35 = classReader20.b;
        java.lang.String str36 = classReader20.getClassName();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter38.visitAnnotation("", true);
        classWriter38.visitOuterClass("", "", "hi!");
        int int52 = classWriter38.newMethod("", "hi!", "hi!", true);
        int int54 = classWriter38.newUTF8("hi!");
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter38.visitAnnotation("", false);
        int int60 = classWriter38.newUTF8("");
        classWriter38.visitOuterClass("\007\000", "", "\007\000");
        classWriter38.visitOuterClass("\007\000", "\001", "\001");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, (int) (short) 97);
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter(classReader20, 202);
        byte[] byteArray73 = classReader20.b;
        int int75 = classReader20.readByte(0);
        java.lang.String str76 = classReader20.getSuperName();
        int int78 = classReader20.readInt(115);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 202 + "'", int75 == 202);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 458752 + "'", int78 == 458752);
    }

    @Test
    public void test16841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16841");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(12, 202);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (byte) 10, 1025);
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(65542, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test16842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16842");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitOuterClass("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = classWriter1.visitAnnotation("", false);
        int int29 = classWriter1.newField("\007\000", "", "\001");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        byte[] byteArray39 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        java.lang.String[] strArray41 = classReader40.getInterfaces();
        java.lang.String str42 = classReader40.getSuperName();
        java.lang.String[] strArray43 = classReader40.getInterfaces();
        classWriter1.visit(88, 186, "\001", "hi!", "\001", strArray43);
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test16843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16843");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String str25 = classReader24.getSuperName();
        int int27 = classReader24.readInt(10);
        int int28 = classReader24.header;
        short short30 = classReader24.readShort(88);
        int int32 = classReader24.getItem(6);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = classReader24.readByte(65542);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16778088 + "'", int27 == 16778088);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 103 + "'", int28 == 103);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 26978 + "'", short30 == (short) 26978);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 38 + "'", int32 == 38);
    }

    @Test
    public void test16844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16844");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classReader20.b;
        int int38 = classReader20.header;
        byte[] byteArray39 = classReader20.b;
        int int40 = classReader20.header;
        java.lang.String[] strArray41 = classReader20.getInterfaces();
        int int42 = classReader20.getAccess();
        java.lang.String[] strArray43 = classReader20.getInterfaces();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 73 + "'", int38 == 73);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 73 + "'", int40 == 73);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test16845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16845");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        methodVisitor69.visitMethodInsn(8, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        methodVisitor69.visitIincInsn(100, 0);
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label[] labelArray93 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(0, 80, label92, labelArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(labelArray93);
    }

    @Test
    public void test16846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16846");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        byte[] byteArray8 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray8);
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray8);
        byte[] byteArray11 = classReader10.b;
        byte[] byteArray12 = classReader10.b;
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter14.visitEnd();
        classWriter14.visitSource("hi!", "");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter14.visit((int) 'a', (int) '4', "", "hi!", "", strArray30);
        byte[] byteArray32 = classWriter14.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader33.accept((org.mockito.asm.ClassVisitor) classWriter35, 8);
        classWriter35.visitOuterClass("hi!", "hi!", "");
        // The following exception was thrown during execution in test generation
        try {
            classReader10.accept((org.mockito.asm.ClassVisitor) classWriter35, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test16847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16847");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitTypeInsn(13, "hi!");
        methodVisitor69.visitMaxs((int) (short) 0, (int) '4');
        methodVisitor69.visitIincInsn((int) (short) 4, 16779008);
        methodVisitor69.visitIntInsn(83, 3);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitFieldInsn(341012341, "\001", "\001", "\001");
        methodVisitor69.visitMaxs(80, 24948);
        methodVisitor69.visitVarInsn((int) (short) 26913, 1792);
        org.mockito.asm.Label label98 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16848");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        int int37 = classReader35.readByte(10);
        int int38 = classReader35.getAccess();
        java.lang.String str39 = classReader35.getClassName();
        byte[] byteArray40 = classReader35.b;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
    }

    @Test
    public void test16849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16849");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int38 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter44.visitEnd();
        classWriter44.visitSource("", "");
        int int51 = classWriter44.newNameType("hi!", "");
        int int55 = classWriter44.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor56 = classWriter1.visitField(65210, "", "", "hi!", (java.lang.Object) "hi!");
        fieldVisitor56.visitEnd();
        fieldVisitor56.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = fieldVisitor56.visitAnnotation("\001", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor61);
    }

    @Test
    public void test16850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16850");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        java.lang.String[] strArray24 = classReader21.getInterfaces();
        java.lang.String[] strArray25 = classReader21.getInterfaces();
        int int26 = classReader21.getAccess();
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        classWriter28.visitSource("", "");
        classWriter28.visitSource("", "hi!");
        int int41 = classWriter28.newField("hi!", "hi!", "hi!");
        int int45 = classWriter28.newField("hi!", "hi!", "hi!");
        classWriter28.visitInnerClass("", "hi!", "", 254);
        int int52 = classWriter28.newUTF8("");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 10);
        int int55 = classReader21.header;
        java.lang.String[] strArray56 = classReader21.getInterfaces();
        int int57 = classReader21.getAccess();
        java.lang.String str58 = classReader21.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 73 + "'", int55 == 73);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 52 + "'", int57 == 52);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test16851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16851");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "hi!", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitEnd();
        byte[] byteArray33 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        java.lang.String str36 = classReader35.getClassName();
        java.lang.String str37 = classReader35.getSuperName();
        int int39 = classReader35.readUnsignedShort(14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 12, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 12, 0, 2, 0, 2, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 3, 0, 8, 0, 10, 0, 0, 0, 10, 0, 1, 0, 4, 0, 4, 0, 2, 0, 100, 0, 11, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 26913 + "'", int39 == 26913);
    }

    @Test
    public void test16852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16852");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn((int) (short) 256, "hi!", "", "");
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(8, 51966);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("\007\000", false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitParameterAnnotation(105, "hi!", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test16853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16853");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        classWriter10.visitSource("hi!", "");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter10.visit((int) 'a', (int) '4', "", "hi!", "", strArray26);
        byte[] byteArray28 = classWriter10.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter10.visitAnnotation("", false);
        byte[] byteArray32 = classWriter10.toByteArray();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        java.lang.String[] strArray42 = classReader41.getInterfaces();
        short short44 = classReader41.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter10.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = fieldVisitor45.visitAnnotation("", true);
        org.mockito.asm.FieldVisitor fieldVisitor49 = classWriter1.visitField(4, "hi!", "hi!", "hi!", (java.lang.Object) true);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "", 14);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("\007\000", "", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter1.visitAnnotation("\001", false);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -326 + "'", short44 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(fieldVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor65);
    }

    @Test
    public void test16854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16854");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("\007\000", "", "", 83);
        classWriter1.visitOuterClass("\001", "hi!", "hi!");
        int int28 = classWriter1.newClass("\001");
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        byte[] byteArray37 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        java.lang.String[] strArray39 = classReader38.getInterfaces();
        int int41 = classReader38.readInt((int) (byte) 0);
        java.lang.String str42 = classReader38.getSuperName();
        short short44 = classReader38.readShort(9);
        java.lang.String[] strArray45 = classReader38.getInterfaces();
        classWriter1.visit((int) (short) -17730, 190, "hi!", "", "\001", strArray45);
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter1.visitAnnotation("\007\000", false);
        int int54 = classWriter1.newMethod("", "", "", false);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-889275714) + "'", int41 == (-889275714));
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) 256 + "'", short44 == (short) 256);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 11 + "'", int54 == 11);
    }

    @Test
    public void test16855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16855");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) -1, (int) (byte) -1);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitEnd();
        methodVisitor69.visitIincInsn((int) (short) 2, 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test16856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16856");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        classWriter1.visitOuterClass("hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("", false);
        classWriter1.visitEnd();
        int int33 = classWriter1.newMethod("", "\001", "\007\000", false);
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
    }

    @Test
    public void test16857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16857");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 254);
        methodVisitor69.visitInsn(51966);
        methodVisitor69.visitVarInsn(9, (int) (short) 100);
        methodVisitor69.visitIincInsn(28526, (-1161953280));
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        org.mockito.asm.Attribute attribute90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16858");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        int int9 = classReader4.readUnsignedShort(0);
        byte[] byteArray10 = classReader4.b;
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray10, 6, (int) (short) 100);
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray10);
        java.lang.String[] strArray15 = classReader14.getInterfaces();
        byte[] byteArray16 = classReader14.b;
        java.lang.String str17 = classReader14.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = classReader14.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51966 + "'", int9 == 51966);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test16859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16859");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        classWriter1.visitOuterClass("", "\007\000", "\007\000");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        byte[] byteArray14 = classWriter12.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter12.visitAnnotation("", true);
        classWriter12.visitOuterClass("", "", "hi!");
        int int26 = classWriter12.newMethod("", "hi!", "hi!", true);
        int int30 = classWriter12.newField("hi!", "", "hi!");
        classWriter12.visitInnerClass("hi!", "hi!", "", 7);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter42.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter52.visitEnd();
        classWriter52.visitSource("hi!", "");
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter52.visit((int) 'a', (int) '4', "", "hi!", "", strArray68);
        classWriter42.visit((int) ' ', 48640, "hi!", "", "", strArray68);
        classWriter12.visit(8, (-1), "hi!", "hi!", "hi!", strArray68);
        classWriter1.visit(47806, (int) (short) 9, "", "hi!", "", strArray68);
        classWriter1.visitOuterClass("", "hi!", "\007\000");
        classWriter1.visitSource("\001", "");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertNotNull(strArray68);
    }

    @Test
    public void test16860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16860");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitFieldInsn(11, "\007\000", "hi!", "");
        methodVisitor69.visitCode();
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16861");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        byte[] byteArray26 = classReader24.b;
        int int27 = classReader24.header;
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter29.visitAnnotation("", true);
        int int35 = classWriter29.newNameType("hi!", "hi!");
        classWriter29.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter47.visitEnd();
        classWriter47.visitSource("hi!", "");
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter47.visit((int) 'a', (int) '4', "", "hi!", "", strArray63);
        byte[] byteArray65 = classWriter47.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter47.visitAnnotation("", false);
        byte[] byteArray69 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader70 = new org.mockito.asm.ClassReader(byteArray69);
        java.lang.String[] strArray71 = classReader70.getInterfaces();
        classWriter29.visit(51966, (int) 'a', "", "\007\000", "", strArray71);
        classWriter29.visitEnd();
        classWriter29.visitOuterClass("\007\000", "", "");
        classWriter29.visitOuterClass("", "", "");
        classWriter29.visitEnd();
        org.mockito.asm.Attribute[] attributeArray83 = null;
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter29, attributeArray83, 256);
        int int87 = classWriter29.newClass("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = classWriter29.visitAnnotation("\007\000", true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 103 + "'", int27 == 103);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test16862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16862");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn((-889275714), "hi!");
        methodVisitor69.visitVarInsn(0, 1751720193);
        methodVisitor69.visitMethodInsn(52, "", "hi!", "hi!");
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitEnd();
        methodVisitor69.visitIincInsn(20, 1792);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16863");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitInsn(3);
        methodVisitor69.visitEnd();
        methodVisitor69.visitTypeInsn(13, "\007\000");
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 65210);
        methodVisitor69.visitIntInsn((int) (short) 1, (-889275714));
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotationDefault();
        annotationVisitor92.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test16864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16864");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        int int31 = classWriter29.newClass("\007\000");
        classWriter29.visitOuterClass("\001", "\007\000", "");
        int int37 = classWriter29.newUTF8("\001");
        int int39 = classWriter29.newUTF8("");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 11 + "'", int37 == 11);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test16865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16865");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(classReader7, 28);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader7, (int) '#');
        int int13 = classReader7.readUnsignedShort(73);
        int int14 = classReader7.getAccess();
        byte[] byteArray15 = classReader7.b;
        int int16 = classReader7.header;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 256 + "'", int13 == 256);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
    }

    @Test
    public void test16866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16866");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(14);
        methodVisitor69.visitIntInsn((int) (short) 97, 0);
        methodVisitor69.visitIntInsn(0, (-1161953280));
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("hi!", "hi!", "\001", label89, label90, 223337);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test16867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16867");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        int int37 = classReader35.readInt(11);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        classWriter40.visitSource("hi!", "");
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter40.visit((int) 'a', (int) '4', "", "hi!", "", strArray56);
        byte[] byteArray58 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader59.accept((org.mockito.asm.ClassVisitor) classWriter61, 8);
        char[] charArray70 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj71 = classReader59.readConst((int) (short) 1, charArray70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = classReader35.readUTF8(327680, charArray70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1792 + "'", int37 == 1792);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj71 + "' != '" + "\007\000" + "'", obj71, "\007\000");
    }

    @Test
    public void test16868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16868");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        int int6 = classWriter1.newMethod("\001", "", "\007\000", false);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        byte[] byteArray14 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray14);
        java.lang.String[] strArray16 = classReader15.getInterfaces();
        int int18 = classReader15.readInt((int) (byte) 0);
        java.lang.String str19 = classReader15.getSuperName();
        java.lang.String[] strArray20 = classReader15.getInterfaces();
        java.lang.String[] strArray21 = classReader15.getInterfaces();
        int int22 = classReader15.header;
        java.lang.String[] strArray23 = classReader15.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor24 = classWriter1.visitMethod(872, "\007\000", "\007\000", "", strArray23);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        classWriter30.visitEnd();
        classWriter30.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter30.visitAnnotation("hi!", true);
        classWriter30.visitEnd();
        byte[] byteArray48 = classWriter30.toByteArray();
        classWriter30.visitEnd();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter56.visitEnd();
        byte[] byteArray58 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        java.lang.String[] strArray60 = classReader59.getInterfaces();
        java.lang.String str61 = classReader59.getSuperName();
        long long63 = classReader59.readLong((int) (byte) 0);
        java.lang.String[] strArray64 = classReader59.getInterfaces();
        int int65 = classReader59.getAccess();
        int int67 = classReader59.readUnsignedShort((int) (short) 0);
        int int69 = classReader59.readInt(4);
        java.lang.String[] strArray70 = classReader59.getInterfaces();
        classWriter30.visit(196612, 11, "hi!", "hi!", "", strArray70);
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter78.visitEnd();
        byte[] byteArray80 = classWriter78.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        java.lang.String[] strArray82 = classReader81.getInterfaces();
        int int84 = classReader81.readInt((int) (byte) 0);
        java.lang.String str85 = classReader81.getSuperName();
        java.lang.String[] strArray86 = classReader81.getInterfaces();
        byte[] byteArray87 = classReader81.b;
        int int88 = classReader81.header;
        long long90 = classReader81.readLong((int) (byte) 0);
        java.lang.String[] strArray91 = classReader81.getInterfaces();
        java.lang.String[] strArray92 = classReader81.getInterfaces();
        classWriter30.visit(10, (int) 'a', "\007\000", "", "\007\000", strArray92);
        org.mockito.asm.MethodVisitor methodVisitor94 = classWriter1.visitMethod(0, "hi!", "", "\007\000", strArray92);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-889275714) + "'", int18 == (-889275714));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(methodVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-3819410108757049344L) + "'", long63 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 51966 + "'", int67 == 51966);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-889275714) + "'", int84 == (-889275714));
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-3819410108757049344L) + "'", long90 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(methodVisitor94);
    }

    @Test
    public void test16869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16869");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classReader20.b;
        int int38 = classReader20.header;
        byte[] byteArray39 = classReader20.b;
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        java.lang.String str41 = classReader40.getSuperName();
        java.lang.String str42 = classReader40.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 73 + "'", int38 == 73);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test16870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16870");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter24.visitEnd();
        byte[] byteArray26 = classWriter24.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        java.lang.String[] strArray28 = classReader27.getInterfaces();
        int int29 = classReader27.getAccess();
        int int31 = classReader27.readUnsignedShort(4);
        int int33 = classReader27.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter18.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (byte) 10, (-1), "", "", "", strArray42);
        classWriter1.visit((int) (short) 256, 8, "", "hi!", "hi!", strArray42);
        int int46 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        int int49 = classWriter1.newUTF8("");
        byte[] byteArray50 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 1, 0, 0, 8, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 8, 0, 4, 0, 3, 0, 2, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 10, 0, 1, 0, 3, 0, 4, 0, 2, 0, 2, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test16871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16871");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        classWriter22.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        classWriter33.visitSource("hi!", "");
        classWriter33.visitEnd();
        classWriter33.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter33.visitAnnotation("hi!", false);
        java.lang.Object obj47 = null;
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter33.visitField((-1), "", "", "", obj47);
        classWriter33.visitEnd();
        classWriter33.visitOuterClass("", "hi!", "");
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter22.visitField(0, "\007\000", "", "hi!", (java.lang.Object) "");
        int int56 = classWriter22.newClass("");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertNotNull(fieldVisitor54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test16872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16872");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter23.visitEnd();
        byte[] byteArray25 = classWriter23.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String[] strArray27 = classReader26.getInterfaces();
        int int29 = classReader26.readInt((int) (byte) 0);
        java.lang.String str30 = classReader26.getSuperName();
        short short32 = classReader26.readShort(9);
        java.lang.String[] strArray33 = classReader26.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter1.visitMethod(1399416686, "\007\000", "", "\007\000", strArray33);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-889275714) + "'", int29 == (-889275714));
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 256 + "'", short32 == (short) 256);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
    }

    @Test
    public void test16873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16873");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        int int8 = classWriter1.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", true);
        byte[] byteArray15 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = annotationVisitor18.visitAnnotation("", "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 3, 104, 105, 33, 1, 0, 0, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 2, 0, 1, 0, 4, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0, 0, 6, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor21);
    }

    @Test
    public void test16874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16874");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        int int12 = classReader4.header;
        java.lang.String[] strArray13 = classReader4.getInterfaces();
        byte[] byteArray14 = classReader4.b;
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader15.readByte(57174305);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test16875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16875");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        int int25 = classReader21.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        byte[] byteArray46 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader47.accept((org.mockito.asm.ClassVisitor) classWriter49, 8);
        char[] charArray58 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj59 = classReader47.readConst((int) (short) 1, charArray58);
        java.lang.Object obj60 = classReader21.readConst(4, charArray58);
        java.lang.String str61 = classReader21.getClassName();
        short short63 = classReader21.readShort(7);
        int int65 = classReader21.readUnsignedShort(0);
        java.lang.String str66 = classReader21.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int68 = classReader21.readUnsignedShort((int) (short) 2049);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + "\007\000" + "'", obj59, "\007\000");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "Lhi!;");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + short63 + "' != '" + (short) 24832 + "'", short63 == (short) 24832);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 51966 + "'", int65 == 51966);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test16876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16876");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        int int8 = classReader4.readInt(6);
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        int int10 = classReader4.getAccess();
        byte[] byteArray11 = classReader4.b;
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray11);
        java.lang.String[] strArray14 = classReader13.getInterfaces();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray14);
    }

    @Test
    public void test16877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16877");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        short short10 = classReader4.readShort(13);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(classReader4, 458754);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
    }

    @Test
    public void test16878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16878");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(1, "", "hi!", "");
        methodVisitor69.visitFieldInsn(16778088, "hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitTypeInsn(8, "");
        methodVisitor69.visitIincInsn(17, 26);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test16879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16879");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", false);
        int int6 = classWriter1.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitOuterClass("", "hi!", "");
        int int18 = classWriter1.newMethod("hi!", "", "", false);
        int int20 = classWriter1.newClass("");
        int int25 = classWriter1.newMethod("\007\000", "", "hi!", false);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 11 + "'", int25 == 11);
    }

    @Test
    public void test16880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16880");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) '#', (int) (byte) 10);
        methodVisitor69.visitCode();
        methodVisitor69.visitMaxs((int) (short) 10, 186);
        methodVisitor69.visitTypeInsn(186, "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test16881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16881");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(65210, "hi!", "hi!", "");
        methodVisitor69.visitInsn(254);
        methodVisitor69.visitIntInsn(186, 10);
        methodVisitor69.visitIincInsn(105, 28);
        org.mockito.asm.Attribute attribute95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16882");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter36, 0);
        java.lang.String str39 = classReader20.getSuperName();
        java.lang.String str40 = classReader20.getSuperName();
        short short42 = classReader20.readShort(3);
        int int43 = classReader20.header;
        java.lang.String str44 = classReader20.getSuperName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + short42 + "' != '" + (short) -16896 + "'", short42 == (short) -16896);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 73 + "'", int43 == 73);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test16883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16883");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        methodVisitor69.visitMethodInsn(8, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMultiANewArrayInsn("", 114);
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "\007\000");
        org.mockito.asm.Label label88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(23, label88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test16884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16884");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 65210);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitInsn(51966);
        methodVisitor69.visitInsn(3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test16885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16885");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        fieldVisitor36.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor36.visitAnnotation("hi!", false);
        fieldVisitor36.visitEnd();
        fieldVisitor36.visitEnd();
        fieldVisitor36.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test16886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16886");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "");
        int int21 = classWriter1.newField("", "", "");
        classWriter1.visitOuterClass("hi!", "hi!", "");
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute27 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
    }

    @Test
    public void test16887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16887");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor34.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor34.visitAnnotation("hi!", false);
        fieldVisitor34.visitEnd();
        fieldVisitor34.visitEnd();
        fieldVisitor34.visitEnd();
        fieldVisitor34.visitEnd();
        fieldVisitor34.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test16888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16888");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("hi!");
        int int16 = classWriter1.newMethod("\007\000", "\007\000", "", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter1.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("\001", true);
        int int25 = classWriter1.newNameType("hi!", "hi!");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 12 + "'", int25 == 12);
    }

    @Test
    public void test16889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16889");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newMethod("", "", "hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        byte[] byteArray18 = classWriter1.toByteArray();
        int int21 = classWriter1.newNameType("hi!", "\001");
        classWriter1.visitInnerClass("", "\001", "\001", 1281);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 7, 0, 1, 12, 0, 1, 0, 2, 11, 0, 4, 0, 5, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
    }

    @Test
    public void test16890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16890");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        long long9 = classReader7.readLong((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = classReader7.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 72061341013180672L + "'", long9 == 72061341013180672L);
    }

    @Test
    public void test16891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16891");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        java.lang.Object[] objArray80 = null;
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter83.visitEnd();
        byte[] byteArray85 = classWriter83.toByteArray();
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray85);
        int int88 = classReader86.readUnsignedShort((int) (short) 0);
        java.lang.String[] strArray89 = classReader86.getInterfaces();
        methodVisitor69.visitFrame((int) (byte) 1, 0, objArray80, (-1), (java.lang.Object[]) strArray89);
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 12);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 51966 + "'", int88 == 51966);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(annotationVisitor93);
        org.junit.Assert.assertNotNull(annotationVisitor94);
    }

    @Test
    public void test16892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16892");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.getAccess();
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter14.visitEnd();
        classWriter14.visitSource("hi!", "");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter14.visit((int) 'a', (int) '4', "", "hi!", "", strArray30);
        byte[] byteArray32 = classWriter14.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter14.visitAnnotation("", false);
        byte[] byteArray36 = classWriter14.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader37, 2);
        byte[] byteArray40 = classReader37.b;
        java.lang.String str41 = classReader37.getSuperName();
        java.lang.String[] strArray42 = classReader37.getInterfaces();
        int int43 = classReader37.header;
        char[] charArray49 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str50 = classReader37.readUTF8(20, charArray49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = classReader4.readUTF8(0, charArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 103 + "'", int43 == 103);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test16893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16893");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(12, 202);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", (int) (short) 256);
        methodVisitor69.visitMethodInsn(0, "\001", "hi!", "\001");
        methodVisitor69.visitTypeInsn(12, "");
        methodVisitor69.visitTypeInsn((int) (byte) 0, "hi!");
        methodVisitor69.visitVarInsn(0, 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test16894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16894");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String[] strArray37 = classReader20.getInterfaces();
        int int39 = classReader20.readUnsignedShort(28);
        java.lang.String[] strArray40 = classReader20.getInterfaces();
        int int42 = classReader20.readInt(28);
        java.lang.String[] strArray43 = classReader20.getInterfaces();
        int int44 = classReader20.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            short short46 = classReader20.readShort(2305);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2305");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21353 + "'", int39 == 21353);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1399416686 + "'", int42 == 1399416686);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
    }

    @Test
    public void test16895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16895");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int11 = classWriter1.newField("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("", "", "", 0);
        classWriter1.visitInnerClass("hi!", "\007\000", "hi!", (int) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        classWriter34.visitSource("hi!", "");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter34.visit((int) 'a', (int) '4', "", "hi!", "", strArray50);
        byte[] byteArray52 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader53.accept((org.mockito.asm.ClassVisitor) classWriter55, 8);
        long long59 = classReader53.readLong(7);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter61.visitAnnotation("", true);
        int int67 = classWriter61.newNameType("hi!", "hi!");
        classReader53.accept((org.mockito.asm.ClassVisitor) classWriter61, (int) (byte) 0);
        java.lang.String str70 = classReader53.getClassName();
        int int72 = classReader53.readInt(28);
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter74.visitAnnotation("", true);
        int int80 = classWriter74.newNameType("hi!", "hi!");
        int int84 = classWriter74.newField("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = classWriter74.visitAnnotation("hi!", true);
        classReader53.accept((org.mockito.asm.ClassVisitor) classWriter74, (int) (short) 3);
        java.lang.String[] strArray90 = classReader53.getInterfaces();
        classWriter1.visit(119, 103, "hi!", "\001", "\007\000", strArray90);
        int int93 = classWriter1.newClass("\001");
        byte[] byteArray94 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader97 = new org.mockito.asm.ClassReader(byteArray94, 0, (int) (short) -16896);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 6989595422067222633L + "'", long59 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1399416686 + "'", int72 == 1399416686);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 5 + "'", int84 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 12 + "'", int93 == 12);
        org.junit.Assert.assertNotNull(byteArray94);
    }

    @Test
    public void test16896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16896");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader5.getAccess();
        int int7 = classReader5.header;
        java.lang.String[] strArray8 = classReader5.getInterfaces();
        int int10 = classReader5.readInt((int) (short) 10);
        byte[] byteArray11 = classReader5.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 327680, 117);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test16897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16897");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        int int31 = classWriter29.newClass("\007\000");
        classWriter29.visitOuterClass("\001", "\007\000", "");
        byte[] byteArray36 = classWriter29.toByteArray();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int47 = classWriter42.newMethod("", "", "hi!", false);
        classWriter42.visitEnd();
        int int50 = classWriter42.newClass("");
        int int52 = classWriter42.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter42.visitAnnotation("", false);
        classWriter42.visitEnd();
        int int60 = classWriter42.newField("\007\000", "\001", "hi!");
        int int62 = classWriter42.newUTF8("");
        org.mockito.asm.FieldVisitor fieldVisitor63 = classWriter29.visitField((int) (byte) 0, "", "", "hi!", (java.lang.Object) "");
        org.mockito.asm.Attribute attribute64 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor63.visitAttribute(attribute64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 3, 7, -64, -128, 7, 0, 9, 1, 0, 1, 1, 7, 0, 11, 12, 0, 9, 0, 2, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 14, 0, 0, 0, 4, 0, 12, 0, 13]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(fieldVisitor63);
    }

    @Test
    public void test16898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16898");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        long long26 = classReader24.readLong((int) (byte) 100);
        java.lang.String[] strArray27 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter30.visit((int) 'a', (int) '4', "", "hi!", "", strArray46);
        byte[] byteArray48 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(classReader50, 256);
        int int54 = classReader50.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter57.visitEnd();
        classWriter57.visitSource("hi!", "");
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter57.visit((int) 'a', (int) '4', "", "hi!", "", strArray73);
        byte[] byteArray75 = classWriter57.toByteArray();
        org.mockito.asm.ClassReader classReader76 = new org.mockito.asm.ClassReader(byteArray75);
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader76.accept((org.mockito.asm.ClassVisitor) classWriter78, 8);
        char[] charArray87 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj88 = classReader76.readConst((int) (short) 1, charArray87);
        java.lang.Object obj89 = classReader50.readConst(4, charArray87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = classReader24.readUTF8(0, charArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 8029481630357783296L + "'", long26 == 8029481630357783296L);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray87);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray87), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray87), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray87), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj88 + "' != '" + "\007\000" + "'", obj88, "\007\000");
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "Lhi!;");
    }

    @Test
    public void test16899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16899");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(classReader7, 28);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader7, (int) '#');
        int int13 = classReader7.readUnsignedShort(73);
        int int14 = classReader7.getAccess();
        java.lang.String[] strArray15 = classReader7.getInterfaces();
        java.lang.String[] strArray16 = classReader7.getInterfaces();
        int int18 = classReader7.readInt(17);
        java.lang.String str19 = classReader7.getSuperName();
        int int20 = classReader7.header;
        java.lang.String str21 = classReader7.getSuperName();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 256 + "'", int13 == 256);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 676719 + "'", int18 == 676719);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test16900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16900");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        byte[] byteArray26 = classReader24.b;
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        byte[] byteArray46 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader47.accept((org.mockito.asm.ClassVisitor) classWriter49, 8);
        classWriter49.visitOuterClass("", "hi!", "hi!");
        classWriter49.visitSource("\007\000", "\007\000");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter49, 131073);
        // The following exception was thrown during execution in test generation
        try {
            long long62 = classReader24.readLong(1792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test16901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16901");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        int int37 = classReader35.readByte(10);
        int int38 = classReader35.header;
        int int39 = classReader35.getAccess();
        long long41 = classReader35.readLong(0);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 88 + "'", int38 == 88);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-3819410108757049247L) + "'", long41 == (-3819410108757049247L));
    }

    @Test
    public void test16902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16902");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        int int30 = classReader24.header;
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader24, (int) (short) 256);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter32.visitAnnotation("\007\000", false);
        int int37 = classWriter32.newUTF8("\001");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter43.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter53.visitEnd();
        classWriter53.visitSource("hi!", "");
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter53.visit((int) 'a', (int) '4', "", "hi!", "", strArray69);
        classWriter43.visit((int) ' ', 48640, "hi!", "", "", strArray69);
        java.lang.Object obj76 = null;
        org.mockito.asm.FieldVisitor fieldVisitor77 = classWriter43.visitField((int) '#', "hi!", "hi!", "hi!", obj76);
        org.mockito.asm.FieldVisitor fieldVisitor78 = classWriter32.visitField(196613, "\007\000", "", "\001", obj76);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 103 + "'", int30 == 103);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(fieldVisitor77);
        org.junit.Assert.assertNotNull(fieldVisitor78);
    }

    @Test
    public void test16903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16903");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitMethodInsn((-1), "hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(13, 18);
        methodVisitor69.visitFieldInsn(104, "\007\000", "\001", "\007\000");
        methodVisitor69.visitVarInsn(1869967971, 28526);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test16904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16904");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn((-1161953280));
        methodVisitor69.visitMethodInsn((-21316096), "hi!", "\007\000", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotation("hi!", false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor97 = methodVisitor69.visitParameterAnnotation(173, "\007\000", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test16905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16905");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        classWriter22.visitOuterClass("", "hi!", "hi!");
        classWriter22.visitInnerClass("hi!", "hi!", "\007\000", 0);
        int int35 = classWriter22.newClass("\007\000");
        java.lang.Class<?> wildcardClass36 = classWriter22.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test16906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16906");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "\007\000");
        methodVisitor69.visitIincInsn(3, (int) ' ');
        methodVisitor69.visitMaxs(196612, 2049);
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test16907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16907");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor36.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = fieldVisitor36.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = fieldVisitor36.visitAnnotation("\007\000", false);
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor36.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor45);
    }

    @Test
    public void test16908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16908");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        methodVisitor69.visitMethodInsn((int) (byte) -1, "hi!", "", "hi!");
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitIincInsn(21353, 9);
        methodVisitor69.visitInsn((int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor69.visitParameterAnnotation(129, "hi!", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test16909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16909");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        classWriter1.visitSource("hi!", "\007\000");
        classWriter1.visitSource("hi!", "hi!");
        int int20 = classWriter1.newUTF8("\001");
        classWriter1.visitInnerClass("hi!", "\001", "", 117);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
    }

    @Test
    public void test16910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16910");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        int int8 = classReader4.readUnsignedShort(3);
        short short10 = classReader4.readShort(6);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader4.readInt((int) (short) 5203);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48640 + "'", int8 == 48640);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
    }

    @Test
    public void test16911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16911");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        int int7 = classReader5.readByte(0);
        byte[] byteArray8 = classReader5.b;
        java.lang.String[] strArray9 = classReader5.getInterfaces();
        int int10 = classReader5.getAccess();
        int int11 = classReader5.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = classReader5.readUnsignedShort(223337);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 202 + "'", int7 == 202);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test16912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16912");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", false);
        int int8 = classWriter1.newUTF8("\007\000");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        byte[] byteArray17 = classWriter15.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter15.visitAnnotation("", true);
        classWriter15.visitOuterClass("", "", "hi!");
        int int29 = classWriter15.newMethod("", "hi!", "hi!", true);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "", "" };
        classWriter15.visit((int) (byte) 100, 7, "", "", "hi!", strArray39);
        classWriter1.visit(186, 0, "", "\007\000", "\007\000", strArray39);
        classWriter1.visitSource("", "\007\000");
        int int49 = classWriter1.newMethod("", "\001", "\007\000", false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
    }

    @Test
    public void test16913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16913");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitVarInsn(12, 0);
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -16896);
        methodVisitor69.visitFieldInsn(16777217, "", "\001", "");
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        methodVisitor69.visitTryCatchBlock(label87, label88, label89, "\001");
        methodVisitor69.visitCode();
        org.mockito.asm.Label label93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
    }

    @Test
    public void test16914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16914");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        byte[] byteArray30 = classWriter28.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter28.visitAnnotation("", true);
        classWriter28.visitOuterClass("", "", "hi!");
        int int42 = classWriter28.newMethod("", "hi!", "hi!", true);
        classWriter28.visitSource("hi!", "");
        classWriter28.visitInnerClass("\007\000", "hi!", "hi!", 202);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter28.visitAnnotation("\007\000", false);
        classWriter28.visitEnd();
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, 33);
        java.lang.String[] strArray57 = classReader20.getInterfaces();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test16915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16915");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String str23 = classReader22.getSuperName();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter25.visitAnnotation("", true);
        int int33 = classWriter25.newMethod("", "", "", true);
        java.lang.Object obj38 = null;
        org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter25.visitField((int) '#', "", "hi!", "", obj38);
        classWriter25.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter25.visitAnnotation("hi!", false);
        classReader22.accept((org.mockito.asm.ClassVisitor) classWriter25, 48640);
        byte[] byteArray46 = classReader22.b;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test16916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16916");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        long long31 = classReader24.readLong(0);
        int int32 = classReader24.header;
        byte[] byteArray33 = classReader24.b;
        int int35 = classReader24.readUnsignedShort((int) '#');
        int int37 = classReader24.getItem(0);
        java.lang.String str38 = classReader24.getClassName();
        java.lang.Class<?> wildcardClass39 = classReader24.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3819410108757049247L) + "'", long31 == (-3819410108757049247L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 103 + "'", int32 == 103);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 29285 + "'", int35 == 29285);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test16917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16917");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor36.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = annotationVisitor39.visitAnnotation("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = annotationVisitor42.visitArray("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = annotationVisitor44.visitAnnotation("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = annotationVisitor47.visitArray("\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor49);
    }

    @Test
    public void test16918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16918");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classReader20.b;
        java.lang.String str38 = classReader20.getClassName();
        int int40 = classReader20.readByte(0);
        int int41 = classReader20.header;
        java.lang.String[] strArray42 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader20, 18);
        java.lang.String str45 = classReader20.getClassName();
        byte[] byteArray46 = classReader20.b;
        int int48 = classReader20.readInt((int) (short) 1);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 202 + "'", int40 == 202);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 73 + "'", int41 == 73);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-21316096) + "'", int48 == (-21316096));
    }

    @Test
    public void test16919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16919");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        methodVisitor69.visitInsn((int) (byte) 10);
        methodVisitor69.visitInsn(47806);
        methodVisitor69.visitInsn((int) '4');
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16920");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        java.lang.String[] strArray24 = classReader21.getInterfaces();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        short short28 = classReader21.readShort((int) (byte) 1);
        java.lang.String str29 = classReader21.getClassName();
        java.lang.String str30 = classReader21.getSuperName();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(classReader52, 256);
        java.lang.String[] strArray55 = classReader52.getInterfaces();
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(classReader52, (int) (short) 100);
        classWriter57.visitInnerClass("", "", "hi!", 1919222016);
        int int67 = classWriter57.newMethod("", "\007\000", "hi!", false);
        classWriter57.visitSource("\001", "\007\000");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter57, 4);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -326 + "'", short28 == (short) -326);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
    }

    @Test
    public void test16921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16921");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        int int18 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("", "hi!", "", 254);
        classWriter1.visitInnerClass("", "", "", 10);
        int int31 = classWriter1.newNameType("", "hi!");
        int int36 = classWriter1.newMethod("hi!", "hi!", "\001", true);
        int int38 = classWriter1.newUTF8("\001");
        int int43 = classWriter1.newMethod("\007\000", "", "hi!", true);
        classWriter1.visitOuterClass("", "hi!", "hi!");
        java.lang.String[] strArray52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor53 = classWriter1.visitMethod((int) (short) 0, "hi!", "", "\007\000", strArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 13 + "'", int43 == 13);
    }

    @Test
    public void test16922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16922");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitTypeInsn(5, "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        methodVisitor69.visitTryCatchBlock(label90, label91, label92, "");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor69.visitParameterAnnotation((int) (short) 13312, "", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test16923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16923");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter(104);
        int int9 = classWriter7.newUTF8("\001");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        classWriter15.visitSource("hi!", "");
        classWriter15.visitEnd();
        classWriter15.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter15.visitAnnotation("hi!", false);
        classWriter15.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter15.visitAnnotation("hi!", true);
        classWriter15.visitEnd();
        classWriter15.visitEnd();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        classWriter40.visitSource("", "");
        int int47 = classWriter40.newNameType("hi!", "");
        classWriter40.visitInnerClass("\007\000", "", "hi!", 202);
        byte[] byteArray53 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        java.lang.String[] strArray55 = classReader54.getInterfaces();
        classWriter15.visit(65210, 151060483, "", "hi!", "\001", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor57 = classWriter7.visitMethod(1768711425, "hi!", "", "\001", strArray55);
        org.mockito.asm.MethodVisitor methodVisitor58 = classWriter1.visitMethod(196613, "\001", "hi!", "hi!", strArray55);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor70 = classWriter64.visitField(16778088, "\007\000", "hi!", "hi!", (java.lang.Object) (-1L));
        classWriter64.visitEnd();
        classWriter64.visitEnd();
        byte[] byteArray73 = classWriter64.toByteArray();
        org.mockito.asm.ClassReader classReader76 = new org.mockito.asm.ClassReader(byteArray73, (int) (byte) -1, 16779008);
        org.mockito.asm.FieldVisitor fieldVisitor77 = classWriter1.visitField(7, "", "\001", "hi!", (java.lang.Object) (byte) -1);
        org.mockito.asm.Attribute attribute78 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor77.visitAttribute(attribute78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 10, 0, 1, 0, 5, 0, 6, 0, 2, 0, -54]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(methodVisitor57);
        org.junit.Assert.assertNotNull(methodVisitor58);
        org.junit.Assert.assertNotNull(fieldVisitor70);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 3, 7, -64, -128, 1, 0, 3, 104, 105, 33, 5, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 104, 0, 1, 0, 2, 0, 2, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor77);
    }

    @Test
    public void test16924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16924");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("", "hi!", "");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        int int35 = classReader32.readUnsignedShort(1);
        int int37 = classReader32.readUnsignedShort(0);
        byte[] byteArray38 = classReader32.b;
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        java.lang.String[] strArray40 = classReader39.getInterfaces();
        classWriter1.visit(117, 202, "", "hi!", "\007\000", strArray40);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 65210 + "'", int35 == 65210);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 51966 + "'", int37 == 51966);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test16925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16925");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        int int59 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter66.visitEnd();
        byte[] byteArray68 = classWriter66.toByteArray();
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray68);
        java.lang.String[] strArray70 = classReader69.getInterfaces();
        java.lang.String str71 = classReader69.getSuperName();
        int int72 = classReader69.header;
        java.lang.String[] strArray73 = classReader69.getInterfaces();
        classWriter1.visit((int) (byte) 100, 7, "hi!", "hi!", "hi!", strArray73);
        classWriter1.visitEnd();
        int int77 = classWriter1.newClass("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = classWriter1.visitAnnotation("", true);
        int int82 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("hi!", "", "");
        byte[] byteArray87 = classWriter1.toByteArray();
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 7 + "'", int77 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 100, 0, 13, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 3, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 6, 12, 0, 1, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 7, 0, 4, 0, 4, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 3, 0, 10, 0, 0, 0, 4, 0, 4, 0, 8, 0, 11, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 3, 0, 10, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test16926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16926");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int9 = classWriter1.newClass("hi!");
        classWriter1.visitInnerClass("\007\000", "\007\000", "", (-1));
        int int16 = classWriter1.newClass("\001");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
    }

    @Test
    public void test16927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16927");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) 256);
        methodVisitor69.visitIincInsn(65210, 57174305);
        methodVisitor69.visitEnd();
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotation("\007\000", true);
        methodVisitor69.visitIntInsn((int) (short) 9, 129);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test16928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16928");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        int int24 = classWriter1.newUTF8("\007\000");
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "\001");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter1.visitAnnotation("\001", true);
        java.lang.Class<?> wildcardClass33 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test16929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16929");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        methodVisitor69.visitMultiANewArrayInsn("hi!", 119);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor94 = methodVisitor69.visitParameterAnnotation((int) (short) 17509, "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16930");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label71 = null;
        org.mockito.asm.Label label72 = null;
        org.mockito.asm.Label label73 = null;
        methodVisitor69.visitTryCatchBlock(label71, label72, label73, "hi!");
        methodVisitor69.visitVarInsn((int) (byte) 0, 0);
        methodVisitor69.visitTypeInsn(28, "hi!");
        methodVisitor69.visitIincInsn((int) '#', (int) (short) 256);
        methodVisitor69.visitIincInsn(1763770624, 29285);
        methodVisitor69.visitMethodInsn(262147, "\001", "hi!", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16931");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        methodVisitor69.visitInsn((int) (byte) 10);
        methodVisitor69.visitTypeInsn((int) (short) -1, "");
        methodVisitor69.visitVarInsn((int) (short) 26729, 141);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16932");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getClassName();
        int int30 = classReader24.readUnsignedShort(3);
        int int31 = classReader24.getAccess();
        int int32 = classReader24.header;
        byte[] byteArray33 = classReader24.b;
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader24.readUnsignedShort(26913);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 48640 + "'", int30 == 48640);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 103 + "'", int32 == 103);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test16933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16933");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        int int9 = classReader4.readUnsignedShort(0);
        int int10 = classReader4.header;
        byte[] byteArray11 = classReader4.b;
        int int12 = classReader4.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = classReader4.readByte(16777217);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51966 + "'", int9 == 51966);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test16934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16934");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        int int15 = classWriter1.newMethod("", "", "hi!", true);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        classWriter21.visitSource("hi!", "");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter21.visit((int) 'a', (int) '4', "", "hi!", "", strArray37);
        classWriter21.visitOuterClass("hi!", "", "hi!");
        int int47 = classWriter21.newMethod("hi!", "", "hi!", true);
        classWriter21.visitEnd();
        classWriter21.visitInnerClass("", "\007\000", "\007\000", 51);
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter1.visitField(0, "hi!", "\007\000", "hi!", (java.lang.Object) "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = fieldVisitor54.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = fieldVisitor54.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = annotationVisitor60.visitArray("\001");
        annotationVisitor62.visitEnum("", "", "hi!");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(annotationVisitor62);
    }

    @Test
    public void test16935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16935");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        int int16 = classWriter1.newUTF8("hi!");
        java.lang.Object obj21 = null;
        org.mockito.asm.FieldVisitor fieldVisitor22 = classWriter1.visitField(1919116612, "\001", "\001", "", obj21);
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = fieldVisitor22.visitAnnotation("hi!", false);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(fieldVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor25);
    }

    @Test
    public void test16936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16936");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(9, "\007\000", "hi!", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16937");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("", "\007\000", "hi!", (int) (short) -1);
        classWriter1.visitInnerClass("hi!", "", "", (int) (short) -13570);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
    }

    @Test
    public void test16938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16938");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        byte[] byteArray38 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        java.lang.String[] strArray40 = classReader39.getInterfaces();
        int int41 = classReader39.getAccess();
        int int43 = classReader39.readUnsignedShort(4);
        int int45 = classReader39.readByte(5);
        java.lang.String[] strArray46 = classReader39.getInterfaces();
        classWriter26.visit(0, (int) (short) 100, "hi!", "", "", strArray46);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter26.visitAnnotation("\001", true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(annotationVisitor50);
    }

    @Test
    public void test16939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16939");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "hi!");
        methodVisitor69.visitTypeInsn((-889275714), "\007\000");
        methodVisitor69.visitMethodInsn(20, "hi!", "hi!", "hi!");
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(117, label97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test16940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16940");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitVarInsn(8, (-1));
        methodVisitor69.visitIincInsn((int) (short) 256, (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn((int) (short) 9);
        methodVisitor69.visitMaxs(2305, 0);
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) 8449);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test16941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16941");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitMultiANewArrayInsn("hi!", (int) (short) 3);
        methodVisitor69.visitIincInsn(24832, 11);
        methodVisitor69.visitIincInsn(0, 134283267);
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16942");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        int int28 = classWriter1.newClass("hi!");
        int int30 = classWriter1.newClass("hi!");
        classWriter1.visitInnerClass("hi!", "", "hi!", 1919222016);
        int int40 = classWriter1.newMethod("hi!", "\001", "hi!", false);
        classWriter1.visitSource("\007\000", "\001");
        classWriter1.visitSource("\007\000", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter1.visitAnnotation("\007\000", false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor49);
    }

    @Test
    public void test16943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16943");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        int int19 = classWriter1.newClass("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor22.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = annotationVisitor22.visitArray("hi!");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test16944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16944");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String str25 = classReader24.getSuperName();
        int int27 = classReader24.readInt(10);
        short short29 = classReader24.readShort(11);
        java.lang.String str30 = classReader24.getClassName();
        int int31 = classReader24.header;
        java.lang.String str32 = classReader24.getSuperName();
        short short34 = classReader24.readShort(12);
        java.lang.String str35 = classReader24.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16778088 + "'", int27 == 16778088);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 3 + "'", short29 == (short) 3);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 103 + "'", int31 == 103);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 872 + "'", short34 == (short) 872);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test16945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16945");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter30.visitAnnotation("", true);
        classWriter30.visitSource("", "");
        classWriter30.visitSource("", "hi!");
        int int43 = classWriter30.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        byte[] byteArray52 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        java.lang.String[] strArray54 = classReader53.getInterfaces();
        classWriter30.visit(5, (int) (short) 10, "", "hi!", "hi!", strArray54);
        classWriter1.visit((int) (short) 256, 2, "\007\000", "", "", strArray54);
        int int58 = classWriter1.newClass("hi!");
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter65.visitEnd();
        classWriter65.visitSource("hi!", "");
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter65.visit((int) 'a', (int) '4', "", "hi!", "", strArray81);
        byte[] byteArray83 = classWriter65.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter65.visitAnnotation("", false);
        byte[] byteArray87 = classWriter65.toByteArray();
        org.mockito.asm.ClassReader classReader88 = new org.mockito.asm.ClassReader(byteArray87);
        org.mockito.asm.ClassWriter classWriter90 = new org.mockito.asm.ClassWriter(classReader88, 2);
        byte[] byteArray91 = classReader88.b;
        java.lang.String str92 = classReader88.getSuperName();
        java.lang.String[] strArray93 = classReader88.getInterfaces();
        int int95 = classReader88.getItem(0);
        java.lang.String[] strArray96 = classReader88.getInterfaces();
        classWriter1.visit(114, 341012341, "", "hi!", "", strArray96);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 12 + "'", int58 == 12);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(strArray96);
    }

    @Test
    public void test16946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16946");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "hi!", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        byte[] byteArray35 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        java.lang.String[] strArray37 = classReader36.getInterfaces();
        short short39 = classReader36.readShort((int) (byte) 1);
        java.lang.String[] strArray40 = classReader36.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor41 = classWriter1.visitMethod(25, "hi!", "", "\007\000", strArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + short39 + "' != '" + (short) -326 + "'", short39 == (short) -326);
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test16947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16947");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        byte[] byteArray29 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        java.lang.String[] strArray31 = classReader30.getInterfaces();
        java.lang.String str32 = classReader30.getSuperName();
        long long34 = classReader30.readLong((int) (byte) 0);
        java.lang.String[] strArray35 = classReader30.getInterfaces();
        int int36 = classReader30.getAccess();
        int int38 = classReader30.readUnsignedShort((int) (short) 0);
        int int40 = classReader30.readInt(4);
        java.lang.String[] strArray41 = classReader30.getInterfaces();
        classWriter1.visit(196612, 11, "hi!", "hi!", "", strArray41);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter1.visitAnnotation("hi!", false);
        int int50 = classWriter1.newMethod("", "\007\000", "", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter1.visitAnnotation("\007\000", true);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-3819410108757049344L) + "'", long34 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 51966 + "'", int38 == 51966);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 13 + "'", int50 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor54);
    }

    @Test
    public void test16948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16948");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitTypeInsn(48640, "");
        methodVisitor69.visitIntInsn(768, (int) (short) -17730);
        org.mockito.asm.Label label90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(28, label90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test16949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16949");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn((int) (short) 256, "hi!", "", "");
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn(48640);
        methodVisitor69.visitIincInsn((int) (short) 26978, 16779008);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        methodVisitor69.visitTryCatchBlock(label89, label90, label91, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test16950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16950");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        byte[] byteArray15 = classWriter13.toByteArray();
        byte[] byteArray16 = classWriter13.toByteArray();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        classWriter22.visitSource("hi!", "");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter22.visit((int) 'a', (int) '4', "", "hi!", "", strArray38);
        byte[] byteArray40 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader41.accept((org.mockito.asm.ClassVisitor) classWriter43, 8);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter47.visitEnd();
        classWriter47.visitSource("", "");
        classReader41.accept((org.mockito.asm.ClassVisitor) classWriter47, 100);
        classWriter47.visitOuterClass("hi!", "", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor58 = classWriter13.visitField(51966, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int59 = classWriter1.newConst((java.lang.Object) "");
        classWriter1.visitSource("hi!", "hi!");
        byte[] byteArray63 = classWriter1.toByteArray();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 7, 0, 2, 9, 0, 4, 0, 3, 8, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 2, 0, 8, 0, 0, 0, 3, 104, 105, 33, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test16951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16951");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        classWriter29.visitSource("", "");
        int int38 = classWriter29.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter29.visitAnnotation("", false);
        int int43 = classWriter29.newUTF8("hi!");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter29, (int) (short) -326);
        int int47 = classReader21.readInt(10);
        int int49 = classReader21.readByte((int) (short) 0);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter51.visitEnd();
        byte[] byteArray53 = classWriter51.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter51.visitAnnotation("", true);
        classWriter51.visitOuterClass("", "", "hi!");
        int int65 = classWriter51.newMethod("", "hi!", "hi!", true);
        int int67 = classWriter51.newUTF8("hi!");
        classWriter51.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter51.visitAnnotation("", false);
        int int73 = classWriter51.newClass("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter51.visitAnnotation("", true);
        int int78 = classWriter51.newUTF8("");
        classWriter51.visitSource("\007\000", "hi!");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter51, 16);
        char[] charArray85 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj86 = classReader21.readConst((int) (short) 1280, charArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1280");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 16778088 + "'", int47 == 16778088);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 202 + "'", int49 == 202);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test16952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16952");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter18.visitEnd();
        byte[] byteArray20 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray20);
        java.lang.String[] strArray22 = classReader21.getInterfaces();
        int int23 = classReader21.getAccess();
        int int25 = classReader21.readUnsignedShort(4);
        int int27 = classReader21.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor28 = classWriter12.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        classWriter12.visit((int) (byte) 10, (-1), "", "", "", strArray36);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter43.visitEnd();
        classWriter43.visitSource("hi!", "");
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter43.visit((int) 'a', (int) '4', "", "hi!", "", strArray59);
        byte[] byteArray61 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader62.accept((org.mockito.asm.ClassVisitor) classWriter64, 8);
        long long68 = classReader62.readLong(7);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter70.visitAnnotation("", true);
        int int76 = classWriter70.newNameType("hi!", "hi!");
        classReader62.accept((org.mockito.asm.ClassVisitor) classWriter70, (int) (byte) 0);
        java.lang.String[] strArray79 = classReader62.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor80 = classWriter12.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray79);
        methodVisitor80.visitCode();
        methodVisitor80.visitInsn(0);
        methodVisitor80.visitVarInsn(0, 83886080);
        methodVisitor80.visitMultiANewArrayInsn("", 6);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor80.visitAnnotation("\001", false);
        org.mockito.asm.FieldVisitor fieldVisitor93 = classWriter1.visitField((int) (short) 1280, "\001", "\001", "\001", (java.lang.Object) false);
        byte[] byteArray94 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader97 = new org.mockito.asm.ClassReader(byteArray94, 28526, (int) (short) 256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor28);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 6989595422067222633L + "'", long68 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(methodVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(fieldVisitor93);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 1, 1, 3, 0, 0, 0, 0, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 0, 0, 5, 0, 5, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 2, 0, 5, 0, 0, 0, 1, 0, 9, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 3, 0, 10]");
    }

    @Test
    public void test16953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16953");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("hi!", "\007\000", "", 114);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitSource("", "\001");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
    }

    @Test
    public void test16954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16954");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        java.lang.String str9 = classReader4.getSuperName();
        java.lang.String str10 = classReader4.getSuperName();
        int int11 = classReader4.getAccess();
        java.lang.String[] strArray12 = classReader4.getInterfaces();
        int int13 = classReader4.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = classReader4.getItem(65210);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65210");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test16955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16955");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "hi!");
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        byte[] byteArray34 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray34);
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray34, 2, (int) (short) -1);
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray34);
        java.lang.String[] strArray41 = classReader40.getInterfaces();
        classWriter1.visit((-1161953280), 1025, "", "", "\001", strArray41);
        int int44 = classWriter1.newClass("\001");
        classWriter1.visitSource("\001", "hi!");
        classWriter1.visitSource("", "\001");
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter56.visitEnd();
        byte[] byteArray58 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        byte[] byteArray60 = classReader59.b;
        byte[] byteArray61 = classReader59.b;
        int int62 = classReader59.header;
        short short64 = classReader59.readShort((int) (short) 1);
        long long66 = classReader59.readLong((int) (short) 0);
        java.lang.String[] strArray67 = classReader59.getInterfaces();
        int int68 = classReader59.getAccess();
        java.lang.String[] strArray69 = classReader59.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor70 = classWriter1.visitMethod(57174305, "\001", "\007\000", "\007\000", strArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) -326 + "'", short64 == (short) -326);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-3819410108757049344L) + "'", long66 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(strArray69);
    }

    @Test
    public void test16956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16956");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        int int32 = classWriter1.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitInnerClass("\007\000", "", "", 0);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter1.visitAnnotation("hi!", true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor50);
    }

    @Test
    public void test16957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16957");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        methodVisitor69.visitMethodInsn(8, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitIincInsn(0, (int) ' ');
        methodVisitor69.visitMaxs(1768057957, (int) (short) 7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test16958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16958");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitSource("\001", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        classWriter36.visitSource("hi!", "");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter36.visit((int) 'a', (int) '4', "", "hi!", "", strArray52);
        byte[] byteArray54 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader55.accept((org.mockito.asm.ClassVisitor) classWriter57, 8);
        long long61 = classReader55.readLong(7);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter63.visitAnnotation("", true);
        int int69 = classWriter63.newNameType("hi!", "hi!");
        classReader55.accept((org.mockito.asm.ClassVisitor) classWriter63, (int) (byte) 0);
        byte[] byteArray72 = classReader55.b;
        int int73 = classReader55.header;
        byte[] byteArray74 = classReader55.b;
        java.lang.String str75 = classReader55.getClassName();
        java.lang.String str76 = classReader55.getClassName();
        short short78 = classReader55.readShort(116);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter(classReader55, (int) (short) 872);
        java.lang.String[] strArray81 = classReader55.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor82 = classWriter1.visitMethod(6, "\001", "hi!", "hi!", strArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 6989595422067222633L + "'", long61 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 73 + "'", int73 == 73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + short78 + "' != '" + (short) 1792 + "'", short78 == (short) 1792);
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test16959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16959");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int20 = classWriter15.newMethod("", "", "hi!", false);
        classWriter15.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter15.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter30.visitAnnotation("", true);
        classWriter30.visitSource("", "");
        classWriter30.visitSource("", "hi!");
        int int43 = classWriter30.newField("hi!", "hi!", "hi!");
        int int47 = classWriter30.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter15.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int52 = classWriter15.newField("hi!", "hi!", "hi!");
        classWriter15.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter15.visitAnnotation("hi!", true);
        org.mockito.asm.FieldVisitor fieldVisitor57 = classWriter1.visitField(0, "\007\000", "hi!", "\001", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = fieldVisitor57.visitAnnotation("hi!", true);
        fieldVisitor57.visitEnd();
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(fieldVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor60);
    }

    @Test
    public void test16960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16960");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        fieldVisitor17.visitEnd();
        fieldVisitor17.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = fieldVisitor17.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = fieldVisitor17.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = annotationVisitor25.visitArray("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = annotationVisitor27.visitAnnotation("", "hi!");
        annotationVisitor27.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor30);
    }

    @Test
    public void test16961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16961");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        java.lang.String str35 = classReader20.getSuperName();
        int int36 = classReader20.header;
        java.lang.String str37 = classReader20.getClassName();
        int int38 = classReader20.getAccess();
        int int40 = classReader20.getItem(0);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 73 + "'", int36 == 73);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test16962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16962");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter28.visitAnnotation("hi!", true);
        classWriter28.visitEnd();
        byte[] byteArray46 = classWriter28.toByteArray();
        byte[] byteArray47 = classWriter28.toByteArray();
        int int49 = classWriter28.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int52 = classReader20.getAccess();
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(classReader20, 15);
        java.lang.String str55 = classReader20.getSuperName();
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) ' ');
        int int61 = classWriter57.newField("", "", "hi!");
        int int63 = classWriter57.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter57.visitAnnotation("", true);
        classWriter57.visitEnd();
        classWriter57.visitSource("\007\000", "\007\000");
        classWriter57.visitEnd();
        int int74 = classWriter57.newNameType("\001", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter57, 51);
        classWriter57.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 5 + "'", int61 == 5);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 8 + "'", int74 == 8);
    }

    @Test
    public void test16963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16963");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        int int7 = classWriter1.newField("\007\000", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter16.visitEnd();
        byte[] byteArray18 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray18);
        int int21 = classReader20.getAccess();
        int int22 = classReader20.header;
        java.lang.String[] strArray23 = classReader20.getInterfaces();
        int int25 = classReader20.readInt((int) (short) 10);
        byte[] byteArray26 = classReader20.b;
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray26, 0, (int) (short) 100);
        byte[] byteArray30 = classReader29.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter1.visitField((int) (short) 26913, "hi!", "\001", "\001", (java.lang.Object) classReader29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@3dd838ec");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test16964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16964");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        int int7 = classReader5.readByte(0);
        byte[] byteArray8 = classReader5.b;
        java.lang.String[] strArray9 = classReader5.getInterfaces();
        int int10 = classReader5.getAccess();
        java.lang.String[] strArray11 = classReader5.getInterfaces();
        byte[] byteArray12 = classReader5.b;
        java.lang.String[] strArray13 = classReader5.getInterfaces();
        java.lang.String str14 = classReader5.getSuperName();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 202 + "'", int7 == 202);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test16965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16965");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        java.lang.String str35 = classReader20.getSuperName();
        int int36 = classReader20.getAccess();
        java.lang.String str37 = classReader20.getClassName();
        java.lang.String str38 = classReader20.getClassName();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader20, 872);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test16966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16966");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitIincInsn(48640, (int) (byte) 100);
        methodVisitor69.visitIincInsn(1, 100);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = annotationVisitor85.visitArray("\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test16967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16967");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitVarInsn(1, 100);
        methodVisitor69.visitIntInsn((int) (short) 1280, 0);
        methodVisitor69.visitInsn(52);
        methodVisitor69.visitMethodInsn((int) (short) 97, "\007\000", "\001", "\007\000");
        org.mockito.asm.Label label95 = null;
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\007\000", "hi!", "hi!", label95, label96, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16968");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        int int28 = classWriter1.newClass("hi!");
        int int30 = classWriter1.newClass("hi!");
        classWriter1.visitInnerClass("hi!", "", "hi!", 1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter1.visitAnnotation("\007\000", false);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter47.visitEnd();
        byte[] byteArray49 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray49);
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray49);
        int int52 = classReader51.getAccess();
        int int53 = classReader51.header;
        java.lang.String[] strArray54 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor55 = classWriter1.visitMethod((int) (short) 5203, "", "\007\000", "", strArray54);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = methodVisitor55.visitAnnotation("", false);
        methodVisitor55.visitVarInsn(28526, 2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(methodVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
    }

    @Test
    public void test16969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16969");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader24, 5);
        int int28 = classReader24.header;
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        classWriter30.visitEnd();
        int int37 = classWriter30.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter30.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter30.visitAnnotation("hi!", true);
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter30, 0);
        java.lang.String[] strArray46 = classReader24.getInterfaces();
        java.lang.String[] strArray47 = classReader24.getInterfaces();
        int int48 = classReader24.header;
        short short50 = classReader24.readShort(27);
        int int51 = classReader24.getAccess();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 103 + "'", int28 == 103);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 103 + "'", int48 == 103);
        org.junit.Assert.assertTrue("'" + short50 + "' != '" + (short) 2387 + "'", short50 == (short) 2387);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 52 + "'", int51 == 52);
    }

    @Test
    public void test16970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16970");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str37 = classReader20.getClassName();
        int int39 = classReader20.readInt(28);
        java.lang.String str40 = classReader20.getSuperName();
        java.lang.String[] strArray41 = classReader20.getInterfaces();
        int int43 = classReader20.getItem(7);
        int int45 = classReader20.readByte(10);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = classReader20.getItem((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1399416686 + "'", int39 == 1399416686);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 51 + "'", int43 == 51);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test16971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16971");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor36.visitAnnotation("", true);
        fieldVisitor36.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = fieldVisitor36.visitAnnotation("", true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor43);
    }

    @Test
    public void test16972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16972");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        char[] charArray27 = null;
        java.lang.String str28 = classReader24.readClass(111, charArray27);
        int int30 = classReader24.readByte((int) (byte) 0);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 202 + "'", int30 == 202);
    }

    @Test
    public void test16973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16973");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        byte[] byteArray35 = classReader20.b;
        java.lang.String str36 = classReader20.getSuperName();
        java.lang.String[] strArray37 = classReader20.getInterfaces();
        int int38 = classReader20.header;
        java.lang.String[] strArray39 = classReader20.getInterfaces();
        int int41 = classReader20.readUnsignedShort((int) (short) 2);
        java.lang.String str42 = classReader20.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 73 + "'", int38 == 73);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 47806 + "'", int41 == 47806);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test16974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16974");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        java.lang.Object obj48 = null;
        org.mockito.asm.FieldVisitor fieldVisitor49 = classWriter1.visitField(115, "hi!", "\001", "\007\000", obj48);
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("\001", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(fieldVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor52);
    }

    @Test
    public void test16975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16975");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        int int5 = classWriter1.newField("", "", "hi!");
        int int7 = classWriter1.newClass("");
        int int9 = classWriter1.newClass("\007\000");
        classWriter1.visitOuterClass("", "", "\007\000");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) ' ');
        int int23 = classWriter19.newField("", "", "hi!");
        int int25 = classWriter19.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter19.visitAnnotation("", true);
        classWriter19.visitEnd();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        classWriter35.visitSource("hi!", "");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter35.visit((int) 'a', (int) '4', "", "hi!", "", strArray51);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter59.visitEnd();
        classWriter59.visitSource("hi!", "");
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter59.visit((int) 'a', (int) '4', "", "hi!", "", strArray75);
        classWriter35.visit((int) (byte) 1, 100, "", "hi!", "", strArray75);
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter19.visitMethod(13, "\001", "\001", "hi!", strArray75);
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter1.visitMethod(1869509376, "\007\000", "hi!", "\007\000", strArray75);
        org.mockito.asm.Label label81 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor79.visitJumpInsn(0, label81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(methodVisitor79);
    }

    @Test
    public void test16976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16976");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str37 = classReader20.getClassName();
        int int39 = classReader20.readInt(28);
        byte[] byteArray40 = classReader20.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray40, 134283267, 26913);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1399416686 + "'", int39 == 1399416686);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test16977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16977");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        java.lang.String[] strArray7 = classReader4.getInterfaces();
        java.lang.String str8 = classReader4.getSuperName();
        int int9 = classReader4.getAccess();
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader31.accept((org.mockito.asm.ClassVisitor) classWriter33, 8);
        int int37 = classReader31.readUnsignedShort((int) (short) 10);
        int int39 = classReader31.readInt(2);
        int int40 = classReader31.header;
        java.lang.String[] strArray41 = classReader31.getInterfaces();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader31, 14);
        short short45 = classReader31.readShort(14);
        int int46 = classReader31.header;
        int int47 = classReader31.header;
        char[] charArray52 = new char[] { '4', 'a', 'a' };
        java.lang.String str53 = classReader31.readUTF8(97, charArray52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj54 = classReader4.readConst(141, charArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 141");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 256 + "'", int37 == 256);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1161953280) + "'", int39 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 73 + "'", int40 == 73);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) 26913 + "'", short45 == (short) 26913);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 73 + "'", int46 == 73);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 73 + "'", int47 == 73);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "\007\000a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "\007\000a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[\007, \000, a]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\007\000" + "'", str53, "\007\000");
    }

    @Test
    public void test16978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16978");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn(202);
        methodVisitor69.visitMethodInsn(1919222016, "", "\007\000", "hi!");
        methodVisitor69.visitTypeInsn((int) (short) 8449, "hi!");
        methodVisitor69.visitInsn(1953854053);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test16979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16979");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        int int18 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray23, 20, 327680);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 12, 0, 2, 0, 2, 9, 0, 3, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 3, 104, 105, 33, 0, 9, 0, 0, 0, 4, 0, 6, 0, 4, 0, 10, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test16980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16980");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int29 = classReader20.header;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader20, 51966);
        int int32 = classReader20.getAccess();
        int int33 = classReader20.getAccess();
        int int34 = classReader20.getAccess();
        byte[] byteArray35 = classReader20.b;
        java.lang.String str36 = classReader20.getSuperName();
        java.lang.String str37 = classReader20.getSuperName();
        java.lang.String str38 = classReader20.getSuperName();
        java.lang.String[] strArray39 = classReader20.getInterfaces();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 73 + "'", int29 == 73);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strArray39);
    }

    @Test
    public void test16981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16981");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int8 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        byte[] byteArray17 = classWriter15.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter15.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        byte[] byteArray29 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        java.lang.String[] strArray31 = classReader30.getInterfaces();
        int int32 = classReader30.getAccess();
        int int34 = classReader30.readUnsignedShort(4);
        int int36 = classReader30.readByte(5);
        java.lang.String[] strArray37 = classReader30.getInterfaces();
        classWriter15.visit(2, (int) (short) -1, "", "", "hi!", strArray37);
        classWriter1.visit(5, (int) 'a', "hi!", "", "\007\000", strArray37);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("\001", "\001", "hi!", (int) (byte) 0);
        classWriter1.visitEnd();
        int int53 = classWriter1.newUTF8("");
        int int55 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("\001", "hi!", "\001");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
    }

    @Test
    public void test16982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16982");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) -1, (int) (byte) -1);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitVarInsn(7, (int) (short) -17730);
        methodVisitor69.visitIntInsn(20, (int) (short) -1);
        methodVisitor69.visitMethodInsn(51966, "\001", "hi!", "\007\000");
        methodVisitor69.visitFieldInsn(48640, "", "\001", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
    }

    @Test
    public void test16983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16983");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        byte[] byteArray44 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "hi!", 3);
        classWriter1.visitSource("\007\000", "");
        classWriter1.visitEnd();
        classWriter1.visitSource("\001", "hi!");
        classWriter1.visitOuterClass("", "\001", "");
        byte[] byteArray61 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray61, 65210, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 2, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 7, 0, 3, 0, 4, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 2, 0, 13, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 3, 7, -64, -128, 1, 0, 1, 1, 12, 0, 9, 0, 2, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 7, 0, 3, 0, 4, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 9, 0, 7, 0, 0, 0, 3, 104, 105, 33, 0, 11, 0, 0, 0, 4, 0, 3, 0, 10, 0, 12, 0, 0, 0, 10, 0, 1, 0, 4, 0, 3, 0, 1, 0, 3]");
    }

    @Test
    public void test16984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16984");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMethodInsn((int) (short) 0, "\007\000", "\007\000", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.Label label86 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(29813, label86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test16985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16985");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn(0, "hi!", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = annotationVisitor83.visitAnnotation("\007\000", "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test16986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16986");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        int int8 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", (-1));
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        java.lang.Object obj22 = null;
        org.mockito.asm.FieldVisitor fieldVisitor23 = classWriter1.visitField((int) '#', "\001", "\001", "\007\000", obj22);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = fieldVisitor23.visitAnnotation("", false);
        fieldVisitor23.visitEnd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(fieldVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test16987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16987");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn((int) '4');
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("", 2049);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test16988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16988");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-1), 5);
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        methodVisitor69.visitTryCatchBlock(label89, label90, label91, "\001");
        methodVisitor69.visitEnd();
        methodVisitor69.visitMethodInsn((int) (short) 2387, "\007\000", "\001", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test16989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16989");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "hi!");
        methodVisitor69.visitTypeInsn((-889275714), "\007\000");
        methodVisitor69.visitMethodInsn(20, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn((int) (short) 97);
        org.mockito.asm.Label label98 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test16990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16990");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int9 = classWriter1.newMethod("", "", "", true);
        java.lang.Object obj14 = null;
        org.mockito.asm.FieldVisitor fieldVisitor15 = classWriter1.visitField((int) '#', "", "hi!", "", obj14);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = fieldVisitor15.visitAnnotation("\007\000", false);
        fieldVisitor15.visitEnd();
        fieldVisitor15.visitEnd();
        org.mockito.asm.Attribute attribute21 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor15.visitAttribute(attribute21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor15);
        org.junit.Assert.assertNotNull(annotationVisitor18);
    }

    @Test
    public void test16991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16991");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        int int17 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitSource("", "\001");
        classWriter1.visitInnerClass("\007\000", "\001", "hi!", (-21316096));
        classWriter1.visitSource("", "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
    }

    @Test
    public void test16992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16992");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int11 = classWriter1.newField("", "", "");
        classWriter1.visitOuterClass("hi!", "", "\001");
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        classWriter22.visitSource("hi!", "");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter22.visit((int) 'a', (int) '4', "", "hi!", "", strArray38);
        byte[] byteArray40 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray40);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader42, 256);
        java.lang.String[] strArray45 = classReader42.getInterfaces();
        java.lang.String[] strArray46 = classReader42.getInterfaces();
        int int47 = classReader42.getAccess();
        long long49 = classReader42.readLong((int) ' ');
        java.lang.String[] strArray50 = classReader42.getInterfaces();
        classWriter1.visit((-1161953280), 8, "", "\001", "", strArray50);
        byte[] byteArray52 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter59.visitEnd();
        byte[] byteArray61 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        java.lang.String[] strArray63 = classReader62.getInterfaces();
        int int64 = classReader62.getAccess();
        int int66 = classReader62.readUnsignedShort(4);
        int int68 = classReader62.readByte(5);
        java.lang.String[] strArray69 = classReader62.getInterfaces();
        java.lang.String str70 = classReader62.getSuperName();
        java.lang.String str71 = classReader62.getSuperName();
        int int73 = classReader62.readByte((int) (byte) 0);
        java.lang.String[] strArray74 = classReader62.getInterfaces();
        classWriter1.visit(27, 16777216, "hi!", "\001", "hi!", strArray74);
        int int79 = classWriter1.newField("", "\007\000", "\007\000");
        org.mockito.asm.ClassWriter classWriter85 = new org.mockito.asm.ClassWriter(16);
        org.mockito.asm.FieldVisitor fieldVisitor86 = classWriter1.visitField(28533, "", "hi!", "", (java.lang.Object) 16);
        int int90 = classWriter1.newField("hi!", "\007\000", "\001");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 7022366853158731786L + "'", long49 == 7022366853158731786L);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, -70, -66, 0, 0, 0, 13, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 0, 7, 0, 4, 12, 0, 4, 0, 4, 9, 0, 5, 0, 6, 7, 0, 1, 1, 0, 1, 1, 12, 0, 4, 0, 9, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 8, 0, 5, 0, 5, 0, 6, 0, 8, 0, 5, 0, 8, 0, 8, 0, 8, 0, 5, 0, 0, 0, 0, 0, 4, 0, 11, 0, 0, 0, 2, 0, 9, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0, 0, 12, 0, 0, 0, 4, 0, 8, 0, 10]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 202 + "'", int73 == 202);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 15 + "'", int79 == 15);
        org.junit.Assert.assertNotNull(fieldVisitor86);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 18 + "'", int90 == 18);
    }

    @Test
    public void test16993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16993");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotationDefault();
        annotationVisitor80.visitEnum("\007\000", "\007\000", "\007\000");
        annotationVisitor80.visitEnum("\001", "hi!", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test16994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16994");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        methodVisitor69.visitIntInsn(65210, 256);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = annotationVisitor92.visitAnnotation("\001", "\001");
        annotationVisitor95.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test16995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16995");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        classWriter22.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter34.visitAnnotation("", true);
        classWriter34.visitSource("", "");
        classWriter34.visitOuterClass("hi!", "", "");
        int int48 = classWriter34.newField("", "hi!", "");
        classWriter34.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter59.visitEnd();
        byte[] byteArray61 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        java.lang.String[] strArray63 = classReader62.getInterfaces();
        int int65 = classReader62.readInt((int) (byte) 0);
        java.lang.String str66 = classReader62.getSuperName();
        java.lang.String[] strArray67 = classReader62.getInterfaces();
        java.lang.String[] strArray68 = classReader62.getInterfaces();
        classWriter34.visit(0, (int) (short) 0, "", "", "", strArray68);
        classWriter22.visit(51966, 73, "hi!", "\007\000", "", strArray68);
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter22.visitAnnotation("", false);
        byte[] byteArray74 = classWriter22.toByteArray();
        classWriter22.visitSource("hi!", "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-889275714) + "'", int65 == (-889275714));
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, -54, -2, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 3, 7, -64, -128, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 73, 0, 4, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 5, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test16996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16996");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("", false);
        annotationVisitor79.visitEnum("", "\007\000", "");
        annotationVisitor79.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
    }

    @Test
    public void test16997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16997");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn((int) (short) -326, "");
        methodVisitor69.visitIntInsn(11, (int) (short) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotation("\007\000", true);
        methodVisitor69.visitIincInsn(29813, 20);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test16998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16998");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitVarInsn(8, (-1));
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitFieldInsn(0, "", "hi!", "");
        methodVisitor69.visitIntInsn(196613, 202);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label label93 = null;
        methodVisitor69.visitTryCatchBlock(label91, label92, label93, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor98);
    }

    @Test
    public void test16999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test16999");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        byte[] byteArray8 = classReader7.b;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray8);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray8, 5203, 190);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
    }

    @Test
    public void test17000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest33.test17000");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        classWriter27.visitSource("hi!", "");
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter27.visit((int) 'a', (int) '4', "", "hi!", "", strArray43);
        byte[] byteArray45 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader46.accept((org.mockito.asm.ClassVisitor) classWriter48, 8);
        byte[] byteArray51 = classWriter48.toByteArray();
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter58.visitEnd();
        byte[] byteArray60 = classWriter58.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray60);
        int int63 = classReader62.getAccess();
        int int64 = classReader62.header;
        java.lang.String[] strArray65 = classReader62.getInterfaces();
        classWriter48.visit((int) (short) 0, 9, "", "", "", strArray65);
        classWriter1.visit((int) (short) -1, 14, "\007\000", "hi!", "\007\000", strArray65);
        int int69 = classWriter1.newUTF8("");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter76.visitEnd();
        byte[] byteArray78 = classWriter76.toByteArray();
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray78);
        int int81 = classReader79.readUnsignedShort((int) (short) 0);
        java.lang.String str82 = classReader79.getSuperName();
        short short84 = classReader79.readShort(5);
        java.lang.String[] strArray85 = classReader79.getInterfaces();
        classWriter1.visit(1792, 1792, "", "hi!", "hi!", strArray85);
        classWriter1.visitOuterClass("", "", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = classWriter1.visitAnnotation("hi!", false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 51966 + "'", int81 == 51966);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + short84 + "' != '" + (short) 0 + "'", short84 == (short) 0);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }
}


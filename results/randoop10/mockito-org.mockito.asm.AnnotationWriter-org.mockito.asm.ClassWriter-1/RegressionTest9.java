import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test04501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04501");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int8 = classWriter1.newNameType("hi!", "");
        classWriter1.visitInnerClass("\007\000", "", "hi!", 202);
        byte[] byteArray14 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray14);
        java.lang.String[] strArray16 = classReader15.getInterfaces();
        java.lang.String[] strArray17 = classReader15.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = classReader15.readLong((-1107296256));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 10, 0, 1, 0, 5, 0, 6, 0, 2, 0, -54]");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
    }

    @Test
    public void test04502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04502");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int38 = classWriter28.newUTF8("");
        classWriter28.visitSource("\007\000", "");
        classWriter28.visitInnerClass("\001", "\007\000", "\001", 26913);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test04503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04503");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        methodVisitor69.visitTypeInsn(202, "hi!");
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\001", "\007\000", "\001", label88, label89, (int) (short) 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04504");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String[] strArray37 = classReader20.getInterfaces();
        int int39 = classReader20.readUnsignedShort(28);
        int int41 = classReader20.readInt(14);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21353 + "'", int39 == 21353);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1763770624 + "'", int41 == 1763770624);
    }

    @Test
    public void test04505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04505");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(65536);
    }

    @Test
    public void test04506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04506");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitIincInsn(48640, (int) (byte) 100);
        methodVisitor69.visitIincInsn(1, 100);
        methodVisitor69.visitVarInsn(119, 119);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label label88 = null;
        methodVisitor69.visitTryCatchBlock(label86, label87, label88, "\007\000");
        methodVisitor69.visitTypeInsn(14, "");
        methodVisitor69.visitInsn(57174305);
        java.lang.Object obj96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLdcInsn(obj96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04507");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitTypeInsn(13, "hi!");
        methodVisitor69.visitVarInsn(83886080, 4);
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04508");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray4);
        int int7 = classReader5.readUnsignedShort((int) (short) 1);
        int int9 = classReader5.readInt(0);
        byte[] byteArray10 = classReader5.b;
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray10);
        java.lang.String str12 = classReader11.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = classReader11.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-889275714) + "'", int9 == (-889275714));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04509");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit((int) (byte) 1, 100, "", "hi!", "", strArray41);
        classWriter1.visitInnerClass("", "", "", (int) '#');
        int int53 = classWriter1.newMethod("", "hi!", "\007\000", true);
        classWriter1.visitSource("", "\007\000");
        java.lang.String[] strArray61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor62 = classWriter1.visitMethod(1869509376, "hi!", "hi!", "", strArray61);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
    }

    @Test
    public void test04510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04510");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader35, 196613);
        // The following exception was thrown during execution in test generation
        try {
            short short39 = classReader35.readShort(186);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 186");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
    }

    @Test
    public void test04511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04511");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitVarInsn(6, 1);
        methodVisitor69.visitMultiANewArrayInsn("", 256);
        methodVisitor69.visitIincInsn(6, (-889275714));
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(512, label96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04512");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        java.lang.String[] strArray24 = classReader21.getInterfaces();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        short short28 = classReader21.readShort((int) (byte) 1);
        java.lang.String str29 = classReader21.getClassName();
        int int30 = classReader21.header;
        int int32 = classReader21.readInt(11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -326 + "'", short28 == (short) -326);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 73 + "'", int30 == 73);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 223337 + "'", int32 == 223337);
    }

    @Test
    public void test04513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04513");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray3, (int) (byte) -1, 100);
        int int7 = classReader6.header;
        int int9 = classReader6.readInt(9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = classReader6.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16777216 + "'", int9 == 16777216);
    }

    @Test
    public void test04514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04514");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int8 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        byte[] byteArray17 = classWriter15.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter15.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        byte[] byteArray29 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        java.lang.String[] strArray31 = classReader30.getInterfaces();
        int int32 = classReader30.getAccess();
        int int34 = classReader30.readUnsignedShort(4);
        int int36 = classReader30.readByte(5);
        java.lang.String[] strArray37 = classReader30.getInterfaces();
        classWriter15.visit(2, (int) (short) -1, "", "", "hi!", strArray37);
        classWriter1.visit(5, (int) 'a', "hi!", "", "\007\000", strArray37);
        classWriter1.visitEnd();
        java.lang.Class<?> wildcardClass41 = classWriter1.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test04515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04515");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitIincInsn(48640, (int) (byte) 100);
        methodVisitor69.visitIincInsn(1, 100);
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        methodVisitor69.visitIntInsn((int) (byte) 1, 16778088);
        methodVisitor69.visitMethodInsn((-21316096), "\001", "hi!", "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04516");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(47806, (int) (short) 0);
        methodVisitor69.visitIntInsn(254, 6);
        methodVisitor69.visitMaxs(5, 73);
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(47806, "hi!", "", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test04517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04517");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        int int8 = classWriter1.newUTF8("");
        int int11 = classWriter1.newNameType("", "\007\000");
        classWriter1.visitInnerClass("", "", "\007\000", 100);
        classWriter1.visitSource("\007\000", "");
        org.mockito.asm.Attribute attribute20 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test04518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04518");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        classWriter1.visitInnerClass("", "", "", 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = annotationVisitor24.visitArray("");
        annotationVisitor26.visitEnd();
        annotationVisitor26.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test04519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04519");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        byte[] byteArray32 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        java.lang.String[] strArray34 = classReader33.getInterfaces();
        int int35 = classReader33.getAccess();
        int int37 = classReader33.readUnsignedShort(4);
        int int39 = classReader33.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter24.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray48 = new java.lang.String[] { "", "hi!" };
        classWriter24.visit((int) (byte) 10, (-1), "", "", "", strArray48);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("hi!", "");
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter55.visit((int) 'a', (int) '4', "", "hi!", "", strArray71);
        byte[] byteArray73 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray73);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader74.accept((org.mockito.asm.ClassVisitor) classWriter76, 8);
        long long80 = classReader74.readLong(7);
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter82.visitAnnotation("", true);
        int int88 = classWriter82.newNameType("hi!", "hi!");
        classReader74.accept((org.mockito.asm.ClassVisitor) classWriter82, (int) (byte) 0);
        java.lang.String[] strArray91 = classReader74.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor92 = classWriter24.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray91);
        classWriter1.visit(8, 0, "hi!", "", "", strArray91);
        byte[] byteArray94 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader97 = new org.mockito.asm.ClassReader(byteArray94, 13, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor40);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 6989595422067222633L + "'", long80 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(methodVisitor92);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-54, -2, -70, -66, 0, 0, 0, 8, 0, 11, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 3, 0, 4, 0, 6, 0, 3, 0, 4, 0, 3, 0, 3, 0, 3, 0, 4, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 2, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 3, 0, 4, 0, 2, 0, 2, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 10, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04520");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn(0, "hi!", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.Label label84 = null;
        int[] intArray87 = new int[] { (short) 2049, (short) -16896 };
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label[] labelArray89 = new org.mockito.asm.Label[] { label88 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label84, intArray87, labelArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[2049, -16896]");
        org.junit.Assert.assertNotNull(labelArray89);
    }

    @Test
    public void test04521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04521");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray27);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader28, (int) (short) 1);
        classWriter30.visitInnerClass("\001", "\007\000", "", 47806);
        int int39 = classWriter30.newField("", "", "\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 14 + "'", int39 == 14);
    }

    @Test
    public void test04522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04522");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        int int32 = classWriter26.newNameType("", "\007\000");
        int int37 = classWriter26.newMethod("", "\007\000", "", true);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter43.visitAnnotation("", true);
        int int49 = classWriter43.newNameType("hi!", "hi!");
        int int51 = classWriter43.newUTF8("hi!");
        classWriter43.visitOuterClass("", "", "");
        classWriter43.visitOuterClass("", "hi!", "");
        classWriter43.visitInnerClass("\001", "hi!", "\001", (int) (short) 24832);
        classWriter43.visitInnerClass("", "\001", "\001", 3);
        classWriter43.visitSource("", "\007\000");
        int int77 = classWriter43.newMethod("\007\000", "", "", true);
        org.mockito.asm.FieldVisitor fieldVisitor78 = classWriter26.visitField(0, "hi!", "", "\007\000", (java.lang.Object) "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 12 + "'", int77 == 12);
        org.junit.Assert.assertNotNull(fieldVisitor78);
    }

    @Test
    public void test04523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04523");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        methodVisitor69.visitIntInsn(3, 65210);
        methodVisitor69.visitIntInsn(1, 119);
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn((int) (byte) 100, label95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04524");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        byte[] byteArray8 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray8);
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray8);
        byte[] byteArray11 = classReader10.b;
        byte[] byteArray12 = classReader10.b;
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(classReader10, (int) (short) 26978);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader10.getItem(88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 88");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
    }

    @Test
    public void test04525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04525");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        int int10 = classReader4.readByte(14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = classReader4.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test04526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04526");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        int int31 = classWriter26.newClass("\007\000");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        byte[] byteArray55 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader56.accept((org.mockito.asm.ClassVisitor) classWriter58, 8);
        long long62 = classReader56.readLong(7);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = classWriter64.visitAnnotation("", true);
        int int70 = classWriter64.newNameType("hi!", "hi!");
        classReader56.accept((org.mockito.asm.ClassVisitor) classWriter64, (int) (byte) 0);
        java.lang.String str73 = classReader56.getClassName();
        int int75 = classReader56.readInt(28);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = classWriter77.visitAnnotation("", true);
        int int83 = classWriter77.newNameType("hi!", "hi!");
        int int87 = classWriter77.newField("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = classWriter77.visitAnnotation("hi!", true);
        classReader56.accept((org.mockito.asm.ClassVisitor) classWriter77, (int) (short) 3);
        java.lang.String[] strArray93 = classReader56.getInterfaces();
        byte[] byteArray94 = classReader56.b;
        java.lang.String[] strArray95 = classReader56.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor96 = classWriter26.visitMethod(1025, "\001", "\007\000", "hi!", strArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 6989595422067222633L + "'", long62 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1399416686 + "'", int75 == 1399416686);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 5 + "'", int87 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray95);
    }

    @Test
    public void test04527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04527");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        classWriter7.visitSource("hi!", "");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter7.visit((int) 'a', (int) '4', "", "hi!", "", strArray23);
        byte[] byteArray25 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter28, 8);
        int int32 = classReader26.readUnsignedShort((int) (short) 10);
        int int34 = classReader26.readInt(2);
        int int35 = classReader26.header;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter1.visitMethod(1751720193, "\007\000", "hi!", "hi!", strArray36);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        byte[] byteArray41 = classWriter39.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter39.visitAnnotation("", true);
        classWriter39.visitOuterClass("", "", "hi!");
        int int53 = classWriter39.newMethod("", "hi!", "hi!", true);
        int int55 = classWriter39.newUTF8("hi!");
        classWriter39.visitEnd();
        int int58 = classWriter39.newClass("");
        int int63 = classWriter39.newMethod("\007\000", "", "\007\000", true);
        classWriter39.visitOuterClass("", "", "\007\000");
        methodVisitor37.visitLdcInsn((java.lang.Object) "");
        org.mockito.asm.Label label70 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor37.visitJumpInsn(28526, label70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 256 + "'", int32 == 256);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1161953280) + "'", int34 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 73 + "'", int35 == 73);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodVisitor37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
    }

    @Test
    public void test04528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04528");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray7);
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray7);
        int int11 = classReader9.readUnsignedShort((int) (byte) 1);
        int int12 = classReader9.header;
        // The following exception was thrown during execution in test generation
        try {
            int int14 = classReader9.readByte(1869509376);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1869509376");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 65210 + "'", int11 == 65210);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    }

    @Test
    public void test04529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04529");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        int int5 = classWriter1.newField("", "", "hi!");
        int int7 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("", true);
        classWriter1.visitEnd();
        int int14 = classWriter1.newNameType("\007\000", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "hi!", (int) (short) 1280);
        classWriter1.visitSource("hi!", "\001");
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute24 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 9, 0, 2, 0, 4, 1, 0, 3, 7, -64, -128, 12, 0, 6, 0, 3, 7, 0, 3, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 3, 0, 10, 0, 0, 0, 1, 1, 0, 11, 0, 0, 0, 10, 0, 1, 0, 8, 0, 8, 0, 3, 5, 0, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04530");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        classWriter36.visitSource("hi!", "");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter36.visit((int) 'a', (int) '4', "", "hi!", "", strArray52);
        byte[] byteArray54 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray54);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(classReader56, 256);
        int int59 = classReader56.header;
        int int61 = classReader56.readInt(11);
        java.lang.String str62 = classReader56.getClassName();
        java.lang.String[] strArray63 = classReader56.getInterfaces();
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter66.visitEnd();
        classWriter66.visitSource("hi!", "");
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter66.visit((int) 'a', (int) '4', "", "hi!", "", strArray82);
        byte[] byteArray84 = classWriter66.toByteArray();
        org.mockito.asm.ClassReader classReader85 = new org.mockito.asm.ClassReader(byteArray84);
        org.mockito.asm.ClassWriter classWriter87 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader85.accept((org.mockito.asm.ClassVisitor) classWriter87, 8);
        char[] charArray96 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj97 = classReader85.readConst((int) (short) 1, charArray96);
        java.lang.Object obj98 = classReader56.readConst(1, charArray96);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = classReader20.readUTF8((int) ' ', charArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 73 + "'", int59 == 73);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 223337 + "'", int61 == 223337);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray96);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray96), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray96), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray96), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj97 + "' != '" + "\007\000" + "'", obj97, "\007\000");
        org.junit.Assert.assertEquals("'" + obj98 + "' != '" + "\007\000" + "'", obj98, "\007\000");
    }

    @Test
    public void test04531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04531");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        int int13 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("hi!", "", "", 1919222016);
        classWriter1.visitEnd();
        byte[] byteArray21 = classWriter1.toByteArray();
        int int24 = classWriter1.newNameType("", "\001");
        classWriter1.visitSource("hi!", "\007\000");
        classWriter1.visitSource("", "\001");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 7, 0, 0, 0, 10, 0, 1, 0, 6, 0, 2, 0, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
    }

    @Test
    public void test04532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04532");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray4);
        int int7 = classReader5.readUnsignedShort((int) (short) 1);
        int int9 = classReader5.readInt(0);
        int int10 = classReader5.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader5.readUnsignedShort(872);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 872");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-889275714) + "'", int9 == (-889275714));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test04533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04533");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader20.readByte((-21316096));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -21316096");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
    }

    @Test
    public void test04534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04534");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitFieldInsn(103, "", "\001", "");
        methodVisitor69.visitFieldInsn(1025, "", "hi!", "");
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        org.mockito.asm.Label label96 = null;
        methodVisitor69.visitTryCatchBlock(label94, label95, label96, "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test04535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04535");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        byte[] byteArray8 = classReader7.b;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray8);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter11.visitEnd();
        classWriter11.visitSource("hi!", "");
        classWriter11.visitEnd();
        classWriter11.visitEnd();
        byte[] byteArray18 = classWriter11.toByteArray();
        classWriter11.visitOuterClass("", "", "\007\000");
        int int26 = classWriter11.newField("\001", "hi!", "\001");
        // The following exception was thrown during execution in test generation
        try {
            classReader9.accept((org.mockito.asm.ClassVisitor) classWriter11, (int) (short) 24948);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
    }

    @Test
    public void test04536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04536");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", true);
        java.lang.Class<?> wildcardClass17 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test04537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04537");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str37 = classReader20.getClassName();
        int int39 = classReader20.readUnsignedShort(12);
        java.lang.Class<?> wildcardClass40 = classReader20.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 872 + "'", int39 == 872);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test04538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04538");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        classWriter62.visitSource("hi!", "");
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter62.visit((int) 'a', (int) '4', "", "hi!", "", strArray78);
        classWriter62.visitInnerClass("hi!", "", "", (int) 'a');
        classWriter62.visitSource("hi!", "");
        classWriter62.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            int int89 = classWriter1.newConst((java.lang.Object) classWriter62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@2c2da57a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test04539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04539");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        int int9 = classReader4.readUnsignedShort(0);
        int int10 = classReader4.header;
        byte[] byteArray11 = classReader4.b;
        int int12 = classReader4.header;
        java.lang.String str13 = classReader4.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = classReader4.readLong(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51966 + "'", int9 == 51966);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test04540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04540");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        methodVisitor69.visitTypeInsn((int) (byte) 1, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotation("hi!", false);
        org.mockito.asm.Label label96 = null;
        org.mockito.asm.Label label97 = null;
        org.mockito.asm.Label[] labelArray98 = new org.mockito.asm.Label[] { label97 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn((int) (short) 24948, (int) (short) 2, label96, labelArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor93);
        org.junit.Assert.assertNotNull(labelArray98);
    }

    @Test
    public void test04541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04541");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitIntInsn(151060483, (-21316096));
        org.mockito.asm.Label label83 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(186, label83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04542");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("", false);
        int int23 = classWriter1.newUTF8("");
        classWriter1.visitInnerClass("", "hi!", "", 2);
        classWriter1.visitEnd();
        byte[] byteArray30 = classWriter1.toByteArray();
        int int34 = classWriter1.newField("\007\000", "\001", "");
        classWriter1.visitOuterClass("\001", "hi!", "hi!");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 7, 0, 3, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 8, 0, 0, 0, 4, 0, 2, 0, 4, 0, 9, 0, 0, 0, 10, 0, 1, 0, 2, 0, 7, 0, 1, 0, 2, 0, 10, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 11, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
    }

    @Test
    public void test04543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04543");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute4 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04544");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "hi!");
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        java.lang.String str34 = classReader32.getSuperName();
        long long36 = classReader32.readLong((int) (byte) 0);
        java.lang.String[] strArray37 = classReader32.getInterfaces();
        classWriter1.visit(83886080, 9, "\007\000", "", "hi!", strArray37);
        int int40 = classWriter1.newUTF8("hi!");
        classWriter1.visitSource("\007\000", "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3819410108757049344L) + "'", long36 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test04545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04545");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMaxs(13, (int) (short) -1);
        methodVisitor69.visitTypeInsn(4, "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter92 = new org.mockito.asm.ClassWriter(100);
        classWriter92.visitSource("hi!", "");
        byte[] byteArray96 = classWriter92.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLdcInsn((java.lang.Object) byteArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@48431e79");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
    }

    @Test
    public void test04546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04546");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitMultiANewArrayInsn("hi!", 12);
        methodVisitor69.visitVarInsn(1919222016, 0);
        methodVisitor69.visitVarInsn((int) (short) 0, 5);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor69.visitParameterAnnotation(132864, "hi!", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04547");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        methodVisitor69.visitMaxs(256, 9);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitInsn(17);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor69.visitParameterAnnotation((int) (byte) 1, "\001", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test04548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04548");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray3, (int) (short) 3, (int) (short) -326);
        int int7 = classReader6.header;
        byte[] byteArray8 = classReader6.b;
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter11.visitEnd();
        classWriter11.visitSource("hi!", "");
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter11.visit((int) 'a', (int) '4', "", "hi!", "", strArray27);
        byte[] byteArray29 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray29);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader31, 256);
        int int34 = classReader31.header;
        int int36 = classReader31.readInt(11);
        java.lang.String str37 = classReader31.getClassName();
        java.lang.String[] strArray38 = classReader31.getInterfaces();
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter41.visitEnd();
        classWriter41.visitSource("hi!", "");
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter41.visit((int) 'a', (int) '4', "", "hi!", "", strArray57);
        byte[] byteArray59 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader60.accept((org.mockito.asm.ClassVisitor) classWriter62, 8);
        char[] charArray71 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj72 = classReader60.readConst((int) (short) 1, charArray71);
        java.lang.Object obj73 = classReader31.readConst(1, charArray71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = classReader6.readClass(256, charArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 13 + "'", int7 == 13);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 223337 + "'", int36 == 223337);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + "\007\000" + "'", obj72, "\007\000");
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + "\007\000" + "'", obj73, "\007\000");
    }

    @Test
    public void test04549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04549");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int19 = classWriter14.newMethod("", "", "hi!", false);
        classWriter14.visitEnd();
        int int22 = classWriter14.newClass("");
        int int24 = classWriter14.newUTF8("\007\000");
        byte[] byteArray25 = classWriter14.toByteArray();
        int int29 = classWriter14.newField("", "\007\000", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter14.visitAnnotation("\007\000", true);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = classWriter1.newConst((java.lang.Object) classWriter14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@71fdec75");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 1, 0, 3, 7, -64, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test04550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04550");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitTypeInsn(13, "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn((int) (short) 256, 83886080);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMethodInsn((int) (short) 2, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(1763770624, "hi!", "\001", "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test04551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04551");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitTypeInsn(13, "hi!");
        org.mockito.asm.Label label76 = null;
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        methodVisitor69.visitTryCatchBlock(label76, label77, label78, "");
        org.mockito.asm.Label label81 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04552");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "", "", (int) ' ');
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        classWriter38.visitSource("hi!", "");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter38.visit((int) 'a', (int) '4', "", "hi!", "", strArray54);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        classWriter62.visitSource("hi!", "");
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter62.visit((int) 'a', (int) '4', "", "hi!", "", strArray78);
        classWriter38.visit((int) (byte) 1, 100, "", "hi!", "", strArray78);
        classWriter26.visit((int) '4', (int) (short) 100, "", "", "", strArray78);
        classWriter1.visit((int) '#', (int) (short) 0, "", "", "", strArray78);
        classWriter1.visitInnerClass("hi!", "", "", (int) (byte) 0);
        classWriter1.visitEnd();
        int int93 = classWriter1.newMethod("hi!", "", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor96 = classWriter1.visitAnnotation("hi!", true);
        annotationVisitor96.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 8 + "'", int93 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor96);
    }

    @Test
    public void test04553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04553");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", false);
        classWriter1.visitOuterClass("hi!", "hi!", "\007\000");
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter24.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        classWriter33.visitSource("hi!", "");
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter33.visit((int) 'a', (int) '4', "", "hi!", "", strArray49);
        byte[] byteArray51 = classWriter33.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter33.visitAnnotation("", false);
        byte[] byteArray55 = classWriter33.toByteArray();
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter61.visitEnd();
        byte[] byteArray63 = classWriter61.toByteArray();
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray63);
        java.lang.String[] strArray65 = classReader64.getInterfaces();
        short short67 = classReader64.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor68 = classWriter33.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = fieldVisitor68.visitAnnotation("", true);
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter24.visitField(4, "hi!", "hi!", "hi!", (java.lang.Object) true);
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter79.visitEnd();
        byte[] byteArray81 = classWriter79.toByteArray();
        org.mockito.asm.ClassReader classReader82 = new org.mockito.asm.ClassReader(byteArray81);
        java.lang.String[] strArray83 = classReader82.getInterfaces();
        int int85 = classReader82.readInt((int) (byte) 0);
        java.lang.String str86 = classReader82.getSuperName();
        java.lang.String[] strArray87 = classReader82.getInterfaces();
        classWriter24.visit(47806, (int) '4', "", "", "hi!", strArray87);
        classWriter1.visit((int) (short) 1792, 11, "", "\007\000", "hi!", strArray87);
        int int93 = classWriter1.newField("", "hi!", "");
        int int97 = classWriter1.newField("", "", "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + short67 + "' != '" + (short) -326 + "'", short67 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-889275714) + "'", int85 == (-889275714));
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 8 + "'", int93 == 8);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 10 + "'", int97 == 10);
    }

    @Test
    public void test04554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04554");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getClassName();
        short short30 = classReader24.readShort((int) (short) 10);
        byte[] byteArray31 = classReader24.b;
        java.lang.String[] strArray32 = classReader24.getInterfaces();
        byte[] byteArray33 = classReader24.b;
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        classWriter35.visitSource("hi!", "");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter35.visit((int) 'a', (int) '4', "", "hi!", "", strArray51);
        byte[] byteArray53 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader54.accept((org.mockito.asm.ClassVisitor) classWriter56, 8);
        classWriter56.visitOuterClass("hi!", "hi!", "");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter56, 341012341);
        int int68 = classWriter56.newField("\001", "", "hi!");
        org.mockito.asm.Attribute attribute69 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter56.visitAttribute(attribute69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 256 + "'", short30 == (short) 256);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
    }

    @Test
    public void test04555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04555");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(52);
        methodVisitor69.visitMethodInsn(6, "\007\000", "\007\000", "\007\000");
        org.mockito.asm.Label label88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04556");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(7);
        methodVisitor69.visitFieldInsn(9, "hi!", "", "");
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        methodVisitor69.visitTryCatchBlock(label90, label91, label92, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = methodVisitor69.visitAnnotation("\001", true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test04557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04557");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        classWriter38.visitSource("hi!", "");
        classWriter38.visitEnd();
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        classWriter38.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter38.visitAnnotation("hi!", true);
        classWriter38.visitEnd();
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, 1751720193);
        int int59 = classReader20.readByte((int) (byte) 0);
        long long61 = classReader20.readLong(17);
        java.lang.Class<?> wildcardClass62 = classReader20.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 202 + "'", int59 == 202);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 7696615407617L + "'", long61 == 7696615407617L);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test04558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04558");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        methodVisitor69.visitTypeInsn(114, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("\001", false);
        org.mockito.asm.Label label88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test04559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04559");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        classWriter22.visitSource("hi!", "");
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter22.visit((int) 'a', (int) '4', "", "hi!", "", strArray38);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter46.visitEnd();
        classWriter46.visitSource("hi!", "");
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter46.visit((int) 'a', (int) '4', "", "hi!", "", strArray62);
        classWriter22.visit((int) (byte) 1, 100, "", "hi!", "", strArray62);
        classWriter1.visit((int) '#', (int) (short) -326, "hi!", "hi!", "", strArray62);
        int int68 = classWriter1.newNameType("", "");
        classWriter1.visitOuterClass("hi!", "\001", "\001");
        org.mockito.asm.Attribute attribute73 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
    }

    @Test
    public void test04560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04560");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int25 = classReader24.getAccess();
        java.lang.String[] strArray26 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        classWriter29.visitSource("hi!", "");
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter29.visit((int) 'a', (int) '4', "", "hi!", "", strArray45);
        byte[] byteArray47 = classWriter29.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter29.visitAnnotation("", false);
        byte[] byteArray51 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray51);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(classReader52, 2);
        byte[] byteArray55 = classReader52.b;
        java.lang.String str56 = classReader52.getSuperName();
        java.lang.String[] strArray57 = classReader52.getInterfaces();
        int int58 = classReader52.header;
        char[] charArray64 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str65 = classReader52.readUTF8(20, charArray64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = classReader24.readClass(33554688, charArray64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 103 + "'", int58 == 103);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test04561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04561");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter13.visitAnnotation("", true);
        classWriter13.visitSource("", "");
        classWriter13.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor28 = classWriter13.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter13.visitOuterClass("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(100, "", "hi!", "", (java.lang.Object) "");
        fieldVisitor33.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor33.visitAnnotation("hi!", true);
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor33.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(fieldVisitor28);
        org.junit.Assert.assertNotNull(fieldVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test04562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04562");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        int int30 = classWriter22.newNameType("\007\000", "\007\000");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter37.visitAnnotation("", true);
        classWriter37.visitSource("", "");
        classWriter37.visitOuterClass("hi!", "", "");
        int int51 = classWriter37.newField("", "hi!", "");
        classWriter37.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        byte[] byteArray64 = classWriter62.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        java.lang.String[] strArray66 = classReader65.getInterfaces();
        int int68 = classReader65.readInt((int) (byte) 0);
        java.lang.String str69 = classReader65.getSuperName();
        java.lang.String[] strArray70 = classReader65.getInterfaces();
        java.lang.String[] strArray71 = classReader65.getInterfaces();
        classWriter37.visit(0, (int) (short) 0, "", "", "", strArray71);
        classWriter22.visit((int) (short) -1, 28, "\007\000", "\001", "", strArray71);
        org.mockito.asm.Attribute attribute74 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter22.visitAttribute(attribute74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-889275714) + "'", int68 == (-889275714));
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
    }

    @Test
    public void test04563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04563");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str37 = classReader20.getClassName();
        java.lang.String str38 = classReader20.getSuperName();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter52.visitEnd();
        classWriter52.visitSource("hi!", "");
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter52.visit((int) 'a', (int) '4', "", "hi!", "", strArray68);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter76.visitEnd();
        classWriter76.visitSource("hi!", "");
        java.lang.String[] strArray92 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter76.visit((int) 'a', (int) '4', "", "hi!", "", strArray92);
        classWriter52.visit((int) (byte) 1, 100, "", "hi!", "", strArray92);
        classWriter40.visit((int) '4', (int) (short) 100, "", "", "", strArray92);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter40, 11);
        int int99 = classReader20.readInt(17);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1792 + "'", int99 == 1792);
    }

    @Test
    public void test04564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04564");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        methodVisitor69.visitIntInsn(48640, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = annotationVisitor91.visitAnnotation("\001", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor96 = annotationVisitor94.visitArray("hi!");
        annotationVisitor96.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertNotNull(annotationVisitor94);
        org.junit.Assert.assertNotNull(annotationVisitor96);
    }

    @Test
    public void test04565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04565");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newNameType("hi!", "hi!");
        int int15 = classWriter1.newMethod("hi!", "hi!", "hi!", true);
        int int17 = classWriter1.newClass("");
        byte[] byteArray18 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 7, 0, 2, 11, 0, 4, 0, 3, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04566");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitIincInsn(256, (int) '4');
        methodVisitor69.visitMaxs(4, 47806);
        org.mockito.asm.Attribute attribute82 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04567");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMaxs((int) (byte) 1, (-1161953280));
        methodVisitor69.visitIntInsn((int) (short) -1, 132864);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("", false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitParameterAnnotation(16778088, "\007\000", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test04568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04568");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        int int7 = classReader4.header;
        int int9 = classReader4.readByte((int) (byte) 1);
        int int10 = classReader4.header;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader4.readByte(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 254 + "'", int9 == 254);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test04569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04569");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitIntInsn((int) ' ', (int) (byte) 0);
        methodVisitor69.visitMaxs(6, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test04570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04570");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        int int22 = classWriter1.newNameType("", "\007\000");
        byte[] byteArray23 = classWriter1.toByteArray();
        int int25 = classWriter1.newUTF8("\007\000");
        int int27 = classWriter1.newUTF8("");
        org.mockito.asm.Attribute attribute28 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 3, 7, -64, -128, 12, 0, 1, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 3, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 4, 0, 2, 0, 4, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test04571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04571");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        int int8 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", (-1));
        int int15 = classWriter1.newUTF8("");
        int int17 = classWriter1.newUTF8("");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test04572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04572");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn((int) (short) -326, "");
        methodVisitor69.visitIntInsn(11, (int) (short) 0);
        methodVisitor69.visitEnd();
        methodVisitor69.visitIincInsn(16778088, 65210);
        org.mockito.asm.Label label88 = null;
        int[] intArray92 = new int[] { (short) 1, 65210, (byte) 100 };
        org.mockito.asm.Label[] labelArray93 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label88, intArray92, labelArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[1, 65210, 100]");
        org.junit.Assert.assertNotNull(labelArray93);
    }

    @Test
    public void test04573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04573");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        int int8 = classWriter1.newUTF8("");
        int int11 = classWriter1.newNameType("", "\007\000");
        classWriter1.visitInnerClass("", "", "\007\000", 100);
        classWriter1.visitInnerClass("hi!", "\007\000", "hi!", 16779008);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        classWriter27.visitSource("hi!", "");
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter27.visit((int) 'a', (int) '4', "", "hi!", "", strArray43);
        byte[] byteArray45 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray45);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(classReader47, 256);
        java.lang.String[] strArray50 = classReader47.getInterfaces();
        java.lang.String[] strArray51 = classReader47.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor52 = classWriter1.visitMethod((int) (byte) 0, "\001", "", "\001", strArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
    }

    @Test
    public void test04574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04574");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label72 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(0, label72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04575");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitEnd();
        byte[] byteArray29 = classWriter22.toByteArray();
        org.mockito.asm.Attribute attribute30 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter22.visitAttribute(attribute30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test04576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04576");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        classWriter1.visitOuterClass("", "", "");
        int int62 = classWriter1.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter1.visitAnnotation("\001", true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor65);
    }

    @Test
    public void test04577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04577");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        int int18 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitOuterClass("", "", "hi!");
        int int26 = classWriter1.newField("\007\000", "\007\000", "hi!");
        int int28 = classWriter1.newUTF8("\007\000");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
    }

    @Test
    public void test04578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04578");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitSource("", "");
        int int26 = classWriter1.newNameType("hi!", "");
        classWriter1.visitOuterClass("\007\000", "", "");
        int int32 = classWriter1.newUTF8("\007\000");
        classWriter1.visitSource("", "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
    }

    @Test
    public void test04579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04579");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitEnd();
        int int19 = classWriter1.newField("\007\000", "\001", "hi!");
        classWriter1.visitOuterClass("\007\000", "", "\007\000");
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        classWriter29.visitSource("hi!", "");
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter29.visit((int) 'a', (int) '4', "", "hi!", "", strArray45);
        classWriter29.visitOuterClass("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter29.visitAnnotation("", false);
        annotationVisitor53.visitEnum("\001", "", "");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor58 = classWriter1.visitField(7, "\007\000", "\007\000", "\001", (java.lang.Object) annotationVisitor53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@3d545023");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(annotationVisitor53);
    }

    @Test
    public void test04580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04580");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter23.visitEnd();
        byte[] byteArray25 = classWriter23.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        java.lang.String[] strArray27 = classReader26.getInterfaces();
        int int28 = classReader26.getAccess();
        int int30 = classReader26.readUnsignedShort(4);
        int int32 = classReader26.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter17.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" };
        classWriter17.visit((int) (byte) 10, (-1), "", "", "", strArray41);
        classWriter1.visit(1, 65210, "", "hi!", "", strArray41);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        classWriter50.visitSource("hi!", "");
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter50.visit((int) 'a', (int) '4', "", "hi!", "", strArray66);
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter74.visitEnd();
        classWriter74.visitSource("hi!", "");
        java.lang.String[] strArray90 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter74.visit((int) 'a', (int) '4', "", "hi!", "", strArray90);
        classWriter50.visit((int) (byte) 1, 100, "", "hi!", "", strArray90);
        classWriter1.visit((int) (short) -326, 16777223, "", "hi!", "hi!", strArray90);
        org.mockito.asm.Attribute attribute94 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor33);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray90);
    }

    @Test
    public void test04581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04581");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        long long13 = classReader4.readLong((int) (byte) 0);
        byte[] byteArray14 = classReader4.b;
        byte[] byteArray15 = classReader4.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray15, (int) (short) -16896, 256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3819410108757049344L) + "'", long13 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04582");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute66 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(annotationVisitor64);
    }

    @Test
    public void test04583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04583");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        int int8 = classWriter1.newUTF8("hi!");
        classWriter1.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter14.visitEnd();
        byte[] byteArray16 = classWriter14.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter14.visitAnnotation("", true);
        classWriter14.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter14.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter14.visitAnnotation("hi!", false);
        annotationVisitor29.visitEnd();
        annotationVisitor29.visitEnum("\001", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = annotationVisitor29.visitArray("\007\000");
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classWriter1.newConst((java.lang.Object) annotationVisitor36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@429ffdf5");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor36);
    }

    @Test
    public void test04584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04584");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        int int6 = classReader4.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = classReader4.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test04585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04585");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("", "\007\000", "hi!", (int) (short) -1);
        classWriter1.visitOuterClass("hi!", "\007\000", "\007\000");
        int int72 = classWriter1.newNameType("\001", "\001");
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute74 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
    }

    @Test
    public void test04586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04586");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMaxs((int) (byte) 1, (-1161953280));
        methodVisitor69.visitIntInsn((int) (short) -1, 132864);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label label93 = null;
        org.mockito.asm.Label[] labelArray94 = new org.mockito.asm.Label[] { label93 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(16, 28526, label92, labelArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(labelArray94);
    }

    @Test
    public void test04587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04587");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String str23 = classReader22.getSuperName();
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter25.visitAnnotation("", true);
        int int33 = classWriter25.newMethod("", "", "", true);
        java.lang.Object obj38 = null;
        org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter25.visitField((int) '#', "", "hi!", "", obj38);
        classWriter25.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter25.visitAnnotation("hi!", false);
        classReader22.accept((org.mockito.asm.ClassVisitor) classWriter25, 48640);
        long long47 = classReader22.readLong(0);
        char[] charArray49 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = classReader22.readClass(51, charArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-3819410108757049247L) + "'", long47 == (-3819410108757049247L));
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
    }

    @Test
    public void test04588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04588");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        classWriter29.visitSource("", "");
        int int38 = classWriter29.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter29.visitAnnotation("", false);
        int int43 = classWriter29.newUTF8("hi!");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter29, (int) (short) -326);
        int int47 = classReader21.readInt(10);
        short short49 = classReader21.readShort(17);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 16778088 + "'", int47 == 16778088);
        org.junit.Assert.assertTrue("'" + short49 + "' != '" + (short) 0 + "'", short49 == (short) 0);
    }

    @Test
    public void test04589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04589");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(254, (int) ' ');
        methodVisitor69.visitInsn((int) (short) -1);
        methodVisitor69.visitInsn(83886080);
        methodVisitor69.visitTypeInsn(2, "\007\000");
        methodVisitor69.visitIntInsn(119, (int) (short) 26913);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test04590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04590");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitSource("hi!", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        byte[] byteArray24 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader25 = new org.mockito.asm.ClassReader(byteArray24);
        java.lang.String[] strArray26 = classReader25.getInterfaces();
        classWriter1.visit(151060483, (int) (short) 1280, "hi!", "", "", strArray26);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(12);
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField(196613, "", "\001", "\001", (java.lang.Object) 12);
        org.mockito.asm.Attribute attribute35 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor34.visitAttribute(attribute35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(fieldVisitor34);
    }

    @Test
    public void test04591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04591");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(47806, (int) (short) 0);
        methodVisitor69.visitIntInsn(254, 6);
        methodVisitor69.visitMaxs(5, 73);
        methodVisitor69.visitVarInsn((int) (byte) -1, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn(1751720193, 0);
        methodVisitor69.visitFieldInsn(16777223, "hi!", "\007\000", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test04592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04592");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(12, 202);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(8, label84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test04593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04593");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("\007\000", "", "hi!", (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        int int34 = classReader32.getAccess();
        int int36 = classReader32.readUnsignedShort(4);
        int int38 = classReader32.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter23.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!" };
        classWriter23.visit((int) (byte) 10, (-1), "", "", "", strArray47);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter54.visitEnd();
        classWriter54.visitSource("hi!", "");
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter54.visit((int) 'a', (int) '4', "", "hi!", "", strArray70);
        byte[] byteArray72 = classWriter54.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader73.accept((org.mockito.asm.ClassVisitor) classWriter75, 8);
        long long79 = classReader73.readLong(7);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = classWriter81.visitAnnotation("", true);
        int int87 = classWriter81.newNameType("hi!", "hi!");
        classReader73.accept((org.mockito.asm.ClassVisitor) classWriter81, (int) (byte) 0);
        java.lang.String[] strArray90 = classReader73.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor91 = classWriter23.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray90);
        int int92 = classWriter1.newConst((java.lang.Object) "hi!");
        classWriter1.visitInnerClass("hi!", "", "\007\000", 65536);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 6989595422067222633L + "'", long79 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(methodVisitor91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 7 + "'", int92 == 7);
    }

    @Test
    public void test04594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04594");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int38 = classReader20.getItem(0);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) ' ');
        int int44 = classWriter40.newField("", "", "hi!");
        int int46 = classWriter40.newClass("");
        int int50 = classWriter40.newField("", "\007\000", "");
        org.mockito.asm.Attribute[] attributeArray51 = new org.mockito.asm.Attribute[] {};
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter40, attributeArray51, 7);
        byte[] byteArray54 = classReader20.b;
        int int56 = classReader20.getItem(3);
        long long58 = classReader20.readLong(105);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
        org.junit.Assert.assertNotNull(attributeArray51);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 20 + "'", int56 == 20);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 281500746514434L + "'", long58 == 281500746514434L);
    }

    @Test
    public void test04595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04595");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        methodVisitor69.visitInsn((int) (byte) 10);
        methodVisitor69.visitMultiANewArrayInsn("\001", 151060483);
        methodVisitor69.visitMultiANewArrayInsn("", 28);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04596");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter11.visitEnd();
        classWriter11.visitSource("hi!", "");
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter11.visit((int) 'a', (int) '4', "", "hi!", "", strArray27);
        classWriter1.visit((int) ' ', 48640, "hi!", "", "", strArray27);
        java.lang.Object obj34 = null;
        org.mockito.asm.FieldVisitor fieldVisitor35 = classWriter1.visitField((int) '#', "hi!", "hi!", "hi!", obj34);
        byte[] byteArray36 = classWriter1.toByteArray();
        classWriter1.visitSource("", "");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(fieldVisitor35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 32, 0, 9, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 9, 83, 121, 110, 116, 104, 101, 116, 105, 99, -66, 0, 0, 3, 0, 4, 0, 6, 0, 3, 0, 4, 0, 3, 0, 3, 0, 3, 0, 4, 0, 1, 0, 35, 0, 2, 0, 2, 0, 1, 0, 5, 0, 0, 0, 2, 0, 2, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 3, 104, 105, 33, 0, 8, 0, 0, 0, 0]");
    }

    @Test
    public void test04597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04597");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readInt((int) (byte) 10);
        int int29 = classReader26.header;
        // The following exception was thrown during execution in test generation
        try {
            int int31 = classReader26.readInt(16777217);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16777223 + "'", int28 == 16777223);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 73 + "'", int29 == 73);
    }

    @Test
    public void test04598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04598");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) -1, (int) (byte) -1);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("hi!", (int) (byte) 0);
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "");
        methodVisitor69.visitVarInsn((int) (short) 256, 103);
        methodVisitor69.visitMethodInsn((int) (short) 100, "", "\001", "hi!");
        methodVisitor69.visitIntInsn(5, 104);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
    }

    @Test
    public void test04599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04599");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitVarInsn(6, 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = annotationVisitor89.visitAnnotation("hi!", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test04600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04600");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "\007\000");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter43.visitEnd();
        byte[] byteArray45 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        java.lang.String[] strArray47 = classReader46.getInterfaces();
        int int48 = classReader46.getAccess();
        int int50 = classReader46.readUnsignedShort(4);
        int int52 = classReader46.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor53 = classWriter37.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        classWriter37.visit((int) (byte) 10, (-1), "", "", "", strArray61);
        int int64 = classWriter37.newClass("hi!");
        int int66 = classWriter37.newClass("hi!");
        classWriter37.visitInnerClass("hi!", "", "hi!", 1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter37.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter80.visitEnd();
        byte[] byteArray82 = classWriter80.toByteArray();
        org.mockito.asm.ClassReader classReader83 = new org.mockito.asm.ClassReader(byteArray82);
        java.lang.String[] strArray84 = classReader83.getInterfaces();
        int int86 = classReader83.readInt((int) (byte) 0);
        java.lang.String str87 = classReader83.getSuperName();
        java.lang.String[] strArray88 = classReader83.getInterfaces();
        byte[] byteArray89 = classReader83.b;
        int int90 = classReader83.header;
        int int91 = classReader83.header;
        java.lang.String[] strArray92 = classReader83.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor93 = classWriter37.visitMethod(83, "", "hi!", "", strArray92);
        classWriter1.visit(1751720193, 16777223, "hi!", "hi!", "hi!", strArray92);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-889275714) + "'", int86 == (-889275714));
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(methodVisitor93);
    }

    @Test
    public void test04601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04601");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        byte[] byteArray20 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("\001", "hi!", "\001", 3072);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04602");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 7);
        int int28 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("\007\000", "hi!");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test04603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04603");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        int int28 = classReader24.readInt(5);
        int int30 = classReader24.readUnsignedShort((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int32 = classReader24.getItem((int) (short) 24832);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24832");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 24832 + "'", int28 == 24832);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 29285 + "'", int30 == 29285);
    }

    @Test
    public void test04604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04604");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter9.visitEnd();
        classWriter9.visitSource("hi!", "");
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter9.visit((int) 'a', (int) '4', "", "hi!", "", strArray25);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        classWriter33.visitSource("hi!", "");
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter33.visit((int) 'a', (int) '4', "", "hi!", "", strArray49);
        classWriter9.visit((int) (byte) 1, 100, "", "hi!", "", strArray49);
        annotationVisitor6.visit("", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = annotationVisitor6.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = annotationVisitor6.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = annotationVisitor56.visitAnnotation("hi!", "\007\000");
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        classWriter62.visitSource("hi!", "");
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter62.visit((int) 'a', (int) '4', "", "hi!", "", strArray78);
        byte[] byteArray80 = classWriter62.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader81.accept((org.mockito.asm.ClassVisitor) classWriter83, 8);
        classWriter83.visitOuterClass("", "hi!", "hi!");
        classWriter83.visitOuterClass("hi!", "hi!", "hi!");
        annotationVisitor59.visit("\007\000", (java.lang.Object) "hi!");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test04605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04605");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 7);
        classWriter1.visitOuterClass("hi!", "hi!", "");
        classWriter1.visitOuterClass("\007\000", "hi!", "\007\000");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter1.visitAnnotation("\007\000", false);
        int int39 = classWriter1.newNameType("\007\000", "");
        byte[] byteArray40 = classWriter1.toByteArray();
        int int42 = classWriter1.newClass("\007\000");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 13 + "'", int39 == 13);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 7, 0, 3, 9, 0, 7, 0, 4, 12, 0, 3, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 10, 12, 0, 3, 0, 10, 12, 0, 10, 0, 1, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 4, 0, 11, 0, 12, 0, 15, 0, 0, 0, 10, 0, 1, 0, 7, 0, 7, 0, 1, 0, 7, 0, 16, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 17, 0, 0, 0, 6, 0, 1, 0, 10, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 11 + "'", int42 == 11);
    }

    @Test
    public void test04606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04606");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("\007\000", "", "", 83);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("hi!", "", "\007\000", 83);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
    }

    @Test
    public void test04607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04607");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(65210, "hi!", "hi!", "");
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        methodVisitor69.visitTryCatchBlock(label87, label88, label89, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIntInsn(83, 20);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor99 = methodVisitor69.visitParameterAnnotation(18, "", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test04608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04608");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        long long10 = classReader4.readLong(5);
        byte[] byteArray11 = classReader4.b;
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray11, (int) (short) -1, 7);
        long long17 = classReader15.readLong((int) (short) 3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = classReader15.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 16777216L + "'", long10 == 16777216L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-4755801206503243520L) + "'", long17 == (-4755801206503243520L));
    }

    @Test
    public void test04609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04609");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray6 = classReader5.b;
        byte[] byteArray7 = classReader5.b;
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray7, 6, (int) (short) 28526);
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray7, (-1), 24832);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = classReader13.readLong(16779008);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04610");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn((-1161953280));
        methodVisitor69.visitIntInsn(0, (int) (short) -1);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(119, label90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04611");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitIincInsn(196613, (-1));
        methodVisitor69.visitTypeInsn(16777223, "");
        methodVisitor69.visitMaxs(16777223, (int) (short) -1);
        methodVisitor69.visitEnd();
        methodVisitor69.visitIntInsn(24832, 254);
        org.mockito.asm.Label label91 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn((int) (short) -17730, label91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04612");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        int int7 = classReader4.readByte(10);
        short short9 = classReader4.readShort((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            long long11 = classReader4.readLong(151060483);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) -13570 + "'", short9 == (short) -13570);
    }

    @Test
    public void test04613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04613");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        byte[] byteArray9 = classReader4.b;
        int int11 = classReader4.readInt((int) (byte) 1);
        int int12 = classReader4.getAccess();
        int int14 = classReader4.readInt(14);
        byte[] byteArray15 = classReader4.b;
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader4.readInt(254);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-21316096) + "'", int11 == (-21316096));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04614");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        long long9 = classReader4.readLong(0);
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        byte[] byteArray12 = classReader4.b;
        int int14 = classReader4.readInt(0);
        short short16 = classReader4.readShort(20);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        classWriter19.visitSource("hi!", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter19.visit((int) 'a', (int) '4', "", "hi!", "", strArray35);
        byte[] byteArray37 = classWriter19.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter19.visitAnnotation("", false);
        byte[] byteArray41 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader42, 2);
        byte[] byteArray45 = classReader42.b;
        java.lang.String str46 = classReader42.getSuperName();
        java.lang.String[] strArray47 = classReader42.getInterfaces();
        int int48 = classReader42.header;
        char[] charArray54 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str55 = classReader42.readUTF8(20, charArray54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj56 = classReader4.readConst((-21316096), charArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -21316096");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3819410108757049344L) + "'", long9 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-889275714) + "'", int14 == (-889275714));
        org.junit.Assert.assertTrue("'" + short16 + "' != '" + (short) 0 + "'", short16 == (short) 0);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 103 + "'", int48 == 103);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test04615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04615");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn((int) (short) -326, "");
        methodVisitor69.visitIntInsn(11, (int) (short) 0);
        methodVisitor69.visitTypeInsn(100, "hi!");
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label[] labelArray90 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(24832, (int) (short) 26913, label89, labelArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray90);
    }

    @Test
    public void test04616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04616");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray4);
        int int7 = classReader5.readUnsignedShort((int) (short) 1);
        int int9 = classReader5.readInt(0);
        int int10 = classReader5.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader5.readInt((int) (short) 26913);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-889275714) + "'", int9 == (-889275714));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test04617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04617");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        int int32 = classWriter1.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("", false);
        int int37 = classWriter1.newUTF8("");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter43.visitAnnotation("", true);
        int int49 = classWriter43.newNameType("hi!", "hi!");
        int int52 = classWriter43.newNameType("hi!", "");
        byte[] byteArray53 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter1.visitField((int) (short) 24832, "", "", "", (java.lang.Object) classReader54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@7b81269b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 12, 0, 2, 0, 1, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04618");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn((int) (short) 1, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn(0, "\007\000");
        methodVisitor69.visitIincInsn(1763770624, (int) (byte) -1);
        methodVisitor69.visitVarInsn(0, 1751720193);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor69.visitParameterAnnotation(202, "hi!", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04619");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader35, 196613);
        java.lang.String str38 = classReader35.getSuperName();
        long long40 = classReader35.readLong((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        classWriter42.visitSource("hi!", "");
        classWriter42.visitEnd();
        int int49 = classWriter42.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter42.visitAnnotation("hi!", false);
        int int55 = classWriter42.newNameType("\007\000", "\007\000");
        classWriter42.visitEnd();
        classReader35.accept((org.mockito.asm.ClassVisitor) classWriter42, (-21316096));
        long long60 = classReader35.readLong(88);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = classReader35.getItem(256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-3819410108757049247L) + "'", long40 == (-3819410108757049247L));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 14636707379019782L + "'", long60 == 14636707379019782L);
    }

    @Test
    public void test04620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04620");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String str9 = classReader4.getSuperName();
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter11.visitEnd();
        byte[] byteArray13 = classWriter11.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter11.visitAnnotation("", true);
        classWriter11.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        byte[] byteArray36 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        java.lang.String[] strArray38 = classReader37.getInterfaces();
        int int39 = classReader37.getAccess();
        int int41 = classReader37.readUnsignedShort(4);
        int int43 = classReader37.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor44 = classWriter28.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!" };
        classWriter28.visit((int) (byte) 10, (-1), "", "", "", strArray52);
        classWriter11.visit((int) (short) 256, 8, "", "hi!", "hi!", strArray52);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter11.visitAnnotation("hi!", true);
        int int62 = classWriter11.newMethod("", "hi!", "", false);
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept((org.mockito.asm.ClassVisitor) classWriter11, 13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor44);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
    }

    @Test
    public void test04621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04621");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor34.visitAnnotation("\007\000", true);
        org.mockito.asm.Attribute attribute38 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor34.visitAttribute(attribute38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test04622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04622");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn((int) (byte) 0, "", "hi!", "\007\000");
        methodVisitor69.visitInsn(29285);
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label label93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\007\000", "\001", "hi!", label92, label93, (int) (short) 256);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04623");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn(5, (int) (short) -1);
        methodVisitor69.visitMultiANewArrayInsn("hi!", 52);
        methodVisitor69.visitInsn(6);
        methodVisitor69.visitIntInsn((int) (short) 1280, 52);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04624");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int6 = classReader4.getAccess();
        byte[] byteArray7 = classReader4.b;
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = classReader8.readByte(8449);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8449");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04625");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        java.lang.String str30 = classReader24.getSuperName();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        classWriter33.visitSource("hi!", "");
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter33.visit((int) 'a', (int) '4', "", "hi!", "", strArray49);
        byte[] byteArray51 = classWriter33.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter33.visitAnnotation("", false);
        byte[] byteArray55 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(classReader56, 2);
        byte[] byteArray59 = classReader56.b;
        java.lang.String str60 = classReader56.getSuperName();
        java.lang.String[] strArray61 = classReader56.getInterfaces();
        int int62 = classReader56.header;
        char[] charArray68 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str69 = classReader56.readUTF8(20, charArray68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj70 = classReader24.readConst((int) (short) 100, charArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 103 + "'", int62 == 103);
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray68), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray68), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray68), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
    }

    @Test
    public void test04626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04626");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        java.lang.Object[] objArray80 = null;
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter83.visitEnd();
        byte[] byteArray85 = classWriter83.toByteArray();
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray85);
        int int88 = classReader86.readUnsignedShort((int) (short) 0);
        java.lang.String[] strArray89 = classReader86.getInterfaces();
        methodVisitor69.visitFrame((int) (byte) 1, 0, objArray80, (-1), (java.lang.Object[]) strArray89);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label92 = null;
        int[] intArray97 = new int[] { 13, 65210, 114, 83 };
        org.mockito.asm.Label[] labelArray98 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label92, intArray97, labelArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 51966 + "'", int88 == 51966);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[13, 65210, 114, 83]");
        org.junit.Assert.assertNotNull(labelArray98);
    }

    @Test
    public void test04627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04627");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(1);
        classWriter1.visitInnerClass("", "", "hi!", 9);
        int int10 = classWriter1.newField("\007\000", "", "\007\000");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
    }

    @Test
    public void test04628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04628");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getClassName();
        short short30 = classReader24.readShort((int) (short) 10);
        int int32 = classReader24.readByte(28);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = classReader24.getItem((int) (short) 28526);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 28526");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 256 + "'", short30 == (short) 256);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 83 + "'", int32 == 83);
    }

    @Test
    public void test04629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04629");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "hi!");
        org.mockito.asm.Label label89 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(51966, label89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04630");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label78 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn((int) ' ', label78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04631");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(47806, (int) (short) 0);
        methodVisitor69.visitIntInsn(254, 6);
        methodVisitor69.visitMaxs(5, 73);
        methodVisitor69.visitMethodInsn(14, "hi!", "hi!", "hi!");
        methodVisitor69.visitIincInsn(3, 0);
        methodVisitor69.visitVarInsn(2, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test04632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04632");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) '#', (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn(83, "hi!", "hi!", "\007\000");
        methodVisitor69.visitMethodInsn(114, "\007\000", "\007\000", "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test04633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04633");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        int int10 = classReader4.readByte(14);
        int int11 = classReader4.getAccess();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04634");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newMethod("", "hi!", "hi!", false);
        byte[] byteArray11 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("\001", true);
        org.mockito.asm.Attribute attribute19 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 3, 0, 3, 10, 0, 2, 0, 4, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor18);
    }

    @Test
    public void test04635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04635");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classWriter25.toByteArray();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int37 = classWriter32.newMethod("", "", "hi!", false);
        classWriter32.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter32.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter47.visitAnnotation("", true);
        classWriter47.visitSource("", "");
        classWriter47.visitSource("", "hi!");
        int int60 = classWriter47.newField("hi!", "hi!", "hi!");
        int int64 = classWriter47.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter32.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = fieldVisitor65.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = annotationVisitor68.visitAnnotation("hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter25.visitField(9, "", "", "", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = fieldVisitor72.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = annotationVisitor75.visitArray("hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test04636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04636");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        byte[] byteArray23 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        classWriter1.visit(5, (int) (short) 10, "", "hi!", "hi!", strArray25);
        int int29 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("", "", "", 47806);
        int int36 = classWriter1.newUTF8("");
        classWriter1.visitInnerClass("hi!", "", "hi!", 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter1.visitAnnotation("\007\000", false);
        annotationVisitor44.visitEnd();
        annotationVisitor44.visitEnum("hi!", "\007\000", "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor44);
    }

    @Test
    public void test04637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04637");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        int int17 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitEnd();
        int int21 = classWriter1.newNameType("hi!", "\007\000");
        classWriter1.visitSource("hi!", "\007\000");
        classWriter1.visitSource("\007\000", "\007\000");
        int int29 = classWriter1.newUTF8("\007\000");
        classWriter1.visitOuterClass("\001", "\001", "\001");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
    }

    @Test
    public void test04638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04638");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        long long13 = classReader4.readLong((int) (byte) 0);
        java.lang.String[] strArray14 = classReader4.getInterfaces();
        java.lang.String[] strArray15 = classReader4.getInterfaces();
        byte[] byteArray16 = classReader4.b;
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        classWriter19.visitSource("hi!", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter19.visit((int) 'a', (int) '4', "", "hi!", "", strArray35);
        byte[] byteArray37 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader38.accept((org.mockito.asm.ClassVisitor) classWriter40, 8);
        char[] charArray49 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj50 = classReader38.readConst((int) (short) 1, charArray49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = classReader4.readUTF8((int) (short) 5203, charArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3819410108757049344L) + "'", long13 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + "\007\000" + "'", obj50, "\007\000");
    }

    @Test
    public void test04639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04639");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        fieldVisitor36.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor36.visitAnnotation("\007\000", false);
        fieldVisitor36.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = fieldVisitor36.visitAnnotation("\007\000", false);
        org.mockito.asm.Attribute attribute45 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor36.visitAttribute(attribute45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor44);
    }

    @Test
    public void test04640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04640");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitMethodInsn((int) (short) -1, "\001", "", "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test04641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04641");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int37 = classReader20.getAccess();
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int44 = classWriter39.newMethod("", "", "hi!", false);
        classWriter39.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter39.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter54.visitAnnotation("", true);
        classWriter54.visitSource("", "");
        classWriter54.visitSource("", "hi!");
        int int67 = classWriter54.newField("hi!", "hi!", "hi!");
        int int71 = classWriter54.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter39.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        classWriter39.visitSource("hi!", "");
        classWriter39.visitEnd();
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter39, (int) (short) -17730);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = classReader20.readUnsignedShort((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor72);
    }

    @Test
    public void test04642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04642");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn(256);
        methodVisitor69.visitIntInsn((int) (short) 100, 52);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label label88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("", "\007\000", "\007\000", label87, label88, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test04643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04643");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMethodInsn((int) (short) 2, "", "", "hi!");
        org.mockito.asm.Label label82 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04644");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotation("hi!", false);
        annotationVisitor84.visitEnum("\007\000", "\001", "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test04645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04645");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(14, "\007\000", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = annotationVisitor85.visitArray("");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test04646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04646");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        long long31 = classReader24.readLong(0);
        short short33 = classReader24.readShort(8);
        byte[] byteArray34 = classReader24.b;
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader24, 48640);
        int int37 = classReader24.header;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        classWriter40.visitSource("hi!", "");
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter40.visit((int) 'a', (int) '4', "", "hi!", "", strArray56);
        byte[] byteArray58 = classWriter40.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter40.visitAnnotation("", false);
        byte[] byteArray62 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter(classReader63, 2);
        byte[] byteArray66 = classReader63.b;
        java.lang.String str67 = classReader63.getSuperName();
        java.lang.String[] strArray68 = classReader63.getInterfaces();
        int int69 = classReader63.header;
        char[] charArray75 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str76 = classReader63.readUTF8(20, charArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj77 = classReader24.readConst(16778088, charArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16778088");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3819410108757049247L) + "'", long31 == (-3819410108757049247L));
        org.junit.Assert.assertTrue("'" + short33 + "' != '" + (short) 9 + "'", short33 == (short) 9);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 103 + "'", int37 == 103);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 103 + "'", int69 == 103);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test04647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04647");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int6 = classReader4.getAccess();
        byte[] byteArray7 = classReader4.b;
        int int8 = classReader4.getAccess();
        org.mockito.asm.ClassVisitor classVisitor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept(classVisitor9, 16779008);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test04648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04648");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitIntInsn(65536, (int) (short) 1792);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitParameterAnnotation(100, "\007\000", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04649");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-1));
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        int int10 = classWriter1.newField("hi!", "\001", "\007\000");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter16.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("hi!", "");
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter26.visit((int) 'a', (int) '4', "", "hi!", "", strArray42);
        classWriter16.visit((int) ' ', 48640, "hi!", "", "", strArray42);
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter16.visitAnnotation("hi!", true);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter1.visitField(196613, "\007\000", "", "", (java.lang.Object) "hi!");
        org.mockito.asm.Attribute attribute49 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor48.visitAttribute(attribute49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(fieldVisitor48);
    }

    @Test
    public void test04650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04650");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitMaxs(1399416686, 1751720193);
        methodVisitor69.visitMethodInsn(26729, "\007\000", "\007\000", "\007\000");
        org.mockito.asm.Attribute attribute84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04651");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        int int19 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter24.visitAnnotation("", true);
        classWriter24.visitSource("", "");
        int int33 = classWriter24.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter39.visitAnnotation("", true);
        classWriter39.visitSource("", "");
        classWriter39.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter39.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter39.visitOuterClass("", "", "");
        classWriter39.visitSource("", "");
        int int64 = classWriter39.newNameType("", "hi!");
        byte[] byteArray65 = classWriter39.toByteArray();
        int int69 = classWriter39.newField("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor70 = classWriter24.visitField(0, "hi!", "hi!", "hi!", (java.lang.Object) "");
        java.lang.Object obj75 = null;
        org.mockito.asm.FieldVisitor fieldVisitor76 = classWriter24.visitField(10, "", "", "hi!", obj75);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = classWriter1.newConst(obj75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(fieldVisitor54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 1, 0, 3, 104, 105, 33, 3, 0, 0, 0, 1, 7, 0, 1, 12, 0, 1, 0, 1, 12, 0, 1, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 2, 0, 2, 0, 2, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 4, 0, 4, 0, 5, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 13 + "'", int69 == 13);
        org.junit.Assert.assertNotNull(fieldVisitor70);
        org.junit.Assert.assertNotNull(fieldVisitor76);
    }

    @Test
    public void test04652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04652");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter13.visitAnnotation("", true);
        classWriter13.visitSource("", "");
        classWriter13.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor28 = classWriter13.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter13.visitOuterClass("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(100, "", "hi!", "", (java.lang.Object) "");
        classWriter1.visitInnerClass("", "", "", (int) '4');
        int int42 = classWriter1.newField("", "", "");
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter1.visitAnnotation("", true);
        classWriter1.visitEnd();
        int int54 = classWriter1.newField("hi!", "\001", "\007\000");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter63.visitEnd();
        byte[] byteArray65 = classWriter63.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter63.visitAnnotation("", true);
        classWriter63.visitOuterClass("", "", "hi!");
        int int77 = classWriter63.newMethod("", "hi!", "hi!", true);
        int int79 = classWriter63.newUTF8("hi!");
        classWriter63.visitEnd();
        byte[] byteArray81 = classWriter63.toByteArray();
        org.mockito.asm.ClassReader classReader82 = new org.mockito.asm.ClassReader(byteArray81);
        int int84 = classReader82.readUnsignedShort(5);
        java.lang.String[] strArray85 = classReader82.getInterfaces();
        classWriter1.visit(26913, 26729, "", "\007\000", "\007\000", strArray85);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(fieldVisitor28);
        org.junit.Assert.assertNotNull(fieldVisitor33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 14 + "'", int54 == 14);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 6 + "'", int77 == 6);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(strArray85);
    }

    @Test
    public void test04653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04653");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("", false);
        classWriter1.visitInnerClass("", "\007\000", "", (int) (short) 1);
        byte[] byteArray27 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray27, 15, 5);
        int int32 = classReader30.readInt((int) (short) 2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 3, 7, -64, -128, 7, 0, 7, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 4, 0, 2, 0, 4, 0, 10, 0, 0, 0, 10, 0, 1, 0, 2, 0, 8, 0, 1, 0, 1, 0, 11, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1161953280) + "'", int32 == (-1161953280));
    }

    @Test
    public void test04654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04654");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        long long13 = classReader4.readLong((int) (byte) 0);
        java.lang.String[] strArray14 = classReader4.getInterfaces();
        java.lang.String[] strArray15 = classReader4.getInterfaces();
        byte[] byteArray16 = classReader4.b;
        int int18 = classReader4.getItem(0);
        int int20 = classReader4.readInt(14);
        // The following exception was thrown during execution in test generation
        try {
            short short22 = classReader4.readShort(254);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 254");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3819410108757049344L) + "'", long13 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test04655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04655");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        int int37 = classReader35.readByte(10);
        int int38 = classReader35.header;
        java.lang.String str39 = classReader35.getClassName();
        byte[] byteArray40 = classReader35.b;
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader35.readByte(65536);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65536");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 88 + "'", int38 == 88);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
    }

    @Test
    public void test04656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04656");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter1.visitSource("", "");
        int int24 = classWriter1.newClass("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray28 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray28, (int) (byte) -1, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = classReader31.getItem((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 12, 0, 2, 0, 2, 9, 0, 3, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 10, 0, 1, 0, 3, 0, 6, 0, 1, 0, 32, 0, 10, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 11, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test04657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04657");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        int int26 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitSource("hi!", "");
        byte[] byteArray30 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        byte[] byteArray38 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray38);
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray38, 2, (int) (short) -1);
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray38);
        byte[] byteArray45 = classReader44.b;
        java.lang.String[] strArray46 = classReader44.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField(0, "\007\000", "hi!", "hi!", (java.lang.Object) classReader44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@4d844ac4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 12, 0, 1, 0, 1, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray46);
    }

    @Test
    public void test04658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04658");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        byte[] byteArray20 = classWriter1.toByteArray();
        int int24 = classWriter1.newField("", "", "hi!");
        int int27 = classWriter1.newNameType("", "hi!");
        classWriter1.visitInnerClass("", "hi!", "\007\000", (int) (byte) 10);
        classWriter1.visitSource("\007\000", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = annotationVisitor38.visitAnnotation("hi!", "\007\000");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 11 + "'", int27 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test04659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04659");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = annotationVisitor14.visitAnnotation("hi!", "hi!");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor17);
    }

    @Test
    public void test04660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04660");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitVarInsn((int) (short) 100, 256);
        org.mockito.asm.Label label78 = null;
        int[] intArray80 = new int[] { 65210 };
        org.mockito.asm.Label[] labelArray81 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label78, intArray80, labelArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[65210]");
        org.junit.Assert.assertNotNull(labelArray81);
    }

    @Test
    public void test04661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04661");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor8 = annotationVisitor4.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = annotationVisitor8.visitAnnotation("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = annotationVisitor8.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = annotationVisitor13.visitAnnotation("hi!", "hi!");
        annotationVisitor16.visitEnd();
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter20.visitEnd();
        classWriter20.visitSource("hi!", "");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter20.visit((int) 'a', (int) '4', "", "hi!", "", strArray36);
        byte[] byteArray38 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader39.accept((org.mockito.asm.ClassVisitor) classWriter41, 8);
        int int45 = classReader39.readUnsignedShort((int) (short) 10);
        int int47 = classReader39.readInt(2);
        int int48 = classReader39.header;
        java.lang.String[] strArray49 = classReader39.getInterfaces();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(classReader39, 14);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter57.visitAnnotation("", true);
        classWriter57.visitSource("", "");
        int int66 = classWriter57.newNameType("hi!", "hi!");
        int int71 = classWriter57.newMethod("hi!", "hi!", "hi!", true);
        classWriter57.visitInnerClass("\007\000", "hi!", "\007\000", (int) (short) 1792);
        int int78 = classWriter57.newUTF8("hi!");
        org.mockito.asm.FieldVisitor fieldVisitor79 = classWriter51.visitField((-1), "hi!", "\007\000", "", (java.lang.Object) int78);
        annotationVisitor16.visit("", (java.lang.Object) (-1));
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor8);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 256 + "'", int45 == 256);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1161953280) + "'", int47 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 73 + "'", int48 == 73);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(fieldVisitor79);
    }

    @Test
    public void test04662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04662");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader4.readUnsignedShort((int) (short) 0);
        int int7 = classReader4.header;
        byte[] byteArray8 = classReader4.b;
        long long10 = classReader4.readLong(13);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader32, 256);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader32, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        classWriter38.visitSource("", "");
        int int45 = classWriter38.newNameType("hi!", "");
        classReader32.accept((org.mockito.asm.ClassVisitor) classWriter38, (int) (byte) 10);
        int int49 = classWriter38.newClass("hi!");
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept((org.mockito.asm.ClassVisitor) classWriter38, 256);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51966 + "'", int6 == 51966);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
    }

    @Test
    public void test04663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04663");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String str9 = classReader4.getSuperName();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.getAccess();
        byte[] byteArray12 = classReader4.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray12, (int) (short) 28526, 51966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04664");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader4.readByte(1);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = classReader4.readByte(196612);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 196612");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 254 + "'", int6 == 254);
    }

    @Test
    public void test04665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04665");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        classWriter22.visitInnerClass("", "hi!", "", 13);
        int int34 = classWriter22.newMethod("", "\007\000", "hi!", false);
        int int37 = classWriter22.newNameType("\007\000", "\001");
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter43.visitEnd();
        byte[] byteArray45 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray45);
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray45, 2, (int) (short) -1);
        java.lang.String[] strArray51 = classReader50.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor52 = classWriter22.visitMethod((int) (short) 28526, "\001", "\007\000", "\007\000", strArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray51);
    }

    @Test
    public void test04666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04666");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        long long31 = classReader24.readLong(0);
        java.lang.String str32 = classReader24.getClassName();
        short short34 = classReader24.readShort(5);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3819410108757049247L) + "'", long31 == (-3819410108757049247L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 0 + "'", short34 == (short) 0);
    }

    @Test
    public void test04667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04667");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(65210, "hi!", "hi!", "");
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 0, (int) 'a');
        methodVisitor69.visitFieldInsn((int) 'a', "\001", "hi!", "\001");
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(190, label97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04668");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        classWriter1.visitOuterClass("hi!", "\007\000", "hi!");
        org.mockito.asm.Attribute attribute15 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
    }

    @Test
    public void test04669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04669");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        byte[] byteArray6 = classReader4.b;
        int int7 = classReader4.header;
        short short9 = classReader4.readShort((int) (short) 1);
        long long11 = classReader4.readLong((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            short short13 = classReader4.readShort(27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 27");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) -326 + "'", short9 == (short) -326);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3819410108757049344L) + "'", long11 == (-3819410108757049344L));
    }

    @Test
    public void test04670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04670");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        int int36 = classReader20.readUnsignedShort((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int38 = classReader20.getItem((-889275714));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -889275714");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 29285 + "'", int36 == 29285);
    }

    @Test
    public void test04671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04671");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter30.visitAnnotation("", true);
        classWriter30.visitSource("", "");
        classWriter30.visitSource("", "hi!");
        int int43 = classWriter30.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        byte[] byteArray52 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        java.lang.String[] strArray54 = classReader53.getInterfaces();
        classWriter30.visit(5, (int) (short) 10, "", "hi!", "hi!", strArray54);
        classWriter1.visit((int) (short) 256, 2, "\007\000", "", "", strArray54);
        classWriter1.visitOuterClass("", "\007\000", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = annotationVisitor64.visitArray("\001");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(annotationVisitor66);
    }

    @Test
    public void test04672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04672");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter30.visitAnnotation("", true);
        classWriter30.visitSource("", "");
        classWriter30.visitSource("", "hi!");
        int int43 = classWriter30.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        byte[] byteArray52 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        java.lang.String[] strArray54 = classReader53.getInterfaces();
        classWriter30.visit(5, (int) (short) 10, "", "hi!", "hi!", strArray54);
        classWriter1.visit((int) (short) 256, 2, "\007\000", "", "", strArray54);
        classWriter1.visitOuterClass("", "\007\000", "hi!");
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute62 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray54);
    }

    @Test
    public void test04673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04673");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "hi!");
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        classWriter1.visitSource("", "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
    }

    @Test
    public void test04674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04674");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classReader21.b;
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        byte[] byteArray46 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(classReader48, 256);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(classReader48, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(classReader48, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter56.visitEnd();
        classWriter56.visitSource("", "");
        int int65 = classWriter56.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter56.visitAnnotation("", false);
        int int70 = classWriter56.newUTF8("hi!");
        classReader48.accept((org.mockito.asm.ClassVisitor) classWriter56, (int) (short) -326);
        org.mockito.asm.Attribute[] attributeArray73 = new org.mockito.asm.Attribute[] {};
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter56, attributeArray73, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = classReader21.readInt(1869509376);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(attributeArray73);
    }

    @Test
    public void test04675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04675");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) '#', (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitParameterAnnotation(83886080, "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test04676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04676");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        int int32 = classWriter1.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("", "hi!");
        int int43 = classWriter1.newMethod("", "\007\000", "\007\000", false);
        java.lang.Object obj44 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int45 = classWriter1.newConst(obj44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
    }

    @Test
    public void test04677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04677");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-889275714));
        java.lang.String[] strArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor7 = classWriter1.visitMethod(8449, "", "\007\000", "hi!", strArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04678");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = annotationVisitor17.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = annotationVisitor17.visitAnnotation("", "\001");
        annotationVisitor22.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test04679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04679");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter1.visitAnnotation("", true);
        int int41 = classWriter1.newField("hi!", "hi!", "");
        classWriter1.visitOuterClass("", "", "");
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
    }

    @Test
    public void test04680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04680");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitOuterClass("\007\000", "\007\000", "hi!");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04681");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = annotationVisitor13.visitAnnotation("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor13.visitArray("");
        annotationVisitor18.visitEnum("hi!", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = annotationVisitor18.visitAnnotation("hi!", "hi!");
        annotationVisitor18.visitEnd();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        classWriter29.visitSource("hi!", "");
        classWriter29.visitEnd();
        classWriter29.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter29.visitAnnotation("hi!", false);
        java.lang.Object obj43 = null;
        org.mockito.asm.FieldVisitor fieldVisitor44 = classWriter29.visitField((-1), "", "", "", obj43);
        fieldVisitor44.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = fieldVisitor44.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = fieldVisitor44.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = fieldVisitor44.visitAnnotation("\007\000", true);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor18.visit("", (java.lang.Object) annotationVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@24010637");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
    }

    @Test
    public void test04682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04682");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        int int8 = classWriter1.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        classWriter15.visitSource("hi!", "");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter15.visit((int) 'a', (int) '4', "", "hi!", "", strArray31);
        byte[] byteArray33 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader34.accept((org.mockito.asm.ClassVisitor) classWriter36, 8);
        long long40 = classReader34.readLong(7);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter42.visitAnnotation("", true);
        int int48 = classWriter42.newNameType("hi!", "hi!");
        classReader34.accept((org.mockito.asm.ClassVisitor) classWriter42, (int) (byte) 0);
        java.lang.String str51 = classReader34.getClassName();
        java.lang.String str52 = classReader34.getSuperName();
        java.lang.String[] strArray53 = classReader34.getInterfaces();
        classWriter1.visit((int) ' ', 0, "", "\007\000", "hi!", strArray53);
        int int57 = classWriter1.newNameType("\007\000", "\007\000");
        org.mockito.asm.Attribute attribute58 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 6989595422067222633L + "'", long40 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
    }

    @Test
    public void test04683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04683");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        int int12 = classReader4.header;
        java.lang.String[] strArray13 = classReader4.getInterfaces();
        int int14 = classReader4.getAccess();
        org.mockito.asm.ClassVisitor classVisitor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept(classVisitor15, (int) (short) 29285);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04684");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        methodVisitor69.visitMaxs(256, 9);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitVarInsn((int) (short) 24832, (int) 'a');
        org.mockito.asm.Label label94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(48640, label94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test04685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04685");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitFieldInsn(9, "", "\007\000", "\007\000");
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(10, "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04686");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader24, 5);
        classWriter27.visitOuterClass("\007\000", "", "hi!");
        classWriter27.visitEnd();
        int int34 = classWriter27.newClass("\007\000");
        java.lang.Class<?> wildcardClass35 = classWriter27.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test04687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04687");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("\007\000", "hi!", "");
        int int18 = classWriter1.newField("\007\000", "\007\000", "hi!");
        int int22 = classWriter1.newField("", "hi!", "");
        classWriter1.visitSource("\007\000", "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 11 + "'", int22 == 11);
    }

    @Test
    public void test04688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04688");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int11 = classWriter1.newField("hi!", "", "hi!");
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter18.visitEnd();
        classWriter18.visitSource("hi!", "");
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter18.visit((int) 'a', (int) '4', "", "hi!", "", strArray34);
        byte[] byteArray36 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader37.accept((org.mockito.asm.ClassVisitor) classWriter39, 8);
        long long43 = classReader37.readLong(7);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter45.visitAnnotation("", true);
        int int51 = classWriter45.newNameType("hi!", "hi!");
        classReader37.accept((org.mockito.asm.ClassVisitor) classWriter45, (int) (byte) 0);
        int int55 = classReader37.getItem(0);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter57.visitAnnotation("", true);
        classWriter57.visitSource("", "");
        classWriter57.visitSource("", "hi!");
        int int70 = classWriter57.newField("hi!", "hi!", "hi!");
        int int74 = classWriter57.newField("hi!", "hi!", "hi!");
        classWriter57.visitInnerClass("", "hi!", "", 254);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = classWriter57.visitAnnotation("\007\000", false);
        classReader37.accept((org.mockito.asm.ClassVisitor) classWriter57, 47806);
        java.lang.String[] strArray85 = classReader37.getInterfaces();
        classWriter1.visit(223337, 29285, "hi!", "", "\001", strArray85);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 6989595422067222633L + "'", long43 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 5 + "'", int74 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(strArray85);
    }

    @Test
    public void test04689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04689");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(223337);
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label[] labelArray83 = new org.mockito.asm.Label[] { label82 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(0, (int) (short) -13570, label81, labelArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(labelArray83);
    }

    @Test
    public void test04690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04690");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int38 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter44.visitEnd();
        classWriter44.visitSource("", "");
        int int51 = classWriter44.newNameType("hi!", "");
        int int55 = classWriter44.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor56 = classWriter1.visitField(65210, "", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter1.visitAnnotation("hi!", false);
        int int62 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.Attribute attribute63 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
    }

    @Test
    public void test04691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04691");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(12, 202);
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(186, "", "", "\007\000");
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label89 = null;
        int[] intArray96 = new int[] { (short) 26913, 26913, (byte) 10, 116, 26913, 9 };
        org.mockito.asm.Label[] labelArray97 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label89, intArray96, labelArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[26913, 26913, 10, 116, 26913, 9]");
        org.junit.Assert.assertNotNull(labelArray97);
    }

    @Test
    public void test04692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04692");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitVarInsn(8, (-1));
        methodVisitor69.visitIincInsn((int) (short) 256, (int) (byte) 10);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(256, 65536);
        org.mockito.asm.Label label86 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04693");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        long long10 = classReader4.readLong(5);
        int int12 = classReader4.readByte(1);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(classReader4, 341012341);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 16777216L + "'", long10 == 16777216L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 254 + "'", int12 == 254);
    }

    @Test
    public void test04694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04694");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(12);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter7.visitAnnotation("", true);
        classWriter7.visitSource("", "");
        classWriter7.visitSource("", "hi!");
        int int20 = classWriter7.newField("hi!", "hi!", "hi!");
        classWriter7.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter7.visitSource("", "");
        int int30 = classWriter7.newClass("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter7.visitAnnotation("hi!", false);
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) ' ', "\007\000", "", "", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor34.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor34.visitAnnotation("", true);
        annotationVisitor40.visitEnum("\001", "", "\001");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test04695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04695");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        java.lang.String[] strArray10 = classReader4.getInterfaces();
        int int11 = classReader4.header;
        int int12 = classReader4.header;
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter14.visitInnerClass("", "hi!", "hi!", 10);
        int int21 = classWriter14.newUTF8("hi!");
        classWriter14.visitInnerClass("hi!", "\007\000", "", 7);
        classWriter14.visitInnerClass("", "hi!", "", 17);
        int int33 = classWriter14.newUTF8("hi!");
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept((org.mockito.asm.ClassVisitor) classWriter14, 114);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
    }

    @Test
    public void test04696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04696");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int11 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitOuterClass("hi!", "\007\000", "\007\000");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(100);
        classWriter21.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int35 = classWriter30.newMethod("", "", "hi!", false);
        classWriter30.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter30.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter45.visitAnnotation("", true);
        classWriter45.visitSource("", "");
        classWriter45.visitSource("", "hi!");
        int int58 = classWriter45.newField("hi!", "hi!", "hi!");
        int int62 = classWriter45.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor63 = classWriter30.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor64 = classWriter21.visitField((int) (short) 0, "hi!", "hi!", "hi!", (java.lang.Object) "");
        fieldVisitor64.visitEnd();
        fieldVisitor64.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter1.visitField(119, "", "hi!", "", (java.lang.Object) fieldVisitor64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.FieldWriter@ac39487");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 5 + "'", int62 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor63);
        org.junit.Assert.assertNotNull(fieldVisitor64);
    }

    @Test
    public void test04697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04697");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray39 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        int int41 = classReader40.header;
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader40, 11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = classReader40.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 8, 0, 3, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 100, 0, 3, 0, 1, 0, 2, 0, 7, 0, 0, 0, 2, 0, 6, 0, 8, 0, 0, 0, 2, 0, 3, 0, 0, 0, 3, 0, 9, 0, 0, 0, 2, 0, 3, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 129 + "'", int41 == 129);
    }

    @Test
    public void test04698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04698");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn((int) (short) 256, "hi!", "", "");
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotation("\007\000", true);
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label[] labelArray89 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(47806, 6, label88, labelArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(labelArray89);
    }

    @Test
    public void test04699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04699");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        int int27 = classReader21.readInt(20);
        int int29 = classReader21.readUnsignedShort(0);
        int int31 = classReader21.readUnsignedShort(1);
        java.lang.String[] strArray32 = classReader21.getInterfaces();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        classWriter35.visitSource("hi!", "");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter35.visit((int) 'a', (int) '4', "", "hi!", "", strArray51);
        byte[] byteArray53 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray53);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(classReader55, 256);
        int int59 = classReader55.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        classWriter62.visitSource("hi!", "");
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter62.visit((int) 'a', (int) '4', "", "hi!", "", strArray78);
        byte[] byteArray80 = classWriter62.toByteArray();
        org.mockito.asm.ClassReader classReader81 = new org.mockito.asm.ClassReader(byteArray80);
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader81.accept((org.mockito.asm.ClassVisitor) classWriter83, 8);
        char[] charArray92 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj93 = classReader81.readConst((int) (short) 1, charArray92);
        java.lang.Object obj94 = classReader55.readConst(4, charArray92);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = classReader21.readUTF8(100, charArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 132864 + "'", int27 == 132864);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 51966 + "'", int29 == 51966);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 65210 + "'", int31 == 65210);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj93 + "' != '" + "\007\000" + "'", obj93, "\007\000");
        org.junit.Assert.assertNotNull(obj94);
        org.junit.Assert.assertEquals(obj94.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj94), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj94), "Lhi!;");
    }

    @Test
    public void test04700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04700");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int30 = classReader20.readInt((int) 'a');
        byte[] byteArray31 = classReader20.b;
        java.lang.String[] strArray32 = classReader20.getInterfaces();
        short short34 = classReader20.readShort((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            int int36 = classReader20.getItem((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 196613 + "'", int30 == 196613);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 29285 + "'", short34 == (short) 29285);
    }

    @Test
    public void test04701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04701");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(12, 202);
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(186, "", "", "\007\000");
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(24832, "\007\000", "", "\007\000");
        methodVisitor69.visitVarInsn(512, 104);
        methodVisitor69.visitVarInsn(105, (int) 'a');
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04702");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitSource("", "");
        int int26 = classWriter1.newNameType("", "hi!");
        byte[] byteArray27 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        byte[] byteArray36 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        java.lang.String[] strArray38 = classReader37.getInterfaces();
        int int40 = classReader37.readInt((int) (byte) 0);
        java.lang.String str41 = classReader37.getSuperName();
        java.lang.String[] strArray42 = classReader37.getInterfaces();
        classWriter1.visit(51966, (int) (short) -1, "", "hi!", "", strArray42);
        classWriter1.visitOuterClass("\007\000", "\007\000", "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 1, 0, 3, 104, 105, 33, 3, 0, 0, 0, 1, 7, 0, 1, 12, 0, 1, 0, 1, 12, 0, 1, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 2, 0, 2, 0, 2, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 4, 0, 4, 0, 5, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-889275714) + "'", int40 == (-889275714));
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test04703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04703");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        byte[] byteArray4 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray4);
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray4);
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = classReader7.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04704");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMaxs((int) (byte) 1, (-1161953280));
        methodVisitor69.visitIntInsn((int) (short) -1, 132864);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitFieldInsn(18, "\001", "", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test04705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04705");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readByte((int) (byte) 10);
        int int8 = classReader4.header;
        byte[] byteArray9 = classReader4.b;
        int int10 = classReader4.header;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader4.readUnsignedShort(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test04706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04706");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMaxs(13, (int) (short) -1);
        methodVisitor69.visitTypeInsn(4, "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotation("hi!", false);
        annotationVisitor90.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test04707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04707");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitIntInsn(65536, (int) (short) 1792);
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "\001");
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04708");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitIntInsn(6, 52);
        methodVisitor69.visitTypeInsn(1, "hi!");
        org.mockito.asm.Label label90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(129, label90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04709");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        long long10 = classReader4.readLong(5);
        byte[] byteArray11 = classReader4.b;
        short short13 = classReader4.readShort(12);
        int int14 = classReader4.header;
        int int15 = classReader4.getAccess();
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter18.visitEnd();
        classWriter18.visitSource("hi!", "");
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter18.visit((int) 'a', (int) '4', "", "hi!", "", strArray34);
        byte[] byteArray36 = classWriter18.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter18.visitAnnotation("", false);
        byte[] byteArray40 = classWriter18.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader41, 2);
        byte[] byteArray44 = classReader41.b;
        java.lang.String str45 = classReader41.getSuperName();
        java.lang.String[] strArray46 = classReader41.getInterfaces();
        int int47 = classReader41.header;
        char[] charArray53 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str54 = classReader41.readUTF8(20, charArray53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj55 = classReader4.readConst(57174305, charArray53);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 57174305");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 16777216L + "'", long10 == 16777216L);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short13 + "' != '" + (short) 0 + "'", short13 == (short) 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 103 + "'", int47 == 103);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test04710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04710");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn(256);
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("", 186);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label84 = null;
        int[] intArray85 = new int[] {};
        org.mockito.asm.Label[] labelArray86 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label84, intArray85, labelArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[]");
        org.junit.Assert.assertNotNull(labelArray86);
    }

    @Test
    public void test04711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04711");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotation("\007\000", true);
        org.mockito.asm.Label label79 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(3, label79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test04712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04712");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", (-1));
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        byte[] byteArray37 = classWriter35.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter35.visitAnnotation("", true);
        classWriter35.visitOuterClass("", "", "hi!");
        int int49 = classWriter35.newMethod("", "hi!", "hi!", true);
        int int53 = classWriter35.newField("hi!", "", "hi!");
        classWriter35.visitInnerClass("hi!", "hi!", "", 7);
        int int62 = classWriter35.newField("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter35.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter72.visitEnd();
        byte[] byteArray74 = classWriter72.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter72.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter84.visitEnd();
        byte[] byteArray86 = classWriter84.toByteArray();
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray86);
        java.lang.String[] strArray88 = classReader87.getInterfaces();
        int int89 = classReader87.getAccess();
        int int91 = classReader87.readUnsignedShort(4);
        int int93 = classReader87.readByte(5);
        java.lang.String[] strArray94 = classReader87.getInterfaces();
        classWriter72.visit(2, (int) (short) -1, "", "", "hi!", strArray94);
        classWriter35.visit(7, 73, "hi!", "", "hi!", strArray94);
        classWriter1.visit((int) (short) 29813, (int) (short) 1792, "", "", "\001", strArray94);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6 + "'", int49 == 6);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 9 + "'", int62 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(strArray94);
    }

    @Test
    public void test04713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04713");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter1.visitAnnotation("", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter1.visitAnnotation("", false);
        int int46 = classWriter1.newMethod("\001", "", "hi!", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
    }

    @Test
    public void test04714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04714");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.Label label75 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(28526, label75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
    }

    @Test
    public void test04715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04715");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitVarInsn(12, 0);
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -16896);
        methodVisitor69.visitIntInsn((int) (short) 29285, (int) (short) 9);
        org.mockito.asm.Label label85 = null;
        int[] intArray91 = new int[] { (short) 9, (short) 5203, (short) 29813, 0, 20 };
        org.mockito.asm.Label[] labelArray92 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label85, intArray91, labelArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[9, 5203, 29813, 0, 20]");
        org.junit.Assert.assertNotNull(labelArray92);
    }

    @Test
    public void test04716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04716");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(0, 83886080);
        methodVisitor69.visitIincInsn(65536, (int) (short) 26978);
        org.mockito.asm.Label label80 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(27, label80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04717");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        int int8 = classWriter1.newUTF8("");
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute10 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04718");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String str23 = classReader22.getSuperName();
        java.lang.String[] strArray24 = classReader22.getInterfaces();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int31 = classWriter26.newMethod("", "", "hi!", false);
        classWriter26.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter26.visitAnnotation("", true);
        classWriter26.visitEnd();
        classReader22.accept((org.mockito.asm.ClassVisitor) classWriter26, (int) '4');
        java.lang.String str39 = classReader22.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            long long41 = classReader22.readLong(57174305);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test04719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04719");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray6 = classReader5.b;
        int int8 = classReader5.readUnsignedShort(2);
        int int10 = classReader5.readInt(13);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(classReader5, (int) (short) 29813);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 47806 + "'", int8 == 47806);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test04720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04720");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray2, (int) (byte) 0, (-1));
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        classWriter7.visitSource("hi!", "");
        int int16 = classWriter7.newMethod("", "hi!", "", false);
        org.mockito.asm.Attribute[] attributeArray17 = new org.mockito.asm.Attribute[] {};
        // The following exception was thrown during execution in test generation
        try {
            classReader5.accept((org.mockito.asm.ClassVisitor) classWriter7, attributeArray17, 15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(attributeArray17);
    }

    @Test
    public void test04721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04721");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader4.readUnsignedShort((int) (short) 0);
        byte[] byteArray7 = classReader4.b;
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray7);
        byte[] byteArray9 = classReader8.b;
        java.lang.String[] strArray10 = classReader8.getInterfaces();
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        classWriter12.visitInnerClass("hi!", "", "", (int) 'a');
        int int38 = classWriter12.newField("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter51.visitEnd();
        byte[] byteArray53 = classWriter51.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        java.lang.String[] strArray55 = classReader54.getInterfaces();
        int int56 = classReader54.getAccess();
        int int58 = classReader54.readUnsignedShort(4);
        int int60 = classReader54.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor61 = classWriter45.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray69 = new java.lang.String[] { "", "hi!" };
        classWriter45.visit((int) (byte) 10, (-1), "", "", "", strArray69);
        classWriter12.visit((-889275714), 0, "", "hi!", "hi!", strArray69);
        // The following exception was thrown during execution in test generation
        try {
            classReader8.accept((org.mockito.asm.ClassVisitor) classWriter12, 18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51966 + "'", int6 == 51966);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor61);
        org.junit.Assert.assertNotNull(strArray69);
    }

    @Test
    public void test04722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04722");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        int int8 = classReader4.readInt(6);
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        int int10 = classReader4.header;
        byte[] byteArray11 = classReader4.b;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = classReader4.readInt(8449);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04723");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitMethodInsn(202, "hi!", "", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test04724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04724");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        methodVisitor69.visitTryCatchBlock(label80, label81, label82, "");
        methodVisitor69.visitFieldInsn(1, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.Label label93 = null;
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        methodVisitor69.visitTryCatchBlock(label93, label94, label95, "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test04725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04725");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter30.visitAnnotation("", true);
        int int36 = classWriter30.newNameType("hi!", "hi!");
        classWriter30.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        classWriter48.visitSource("hi!", "");
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter48.visit((int) 'a', (int) '4', "", "hi!", "", strArray64);
        byte[] byteArray66 = classWriter48.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter48.visitAnnotation("", false);
        byte[] byteArray70 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        java.lang.String[] strArray72 = classReader71.getInterfaces();
        classWriter30.visit(51966, (int) 'a', "", "\007\000", "", strArray72);
        classWriter30.visitEnd();
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter30, (int) (byte) 1);
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter78.visitEnd();
        byte[] byteArray80 = classWriter78.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = classWriter78.visitAnnotation("", true);
        classWriter78.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = classWriter78.visitAnnotation("", false);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter78, 0);
        java.lang.String str94 = classReader20.getSuperName();
        int int95 = classReader20.header;
        byte[] byteArray96 = classReader20.b;
        org.mockito.asm.ClassWriter classWriter98 = new org.mockito.asm.ClassWriter(classReader20, 15);
        java.lang.String[] strArray99 = classReader20.getInterfaces();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor91);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 73 + "'", int95 == 73);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray99);
    }

    @Test
    public void test04726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04726");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader24, 5);
        classWriter27.visitOuterClass("\007\000", "", "hi!");
        classWriter27.visitEnd();
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter27.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
    }

    @Test
    public void test04727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04727");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        classWriter26.visitOuterClass("hi!", "", "hi!");
        int int40 = classWriter26.newField("hi!", "\007\000", "");
        int int42 = classWriter26.newConst((java.lang.Object) (-3819410108757049344L));
        classWriter26.visitSource("hi!", "hi!");
        int int47 = classWriter26.newClass("");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
    }

    @Test
    public void test04728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04728");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt(4);
        short short9 = classReader4.readShort(13);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader32, 256);
        int int36 = classReader32.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        classWriter39.visitSource("hi!", "");
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter39.visit((int) 'a', (int) '4', "", "hi!", "", strArray55);
        byte[] byteArray57 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader58.accept((org.mockito.asm.ClassVisitor) classWriter60, 8);
        char[] charArray69 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj70 = classReader58.readConst((int) (short) 1, charArray69);
        java.lang.Object obj71 = classReader32.readConst(4, charArray69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = classReader4.readClass(57174305, charArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj70 + "' != '" + "\007\000" + "'", obj70, "\007\000");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "Lhi!;");
    }

    @Test
    public void test04729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04729");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        classWriter22.visitInnerClass("\007\000", "hi!", "hi!", 20);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        byte[] byteArray38 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        int int41 = classReader39.readUnsignedShort((int) (short) 0);
        byte[] byteArray42 = classReader39.b;
        byte[] byteArray43 = classReader39.b;
        int int44 = classReader39.header;
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter22.visitField(6, "", "", "\001", (java.lang.Object) int44);
        classWriter22.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 51966 + "'", int41 == 51966);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(fieldVisitor45);
    }

    @Test
    public void test04730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04730");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        byte[] byteArray8 = classReader7.b;
        java.lang.String[] strArray9 = classReader7.getInterfaces();
        char[] charArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = classReader7.readConst(26913, charArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26913");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray9);
    }

    @Test
    public void test04731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04731");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter28.visitAnnotation("hi!", true);
        classWriter28.visitEnd();
        byte[] byteArray46 = classWriter28.toByteArray();
        byte[] byteArray47 = classWriter28.toByteArray();
        int int49 = classWriter28.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int52 = classReader20.getAccess();
        byte[] byteArray53 = classReader20.b;
        byte[] byteArray54 = classReader20.b;
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        int int56 = classReader55.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int58 = classReader55.getItem(1399416686);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1399416686");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 52 + "'", int56 == 52);
    }

    @Test
    public void test04732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04732");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter13.visitAnnotation("", true);
        classWriter13.visitSource("", "");
        classWriter13.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor28 = classWriter13.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter13.visitOuterClass("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(100, "", "hi!", "", (java.lang.Object) "");
        classWriter1.visitInnerClass("", "", "", (int) '4');
        int int42 = classWriter1.newField("", "", "");
        int int44 = classWriter1.newClass("\007\000");
        int int48 = classWriter1.newField("\007\000", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "\001", (int) (short) -16896);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter1.visitAnnotation("\007\000", false);
        classWriter1.visitOuterClass("", "\001", "\001");
        int int63 = classWriter1.newNameType("", "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(fieldVisitor28);
        org.junit.Assert.assertNotNull(fieldVisitor33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 12 + "'", int48 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 7 + "'", int63 == 7);
    }

    @Test
    public void test04733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04733");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        int int22 = classWriter1.newUTF8("\007\000");
        classWriter1.visitOuterClass("\001", "\001", "\007\000");
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        byte[] byteArray30 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        java.lang.String[] strArray32 = classReader31.getInterfaces();
        int int33 = classReader31.getAccess();
        int int35 = classReader31.readUnsignedShort(4);
        int int37 = classReader31.readByte(5);
        java.lang.String[] strArray38 = classReader31.getInterfaces();
        byte[] byteArray39 = classReader31.b;
        java.lang.Class<?> wildcardClass40 = classReader31.getClass();
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classWriter1.newConst((java.lang.Object) classReader31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@1529d176");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test04734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04734");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        int int8 = classWriter1.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        classWriter15.visitSource("hi!", "");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter15.visit((int) 'a', (int) '4', "", "hi!", "", strArray31);
        byte[] byteArray33 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader34.accept((org.mockito.asm.ClassVisitor) classWriter36, 8);
        long long40 = classReader34.readLong(7);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter42.visitAnnotation("", true);
        int int48 = classWriter42.newNameType("hi!", "hi!");
        classReader34.accept((org.mockito.asm.ClassVisitor) classWriter42, (int) (byte) 0);
        java.lang.String str51 = classReader34.getClassName();
        java.lang.String str52 = classReader34.getSuperName();
        java.lang.String[] strArray53 = classReader34.getInterfaces();
        classWriter1.visit((int) ' ', 0, "", "\007\000", "hi!", strArray53);
        int int56 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("\001", "");
        classWriter1.visitInnerClass("\007\000", "\007\000", "\007\000", 20);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter75.visitEnd();
        byte[] byteArray77 = classWriter75.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray77);
        java.lang.String[] strArray79 = classReader78.getInterfaces();
        int int81 = classReader78.readInt((int) (byte) 0);
        java.lang.String str82 = classReader78.getSuperName();
        java.lang.String[] strArray83 = classReader78.getInterfaces();
        java.lang.String[] strArray84 = classReader78.getInterfaces();
        classWriter1.visit((int) (short) 24832, 0, "hi!", "hi!", "\007\000", strArray84);
        classWriter1.visitInnerClass("hi!", "hi!", "\007\000", (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 6989595422067222633L + "'", long40 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-889275714) + "'", int81 == (-889275714));
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strArray84);
    }

    @Test
    public void test04735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04735");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        classWriter38.visitSource("hi!", "");
        classWriter38.visitEnd();
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        classWriter38.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter38.visitAnnotation("hi!", true);
        classWriter38.visitEnd();
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, 1751720193);
        classWriter38.visitInnerClass("\007\000", "hi!", "\007\000", 2);
        int int66 = classWriter38.newField("", "", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 9 + "'", int66 == 9);
    }

    @Test
    public void test04736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04736");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        int int10 = classReader4.getAccess();
        int int12 = classReader4.readUnsignedShort((int) (short) 0);
        int int14 = classReader4.readInt(4);
        byte[] byteArray15 = classReader4.b;
        short short17 = classReader4.readShort(15);
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter20.visitEnd();
        classWriter20.visitSource("hi!", "");
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter20.visit((int) 'a', (int) '4', "", "hi!", "", strArray36);
        byte[] byteArray38 = classWriter20.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader39.accept((org.mockito.asm.ClassVisitor) classWriter41, 8);
        long long45 = classReader39.readLong(7);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter47.visitAnnotation("", true);
        int int53 = classWriter47.newNameType("hi!", "hi!");
        classReader39.accept((org.mockito.asm.ClassVisitor) classWriter47, (int) (byte) 0);
        int int57 = classReader39.getItem(0);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter60.visitEnd();
        classWriter60.visitSource("hi!", "");
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter60.visit((int) 'a', (int) '4', "", "hi!", "", strArray76);
        byte[] byteArray78 = classWriter60.toByteArray();
        org.mockito.asm.ClassReader classReader79 = new org.mockito.asm.ClassReader(byteArray78);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader79.accept((org.mockito.asm.ClassVisitor) classWriter81, 8);
        char[] charArray90 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj91 = classReader79.readConst((int) (short) 1, charArray90);
        java.lang.String str92 = classReader39.readUTF8(103, charArray90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = classReader4.readUTF8((int) (short) 26978, charArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51966 + "'", int12 == 51966);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short17 + "' != '" + (short) 0 + "'", short17 == (short) 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 6989595422067222633L + "'", long45 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray90);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray90), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray90), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray90), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj91 + "' != '" + "\007\000" + "'", obj91, "\007\000");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test04737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04737");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int43 = classWriter38.newMethod("", "", "hi!", false);
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter53.visitAnnotation("", true);
        classWriter53.visitSource("", "");
        classWriter53.visitSource("", "hi!");
        int int66 = classWriter53.newField("hi!", "hi!", "hi!");
        int int70 = classWriter53.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter38.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter38.visitAnnotation("", true);
        org.mockito.asm.Attribute[] attributeArray75 = new org.mockito.asm.Attribute[] {};
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, attributeArray75, 256);
        byte[] byteArray78 = classReader20.b;
        // The following exception was thrown during execution in test generation
        try {
            long long80 = classReader20.readLong(48640);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(attributeArray75);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test04738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04738");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        fieldVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = fieldVisitor16.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = annotationVisitor20.visitArray("hi!");
        annotationVisitor22.visitEnum("", "", "");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test04739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04739");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        classWriter38.visitSource("hi!", "");
        classWriter38.visitEnd();
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        classWriter38.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter38.visitAnnotation("hi!", true);
        classWriter38.visitEnd();
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, 1751720193);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter38.visitAnnotation("", true);
        annotationVisitor60.visitEnum("hi!", "hi!", "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor60);
    }

    @Test
    public void test04740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04740");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = annotationVisitor17.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = annotationVisitor17.visitArray("\001");
        annotationVisitor21.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = annotationVisitor21.visitAnnotation("", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = annotationVisitor21.visitArray("\001");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor27);
    }

    @Test
    public void test04741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04741");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter13.visitAnnotation("", true);
        classWriter13.visitSource("", "");
        classWriter13.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor28 = classWriter13.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter13.visitOuterClass("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(100, "", "hi!", "", (java.lang.Object) "");
        fieldVisitor33.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor33.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor33.visitAnnotation("\001", true);
        annotationVisitor40.visitEnum("", "hi!", "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(fieldVisitor28);
        org.junit.Assert.assertNotNull(fieldVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test04742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04742");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int6 = classReader4.getAccess();
        byte[] byteArray7 = classReader4.b;
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray7, 10, 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        byte[] byteArray31 = classWriter13.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader32.accept((org.mockito.asm.ClassVisitor) classWriter34, 8);
        long long38 = classReader32.readLong(7);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter40.visitAnnotation("", true);
        int int46 = classWriter40.newNameType("hi!", "hi!");
        classReader32.accept((org.mockito.asm.ClassVisitor) classWriter40, (int) (byte) 0);
        int int50 = classReader32.getItem(0);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter53.visitEnd();
        classWriter53.visitSource("hi!", "");
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter53.visit((int) 'a', (int) '4', "", "hi!", "", strArray69);
        byte[] byteArray71 = classWriter53.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader72.accept((org.mockito.asm.ClassVisitor) classWriter74, 8);
        char[] charArray83 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj84 = classReader72.readConst((int) (short) 1, charArray83);
        java.lang.String str85 = classReader32.readUTF8(103, charArray83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = classReader10.readClass(13, charArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 6989595422067222633L + "'", long38 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray83);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray83), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray83), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray83), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj84 + "' != '" + "\007\000" + "'", obj84, "\007\000");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test04743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04743");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt(4);
        int int8 = classReader4.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = classReader4.readUnsignedShort((int) (short) 26913);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26913");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test04744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04744");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray3, (int) (byte) -1, 100);
        int int7 = classReader6.header;
        int int9 = classReader6.readInt(9);
        byte[] byteArray10 = classReader6.b;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader6.getItem(103);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 103");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16777216 + "'", int9 == 16777216);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04745");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        int int31 = classWriter29.newClass("\007\000");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int42 = classWriter37.newMethod("", "", "hi!", false);
        classWriter37.visitEnd();
        int int45 = classWriter37.newClass("");
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter52.visitEnd();
        byte[] byteArray54 = classWriter52.toByteArray();
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        java.lang.String[] strArray56 = classReader55.getInterfaces();
        int int58 = classReader55.readInt((int) (byte) 0);
        java.lang.String str59 = classReader55.getSuperName();
        java.lang.String[] strArray60 = classReader55.getInterfaces();
        java.lang.String[] strArray61 = classReader55.getInterfaces();
        classWriter37.visit(2, (-1), "hi!", "hi!", "hi!", strArray61);
        org.mockito.asm.MethodVisitor methodVisitor63 = classWriter29.visitMethod((-1), "\007\000", "", "\007\000", strArray61);
        methodVisitor63.visitVarInsn(51966, 17);
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = methodVisitor63.visitAnnotationDefault();
        annotationVisitor67.visitEnum("", "", "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-889275714) + "'", int58 == (-889275714));
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(methodVisitor63);
        org.junit.Assert.assertNotNull(annotationVisitor67);
    }

    @Test
    public void test04746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04746");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        int int37 = classReader35.readByte(10);
        int int38 = classReader35.header;
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        classWriter40.visitSource("hi!", "");
        int int49 = classWriter40.newMethod("", "hi!", "", false);
        classWriter40.visitOuterClass("hi!", "\007\000", "hi!");
        classWriter40.visitInnerClass("", "\007\000", "hi!", (int) (byte) 1);
        classReader35.accept((org.mockito.asm.ClassVisitor) classWriter40, 9);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = classReader35.readInt(196613);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 88 + "'", int38 == 88);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
    }

    @Test
    public void test04747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04747");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(254, (int) ' ');
        methodVisitor69.visitInsn((int) (short) -1);
        methodVisitor69.visitInsn(83886080);
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\007\000", "hi!", "", label94, label95, 2049);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test04748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04748");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str37 = classReader20.getClassName();
        java.lang.String str38 = classReader20.getSuperName();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter52.visitEnd();
        classWriter52.visitSource("hi!", "");
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter52.visit((int) 'a', (int) '4', "", "hi!", "", strArray68);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter76.visitEnd();
        classWriter76.visitSource("hi!", "");
        java.lang.String[] strArray92 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter76.visit((int) 'a', (int) '4', "", "hi!", "", strArray92);
        classWriter52.visit((int) (byte) 1, 100, "", "hi!", "", strArray92);
        classWriter40.visit((int) '4', (int) (short) 100, "", "", "", strArray92);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter40, 11);
        byte[] byteArray98 = classReader20.b;
        java.lang.String[] strArray99 = classReader20.getInterfaces();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray99);
    }

    @Test
    public void test04749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04749");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Attribute attribute79 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test04750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04750");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        int int25 = classReader21.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        byte[] byteArray46 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader47.accept((org.mockito.asm.ClassVisitor) classWriter49, 8);
        char[] charArray58 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj59 = classReader47.readConst((int) (short) 1, charArray58);
        java.lang.Object obj60 = classReader21.readConst(4, charArray58);
        java.lang.String str61 = classReader21.getClassName();
        short short63 = classReader21.readShort(7);
        // The following exception was thrown during execution in test generation
        try {
            short short65 = classReader21.readShort((int) (short) -16896);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -16896");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + "\007\000" + "'", obj59, "\007\000");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "Lhi!;");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + short63 + "' != '" + (short) 24832 + "'", short63 == (short) 24832);
    }

    @Test
    public void test04751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04751");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(9, "", "", "hi!");
        methodVisitor69.visitFieldInsn(6, "hi!", "", "");
        methodVisitor69.visitInsn(100);
        methodVisitor69.visitMaxs(15, (int) (short) 0);
        org.mockito.asm.Label label98 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(1919222016, label98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04752");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter26.visitAnnotation("\001", false);
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter26.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test04753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04753");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) -1, (int) (byte) -1);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitFieldInsn(1763770624, "hi!", "\007\000", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotation("\007\000", true);
        methodVisitor69.visitFieldInsn(5, "\001", "\001", "hi!");
        org.mockito.asm.Label label93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(16777216, label93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test04754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04754");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(47806, (int) (short) 0);
        methodVisitor69.visitIntInsn(254, 6);
        methodVisitor69.visitMaxs(5, 73);
        methodVisitor69.visitVarInsn((int) (byte) -1, 0);
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        methodVisitor69.visitTryCatchBlock(label90, label91, label92, "");
        methodVisitor69.visitMethodInsn(3072, "\007\000", "", "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test04755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04755");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMaxs(16777223, 13);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotation("hi!", false);
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label[] labelArray87 = new org.mockito.asm.Label[] { label86 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(48640, 151060483, label85, labelArray87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(labelArray87);
    }

    @Test
    public void test04756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04756");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        fieldVisitor36.visitEnd();
        fieldVisitor36.visitEnd();
        fieldVisitor36.visitEnd();
        fieldVisitor36.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = fieldVisitor36.visitAnnotation("\001", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = fieldVisitor36.visitAnnotation("", false);
        fieldVisitor36.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor46);
    }

    @Test
    public void test04757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04757");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter1.visitSource("", "");
        int int24 = classWriter1.newClass("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray28 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray28, (int) (byte) -1, 3);
        int int33 = classReader31.readByte(2);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 100);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        byte[] byteArray55 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader56.accept((org.mockito.asm.ClassVisitor) classWriter58, 8);
        byte[] byteArray61 = classWriter58.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        short short64 = classReader62.readShort(13);
        int int65 = classReader62.getAccess();
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter67.visitAnnotation("", true);
        classWriter67.visitSource("", "");
        classWriter67.visitSource("", "hi!");
        int int80 = classWriter67.newField("hi!", "hi!", "hi!");
        classWriter67.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter67.visitSource("", "");
        classWriter67.visitSource("hi!", "");
        org.mockito.asm.Attribute[] attributeArray92 = new org.mockito.asm.Attribute[] {};
        classReader62.accept((org.mockito.asm.ClassVisitor) classWriter67, attributeArray92, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            classReader31.accept((org.mockito.asm.ClassVisitor) classWriter35, attributeArray92, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 12, 0, 2, 0, 2, 9, 0, 3, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 10, 0, 1, 0, 3, 0, 6, 0, 1, 0, 32, 0, 10, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 11, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 186 + "'", int33 == 186);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) 1792 + "'", short64 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNotNull(attributeArray92);
    }

    @Test
    public void test04758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04758");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = annotationVisitor88.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = annotationVisitor88.visitArray("\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test04759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04759");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label71 = null;
        org.mockito.asm.Label label72 = null;
        org.mockito.asm.Label label73 = null;
        methodVisitor69.visitTryCatchBlock(label71, label72, label73, "hi!");
        methodVisitor69.visitVarInsn((int) (byte) 0, 0);
        methodVisitor69.visitTypeInsn(28, "hi!");
        methodVisitor69.visitIincInsn((int) '#', (int) (short) 256);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(1399416686, "", "\007\000", "\007\000");
        org.mockito.asm.Label label93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber((int) ' ', label93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test04760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04760");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        int int8 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "", 7);
        classWriter1.visitInnerClass("", "hi!", "", 17);
        int int20 = classWriter1.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("hi!", "");
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter26.visit((int) 'a', (int) '4', "", "hi!", "", strArray42);
        byte[] byteArray44 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader45.accept((org.mockito.asm.ClassVisitor) classWriter47, 8);
        byte[] byteArray50 = classWriter47.toByteArray();
        int int52 = classWriter47.newClass("hi!");
        int int55 = classWriter47.newNameType("\007\000", "\007\000");
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter62.visitAnnotation("", true);
        classWriter62.visitSource("", "");
        classWriter62.visitOuterClass("hi!", "", "");
        int int76 = classWriter62.newField("", "hi!", "");
        classWriter62.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter87 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter87.visitEnd();
        byte[] byteArray89 = classWriter87.toByteArray();
        org.mockito.asm.ClassReader classReader90 = new org.mockito.asm.ClassReader(byteArray89);
        java.lang.String[] strArray91 = classReader90.getInterfaces();
        int int93 = classReader90.readInt((int) (byte) 0);
        java.lang.String str94 = classReader90.getSuperName();
        java.lang.String[] strArray95 = classReader90.getInterfaces();
        java.lang.String[] strArray96 = classReader90.getInterfaces();
        classWriter62.visit(0, (int) (short) 0, "", "", "", strArray96);
        classWriter47.visit((int) (short) -1, 28, "\007\000", "\001", "", strArray96);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor99 = classWriter1.visitMethod(1869509376, "\001", "\007\000", "", strArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 4 + "'", int52 == 4);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 7 + "'", int76 == 7);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-889275714) + "'", int93 == (-889275714));
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertNotNull(strArray96);
    }

    @Test
    public void test04761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04761");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitVarInsn(6, 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn(223337, "", "\007\000", "\007\000");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(196612, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test04762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04762");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitVarInsn(8, (-1));
        methodVisitor69.visitIincInsn((int) (short) 256, (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitParameterAnnotation(57174305, "\007\000", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test04763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04763");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str37 = classReader20.getClassName();
        int int39 = classReader20.readInt(28);
        int int40 = classReader20.header;
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader20.readByte((int) (short) 2049);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2049");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1399416686 + "'", int39 == 1399416686);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 73 + "'", int40 == 73);
    }

    @Test
    public void test04764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04764");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        org.mockito.asm.Label label86 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(24832, label86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test04765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04765");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int6 = classReader4.getAccess();
        int int8 = classReader4.readUnsignedShort(4);
        int int10 = classReader4.readByte(5);
        java.lang.String[] strArray11 = classReader4.getInterfaces();
        java.lang.Class<?> wildcardClass12 = classReader4.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test04766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04766");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 254);
        methodVisitor69.visitIntInsn((int) (byte) -1, 52);
        methodVisitor69.visitTypeInsn(1751720193, "");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor96 = methodVisitor69.visitParameterAnnotation(48640, "\001", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04767");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        classWriter10.visitSource("hi!", "");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter10.visit((int) 'a', (int) '4', "", "hi!", "", strArray26);
        byte[] byteArray28 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray28);
        int int31 = classReader29.readInt((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor32 = classWriter1.visitField(2, "", "\001", "\007\000", (java.lang.Object) classReader29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@1912fa7e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1919222016 + "'", int31 == 1919222016);
    }

    @Test
    public void test04768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04768");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int26 = classReader24.readInt((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = classReader24.readByte(16777217);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16777217");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-21316096) + "'", int26 == (-21316096));
    }

    @Test
    public void test04769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04769");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readByte(6);
        short short9 = classReader4.readShort((int) (short) 1);
        int int10 = classReader4.header;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(classReader4, 341012341);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) -326 + "'", short9 == (short) -326);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test04770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04770");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        int int13 = classWriter1.newUTF8("hi!");
        byte[] byteArray14 = classWriter1.toByteArray();
        int int17 = classWriter1.newNameType("\001", "hi!");
        int int19 = classWriter1.newUTF8("hi!");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
    }

    @Test
    public void test04771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04771");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(9, "", "", "hi!");
        methodVisitor69.visitIincInsn((-21316096), (-889275714));
        methodVisitor69.visitIincInsn(0, 20);
        methodVisitor69.visitMaxs(196613, 114);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04772");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        methodVisitor69.visitEnd();
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label[] labelArray92 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(3072, (int) (byte) 10, label91, labelArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray92);
    }

    @Test
    public void test04773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04773");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        byte[] byteArray42 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        java.lang.String[] strArray44 = classReader43.getInterfaces();
        int int45 = classReader43.getAccess();
        int int47 = classReader43.readUnsignedShort(4);
        int int49 = classReader43.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter34.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (byte) 10, (-1), "", "", "", strArray58);
        classWriter1.visit((-889275714), 0, "", "hi!", "hi!", strArray58);
        classWriter1.visitSource("\001", "\001");
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter65.visitEnd();
        classWriter65.visitSource("hi!", "");
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter65.visit((int) 'a', (int) '4', "", "hi!", "", strArray81);
        byte[] byteArray83 = classWriter65.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter65.visitAnnotation("", false);
        byte[] byteArray87 = classWriter65.toByteArray();
        org.mockito.asm.ClassReader classReader88 = new org.mockito.asm.ClassReader(byteArray87);
        org.mockito.asm.ClassWriter classWriter90 = new org.mockito.asm.ClassWriter(classReader88, 2);
        byte[] byteArray91 = classReader88.b;
        java.lang.String str92 = classReader88.getClassName();
        short short94 = classReader88.readShort((int) (short) 10);
        byte[] byteArray95 = classReader88.b;
        java.lang.String[] strArray96 = classReader88.getInterfaces();
        byte[] byteArray97 = classReader88.b;
        // The following exception was thrown during execution in test generation
        try {
            int int98 = classWriter1.newConst((java.lang.Object) byteArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@1793b8c8");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertTrue("'" + short94 + "' != '" + (short) 256 + "'", short94 == (short) 256);
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test04774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04774");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(1751720193, (int) (short) 1792);
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn(196613, 104);
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = methodVisitor69.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor96 = annotationVisitor94.visitArray("\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(annotationVisitor94);
        org.junit.Assert.assertNotNull(annotationVisitor96);
    }

    @Test
    public void test04775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04775");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor21.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = annotationVisitor21.visitArray("hi!");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor25);
    }

    @Test
    public void test04776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04776");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        int int14 = classWriter1.newNameType("", "hi!");
        int int16 = classWriter1.newUTF8("");
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter18.visitEnd();
        classWriter18.visitSource("hi!", "");
        byte[] byteArray23 = classWriter18.toByteArray();
        classWriter18.visitOuterClass("hi!", "", "\007\000");
        int int28 = classWriter1.newConst((java.lang.Object) "\007\000");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
    }

    @Test
    public void test04777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04777");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn((-889275714), "hi!");
        methodVisitor69.visitVarInsn(0, 1751720193);
        methodVisitor69.visitMethodInsn(52, "", "hi!", "hi!");
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor69.visitAnnotation("\007\000", false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor98);
    }

    @Test
    public void test04778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04778");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classWriter26.newConst((java.lang.Object) 73);
        classWriter26.visitInnerClass("", "\001", "", 5);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter26.visitAnnotation("", false);
        java.lang.Class<?> wildcardClass43 = annotationVisitor42.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5 + "'", int34 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test04779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04779");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotation("\007\000", true);
        methodVisitor69.visitIincInsn(100, 254);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitParameterAnnotation(0, "hi!", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test04780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04780");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        methodVisitor69.visitMaxs(14, 8);
        methodVisitor69.visitMethodInsn(103, "hi!", "", "\007\000");
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(100, "\001", "\007\000", "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test04781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04781");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor8 = annotationVisitor4.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = annotationVisitor8.visitAnnotation("hi!", "");
        annotationVisitor11.visitEnum("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = annotationVisitor11.visitArray("hi!");
        annotationVisitor11.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = annotationVisitor11.visitAnnotation("\007\000", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor11.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = annotationVisitor23.visitAnnotation("", "\001");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor8);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test04782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04782");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int43 = classWriter38.newMethod("", "", "hi!", false);
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter53.visitAnnotation("", true);
        classWriter53.visitSource("", "");
        classWriter53.visitSource("", "hi!");
        int int66 = classWriter53.newField("hi!", "hi!", "hi!");
        int int70 = classWriter53.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter38.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter38.visitAnnotation("", true);
        org.mockito.asm.Attribute[] attributeArray75 = new org.mockito.asm.Attribute[] {};
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, attributeArray75, 256);
        int int79 = classReader20.readInt(13);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter81.visitEnd();
        classWriter81.visitSource("hi!", "");
        classWriter81.visitEnd();
        int int88 = classWriter81.newUTF8("");
        int int91 = classWriter81.newNameType("", "\007\000");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter81, 254);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = classReader20.readInt(57174305);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(attributeArray75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1751720193 + "'", int79 == 1751720193);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
    }

    @Test
    public void test04783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04783");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(51966, "", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitMethodInsn(8, "\007\000", "\001", "\007\000");
        methodVisitor69.visitIntInsn(1792, 129);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test04784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04784");
        byte[] byteArray4 = new byte[] { (byte) 0, (byte) -1, (byte) 100, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, -1, 100, 1]");
    }

    @Test
    public void test04785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04785");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        int int16 = classWriter1.newUTF8("");
        int int18 = classWriter1.newUTF8("");
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter24.visitAnnotation("", true);
        classWriter24.visitSource("", "");
        classWriter24.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor39 = classWriter24.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        fieldVisitor39.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor41 = classWriter1.visitField(13, "", "\007\000", "\001", (java.lang.Object) fieldVisitor39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.FieldWriter@32a12594");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(fieldVisitor39);
    }

    @Test
    public void test04786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04786");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        methodVisitor69.visitTryCatchBlock(label80, label81, label82, "");
        methodVisitor69.visitFieldInsn(1, "", "", "hi!");
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        methodVisitor69.visitTryCatchBlock(label90, label91, label92, "");
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04787");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor7 = classWriter1.visitAnnotation("\007\000", true);
        classWriter1.visitOuterClass("\007\000", "", "hi!");
        int int15 = classWriter1.newField("hi!", "", "\001");
        classWriter1.visitSource("hi!", "\001");
        org.junit.Assert.assertNotNull(annotationVisitor7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test04788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04788");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        int int15 = classWriter1.newMethod("", "", "hi!", true);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        classWriter21.visitSource("hi!", "");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter21.visit((int) 'a', (int) '4', "", "hi!", "", strArray37);
        classWriter21.visitOuterClass("hi!", "", "hi!");
        int int47 = classWriter21.newMethod("hi!", "", "hi!", true);
        classWriter21.visitEnd();
        classWriter21.visitInnerClass("", "\007\000", "\007\000", 51);
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter1.visitField(0, "hi!", "\007\000", "hi!", (java.lang.Object) "\007\000");
        classWriter1.visitInnerClass("", "\001", "", 7);
        classWriter1.visitInnerClass("\007\000", "", "\001", 15);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter70.visitEnd();
        classWriter70.visitSource("hi!", "");
        classWriter70.visitEnd();
        byte[] byteArray76 = classWriter70.toByteArray();
        org.mockito.asm.ClassReader classReader77 = new org.mockito.asm.ClassReader(byteArray76);
        java.lang.String[] strArray78 = classReader77.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor79 = classWriter1.visitMethod(6, "\007\000", "hi!", "", strArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor54);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test04789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04789");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitTypeInsn(116, "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test04790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04790");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        classWriter1.visitOuterClass("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor63 = classWriter1.visitAnnotation("\007\000", true);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter65.visitAnnotation("", true);
        int int71 = classWriter65.newNameType("hi!", "hi!");
        int int75 = classWriter65.newField("hi!", "hi!", "hi!");
        int int77 = classWriter65.newUTF8("hi!");
        int int79 = classWriter65.newUTF8("hi!");
        classWriter65.visitOuterClass("", "hi!", "hi!");
        classWriter65.visitSource("", "\007\000");
        int int87 = classWriter1.newConst((java.lang.Object) "");
        org.mockito.asm.ClassWriter classWriter93 = new org.mockito.asm.ClassWriter((-889275714));
        int int95 = classWriter93.newClass("\001");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor96 = classWriter1.visitField((int) (short) 256, "\001", "\001", "\001", (java.lang.Object) classWriter93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@1a7f19c0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(annotationVisitor63);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 7 + "'", int87 == 7);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2 + "'", int95 == 2);
    }

    @Test
    public void test04791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04791");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int36 = classWriter1.newConst((java.lang.Object) 7);
        int int40 = classWriter1.newField("", "hi!", "hi!");
        int int42 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", (int) (short) 9);
        classWriter1.visitOuterClass("\007\000", "", "\007\000");
        org.mockito.asm.Attribute attribute52 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 7 + "'", int36 == 7);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
    }

    @Test
    public void test04792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04792");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) '#', (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn(83, "hi!", "hi!", "\007\000");
        methodVisitor69.visitMultiANewArrayInsn("\007\000", (int) (short) 8449);
        methodVisitor69.visitInsn(65536);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test04793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04793");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(254, (int) ' ');
        methodVisitor69.visitInsn((int) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitMaxs(2, 51);
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(16777217, label96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test04794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04794");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(1, "", "hi!", "");
        methodVisitor69.visitFieldInsn(15, "", "", "hi!");
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label[] labelArray91 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn((int) (short) -16896, 2049, label90, labelArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(labelArray91);
    }

    @Test
    public void test04795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04795");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn(13, 6);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMultiANewArrayInsn("", 114);
        org.mockito.asm.Label label91 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test04796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04796");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter49.visitEnd();
        classWriter49.visitSource("hi!", "");
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter49.visit((int) 'a', (int) '4', "", "hi!", "", strArray65);
        classWriter25.visit(2, 7, "", "", "hi!", strArray65);
        byte[] byteArray68 = classWriter25.toByteArray();
        classWriter25.visitInnerClass("hi!", "", "hi!", 3);
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter25, 8);
        classWriter25.visitInnerClass("\007\000", "\007\000", "hi!", (int) (short) 0);
        classWriter25.visitSource("", "\007\000");
        int int85 = classWriter25.newClass("\007\000");
        org.mockito.asm.Attribute attribute86 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter25.visitAttribute(attribute86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 2, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 7, 0, 3, 0, 4, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
    }

    @Test
    public void test04797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04797");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 1751720193);
        methodVisitor69.visitIincInsn(6, 1919222016);
        methodVisitor69.visitIntInsn((int) (short) 100, 14);
        methodVisitor69.visitIincInsn(2, 1751720193);
        methodVisitor69.visitMaxs((int) (byte) 0, (int) (short) 24832);
        methodVisitor69.visitFieldInsn(65536, "\007\000", "", "\007\000");
        methodVisitor69.visitIntInsn(16777216, 3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04798");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String str21 = classReader20.getClassName();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter24.visitEnd();
        classWriter24.visitSource("hi!", "");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter24.visit((int) 'a', (int) '4', "", "hi!", "", strArray40);
        byte[] byteArray42 = classWriter24.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray42);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter(classReader44, 256);
        int int48 = classReader44.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter51.visitEnd();
        classWriter51.visitSource("hi!", "");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter51.visit((int) 'a', (int) '4', "", "hi!", "", strArray67);
        byte[] byteArray69 = classWriter51.toByteArray();
        org.mockito.asm.ClassReader classReader70 = new org.mockito.asm.ClassReader(byteArray69);
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader70.accept((org.mockito.asm.ClassVisitor) classWriter72, 8);
        char[] charArray81 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj82 = classReader70.readConst((int) (short) 1, charArray81);
        java.lang.Object obj83 = classReader44.readConst(4, charArray81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = classReader20.readUTF8(10, charArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj82 + "' != '" + "\007\000" + "'", obj82, "\007\000");
        org.junit.Assert.assertNotNull(obj83);
        org.junit.Assert.assertEquals(obj83.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj83), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj83), "Lhi!;");
    }

    @Test
    public void test04799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04799");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        byte[] byteArray6 = classReader4.b;
        int int7 = classReader4.header;
        short short9 = classReader4.readShort((int) (short) 1);
        long long11 = classReader4.readLong((int) (short) 0);
        int int12 = classReader4.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = classReader4.readByte(73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 73");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) -326 + "'", short9 == (short) -326);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3819410108757049344L) + "'", long11 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test04800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04800");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitVarInsn(8, (-1));
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("hi!", true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitParameterAnnotation((int) (short) 26978, "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test04801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04801");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(12, 202);
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(186, "", "", "\007\000");
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(24832, "\007\000", "", "\007\000");
        methodVisitor69.visitIntInsn(12, 256);
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test04802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04802");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 0);
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label[] labelArray88 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(47806, 202, label87, labelArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(labelArray88);
    }

    @Test
    public void test04803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04803");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        int int59 = classWriter1.newNameType("hi!", "");
        int int64 = classWriter1.newMethod("", "", "", false);
        int int66 = classWriter1.newUTF8("\007\000");
        byte[] byteArray67 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader70 = new org.mockito.asm.ClassReader(byteArray67, (-1), (int) (short) 9);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 7 + "'", int64 == 7);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 52, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 3, 0, 1, 12, 0, 1, 0, 1, 10, 0, 2, 0, 6, 1, 0, 3, 7, -64, -128, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 100, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 3, 0, 10]");
    }

    @Test
    public void test04804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04804");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(83886080);
        org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter8.visitEnd();
        byte[] byteArray10 = classWriter8.toByteArray();
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray10);
        java.lang.String[] strArray12 = classReader11.getInterfaces();
        java.lang.String str13 = classReader11.getSuperName();
        long long15 = classReader11.readLong((int) (byte) 0);
        java.lang.String str16 = classReader11.getSuperName();
        java.lang.String str17 = classReader11.getSuperName();
        int int18 = classReader11.getAccess();
        int int20 = classReader11.readInt(4);
        java.lang.String[] strArray21 = classReader11.getInterfaces();
        classWriter1.visit(65210, 114, "hi!", "\007\000", "hi!", strArray21);
        int int25 = classWriter1.newNameType("\001", "\001");
        org.mockito.asm.Attribute attribute26 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-3819410108757049344L) + "'", long15 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
    }

    @Test
    public void test04805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04805");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str37 = classReader20.getClassName();
        int int39 = classReader20.readInt(28);
        int int40 = classReader20.getAccess();
        java.lang.Class<?> wildcardClass41 = classReader20.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1399416686 + "'", int39 == 1399416686);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test04806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04806");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter10.visitAnnotation("", true);
        classWriter10.visitSource("", "");
        classWriter10.visitOuterClass("hi!", "", "");
        classWriter10.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter30.visit((int) 'a', (int) '4', "", "hi!", "", strArray46);
        byte[] byteArray48 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter51, 8);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("", "");
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter55, 100);
        java.lang.String[] strArray62 = classReader49.getInterfaces();
        classWriter10.visit((-1), 256, "", "hi!", "", strArray62);
        org.mockito.asm.FieldVisitor fieldVisitor64 = classWriter1.visitField(11, "", "", "\007\000", (java.lang.Object) 256);
        classWriter1.visitEnd();
        int int67 = classWriter1.newUTF8("");
        classWriter1.visitOuterClass("hi!", "\007\000", "hi!");
        org.mockito.asm.Attribute attribute72 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(fieldVisitor64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
    }

    @Test
    public void test04807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04807");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readByte((int) (byte) 10);
        int int8 = classReader4.header;
        byte[] byteArray9 = classReader4.b;
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray9);
        long long13 = classReader11.readLong((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = classReader11.readUnsignedShort(29285);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 29285");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test04808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04808");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        long long9 = classReader7.readLong((int) (byte) 10);
        int int11 = classReader7.readUnsignedShort(0);
        byte[] byteArray12 = classReader7.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray12, 1025, 57174305);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 72061341013180672L + "'", long9 == 72061341013180672L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 51966 + "'", int11 == 51966);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
    }

    @Test
    public void test04809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04809");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("", false);
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label[] labelArray84 = new org.mockito.asm.Label[] { label83 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(88, 13, label82, labelArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(labelArray84);
    }

    @Test
    public void test04810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04810");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter22.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        classWriter33.visitSource("", "");
        int int40 = classWriter33.newNameType("hi!", "");
        classWriter33.visitOuterClass("", "", "");
        java.lang.String[] strArray50 = null;
        classWriter33.visit((int) '4', 7, "", "hi!", "", strArray50);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter33.visitAnnotation("\007\000", true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor55 = classWriter22.visitField(132864, "\001", "", "hi!", (java.lang.Object) annotationVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@69096e29");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor54);
    }

    @Test
    public void test04811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04811");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3, 2, (int) (short) -1);
        java.lang.String[] strArray9 = classReader8.getInterfaces();
        int int10 = classReader8.header;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = classReader8.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
    }

    @Test
    public void test04812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04812");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        java.lang.String str24 = classReader21.getClassName();
        java.lang.String str25 = classReader21.getSuperName();
        java.lang.String str26 = classReader21.getSuperName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        classWriter29.visitSource("hi!", "");
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter29.visit((int) 'a', (int) '4', "", "hi!", "", strArray45);
        byte[] byteArray47 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray47);
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray47);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(classReader49, 256);
        int int52 = classReader49.header;
        int int54 = classReader49.readInt(11);
        java.lang.String str55 = classReader49.getClassName();
        java.lang.String[] strArray56 = classReader49.getInterfaces();
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter59.visitEnd();
        classWriter59.visitSource("hi!", "");
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter59.visit((int) 'a', (int) '4', "", "hi!", "", strArray75);
        byte[] byteArray77 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray77);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader78.accept((org.mockito.asm.ClassVisitor) classWriter80, 8);
        char[] charArray89 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj90 = classReader78.readConst((int) (short) 1, charArray89);
        java.lang.Object obj91 = classReader49.readConst(1, charArray89);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj92 = classReader21.readConst((int) (short) 24832, charArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24832");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 73 + "'", int52 == 73);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 223337 + "'", int54 == 223337);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray89);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray89), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray89), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray89), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj90 + "' != '" + "\007\000" + "'", obj90, "\007\000");
        org.junit.Assert.assertEquals("'" + obj91 + "' != '" + "\007\000" + "'", obj91, "\007\000");
    }

    @Test
    public void test04813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04813");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter7.visitAnnotation("", true);
        classWriter7.visitSource("", "");
        classWriter7.visitSource("", "hi!");
        int int20 = classWriter7.newField("hi!", "hi!", "hi!");
        classWriter7.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter7.visitSource("", "");
        int int30 = classWriter7.newClass("hi!");
        classWriter7.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter7.visitAnnotation("", true);
        org.mockito.asm.FieldVisitor fieldVisitor35 = classWriter1.visitField(51966, "\001", "\001", "\007\000", (java.lang.Object) "");
        fieldVisitor35.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(fieldVisitor35);
    }

    @Test
    public void test04814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04814");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("\007\000", false);
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test04815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04815");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("", false);
        int int23 = classWriter1.newUTF8("");
        classWriter1.visitOuterClass("\007\000", "", "\007\000");
        classWriter1.visitOuterClass("", "hi!", "\007\000");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitSource("", "\001");
        classWriter1.visitOuterClass("\001", "\001", "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test04816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04816");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter1.visitSource("", "");
        int int24 = classWriter1.newClass("hi!");
        classWriter1.visitInnerClass("hi!", "", "hi!", (-889275714));
        byte[] byteArray30 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray30, 12, 33554688);
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader33.readUnsignedShort(47806);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 47806");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 12, 0, 2, 0, 2, 9, 0, 3, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 18, 0, 2, 0, 3, 0, 6, 0, 1, 0, 32, 0, 3, 0, 6, 0, 2, -70, -66, 0, 10, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04817");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitTypeInsn(73, "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test04818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04818");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitTypeInsn(48640, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn(47806, 4);
        org.mockito.asm.Label label96 = null;
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\001", "\001", "\007\000", label96, label97, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test04819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04819");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        short short10 = classReader4.readShort(10);
        int int12 = classReader4.readInt((int) (short) 1);
        int int13 = classReader4.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = classReader4.getItem((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-21316096) + "'", int12 == (-21316096));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04820");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str37 = classReader20.getClassName();
        int int39 = classReader20.readInt(28);
        java.lang.String str40 = classReader20.getSuperName();
        java.lang.String[] strArray41 = classReader20.getInterfaces();
        int int43 = classReader20.getItem(7);
        byte[] byteArray44 = classReader20.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray44, (int) (short) -1, 129);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1399416686 + "'", int39 == 1399416686);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 51 + "'", int43 == 51);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test04821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04821");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor8 = annotationVisitor4.visitArray("hi!");
        annotationVisitor4.visitEnum("", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = annotationVisitor4.visitArray("");
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        byte[] byteArray19 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String[] strArray21 = classReader20.getInterfaces();
        java.lang.String str22 = classReader20.getSuperName();
        long long24 = classReader20.readLong((int) (byte) 0);
        java.lang.String str25 = classReader20.getSuperName();
        java.lang.String str26 = classReader20.getSuperName();
        int int27 = classReader20.getAccess();
        int int29 = classReader20.readInt(4);
        java.lang.String[] strArray30 = classReader20.getInterfaces();
        byte[] byteArray31 = classReader20.b;
        int int32 = classReader20.header;
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor4.visit("\007\000", (java.lang.Object) strArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.String;@66afac4b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor8);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3819410108757049344L) + "'", long24 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(strArray33);
    }

    @Test
    public void test04822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04822");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = annotationVisitor84.visitArray("\001");
        annotationVisitor86.visitEnum("hi!", "", "\001");
        java.lang.Class<?> wildcardClass91 = annotationVisitor86.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test04823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04823");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        long long13 = classReader4.readLong((int) (byte) 0);
        byte[] byteArray14 = classReader4.b;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = classReader4.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3819410108757049344L) + "'", long13 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04824");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitTypeInsn(47806, "");
        org.mockito.asm.Attribute attribute83 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04825");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter13.visitAnnotation("", true);
        classWriter13.visitSource("", "");
        classWriter13.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor28 = classWriter13.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter13.visitOuterClass("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(100, "", "hi!", "", (java.lang.Object) "");
        fieldVisitor33.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = fieldVisitor33.visitAnnotation("hi!", true);
        fieldVisitor33.visitEnd();
        fieldVisitor33.visitEnd();
        fieldVisitor33.visitEnd();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(fieldVisitor28);
        org.junit.Assert.assertNotNull(fieldVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor37);
    }

    @Test
    public void test04826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04826");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitInnerClass("hi!", "\007\000", "hi!", 119);
        classWriter1.visitOuterClass("hi!", "", "\007\000");
    }

    @Test
    public void test04827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04827");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getSuperName();
        java.lang.String[] strArray29 = classReader24.getInterfaces();
        int int30 = classReader24.header;
        char[] charArray36 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str37 = classReader24.readUTF8(20, charArray36);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = classReader24.readLong((int) (short) 8449);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 103 + "'", int30 == 103);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test04828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04828");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray2, (int) (byte) 0, (-1));
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray2);
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray2, (int) (short) 0, 51966);
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray2, 104, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04829");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitMaxs((int) (short) 0, 51966);
        methodVisitor69.visitInsn((int) (short) 10);
        org.mockito.asm.Attribute attribute96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04830");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter26.visitAnnotation("", true);
        int int32 = classWriter26.newNameType("hi!", "hi!");
        int int36 = classWriter26.newField("hi!", "hi!", "hi!");
        classWriter26.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter46.visitEnd();
        byte[] byteArray48 = classWriter46.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter46.visitAnnotation("", true);
        classWriter46.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter69.visitEnd();
        byte[] byteArray71 = classWriter69.toByteArray();
        org.mockito.asm.ClassReader classReader72 = new org.mockito.asm.ClassReader(byteArray71);
        java.lang.String[] strArray73 = classReader72.getInterfaces();
        int int74 = classReader72.getAccess();
        int int76 = classReader72.readUnsignedShort(4);
        int int78 = classReader72.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor79 = classWriter63.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray87 = new java.lang.String[] { "", "hi!" };
        classWriter63.visit((int) (byte) 10, (-1), "", "", "", strArray87);
        classWriter46.visit((int) (short) 256, 8, "", "hi!", "hi!", strArray87);
        classWriter26.visit((int) (short) -1, (-21316096), "hi!", "", "", strArray87);
        classWriter1.visit(202, 5, "hi!", "", "", strArray87);
        classWriter1.visitSource("hi!", "");
        int int97 = classWriter1.newNameType("", "hi!");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor79);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 4 + "'", int97 == 4);
    }

    @Test
    public void test04831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04831");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", false);
        int int8 = classWriter1.newUTF8("\007\000");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        byte[] byteArray17 = classWriter15.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter15.visitAnnotation("", true);
        classWriter15.visitOuterClass("", "", "hi!");
        int int29 = classWriter15.newMethod("", "hi!", "hi!", true);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "", "" };
        classWriter15.visit((int) (byte) 100, 7, "", "", "hi!", strArray39);
        classWriter1.visit(186, 0, "", "\007\000", "\007\000", strArray39);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter43.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = annotationVisitor46.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = annotationVisitor46.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = annotationVisitor46.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = annotationVisitor52.visitAnnotation("", "hi!");
        annotationVisitor52.visitEnd();
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter59.visitEnd();
        byte[] byteArray61 = classWriter59.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter59.visitAnnotation("", true);
        classWriter59.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = classWriter59.visitAnnotation("", false);
        classWriter59.visitSource("hi!", "");
        classWriter59.visitSource("hi!", "");
        classWriter59.visitInnerClass("", "hi!", "\007\000", (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter59.visitAnnotation("", false);
        annotationVisitor52.visit("", (java.lang.Object) false);
        int int88 = classWriter1.newConst((java.lang.Object) false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(annotationVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 7 + "'", int88 == 7);
    }

    @Test
    public void test04832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04832");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int3 = classWriter1.newClass("");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        byte[] byteArray21 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray21);
        java.lang.String[] strArray23 = classReader22.getInterfaces();
        int int24 = classReader22.getAccess();
        int int26 = classReader22.readUnsignedShort(4);
        int int28 = classReader22.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor29 = classWriter13.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        classWriter13.visit((int) (byte) 10, (-1), "", "", "", strArray37);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter44.visitEnd();
        classWriter44.visitSource("hi!", "");
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter44.visit((int) 'a', (int) '4', "", "hi!", "", strArray60);
        byte[] byteArray62 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader63.accept((org.mockito.asm.ClassVisitor) classWriter65, 8);
        long long69 = classReader63.readLong(7);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter71.visitAnnotation("", true);
        int int77 = classWriter71.newNameType("hi!", "hi!");
        classReader63.accept((org.mockito.asm.ClassVisitor) classWriter71, (int) (byte) 0);
        java.lang.String[] strArray80 = classReader63.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor81 = classWriter13.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray80);
        methodVisitor81.visitIincInsn(9, (int) 'a');
        methodVisitor81.visitMaxs((int) (short) 0, 48640);
        methodVisitor81.visitEnd();
        methodVisitor81.visitFieldInsn(5, "hi!", "", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor94 = classWriter1.visitField(151060483, "hi!", "\001", "hi!", (java.lang.Object) methodVisitor81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@36e43700");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 6989595422067222633L + "'", long69 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(methodVisitor81);
    }

    @Test
    public void test04833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04833");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        methodVisitor69.visitTypeInsn(114, "");
        methodVisitor69.visitTypeInsn((int) 'a', "hi!");
        methodVisitor69.visitFieldInsn((int) (short) 26913, "", "", "hi!");
        methodVisitor69.visitMethodInsn(129, "hi!", "\007\000", "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04834");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        long long31 = classReader24.readLong(0);
        int int32 = classReader24.header;
        byte[] byteArray33 = classReader24.b;
        // The following exception was thrown during execution in test generation
        try {
            int int35 = classReader24.getItem(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3819410108757049247L) + "'", long31 == (-3819410108757049247L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 103 + "'", int32 == 103);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test04835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04835");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute58 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
    }

    @Test
    public void test04836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04836");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        int int10 = classReader4.readByte(6);
        int int12 = classReader4.readInt(2);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(1);
        classWriter14.visitOuterClass("hi!", "", "");
        classWriter14.visitOuterClass("", "", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept((org.mockito.asm.ClassVisitor) classWriter14, 1399416686);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1161953280) + "'", int12 == (-1161953280));
    }

    @Test
    public void test04837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04837");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(254, (int) ' ');
        methodVisitor69.visitCode();
        org.mockito.asm.Attribute attribute88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test04838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04838");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter51.visitEnd();
        classWriter51.visitSource("hi!", "");
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter51.visit((int) 'a', (int) '4', "", "hi!", "", strArray67);
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter75.visitEnd();
        classWriter75.visitSource("hi!", "");
        java.lang.String[] strArray91 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter75.visit((int) 'a', (int) '4', "", "hi!", "", strArray91);
        classWriter51.visit((int) (byte) 1, 100, "", "hi!", "", strArray91);
        classWriter39.visit((int) '4', (int) (short) 100, "", "", "", strArray91);
        classWriter26.visit(52, 5, "hi!", "", "hi!", strArray91);
        int int99 = classWriter26.newField("hi!", "hi!", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 6 + "'", int99 == 6);
    }

    @Test
    public void test04839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04839");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-1));
        byte[] byteArray2 = classWriter1.toByteArray();
        byte[] byteArray3 = classWriter1.toByteArray();
        java.lang.Class<?> wildcardClass4 = classWriter1.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test04840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04840");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader4.readUnsignedShort((int) (short) 0);
        int int7 = classReader4.header;
        int int9 = classReader4.readByte(0);
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader32, 256);
        int int35 = classReader32.header;
        int int37 = classReader32.readInt(11);
        java.lang.String str38 = classReader32.getClassName();
        java.lang.String[] strArray39 = classReader32.getInterfaces();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        classWriter42.visitSource("hi!", "");
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter42.visit((int) 'a', (int) '4', "", "hi!", "", strArray58);
        byte[] byteArray60 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader61.accept((org.mockito.asm.ClassVisitor) classWriter63, 8);
        char[] charArray72 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj73 = classReader61.readConst((int) (short) 1, charArray72);
        java.lang.Object obj74 = classReader32.readConst(1, charArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = classReader4.readUTF8(0, charArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51966 + "'", int6 == 51966);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 202 + "'", int9 == 202);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 73 + "'", int35 == 73);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 223337 + "'", int37 == 223337);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + "\007\000" + "'", obj73, "\007\000");
        org.junit.Assert.assertEquals("'" + obj74 + "' != '" + "\007\000" + "'", obj74, "\007\000");
    }

    @Test
    public void test04841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04841");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        int int27 = classReader21.readInt(20);
        int int29 = classReader21.readInt((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = classReader21.getItem(1768711425);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1768711425");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 132864 + "'", int27 == 132864);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 83886080 + "'", int29 == 83886080);
    }

    @Test
    public void test04842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04842");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 65210);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        org.mockito.asm.Label label85 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(1768711425, label85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04843");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitIntInsn((int) (short) 10, (int) (short) 1);
        org.mockito.asm.Label label84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn((int) (short) -16896, label84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04844");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 1751720193);
        methodVisitor69.visitIincInsn(6, 1919222016);
        methodVisitor69.visitIntInsn((int) (short) 100, 14);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label[] labelArray90 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(0, (int) (short) 97, label89, labelArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray90);
    }

    @Test
    public void test04845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04845");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        classWriter1.visitSource("hi!", "");
        int int9 = classWriter1.newMethod("\007\000", "hi!", "\007\000", true);
        int int11 = classWriter1.newUTF8("\007\000");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test04846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04846");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray7);
        int int9 = classReader8.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = classReader8.getItem(196612);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 196612");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test04847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04847");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn(256);
        methodVisitor69.visitIincInsn(29285, 4);
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("\001", false);
        org.mockito.asm.Label label88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test04848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04848");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        long long31 = classReader24.readLong(0);
        int int32 = classReader24.header;
        byte[] byteArray33 = classReader24.b;
        byte[] byteArray34 = classReader24.b;
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        int int37 = classReader35.readByte(0);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3819410108757049247L) + "'", long31 == (-3819410108757049247L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 103 + "'", int32 == 103);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 202 + "'", int37 == 202);
    }

    @Test
    public void test04849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04849");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int37 = classWriter1.newNameType("", "");
        int int41 = classWriter1.newField("", "hi!", "\007\000");
        classWriter1.visitOuterClass("", "\001", "\001");
        classWriter1.visitOuterClass("\007\000", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitSource("\001", "hi!");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor52);
    }

    @Test
    public void test04850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04850");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        byte[] byteArray35 = classReader20.b;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = classReader20.readByte(21353);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21353");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test04851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04851");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray6 = classReader5.b;
        int int8 = classReader5.readUnsignedShort(2);
        int int10 = classReader5.readInt(13);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader5.readInt(33554688);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 47806 + "'", int8 == 47806);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test04852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04852");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.Label label89 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(1751720193, label89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test04853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04853");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(12);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter7.visitAnnotation("", true);
        classWriter7.visitSource("", "");
        classWriter7.visitSource("", "hi!");
        int int20 = classWriter7.newField("hi!", "hi!", "hi!");
        classWriter7.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter7.visitSource("", "");
        int int30 = classWriter7.newClass("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter7.visitAnnotation("hi!", false);
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) ' ', "\007\000", "", "", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter1.visitAnnotation("\007\000", false);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        classWriter40.visitSource("hi!", "");
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter40.visit((int) 'a', (int) '4', "", "hi!", "", strArray56);
        byte[] byteArray58 = classWriter40.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter40.visitAnnotation("", false);
        byte[] byteArray62 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        int int64 = classReader63.getAccess();
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader63, (-1));
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor37.visit("\001", (java.lang.Object) classReader63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@35b10440");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
    }

    @Test
    public void test04854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04854");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int18 = classWriter1.newNameType("hi!", "\007\000");
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        byte[] byteArray46 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader47.accept((org.mockito.asm.ClassVisitor) classWriter49, 8);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter53.visitEnd();
        classWriter53.visitSource("", "");
        classReader47.accept((org.mockito.asm.ClassVisitor) classWriter53, 100);
        int int61 = classReader47.readByte(1);
        byte[] byteArray62 = classReader47.b;
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray62, (int) (byte) 0, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor66 = classWriter1.visitField(186, "\001", "\007\000", "", (java.lang.Object) byteArray62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@f42bf29");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 254 + "'", int61 == 254);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test04855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04855");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn((int) (short) 1, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn(0, "\007\000");
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) 9);
        org.mockito.asm.Label label93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn((int) (byte) 100, label93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04856");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classWriter25.toByteArray();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int37 = classWriter32.newMethod("", "", "hi!", false);
        classWriter32.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter32.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter47.visitAnnotation("", true);
        classWriter47.visitSource("", "");
        classWriter47.visitSource("", "hi!");
        int int60 = classWriter47.newField("hi!", "hi!", "hi!");
        int int64 = classWriter47.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor65 = classWriter32.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = fieldVisitor65.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = annotationVisitor68.visitAnnotation("hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter25.visitField(9, "", "", "", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = fieldVisitor72.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = fieldVisitor72.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = fieldVisitor72.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = fieldVisitor72.visitAnnotation("", true);
        org.mockito.asm.Attribute attribute85 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor72.visitAttribute(attribute85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 5 + "'", int60 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor65);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test04857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04857");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        java.lang.String str26 = classReader21.getClassName();
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        classWriter28.visitInnerClass("hi!", "", "", (int) 'a');
        int int54 = classWriter28.newField("", "hi!", "hi!");
        int int59 = classWriter28.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter28.visitAnnotation("", false);
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (short) 97);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 7 + "'", int59 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor62);
    }

    @Test
    public void test04858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04858");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "\007\000", "hi!");
        int int18 = classWriter1.newField("\007\000", "hi!", "\001");
        int int21 = classWriter1.newNameType("\001", "hi!");
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        classWriter27.visitSource("hi!", "");
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter27.visit((int) 'a', (int) '4', "", "hi!", "", strArray43);
        byte[] byteArray45 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader46.accept((org.mockito.asm.ClassVisitor) classWriter48, 8);
        byte[] byteArray51 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray51);
        int int54 = classReader52.readInt((int) (byte) 10);
        long long56 = classReader52.readLong(103);
        java.lang.String str57 = classReader52.getSuperName();
        int int58 = classReader52.header;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor59 = classWriter1.visitField((int) (byte) -1, "hi!", "\007\000", "hi!", (java.lang.Object) classReader52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@60345e31");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16777223 + "'", int54 == 16777223);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 562962838716416L + "'", long56 == 562962838716416L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 73 + "'", int58 == 73);
    }

    @Test
    public void test04859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04859");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        long long9 = classReader4.readLong(0);
        int int10 = classReader4.header;
        short short12 = classReader4.readShort(12);
        char[] charArray14 = new char[] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = classReader4.readUTF8(88, charArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3819410108757049344L) + "'", long9 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test04860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04860");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("", 1763770624);
        methodVisitor69.visitMethodInsn((int) (short) -326, "\007\000", "\007\000", "");
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("", "hi!", "\001", label89, label90, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04861");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        long long9 = classReader4.readLong(0);
        int int10 = classReader4.header;
        short short12 = classReader4.readShort(12);
        int int14 = classReader4.readUnsignedShort((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        classWriter17.visitSource("hi!", "");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter17.visit((int) 'a', (int) '4', "", "hi!", "", strArray33);
        byte[] byteArray35 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray35);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader37, 256);
        int int41 = classReader37.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter44.visitEnd();
        classWriter44.visitSource("hi!", "");
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter44.visit((int) 'a', (int) '4', "", "hi!", "", strArray60);
        byte[] byteArray62 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader63.accept((org.mockito.asm.ClassVisitor) classWriter65, 8);
        char[] charArray74 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj75 = classReader63.readConst((int) (short) 1, charArray74);
        java.lang.Object obj76 = classReader37.readConst(4, charArray74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = classReader4.readUTF8((int) (short) 8449, charArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3819410108757049344L) + "'", long9 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 51966 + "'", int14 == 51966);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj75 + "' != '" + "\007\000" + "'", obj75, "\007\000");
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "Lhi!;");
    }

    @Test
    public void test04862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04862");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitTypeInsn(186, "");
        org.mockito.asm.Label label82 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(24832, label82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test04863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04863");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort(13);
        int int30 = classReader26.getItem(3);
        int int32 = classReader26.readUnsignedShort(8);
        int int34 = classReader26.readInt((int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        byte[] byteArray55 = classWriter37.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = classWriter37.visitAnnotation("", false);
        byte[] byteArray59 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray59);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(classReader60, 2);
        byte[] byteArray63 = classReader60.b;
        java.lang.String str64 = classReader60.getSuperName();
        java.lang.String[] strArray65 = classReader60.getInterfaces();
        int int66 = classReader60.header;
        char[] charArray72 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str73 = classReader60.readUTF8(20, charArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = classReader26.readUTF8(29285, charArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 1792 + "'", short28 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 17 + "'", int30 == 17);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16777223 + "'", int34 == 16777223);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 103 + "'", int66 == 103);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test04864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04864");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label85 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(1763770624, label85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04865");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) '#', (int) (byte) 10);
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label[] labelArray90 = new org.mockito.asm.Label[] { label89 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(186, 33554688, label88, labelArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(labelArray90);
    }

    @Test
    public void test04866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04866");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort(13);
        int int29 = classReader26.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = classReader26.readInt(24832);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 1792 + "'", short28 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
    }

    @Test
    public void test04867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04867");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray33, (int) (byte) 0, 16778088);
        int int38 = classReader37.getAccess();
        java.lang.String str39 = classReader37.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test04868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04868");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        int int6 = classReader4.getAccess();
        byte[] byteArray7 = classReader4.b;
        // The following exception was thrown during execution in test generation
        try {
            long long9 = classReader4.readLong(1768057957);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04869");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        byte[] byteArray28 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray28);
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray28);
        int int32 = classReader30.readByte(0);
        byte[] byteArray33 = classReader30.b;
        java.lang.String[] strArray34 = classReader30.getInterfaces();
        classWriter1.visit((int) (short) 9, 100, "\007\000", "", "hi!", strArray34);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("\001", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = annotationVisitor38.visitAnnotation("hi!", "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 202 + "'", int32 == 202);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test04870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04870");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitIincInsn(256, (int) '4');
        methodVisitor69.visitMaxs(7, 16777223);
        methodVisitor69.visitTypeInsn(3, "");
        methodVisitor69.visitFieldInsn(196612, "hi!", "", "\007\000");
        methodVisitor69.visitTypeInsn(83, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor69.visitAnnotation("\001", false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor99 = methodVisitor69.visitParameterAnnotation(1025, "\007\000", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test04871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04871");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader5.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter8 = new org.mockito.asm.ClassWriter(classReader5, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test04872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04872");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn((int) ' ', "", "hi!", "");
        methodVisitor69.visitIntInsn(15, 26729);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter80.visitEnd();
        byte[] byteArray82 = classWriter80.toByteArray();
        byte[] byteArray83 = classWriter80.toByteArray();
        org.mockito.asm.ClassReader classReader84 = new org.mockito.asm.ClassReader(byteArray83);
        int int86 = classReader84.readInt((int) (short) 1);
        int int87 = classReader84.header;
        byte[] byteArray88 = classReader84.b;
        byte[] byteArray89 = classReader84.b;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLdcInsn((java.lang.Object) classReader84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@39657aa4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-21316096) + "'", int86 == (-21316096));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04873");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter1.visitSource("", "");
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("", "", "", (int) (short) 0);
        classWriter1.visitSource("", "");
        classWriter1.visitInnerClass("\007\000", "", "", (int) (short) 2);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        classWriter48.visitSource("hi!", "");
        classWriter48.visitEnd();
        classWriter48.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = classWriter48.visitAnnotation("hi!", false);
        java.lang.Object obj62 = null;
        org.mockito.asm.FieldVisitor fieldVisitor63 = classWriter48.visitField((-1), "", "", "", obj62);
        fieldVisitor63.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor67 = fieldVisitor63.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = fieldVisitor63.visitAnnotation("", false);
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter1.visitField(26729, "\007\000", "\001", "", (java.lang.Object) false);
        fieldVisitor71.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(fieldVisitor63);
        org.junit.Assert.assertNotNull(annotationVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(fieldVisitor71);
    }

    @Test
    public void test04874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04874");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        java.lang.String str34 = classReader20.getClassName();
        java.lang.String[] strArray35 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) -1);
        int int39 = classReader20.readInt(28);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classReader20.getItem(119);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 119");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1399416686 + "'", int39 == 1399416686);
    }

    @Test
    public void test04875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04875");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter28.visitAnnotation("hi!", true);
        classWriter28.visitEnd();
        byte[] byteArray46 = classWriter28.toByteArray();
        byte[] byteArray47 = classWriter28.toByteArray();
        int int49 = classWriter28.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int52 = classReader20.getAccess();
        byte[] byteArray53 = classReader20.b;
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray53, (int) (short) 29813, 65536);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test04876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04876");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn(0, "hi!", "hi!", "");
        methodVisitor69.visitIincInsn(0, 13);
        methodVisitor69.visitMaxs(0, 0);
        methodVisitor69.visitInsn((int) '#');
        org.mockito.asm.Label label90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn((int) (short) 26913, label90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04877");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitOuterClass("hi!", "", "hi!");
        int int27 = classWriter1.newMethod("hi!", "", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        classWriter34.visitSource("hi!", "");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter34.visit((int) 'a', (int) '4', "", "hi!", "", strArray50);
        byte[] byteArray52 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader53.accept((org.mockito.asm.ClassVisitor) classWriter55, 8);
        byte[] byteArray58 = classWriter55.toByteArray();
        int int60 = classWriter55.newClass("hi!");
        classWriter55.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray66 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray66);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(classReader68, 196613);
        byte[] byteArray71 = classWriter70.toByteArray();
        int int76 = classWriter70.newMethod("", "hi!", "\001", false);
        org.mockito.asm.FieldVisitor fieldVisitor77 = classWriter1.visitField((int) (short) 1792, "\001", "\001", "", (java.lang.Object) "");
        org.mockito.asm.Attribute attribute78 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor77.visitAttribute(attribute78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 11 + "'", int76 == 11);
        org.junit.Assert.assertNotNull(fieldVisitor77);
    }

    @Test
    public void test04878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04878");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter13.visitAnnotation("", true);
        classWriter13.visitSource("", "");
        classWriter13.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor28 = classWriter13.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter13.visitOuterClass("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor33 = classWriter1.visitField(100, "", "hi!", "", (java.lang.Object) "");
        classWriter1.visitInnerClass("", "", "", (int) '4');
        int int42 = classWriter1.newField("", "", "");
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter52.visitEnd();
        byte[] byteArray54 = classWriter52.toByteArray();
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        java.lang.String[] strArray56 = classReader55.getInterfaces();
        int int58 = classReader55.readInt((int) (byte) 0);
        java.lang.String str59 = classReader55.getSuperName();
        java.lang.String[] strArray60 = classReader55.getInterfaces();
        byte[] byteArray61 = classReader55.b;
        int int62 = classReader55.header;
        long long64 = classReader55.readLong((int) (byte) 0);
        java.lang.String[] strArray65 = classReader55.getInterfaces();
        java.lang.String[] strArray66 = classReader55.getInterfaces();
        byte[] byteArray67 = classReader55.b;
        short short69 = classReader55.readShort(4);
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor49.visit("", (java.lang.Object) classReader55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@5c5dc42a");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(fieldVisitor28);
        org.junit.Assert.assertNotNull(fieldVisitor33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-889275714) + "'", int58 == (-889275714));
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-3819410108757049344L) + "'", long64 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short69 + "' != '" + (short) 0 + "'", short69 == (short) 0);
    }

    @Test
    public void test04879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04879");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter16.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter16.visitOuterClass("", "", "");
        classWriter16.visitSource("", "");
        int int41 = classWriter16.newNameType("", "hi!");
        byte[] byteArray42 = classWriter16.toByteArray();
        int int46 = classWriter16.newField("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField(0, "hi!", "hi!", "hi!", (java.lang.Object) "");
        byte[] byteArray48 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray48);
        int int52 = classReader50.readUnsignedShort(0);
        int int54 = classReader50.readInt((int) (byte) 10);
        java.lang.String[] strArray55 = classReader50.getInterfaces();
        long long57 = classReader50.readLong((int) '4');
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter59.visitEnd();
        byte[] byteArray61 = classWriter59.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter59.visitAnnotation("", true);
        classWriter59.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter59.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter59.visitAnnotation("hi!", false);
        classWriter59.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = classWriter59.visitAnnotation("hi!", false);
        // The following exception was thrown during execution in test generation
        try {
            classReader50.accept((org.mockito.asm.ClassVisitor) classWriter59, 196612);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 1, 0, 3, 104, 105, 33, 3, 0, 0, 0, 1, 7, 0, 1, 12, 0, 1, 0, 1, 12, 0, 1, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 2, 0, 2, 0, 2, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 4, 0, 4, 0, 5, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 13 + "'", int46 == 13);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 8, 0, 1, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 2, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 51966 + "'", int52 == 51966);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16777217 + "'", int54 == 16777217);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 8462937704752632687L + "'", long57 == 8462937704752632687L);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test04880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04880");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        byte[] byteArray28 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray28);
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray28);
        int int32 = classReader30.readByte(0);
        byte[] byteArray33 = classReader30.b;
        java.lang.String[] strArray34 = classReader30.getInterfaces();
        classWriter1.visit((int) (short) 9, 100, "\007\000", "", "hi!", strArray34);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("\001", true);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter44.visitEnd();
        byte[] byteArray46 = classWriter44.toByteArray();
        byte[] byteArray47 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor49 = classWriter1.visitField((int) (short) -1, "hi!", "", "\007\000", (java.lang.Object) classReader48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@35db13b4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 202 + "'", int32 == 202);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04881");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        java.lang.String str34 = classReader20.getSuperName();
        int int35 = classReader20.header;
        java.lang.String[] strArray36 = classReader20.getInterfaces();
        int int37 = classReader20.getAccess();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 73 + "'", int35 == 73);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
    }

    @Test
    public void test04882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04882");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort(13);
        int int29 = classReader26.getAccess();
        char[] charArray31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj32 = classReader26.readConst((int) (short) 97, charArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 1792 + "'", short28 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
    }

    @Test
    public void test04883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04883");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        byte[] byteArray42 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        java.lang.String[] strArray44 = classReader43.getInterfaces();
        int int45 = classReader43.getAccess();
        int int47 = classReader43.readUnsignedShort(4);
        int int49 = classReader43.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter34.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (byte) 10, (-1), "", "", "", strArray58);
        classWriter1.visit((-889275714), 0, "", "hi!", "hi!", strArray58);
        int int65 = classWriter1.newMethod("hi!", "", "hi!", false);
        classWriter1.visitInnerClass("", "hi!", "", (int) ' ');
        int int72 = classWriter1.newClass("hi!");
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute74 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4 + "'", int72 == 4);
    }

    @Test
    public void test04884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04884");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        classWriter1.visitInnerClass("", "\007\000", "\007\000", 20);
        int int33 = classWriter1.newClass("\007\000");
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        byte[] byteArray37 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        java.lang.String[] strArray39 = classReader38.getInterfaces();
        int int41 = classReader38.readByte((int) (byte) 10);
        int int42 = classReader38.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int43 = classWriter1.newConst((java.lang.Object) classReader38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@59d6f7c5");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 7 + "'", int33 == 7);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test04885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04885");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int10 = classWriter1.newNameType("hi!", "");
        byte[] byteArray11 = classWriter1.toByteArray();
        int int13 = classWriter1.newUTF8("\007\000");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        classWriter19.visitSource("hi!", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter19.visit((int) 'a', (int) '4', "", "hi!", "", strArray35);
        byte[] byteArray37 = classWriter19.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter19.visitAnnotation("", false);
        byte[] byteArray41 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader42, 2);
        byte[] byteArray45 = classReader42.b;
        java.lang.String str46 = classReader42.getClassName();
        short short48 = classReader42.readShort((int) (short) 10);
        byte[] byteArray49 = classReader42.b;
        java.lang.String[] strArray50 = classReader42.getInterfaces();
        byte[] byteArray51 = classReader42.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor52 = classWriter1.visitField((int) (short) 26913, "", "hi!", "\007\000", (java.lang.Object) byteArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@15cf0a3e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 6, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 12, 0, 2, 0, 1, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 5, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + short48 + "' != '" + (short) 256 + "'", short48 == (short) 256);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test04886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04886");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) 10);
        methodVisitor69.visitMaxs(2, 13);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitParameterAnnotation(196613, "\007\000", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04887");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classReader21.b;
        short short28 = classReader21.readShort(10);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = classReader21.getItem(2049);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2049");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 256 + "'", short28 == (short) 256);
    }

    @Test
    public void test04888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04888");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("", 1763770624);
        methodVisitor69.visitMethodInsn((int) (short) -326, "\007\000", "\007\000", "");
        methodVisitor69.visitMultiANewArrayInsn("", (-21316096));
        org.mockito.asm.Label label90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(26729, label90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04889");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        int int59 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int70 = classWriter65.newMethod("", "", "hi!", false);
        classWriter65.visitEnd();
        classWriter65.visitInnerClass("\007\000", "", "\007\000", 254);
        org.mockito.asm.FieldVisitor fieldVisitor77 = classWriter1.visitField(14, "\007\000", "", "hi!", (java.lang.Object) "\007\000");
        org.mockito.asm.Attribute attribute78 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor77);
    }

    @Test
    public void test04890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04890");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn(256);
        methodVisitor69.visitIincInsn(29285, 4);
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("\001", false);
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label[] labelArray91 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(1919222016, (int) (short) 2, label90, labelArray91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(labelArray91);
    }

    @Test
    public void test04891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04891");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int11 = classWriter1.newField("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("", "", "", 0);
        classWriter1.visitInnerClass("hi!", "\007\000", "hi!", (int) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("", false);
        byte[] byteArray28 = classWriter1.toByteArray();
        int int30 = classWriter1.newClass("\001");
        classWriter1.visitOuterClass("\001", "", "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 14, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 0, 7, 0, 4, 12, 0, 4, 0, 4, 9, 0, 5, 0, 6, 7, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 9, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0, 0, 11, 0, 0, 0, 18, 0, 2, 0, 5, 0, 5, 0, 4, 0, 0, 0, 8, 0, 10, 0, 1, 0, 1, 0, 12, 0, 0, 0, 6, 0, 1, 0, 4, 0, 0, 0, 13, 0, 0, 0, 6, 0, 1, 0, 4, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 15 + "'", int30 == 15);
    }

    @Test
    public void test04892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04892");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        short short10 = classReader4.readShort(10);
        int int12 = classReader4.readInt((int) (short) 1);
        int int13 = classReader4.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = classReader4.readUnsignedShort(151060483);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 151060483");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-21316096) + "'", int12 == (-21316096));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04893");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitFieldInsn(11, "\007\000", "hi!", "");
        org.mockito.asm.Label label82 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04894");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader5.getAccess();
        int int7 = classReader5.header;
        java.lang.String[] strArray8 = classReader5.getInterfaces();
        int int10 = classReader5.readInt((int) (short) 10);
        byte[] byteArray11 = classReader5.b;
        int int13 = classReader5.readInt((int) (short) 0);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        byte[] byteArray17 = classWriter15.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter15.visitAnnotation("", true);
        classWriter15.visitOuterClass("", "", "hi!");
        int int29 = classWriter15.newMethod("", "hi!", "hi!", true);
        int int31 = classWriter15.newUTF8("hi!");
        classWriter15.visitEnd();
        int int34 = classWriter15.newClass("hi!");
        classWriter15.visitOuterClass("", "\001", "");
        // The following exception was thrown during execution in test generation
        try {
            classReader5.accept((org.mockito.asm.ClassVisitor) classWriter15, 196613);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-889275714) + "'", int13 == (-889275714));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
    }

    @Test
    public void test04895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04895");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("hi!", "", "\007\000", 8);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        int int35 = classWriter28.newUTF8("");
        classWriter28.visitOuterClass("hi!", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter28.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = annotationVisitor42.visitAnnotation("hi!", "\007\000");
        org.mockito.asm.FieldVisitor fieldVisitor46 = classWriter1.visitField((int) (short) 10, "hi!", "\007\000", "", (java.lang.Object) "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = fieldVisitor46.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = fieldVisitor46.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = fieldVisitor46.visitAnnotation("\001", true);
        org.mockito.asm.Attribute attribute56 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor46.visitAttribute(attribute56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(fieldVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(annotationVisitor55);
    }

    @Test
    public void test04896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04896");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray2, (int) (byte) 0, (-1));
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray2);
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray2, (int) (short) 0, 51966);
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray2);
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray2);
        java.lang.String str12 = classReader11.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = classReader11.readUnsignedShort(116);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 116");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test04897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04897");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        java.lang.String str34 = classReader20.getClassName();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        byte[] byteArray55 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray55);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter(classReader57, 256);
        int int61 = classReader57.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter64.visitEnd();
        classWriter64.visitSource("hi!", "");
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter64.visit((int) 'a', (int) '4', "", "hi!", "", strArray80);
        byte[] byteArray82 = classWriter64.toByteArray();
        org.mockito.asm.ClassReader classReader83 = new org.mockito.asm.ClassReader(byteArray82);
        org.mockito.asm.ClassWriter classWriter85 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader83.accept((org.mockito.asm.ClassVisitor) classWriter85, 8);
        char[] charArray94 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj95 = classReader83.readConst((int) (short) 1, charArray94);
        java.lang.Object obj96 = classReader57.readConst(4, charArray94);
        java.lang.String str97 = classReader20.readClass(83, charArray94);
        org.mockito.asm.ClassWriter classWriter99 = new org.mockito.asm.ClassWriter(classReader20, 27);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray94);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray94), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray94), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray94), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj95 + "' != '" + "\007\000" + "'", obj95, "\007\000");
        org.junit.Assert.assertNotNull(obj96);
        org.junit.Assert.assertEquals(obj96.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj96), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj96), "Lhi!;");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test04898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04898");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn((int) (short) -326, 28);
        methodVisitor69.visitIntInsn(7, (int) (byte) 0);
        methodVisitor69.visitMultiANewArrayInsn("", (-1161953280));
        org.mockito.asm.Label label98 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(0, label98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04899");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int3 = classWriter1.newClass("");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        byte[] byteArray12 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray12);
        java.lang.String[] strArray14 = classReader13.getInterfaces();
        classWriter1.visit((-889275714), 65210, "hi!", "", "", strArray14);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("hi!", false);
        int int21 = classWriter1.newNameType("", "");
        org.mockito.asm.Attribute attribute22 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
    }

    @Test
    public void test04900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04900");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        classWriter27.visitSource("hi!", "");
        byte[] byteArray32 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader33 = new org.mockito.asm.ClassReader(byteArray32);
        byte[] byteArray34 = classReader33.b;
        java.lang.String[] strArray35 = classReader33.getInterfaces();
        classWriter1.visit(5, 28, "\001", "hi!", "\001", strArray35);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter1.visitAnnotation("\007\000", false);
        org.mockito.asm.Attribute attribute40 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test04901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04901");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int30 = classReader20.readInt((int) 'a');
        byte[] byteArray31 = classReader20.b;
        // The following exception was thrown during execution in test generation
        try {
            long long33 = classReader20.readLong((int) (short) 2049);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 196613 + "'", int30 == 196613);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test04902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04902");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        byte[] byteArray35 = classReader20.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray35, (int) (byte) 0, 100);
        int int40 = classReader38.readUnsignedShort(1);
        int int42 = classReader38.getItem(0);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int49 = classWriter44.newMethod("", "", "hi!", false);
        classWriter44.visitEnd();
        int int52 = classWriter44.newClass("");
        int int54 = classWriter44.newUTF8("\007\000");
        byte[] byteArray55 = classWriter44.toByteArray();
        classReader38.accept((org.mockito.asm.ClassVisitor) classWriter44, 3);
        int int59 = classReader38.readInt((int) (short) 1);
        byte[] byteArray60 = classReader38.b;
        byte[] byteArray61 = classReader38.b;
        // The following exception was thrown during execution in test generation
        try {
            long long63 = classReader38.readLong((int) (short) 26913);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 65210 + "'", int40 == 65210);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 1, 0, 3, 7, -64, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-21316096) + "'", int59 == (-21316096));
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test04903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04903");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMethodInsn((int) (short) 1792, "", "", "hi!");
        methodVisitor69.visitMultiANewArrayInsn("", 7);
        methodVisitor69.visitVarInsn((int) (short) 8449, (int) (byte) 0);
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(5, label97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test04904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04904");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String[] strArray21 = classReader20.getInterfaces();
        byte[] byteArray22 = classReader20.b;
        org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray22);
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = classReader24.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04905");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(1, "", "hi!", "");
        methodVisitor69.visitIntInsn((-21316096), 132864);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Attribute attribute87 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test04906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04906");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitIntInsn((int) ' ', (int) (byte) 0);
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(151060483, (int) (short) 0);
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn((int) (short) 100, "\001", "\001", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04907");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMaxs(16777223, 13);
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter81.visitEnd();
        classWriter81.visitSource("hi!", "");
        classWriter81.visitEnd();
        byte[] byteArray87 = classWriter81.toByteArray();
        int int91 = classWriter81.newField("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor94 = classWriter81.visitAnnotation("", true);
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLdcInsn((java.lang.Object) classWriter81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@2ce3e13");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 7 + "'", int91 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor94);
    }

    @Test
    public void test04908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04908");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor36.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = fieldVisitor36.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = annotationVisitor42.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = annotationVisitor44.visitAnnotation("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = annotationVisitor47.visitAnnotation("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = annotationVisitor47.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = annotationVisitor47.visitArray("hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(annotationVisitor54);
    }

    @Test
    public void test04909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04909");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        classWriter1.visitOuterClass("", "\007\000", "\007\000");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        byte[] byteArray14 = classWriter12.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter12.visitAnnotation("", true);
        classWriter12.visitOuterClass("", "", "hi!");
        int int26 = classWriter12.newMethod("", "hi!", "hi!", true);
        int int30 = classWriter12.newField("hi!", "", "hi!");
        classWriter12.visitInnerClass("hi!", "hi!", "", 7);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter42.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter52.visitEnd();
        classWriter52.visitSource("hi!", "");
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter52.visit((int) 'a', (int) '4', "", "hi!", "", strArray68);
        classWriter42.visit((int) ' ', 48640, "hi!", "", "", strArray68);
        classWriter12.visit(8, (-1), "hi!", "hi!", "hi!", strArray68);
        classWriter1.visit(47806, (int) (short) 9, "", "hi!", "", strArray68);
        classWriter1.visitOuterClass("", "hi!", "\007\000");
        classWriter1.visitInnerClass("\001", "", "\007\000", 1399416686);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = annotationVisitor84.visitArray("");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test04910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04910");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitIincInsn(186, (int) '#');
        methodVisitor69.visitIntInsn(223337, 51966);
        methodVisitor69.visitMaxs(14, 83);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        org.mockito.asm.Label label93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(2049, label93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test04911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04911");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String[] strArray8 = classReader4.getInterfaces();
        java.lang.String str9 = classReader4.getSuperName();
        java.lang.String str10 = classReader4.getSuperName();
        short short12 = classReader4.readShort(0);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = classReader4.readByte(1768711425);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1768711425");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) -13570 + "'", short12 == (short) -13570);
    }

    @Test
    public void test04912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04912");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(65210, "hi!", "hi!", "");
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 0, (int) 'a');
        org.mockito.asm.Attribute attribute91 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04913");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        classWriter22.visitInnerClass("", "", "", 0);
        org.mockito.asm.Attribute attribute39 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter22.visitAttribute(attribute39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
    }

    @Test
    public void test04914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04914");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitMaxs(73, 0);
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        methodVisitor69.visitTryCatchBlock(label78, label79, label80, "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotation("hi!", false);
        org.mockito.asm.Attribute attribute86 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test04915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04915");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        classWriter29.visitSource("", "");
        int int38 = classWriter29.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter29.visitAnnotation("", false);
        int int43 = classWriter29.newUTF8("hi!");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter29, (int) (short) -326);
        int int47 = classReader21.readInt(10);
        byte[] byteArray48 = classReader21.b;
        int int49 = classReader21.getAccess();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(classReader21, 254);
        int int52 = classReader21.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int54 = classReader21.getItem(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 16778088 + "'", int47 == 16778088);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
    }

    @Test
    public void test04916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04916");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        byte[] byteArray20 = classWriter1.toByteArray();
        int int24 = classWriter1.newField("", "", "hi!");
        classWriter1.visitSource("\007\000", "");
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        byte[] byteArray35 = classWriter33.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter33.visitAnnotation("", true);
        classWriter33.visitOuterClass("", "", "hi!");
        int int47 = classWriter33.newMethod("", "hi!", "hi!", true);
        classWriter33.visitSource("hi!", "");
        classWriter33.visitEnd();
        classWriter33.visitInnerClass("hi!", "\007\000", "", (int) (byte) 100);
        byte[] byteArray57 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor59 = classWriter1.visitField(132864, "", "\001", "\007\000", (java.lang.Object) byteArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@2b4c4ea1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 7, 0, 3, 1, 0, 3, 7, -64, -128, 7, 0, 8, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 10, 0, 0, 0, 2, 0, 3, 0, 11, 0, 0, 0, 0, 0, 12, 0, 0, 0, 4, 0, 2, 0, 4, 0, 13, 0, 0, 0, 10, 0, 1, 0, 7, 0, 9, 0, 1, 0, 100, 0, 14, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04917");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        long long9 = classReader4.readLong(0);
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        byte[] byteArray12 = classReader4.b;
        int int13 = classReader4.header;
        java.lang.String str14 = classReader4.getSuperName();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitOuterClass("hi!", "", "");
        classWriter16.visitInnerClass("", "", "\001", 16);
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept((org.mockito.asm.ClassVisitor) classWriter16, 24948);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3819410108757049344L) + "'", long9 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(annotationVisitor19);
    }

    @Test
    public void test04918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04918");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        methodVisitor69.visitInsn((int) (byte) 10);
        methodVisitor69.visitTypeInsn((int) (short) -1, "");
        methodVisitor69.visitMethodInsn((int) (short) 26978, "", "hi!", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04919");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        classWriter31.visitSource("hi!", "");
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter31.visit((int) 'a', (int) '4', "", "hi!", "", strArray47);
        byte[] byteArray49 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray49);
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray49);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(classReader51, 256);
        java.lang.String[] strArray54 = classReader51.getInterfaces();
        java.lang.String[] strArray55 = classReader51.getInterfaces();
        classWriter1.visit((int) (short) 0, 0, "", "hi!", "hi!", strArray55);
        java.lang.Class<?> wildcardClass57 = strArray55.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test04920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04920");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitVarInsn(12, 0);
        methodVisitor69.visitIntInsn(100, (int) (short) 1792);
        methodVisitor69.visitIincInsn(6, 16778088);
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\001", "hi!", "hi!", label88, label89, 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
    }

    @Test
    public void test04921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04921");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int25 = classReader24.getAccess();
        java.lang.String[] strArray26 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        classWriter29.visitSource("hi!", "");
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter29.visit((int) 'a', (int) '4', "", "hi!", "", strArray45);
        byte[] byteArray47 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray47);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader48.accept((org.mockito.asm.ClassVisitor) classWriter50, 8);
        char[] charArray59 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj60 = classReader48.readConst((int) (short) 1, charArray59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj61 = classReader24.readConst(3, charArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj60 + "' != '" + "\007\000" + "'", obj60, "\007\000");
    }

    @Test
    public void test04922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04922");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3, 2, (int) (short) -1);
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray3, 0, (int) (short) 24832);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = classReader11.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04923");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor8 = annotationVisitor4.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = annotationVisitor8.visitAnnotation("hi!", "");
        annotationVisitor11.visitEnum("", "", "hi!");
        annotationVisitor11.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor11.visitArray("hi!");
        annotationVisitor11.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = annotationVisitor11.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = annotationVisitor21.visitAnnotation("\001", "\001");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor8);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test04924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04924");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label86 = null;
        int[] intArray93 = new int[] { 26729, 17, 131073, (short) 4, 17, 1751720193 };
        org.mockito.asm.Label[] labelArray94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label86, intArray93, labelArray94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[26729, 17, 131073, 4, 17, 1751720193]");
    }

    @Test
    public void test04925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04925");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        int int12 = classReader4.header;
        java.lang.String[] strArray13 = classReader4.getInterfaces();
        int int14 = classReader4.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            short short16 = classReader4.readShort((-1107296256));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1107296256");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04926");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        int int32 = classWriter1.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("", "hi!", "hi!");
        java.lang.Object obj40 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classWriter1.newConst(obj40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor35);
    }

    @Test
    public void test04927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04927");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("hi!");
        java.lang.Object obj16 = null;
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(65210, "", "", "hi!", obj16);
        classWriter1.visitEnd();
        int int23 = classWriter1.newMethod("\007\000", "hi!", "\007\000", false);
        classWriter1.visitInnerClass("", "\001", "", 52);
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test04928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04928");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        java.lang.String str26 = classReader21.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            long long28 = classReader21.readLong((-1107296256));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test04929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04929");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("hi!", "hi!");
        int int24 = classWriter1.newField("\007\000", "\007\000", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        byte[] byteArray35 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        java.lang.String[] strArray37 = classReader36.getInterfaces();
        short short39 = classReader36.readShort((int) (byte) 1);
        java.lang.String str40 = classReader36.getSuperName();
        long long42 = classReader36.readLong(5);
        byte[] byteArray43 = classReader36.b;
        short short45 = classReader36.readShort(12);
        int int46 = classReader36.header;
        int int47 = classReader36.getAccess();
        int int49 = classReader36.readUnsignedShort(2);
        java.lang.String str50 = classReader36.getSuperName();
        byte[] byteArray51 = classReader36.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor52 = classWriter1.visitField(8449, "\007\000", "", "\007\000", (java.lang.Object) byteArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@3d480def");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + short39 + "' != '" + (short) -326 + "'", short39 == (short) -326);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 16777216L + "'", long42 == 16777216L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short45 + "' != '" + (short) 0 + "'", short45 == (short) 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 47806 + "'", int49 == 47806);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04930");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int3 = classWriter1.newClass("");
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute5 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test04931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04931");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMaxs(13, (int) (short) -1);
        methodVisitor69.visitTypeInsn(4, "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotation("hi!", false);
        org.mockito.asm.Attribute attribute91 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test04932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04932");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn((int) (short) -326, 28);
        methodVisitor69.visitVarInsn(202, 119);
        methodVisitor69.visitEnd();
        java.lang.Object obj95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLdcInsn(obj95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04933");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitVarInsn((int) (short) 100, 256);
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitMaxs(0, 8);
        methodVisitor69.visitMethodInsn(1751720193, "", "\007\000", "hi!");
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        methodVisitor69.visitTryCatchBlock(label89, label90, label91, "\007\000");
        methodVisitor69.visitMethodInsn((-1161953280), "\001", "\001", "\007\000");
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test04934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04934");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        int int36 = classReader20.readUnsignedShort((int) (short) 10);
        short short38 = classReader20.readShort((int) (short) 100);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader20, 6);
        classWriter40.visitInnerClass("\001", "", "\007\000", 0);
        byte[] byteArray46 = classWriter40.toByteArray();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 256 + "'", int36 == 256);
        org.junit.Assert.assertTrue("'" + short38 + "' != '" + (short) 1280 + "'", short38 == (short) 1280);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 1, 1, 7, 0, 8, 1, 0, 3, 7, -64, -128, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 11, 0, 0, 0, 10, 0, 1, 0, 9, 0, 3, 0, 10, 0, 0]");
    }

    @Test
    public void test04935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04935");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitEnd();
        int int18 = classWriter1.newNameType("\007\000", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor21);
    }

    @Test
    public void test04936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04936");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitTypeInsn(52, "\007\000");
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label[] labelArray83 = new org.mockito.asm.Label[] { label82 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(1953854053, 129, label81, labelArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray83);
    }

    @Test
    public void test04937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04937");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor8 = annotationVisitor4.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = annotationVisitor8.visitAnnotation("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = annotationVisitor8.visitArray("hi!");
        annotationVisitor13.visit("hi!", (java.lang.Object) 10.0f);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = annotationVisitor13.visitAnnotation("", "\007\000");
        java.lang.Object obj21 = null;
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor13.visit("", obj21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor8);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor19);
    }

    @Test
    public void test04938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04938");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        int int28 = classWriter1.newClass("hi!");
        int int30 = classWriter1.newClass("hi!");
        int int33 = classWriter1.newNameType("\001", "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 7 + "'", int33 == 7);
    }

    @Test
    public void test04939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04939");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        org.mockito.asm.Label label77 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(83, label77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04940");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitMultiANewArrayInsn("hi!", 12);
        methodVisitor69.visitVarInsn(1919222016, 0);
        methodVisitor69.visitMaxs((int) (byte) 100, 119);
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = methodVisitor69.visitAnnotation("\001", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor69.visitAnnotationDefault();
        annotationVisitor98.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor97);
        org.junit.Assert.assertNotNull(annotationVisitor98);
    }

    @Test
    public void test04941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04941");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readByte((int) (byte) 10);
        int int8 = classReader4.header;
        byte[] byteArray9 = classReader4.b;
        int int10 = classReader4.header;
        short short12 = classReader4.readShort(20);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = classReader4.readInt(16777217);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) 0 + "'", short12 == (short) 0);
    }

    @Test
    public void test04942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04942");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newConst((java.lang.Object) (short) 0);
        classWriter1.visitInnerClass("hi!", "\007\000", "", 10);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = classWriter22.visitAnnotation("", true);
        classWriter22.visitSource("", "");
        int int31 = classWriter22.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        classWriter38.visitSource("hi!", "");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter38.visit((int) 'a', (int) '4', "", "hi!", "", strArray54);
        byte[] byteArray56 = classWriter38.toByteArray();
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter63.visitEnd();
        byte[] byteArray65 = classWriter63.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray65);
        int int69 = classReader67.readByte(0);
        byte[] byteArray70 = classReader67.b;
        java.lang.String[] strArray71 = classReader67.getInterfaces();
        classWriter38.visit((int) (short) 9, 100, "\007\000", "", "hi!", strArray71);
        classWriter22.visit((int) '4', (int) (short) 1792, "hi!", "", "", strArray71);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor74 = classWriter1.visitMethod(186, "", "hi!", "hi!", strArray71);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 202 + "'", int69 == 202);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray71);
    }

    @Test
    public void test04943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04943");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitVarInsn(6, 1);
        methodVisitor69.visitVarInsn(1, 52);
        methodVisitor69.visitFieldInsn(24832, "\007\000", "hi!", "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04944");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        byte[] byteArray42 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        java.lang.String[] strArray44 = classReader43.getInterfaces();
        int int45 = classReader43.getAccess();
        int int47 = classReader43.readUnsignedShort(4);
        int int49 = classReader43.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter34.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (byte) 10, (-1), "", "", "", strArray58);
        classWriter1.visit((-889275714), 0, "", "hi!", "hi!", strArray58);
        int int65 = classWriter1.newMethod("hi!", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("\001", "\001", "\007\000", (int) (short) 1);
        int int77 = classWriter1.newField("\001", "", "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 12 + "'", int77 == 12);
    }

    @Test
    public void test04945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04945");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader24, 5);
        int int28 = classReader24.header;
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        classWriter30.visitEnd();
        int int37 = classWriter30.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter30.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter30.visitAnnotation("hi!", true);
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter30, 0);
        java.lang.String[] strArray46 = classReader24.getInterfaces();
        java.lang.String[] strArray47 = classReader24.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int49 = classReader24.getItem((int) (short) -16896);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -16896");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 103 + "'", int28 == 103);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
    }

    @Test
    public void test04946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04946");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMaxs((int) (byte) 1, (-1161953280));
        methodVisitor69.visitMaxs((int) (byte) 100, 28);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitVarInsn((-889275714), 256);
        methodVisitor69.visitInsn((int) (short) -326);
        methodVisitor69.visitIntInsn(872, 104);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test04947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04947");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        int int22 = classWriter1.newNameType("", "\007\000");
        byte[] byteArray23 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("\007\000", "\001", "\007\000", 18);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 3, 7, -64, -128, 12, 0, 1, 0, 7, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 3, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 4, 0, 2, 0, 4, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test04948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04948");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("", "", "", 186);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitOuterClass("hi!", "\007\000", "hi!");
        int int52 = classWriter1.newNameType("\007\000", "\001");
        classWriter1.visitEnd();
        org.mockito.asm.Attribute attribute54 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 11 + "'", int52 == 11);
    }

    @Test
    public void test04949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04949");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str37 = classReader20.getClassName();
        int int39 = classReader20.readInt(28);
        // The following exception was thrown during execution in test generation
        try {
            short short41 = classReader20.readShort((int) (short) 1792);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1399416686 + "'", int39 == 1399416686);
    }

    @Test
    public void test04950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04950");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "", 8);
        int int32 = classWriter1.newField("\007\000", "hi!", "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
    }

    @Test
    public void test04951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04951");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray6 = classReader5.b;
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = classReader7.readLong((-1107296256));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04952");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        byte[] byteArray28 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray28);
        java.lang.String[] strArray30 = classReader29.getInterfaces();
        java.lang.String str31 = classReader29.getSuperName();
        int int33 = classReader29.readInt(6);
        int int34 = classReader29.header;
        int int36 = classReader29.readInt(15);
        java.lang.String[] strArray37 = classReader29.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor38 = classWriter1.visitMethod(7, "hi!", "hi!", "", strArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test04953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04953");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(223337);
        int int6 = classWriter1.newMethod("hi!", "", "", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test04954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04954");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("hi!", "", "\007\000", 8);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        int int35 = classWriter28.newUTF8("");
        classWriter28.visitOuterClass("hi!", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter28.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = annotationVisitor42.visitAnnotation("hi!", "\007\000");
        org.mockito.asm.FieldVisitor fieldVisitor46 = classWriter1.visitField((int) (short) 10, "hi!", "\007\000", "", (java.lang.Object) "\007\000");
        classWriter1.visitSource("hi!", "\007\000");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(fieldVisitor46);
    }

    @Test
    public void test04955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04955");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        methodVisitor69.visitInsn((int) (byte) 10);
        methodVisitor69.visitMethodInsn(47806, "hi!", "hi!", "hi!");
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04956");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(1, "", "hi!", "");
        methodVisitor69.visitFieldInsn(16778088, "hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn(2, "\001", "\007\000", "");
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        org.mockito.asm.Label label96 = null;
        methodVisitor69.visitTryCatchBlock(label94, label95, label96, "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test04957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04957");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor8 = annotationVisitor4.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = annotationVisitor8.visitAnnotation("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = annotationVisitor8.visitArray("hi!");
        annotationVisitor13.visit("hi!", (java.lang.Object) 10.0f);
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor13.visitArray("hi!");
        annotationVisitor13.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = annotationVisitor13.visitAnnotation("\007\000", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = annotationVisitor13.visitAnnotation("hi!", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = annotationVisitor25.visitAnnotation("hi!", "\007\000");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor8);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test04958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04958");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        byte[] byteArray24 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("hi!", "");
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter26.visit((int) 'a', (int) '4', "", "hi!", "", strArray42);
        classWriter26.visitInnerClass("hi!", "", "", (int) 'a');
        int int52 = classWriter26.newField("", "hi!", "hi!");
        int int57 = classWriter26.newMethod("", "hi!", "hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter26.visitAnnotation("hi!", false);
        classWriter26.visitOuterClass("", "hi!", "hi!");
        int int68 = classWriter26.newField("hi!", "", "");
        int int69 = classWriter1.newConst((java.lang.Object) "");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 3, 0, 2, 0, 97]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 7 + "'", int57 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
    }

    @Test
    public void test04959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04959");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        short short10 = classReader4.readShort(10);
        int int12 = classReader4.readInt((int) (short) 1);
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        classWriter15.visitSource("hi!", "");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter15.visit((int) 'a', (int) '4', "", "hi!", "", strArray31);
        byte[] byteArray33 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader34.accept((org.mockito.asm.ClassVisitor) classWriter36, 8);
        long long40 = classReader34.readLong(7);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter42.visitAnnotation("", true);
        int int48 = classWriter42.newNameType("hi!", "hi!");
        classReader34.accept((org.mockito.asm.ClassVisitor) classWriter42, (int) (byte) 0);
        int int52 = classReader34.getItem(0);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("hi!", "");
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter55.visit((int) 'a', (int) '4', "", "hi!", "", strArray71);
        byte[] byteArray73 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader74 = new org.mockito.asm.ClassReader(byteArray73);
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader74.accept((org.mockito.asm.ClassVisitor) classWriter76, 8);
        char[] charArray85 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj86 = classReader74.readConst((int) (short) 1, charArray85);
        java.lang.String str87 = classReader34.readUTF8(103, charArray85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = classReader4.readUTF8(1768711425, charArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-21316096) + "'", int12 == (-21316096));
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 6989595422067222633L + "'", long40 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray85);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray85), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray85), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray85), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj86 + "' != '" + "\007\000" + "'", obj86, "\007\000");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
    }

    @Test
    public void test04960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04960");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("", "\001", "hi!", (int) (short) 3);
        org.junit.Assert.assertNotNull(annotationVisitor4);
    }

    @Test
    public void test04961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04961");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        int int28 = classReader26.readInt((int) (byte) 10);
        long long30 = classReader26.readLong(103);
        java.lang.String str31 = classReader26.getSuperName();
        int int33 = classReader26.readInt((int) (short) 3);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        classWriter36.visitSource("hi!", "");
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter36.visit((int) 'a', (int) '4', "", "hi!", "", strArray52);
        byte[] byteArray54 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray54);
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray54);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter(classReader56, 256);
        int int60 = classReader56.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter63.visitEnd();
        classWriter63.visitSource("hi!", "");
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter63.visit((int) 'a', (int) '4', "", "hi!", "", strArray79);
        byte[] byteArray81 = classWriter63.toByteArray();
        org.mockito.asm.ClassReader classReader82 = new org.mockito.asm.ClassReader(byteArray81);
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader82.accept((org.mockito.asm.ClassVisitor) classWriter84, 8);
        char[] charArray93 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj94 = classReader82.readConst((int) (short) 1, charArray93);
        java.lang.Object obj95 = classReader56.readConst(4, charArray93);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = classReader26.readClass((int) (short) 2, charArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16777223 + "'", int28 == 16777223);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 562962838716416L + "'", long30 == 562962838716416L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1107296256) + "'", int33 == (-1107296256));
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray93);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray93), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray93), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray93), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj94 + "' != '" + "\007\000" + "'", obj94, "\007\000");
        org.junit.Assert.assertNotNull(obj95);
        org.junit.Assert.assertEquals(obj95.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj95), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj95), "Lhi!;");
    }

    @Test
    public void test04962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04962");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn((int) (short) 256, "hi!", "", "");
        methodVisitor69.visitEnd();
        methodVisitor69.visitIntInsn(65210, 16778088);
        methodVisitor69.visitMultiANewArrayInsn("hi!", (-1));
        org.mockito.asm.Label label89 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test04963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04963");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int13 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter23.visitEnd();
        classWriter23.visitSource("hi!", "");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter23.visit((int) 'a', (int) '4', "", "hi!", "", strArray39);
        byte[] byteArray41 = classWriter23.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader42.accept((org.mockito.asm.ClassVisitor) classWriter44, 8);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        classWriter48.visitSource("", "");
        classReader42.accept((org.mockito.asm.ClassVisitor) classWriter48, 100);
        int int58 = classWriter48.newField("hi!", "", "");
        classWriter48.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter1.visitField((-21316096), "hi!", "\007\000", "\007\000", (java.lang.Object) classWriter48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@2abcdbde");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
    }

    @Test
    public void test04964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04964");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newConst((java.lang.Object) (short) 0);
        classWriter1.visitInnerClass("hi!", "\007\000", "", 10);
        byte[] byteArray17 = classWriter1.toByteArray();
        int int19 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 3, 0, 0, 0, 0, 7, 0, 3, 1, 0, 3, 7, -64, -128, 7, 0, 8, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 0, 0, 10, 0, 1, 0, 7, 0, 9, 0, 1, 0, 10]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test04965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04965");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        int int25 = classReader21.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        byte[] byteArray46 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader47.accept((org.mockito.asm.ClassVisitor) classWriter49, 8);
        char[] charArray58 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj59 = classReader47.readConst((int) (short) 1, charArray58);
        java.lang.Object obj60 = classReader21.readConst(4, charArray58);
        java.lang.String str61 = classReader21.getClassName();
        short short63 = classReader21.readShort(7);
        // The following exception was thrown during execution in test generation
        try {
            long long65 = classReader21.readLong(16779008);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + "\007\000" + "'", obj59, "\007\000");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "Lhi!;");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + short63 + "' != '" + (short) 24832 + "'", short63 == (short) 24832);
    }

    @Test
    public void test04966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04966");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        methodVisitor69.visitTryCatchBlock(label78, label79, label80, "");
        methodVisitor69.visitIincInsn(5, 24832);
        java.lang.Object obj86 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLdcInsn(obj86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04967");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 100);
        classWriter1.visitInnerClass("", "hi!", "\007\000", 0);
        int int8 = classWriter1.newClass("");
        int int10 = classWriter1.newClass("\001");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
    }

    @Test
    public void test04968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04968");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "");
        int int20 = classWriter1.newClass("hi!");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        byte[] byteArray28 = classWriter26.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter26.visitAnnotation("", true);
        classWriter26.visitOuterClass("", "", "hi!");
        int int40 = classWriter26.newMethod("", "hi!", "hi!", true);
        int int44 = classWriter26.newField("hi!", "", "hi!");
        classWriter26.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter26.visitAnnotation("hi!", true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor52 = classWriter1.visitField((int) '4', "\007\000", "\001", "", (java.lang.Object) classWriter26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@7075215d");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 6 + "'", int40 == 6);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor51);
    }

    @Test
    public void test04969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04969");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(7);
        methodVisitor69.visitMethodInsn((int) (short) 10, "\007\000", "\007\000", "");
        methodVisitor69.visitMaxs((int) ' ', 83);
        org.mockito.asm.Attribute attribute93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04970");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("hi!", "hi!");
        int int24 = classWriter1.newField("\007\000", "\007\000", "\007\000");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", (int) (short) 1792);
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.Attribute attribute33 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor32);
    }

    @Test
    public void test04971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04971");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        classWriter22.visitInnerClass("", "hi!", "", 13);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        classWriter35.visitSource("hi!", "");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter35.visit((int) 'a', (int) '4', "", "hi!", "", strArray51);
        byte[] byteArray53 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray53);
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray53);
        java.lang.String str57 = classReader56.getSuperName();
        java.lang.String[] strArray58 = classReader56.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor59 = classWriter22.visitMethod(8, "hi!", "", "", strArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(strArray58);
    }

    @Test
    public void test04972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04972");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int8 = classReader7.header;
        int int9 = classReader7.getAccess();
        int int10 = classReader7.header;
        byte[] byteArray11 = classReader7.b;
        byte[] byteArray12 = classReader7.b;
        int int13 = classReader7.getAccess();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04973");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        byte[] byteArray34 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray34);
        int int37 = classReader36.getAccess();
        int int38 = classReader36.header;
        java.lang.String[] strArray39 = classReader36.getInterfaces();
        classWriter22.visit((int) (short) 0, 9, "", "", "", strArray39);
        int int44 = classWriter22.newField("\007\000", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter22.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter54.visitEnd();
        classWriter54.visitSource("hi!", "");
        classWriter54.visitEnd();
        byte[] byteArray60 = classWriter54.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        java.lang.String[] strArray62 = classReader61.getInterfaces();
        classWriter22.visit(254, 11, "hi!", "\007\000", "", strArray62);
        classWriter22.visitSource("\001", "\001");
        classWriter22.visitSource("", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 11 + "'", int44 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray62);
    }

    @Test
    public void test04974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04974");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        int int36 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        classWriter38.visitSource("hi!", "");
        int int47 = classWriter38.newMethod("", "hi!", "", false);
        int int51 = classWriter38.newField("", "\007\000", "\007\000");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, 202);
        int int55 = classWriter38.newClass("");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 256 + "'", int36 == 256);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 5 + "'", int47 == 5);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
    }

    @Test
    public void test04975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04975");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMaxs(16777223, 13);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitVarInsn(1751720193, 0);
        methodVisitor69.visitVarInsn(3, 21353);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test04976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04976");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor8 = annotationVisitor4.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = annotationVisitor8.visitAnnotation("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = annotationVisitor8.visitAnnotation("", "hi!");
        annotationVisitor14.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor8);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor14);
    }

    @Test
    public void test04977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04977");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int8 = classWriter1.newNameType("hi!", "");
        int int12 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter18.visitAnnotation("", true);
        classWriter18.visitSource("", "");
        classWriter18.visitOuterClass("hi!", "", "");
        int int31 = classWriter18.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter18.visitAnnotation("", true);
        int int39 = classWriter18.newMethod("hi!", "hi!", "hi!", true);
        classWriter18.visitInnerClass("", "hi!", "hi!", 73);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(83886080, "hi!", "hi!", "", (java.lang.Object) 73);
        int int47 = classWriter1.newUTF8("\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter1.visitAnnotation("\007\000", true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor50);
    }

    @Test
    public void test04978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04978");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        methodVisitor69.visitInsn(52);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test04979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04979");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int29 = classReader20.header;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader20, 51966);
        java.lang.String str32 = classReader20.getSuperName();
        int int34 = classReader20.getItem((int) (short) 3);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 73 + "'", int29 == 73);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
    }

    @Test
    public void test04980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04980");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitFieldInsn((int) ' ', "\007\000", "hi!", "hi!");
        methodVisitor69.visitMaxs(1, (int) (short) 2);
        methodVisitor69.visitMaxs((int) (short) 2, (int) (short) 26978);
        methodVisitor69.visitVarInsn(73, (int) ' ');
        methodVisitor69.visitVarInsn(16778088, (int) (short) 10);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test04981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04981");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "\007\000", "\007\000");
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        byte[] byteArray19 = classWriter17.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter17.visitAnnotation("", true);
        classWriter17.visitOuterClass("", "", "hi!");
        int int31 = classWriter17.newMethod("", "hi!", "hi!", true);
        int int33 = classWriter17.newUTF8("hi!");
        classWriter17.visitEnd();
        byte[] byteArray35 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        int int38 = classReader36.readUnsignedShort(5);
        int int40 = classReader36.getItem(5);
        org.mockito.asm.FieldVisitor fieldVisitor41 = classWriter1.visitField((-1161953280), "", "\007\000", "", (java.lang.Object) int40);
        fieldVisitor41.visitEnd();
        fieldVisitor41.visitEnd();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 28 + "'", int40 == 28);
        org.junit.Assert.assertNotNull(fieldVisitor41);
    }

    @Test
    public void test04982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04982");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray3, (int) (short) 3, (int) (short) -326);
        int int7 = classReader6.header;
        byte[] byteArray8 = classReader6.b;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = classReader6.readUnsignedShort(132864);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 13 + "'", int7 == 13);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04983");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        int int17 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter23.visitEnd();
        byte[] byteArray25 = classWriter23.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter23.visitAnnotation("", true);
        classWriter23.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter23.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter23.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter23.visitAnnotation("hi!", false);
        org.mockito.asm.FieldVisitor fieldVisitor42 = classWriter1.visitField((-1), "hi!", "\007\000", "", (java.lang.Object) "hi!");
        fieldVisitor42.visitEnd();
        org.mockito.asm.Attribute attribute44 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor42.visitAttribute(attribute44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(fieldVisitor42);
    }

    @Test
    public void test04984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04984");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(classReader7, 28);
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter(classReader7, 0);
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter14.visitEnd();
        classWriter14.visitSource("hi!", "");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter14.visit((int) 'a', (int) '4', "", "hi!", "", strArray30);
        byte[] byteArray32 = classWriter14.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter14.visitAnnotation("", false);
        byte[] byteArray36 = classWriter14.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader37, 2);
        byte[] byteArray40 = classReader37.b;
        java.lang.String str41 = classReader37.getSuperName();
        java.lang.String[] strArray42 = classReader37.getInterfaces();
        int int43 = classReader37.header;
        char[] charArray49 = new char[] { '4', 'a', 'a', '4' };
        java.lang.String str50 = classReader37.readUTF8(20, charArray49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = classReader7.readClass((int) (short) 0, charArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 103 + "'", int43 == 103);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "4aa4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "4aa4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[4, a, a, 4]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test04985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04985");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("\007\000", "hi!", "hi!", 202);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(100);
        classWriter29.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int43 = classWriter38.newMethod("", "", "hi!", false);
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter53.visitAnnotation("", true);
        classWriter53.visitSource("", "");
        classWriter53.visitSource("", "hi!");
        int int66 = classWriter53.newField("hi!", "hi!", "hi!");
        int int70 = classWriter53.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter38.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter29.visitField((int) (short) 0, "hi!", "hi!", "hi!", (java.lang.Object) "");
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = fieldVisitor72.visitAnnotation("hi!", false);
        fieldVisitor72.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = fieldVisitor72.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = fieldVisitor72.visitAnnotation("hi!", true);
        org.mockito.asm.FieldVisitor fieldVisitor83 = classWriter1.visitField(5, "", "\007\000", "\007\000", (java.lang.Object) "hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "", (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(fieldVisitor83);
    }

    @Test
    public void test04986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04986");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader4.readByte(1);
        int int8 = classReader4.readUnsignedShort(1);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter10.visitAnnotation("", true);
        classWriter10.visitSource("", "");
        classWriter10.visitOuterClass("hi!", "", "");
        classWriter10.visitSource("hi!", "hi!");
        classWriter10.visitEnd();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("hi!", "");
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter26.visit((int) 'a', (int) '4', "", "hi!", "", strArray42);
        byte[] byteArray44 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader45.accept((org.mockito.asm.ClassVisitor) classWriter47, 8);
        byte[] byteArray50 = classWriter47.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        short short53 = classReader51.readShort(13);
        int int54 = classReader51.getAccess();
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter56.visitAnnotation("", true);
        classWriter56.visitSource("", "");
        classWriter56.visitSource("", "hi!");
        int int69 = classWriter56.newField("hi!", "hi!", "hi!");
        classWriter56.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter56.visitSource("", "");
        classWriter56.visitSource("hi!", "");
        org.mockito.asm.Attribute[] attributeArray81 = new org.mockito.asm.Attribute[] {};
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter56, attributeArray81, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept((org.mockito.asm.ClassVisitor) classWriter10, attributeArray81, 1768711425);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 254 + "'", int6 == 254);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 65210 + "'", int8 == 65210);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) 1792 + "'", short53 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 52 + "'", int54 == 52);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 5 + "'", int69 == 5);
        org.junit.Assert.assertNotNull(attributeArray81);
    }

    @Test
    public void test04987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04987");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        int int8 = classWriter1.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = annotationVisitor11.visitAnnotation("\007\000", "");
        annotationVisitor11.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = annotationVisitor11.visitAnnotation("hi!", "hi!");
        java.lang.Class<?> wildcardClass19 = annotationVisitor11.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test04988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04988");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        classWriter1.visitEnd();
        int int16 = classWriter1.newField("\007\000", "\001", "\001");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
    }

    @Test
    public void test04989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04989");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter1.visitAnnotation("hi!", false);
        byte[] byteArray25 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        classWriter31.visitSource("hi!", "");
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter31.visit((int) 'a', (int) '4', "", "hi!", "", strArray47);
        byte[] byteArray49 = classWriter31.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter31.visitAnnotation("", false);
        byte[] byteArray53 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        java.lang.String str55 = classReader54.getSuperName();
        int int57 = classReader54.readInt(10);
        java.lang.String[] strArray58 = classReader54.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor59 = classWriter1.visitMethod(88, "", "", "\001", strArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 12, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 12, 0, 1, 0, 2, 1, 0, 9, 83, 121, 110, 116, 104, 101, 116, 105, 99, 1, 0, 10, 68, 101, 112, 114, 101, 99, 97, 116, 101, 100, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 0, 2, 0, 2, 0, 3, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 7, 0, 0, 0, 2, 0, 2, 0, 0, 0, 4, 0, 8, 0, 0, 0, 2, 0, 1, 0, 9, 0, 0, 0, 0, 0, 10, 0, 0, 0, 4, 0, 3, 0, 4, 0, 11, 0, 0, 0, 10, 0, 2, 0, 1, 0, 0, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 16778088 + "'", int57 == 16778088);
        org.junit.Assert.assertNotNull(strArray58);
    }

    @Test
    public void test04990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04990");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitSource("hi!", "hi!");
        int int12 = classWriter1.newClass("");
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int19 = classWriter14.newMethod("", "", "hi!", false);
        classWriter14.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = classWriter14.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter29.visitAnnotation("", true);
        classWriter29.visitSource("", "");
        classWriter29.visitSource("", "hi!");
        int int42 = classWriter29.newField("hi!", "hi!", "hi!");
        int int46 = classWriter29.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter14.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = fieldVisitor47.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = fieldVisitor47.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = fieldVisitor47.visitAnnotation("", true);
        int int57 = classWriter1.newConst((java.lang.Object) "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
    }

    @Test
    public void test04991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04991");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        methodVisitor69.visitIntInsn(48640, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotation("", false);
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        org.mockito.asm.Label label96 = null;
        methodVisitor69.visitTryCatchBlock(label94, label95, label96, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test04992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04992");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        classWriter10.visitSource("hi!", "");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter10.visit((int) 'a', (int) '4', "", "hi!", "", strArray26);
        byte[] byteArray28 = classWriter10.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter10.visitAnnotation("", false);
        byte[] byteArray32 = classWriter10.toByteArray();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        java.lang.String[] strArray42 = classReader41.getInterfaces();
        short short44 = classReader41.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter10.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = fieldVisitor45.visitAnnotation("", true);
        org.mockito.asm.FieldVisitor fieldVisitor49 = classWriter1.visitField(4, "hi!", "hi!", "hi!", (java.lang.Object) true);
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("\007\000", false);
        byte[] byteArray53 = classWriter1.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray53, 3072, (int) (short) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -326 + "'", short44 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(fieldVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 1, 0, 3, 104, 105, 33, 3, 0, 0, 0, 1, 1, 0, 3, 7, -64, -128, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 4, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 4, 0, 0]");
    }

    @Test
    public void test04993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04993");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label[] labelArray93 = new org.mockito.asm.Label[] { label92 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn((int) (short) 4, 17, label91, labelArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(labelArray93);
    }

    @Test
    public void test04994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04994");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 7);
        classWriter1.visitOuterClass("hi!", "hi!", "");
        classWriter1.visitOuterClass("\007\000", "hi!", "\007\000");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter1.visitAnnotation("\007\000", false);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter43.visitEnd();
        byte[] byteArray45 = classWriter43.toByteArray();
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray45);
        int int48 = classReader46.readUnsignedShort((int) (short) 0);
        java.lang.String str49 = classReader46.getSuperName();
        short short51 = classReader46.readShort(5);
        java.lang.String[] strArray52 = classReader46.getInterfaces();
        classWriter1.visit((-1107296256), (int) (short) 2049, "\007\000", "hi!", "", strArray52);
        java.lang.Object obj54 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int55 = classWriter1.newConst(obj54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 51966 + "'", int48 == 51966);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + short51 + "' != '" + (short) 0 + "'", short51 == (short) 0);
        org.junit.Assert.assertNotNull(strArray52);
    }

    @Test
    public void test04995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04995");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        int int8 = classWriter1.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        classWriter15.visitSource("hi!", "");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter15.visit((int) 'a', (int) '4', "", "hi!", "", strArray31);
        byte[] byteArray33 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader34.accept((org.mockito.asm.ClassVisitor) classWriter36, 8);
        long long40 = classReader34.readLong(7);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter42.visitAnnotation("", true);
        int int48 = classWriter42.newNameType("hi!", "hi!");
        classReader34.accept((org.mockito.asm.ClassVisitor) classWriter42, (int) (byte) 0);
        java.lang.String str51 = classReader34.getClassName();
        java.lang.String str52 = classReader34.getSuperName();
        java.lang.String[] strArray53 = classReader34.getInterfaces();
        classWriter1.visit((int) ' ', 0, "", "\007\000", "hi!", strArray53);
        int int56 = classWriter1.newUTF8("");
        org.mockito.asm.Attribute attribute57 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 6989595422067222633L + "'", long40 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test04996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04996");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        methodVisitor69.visitInsn((int) (byte) 10);
        methodVisitor69.visitInsn(47806);
        methodVisitor69.visitIincInsn((int) (short) 29285, 20);
        methodVisitor69.visitMaxs(100, 29285);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test04997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04997");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader4.readUnsignedShort((int) (short) 0);
        byte[] byteArray7 = classReader4.b;
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray7);
        byte[] byteArray9 = classReader8.b;
        java.lang.String[] strArray10 = classReader8.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader8.readInt(57174305);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51966 + "'", int6 == 51966);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray10);
    }

    @Test
    public void test04998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04998");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        int int48 = classWriter1.newMethod("\001", "", "\001", true);
        int int52 = classWriter1.newField("\001", "\001", "hi!");
        classWriter1.visitInnerClass("\001", "hi!", "\001", 51);
        byte[] byteArray58 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute59 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 2, 0, 15, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 1, 1, 7, 0, 5, 12, 0, 2, 0, 5, 11, 0, 6, 0, 7, 12, 0, 5, 0, 1, 9, 0, 6, 0, 9, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 7, 0, 3, 0, 4, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 11, 0, 0, 0, 2, 0, 2, 0, 12, 0, 0, 0, 2, 0, 1, 0, 13, 0, 0, 0, 0, 0, 14, 0, 0, 0, 10, 0, 1, 0, 6, 0, 4, 0, 5, 0, 51]");
    }

    @Test
    public void test04999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04999");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        classWriter19.visitSource("hi!", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter19.visit((int) 'a', (int) '4', "", "hi!", "", strArray35);
        byte[] byteArray37 = classWriter19.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter19.visitAnnotation("", false);
        byte[] byteArray41 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        java.lang.String[] strArray43 = classReader42.getInterfaces();
        classWriter1.visit(51966, (int) 'a', "", "\007\000", "", strArray43);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("\007\000", "", "");
        classWriter1.visitInnerClass("hi!", "", "\001", 151060483);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test05000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test05000");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        long long9 = classReader4.readLong(0);
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        java.lang.String str12 = classReader4.getSuperName();
        int int14 = classReader4.readByte(17);
        int int15 = classReader4.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = classReader4.readInt(28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3819410108757049344L) + "'", long9 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }
}


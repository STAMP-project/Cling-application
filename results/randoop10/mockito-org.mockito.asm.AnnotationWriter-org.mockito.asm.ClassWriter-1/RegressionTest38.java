import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest38 {

    public static boolean debug = false;

    @Test
    public void test19001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19001");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        char[] charArray37 = new char[] { ' ', '4', 'a' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = classReader20.readUTF8(1919222016, charArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " 4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " 4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , 4, a]");
    }

    @Test
    public void test19002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19002");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        classWriter36.visitSource("hi!", "");
        int int45 = classWriter36.newMethod("", "hi!", "", false);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter36, 9);
        int int48 = classReader20.header;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 73 + "'", int48 == 73);
    }

    @Test
    public void test19003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19003");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) ' ');
        int int29 = classWriter25.newField("", "", "hi!");
        int int32 = classWriter25.newNameType("", "");
        classWriter25.visitEnd();
        byte[] byteArray34 = classWriter25.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray34);
        annotationVisitor22.visit("\007\000", (java.lang.Object) byteArray34);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 9, 0, 2, 0, 4, 12, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test19004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19004");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "hi!");
        classWriter1.visitEnd();
        byte[] byteArray9 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter11.visitEnd();
        classWriter11.visitSource("hi!", "");
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter11.visit((int) 'a', (int) '4', "", "hi!", "", strArray27);
        byte[] byteArray29 = classWriter11.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = classWriter11.visitAnnotation("", false);
        byte[] byteArray33 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        java.lang.String str35 = classReader34.getSuperName();
        int int37 = classReader34.readInt(10);
        int int38 = classReader34.header;
        int int40 = classReader34.readUnsignedShort(16);
        int int41 = classWriter1.newConst((java.lang.Object) 16);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter48.visitAnnotation("", true);
        classWriter48.visitSource("", "");
        classWriter48.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter70.visitEnd();
        byte[] byteArray72 = classWriter70.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        java.lang.String[] strArray74 = classReader73.getInterfaces();
        int int75 = classReader73.getAccess();
        int int77 = classReader73.readUnsignedShort(4);
        int int79 = classReader73.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor80 = classWriter64.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray88 = new java.lang.String[] { "", "hi!" };
        classWriter64.visit((int) (byte) 10, (-1), "", "", "", strArray88);
        classWriter48.visit(1, 65210, "", "hi!", "", strArray88);
        classWriter1.visit(16784210, 458754, "\007\000", "", "\001", strArray88);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 3, 104, 105, 33]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16778088 + "'", int37 == 16778088);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 103 + "'", int38 == 103);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 256 + "'", int40 == 256);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor80);
        org.junit.Assert.assertNotNull(strArray88);
    }

    @Test
    public void test19005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19005");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 7);
        classWriter1.visitOuterClass("hi!", "hi!", "");
        classWriter1.visitOuterClass("\007\000", "hi!", "\007\000");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter1.visitAnnotation("\007\000", false);
        int int39 = classWriter1.newNameType("\007\000", "");
        byte[] byteArray40 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 13 + "'", int39 == 13);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 18, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 7, 0, 3, 9, 0, 7, 0, 4, 12, 0, 3, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 10, 12, 0, 3, 0, 10, 12, 0, 10, 0, 1, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 14, 0, 0, 0, 4, 0, 11, 0, 12, 0, 15, 0, 0, 0, 10, 0, 1, 0, 7, 0, 7, 0, 1, 0, 7, 0, 16, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 17, 0, 0, 0, 6, 0, 1, 0, 10, 0, 0]");
    }

    @Test
    public void test19006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19006");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitInsn((-1));
        methodVisitor69.visitMaxs((int) (short) 872, (int) (short) 2049);
        methodVisitor69.visitMaxs(1919222016, 131073);
        methodVisitor69.visitMaxs((int) (short) 1, 1792);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitParameterAnnotation(24832, "", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19007");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitVarInsn(12, 0);
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -16896);
        methodVisitor69.visitInsn(1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotation("", false);
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label[] labelArray90 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn((int) (short) 3073, (int) (short) 872, label89, labelArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(labelArray90);
    }

    @Test
    public void test19008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19008");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        int int39 = classWriter1.newNameType("\007\000", "\007\000");
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter45.visitSource("", "hi!");
        classWriter45.visitOuterClass("hi!", "", "");
        classWriter45.visitEnd();
        classWriter45.visitInnerClass("hi!", "hi!", "", (int) (short) -1);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter45.visitAnnotation("hi!", true);
        int int66 = classWriter45.newMethod("", "\001", "", false);
        org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter1.visitField((int) (short) 1024, "hi!", "hi!", "", (java.lang.Object) "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 11 + "'", int39 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertNotNull(fieldVisitor67);
    }

    @Test
    public void test19009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19009");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        int int5 = classWriter1.newField("", "", "hi!");
        int int7 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("", true);
        classWriter1.visitEnd();
        int int14 = classWriter1.newNameType("\007\000", "hi!");
        classWriter1.visitOuterClass("\007\000", "hi!", "hi!");
        int int20 = classWriter1.newClass("\007\000");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        byte[] byteArray28 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray28);
        int int31 = classReader29.readUnsignedShort((int) (short) 0);
        java.lang.String str32 = classReader29.getSuperName();
        short short34 = classReader29.readShort(5);
        java.lang.String str35 = classReader29.getSuperName();
        byte[] byteArray36 = classReader29.b;
        java.lang.String[] strArray37 = classReader29.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor38 = classWriter1.visitMethod(25966, "", "\001", "hi!", strArray37);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 51966 + "'", int31 == 51966);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 0 + "'", short34 == (short) 0);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(methodVisitor38);
    }

    @Test
    public void test19010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19010");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int6 = classReader4.getAccess();
        int int8 = classReader4.readUnsignedShort(4);
        int int10 = classReader4.readByte(5);
        java.lang.String[] strArray11 = classReader4.getInterfaces();
        java.lang.String str12 = classReader4.getSuperName();
        java.lang.String str13 = classReader4.getSuperName();
        int int15 = classReader4.readByte((int) (byte) 0);
        java.lang.String[] strArray16 = classReader4.getInterfaces();
        java.lang.String[] strArray17 = classReader4.getInterfaces();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        classWriter19.visitSource("hi!", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter19.visit((int) 'a', (int) '4', "", "hi!", "", strArray35);
        byte[] byteArray37 = classWriter19.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter19.visitAnnotation("", false);
        byte[] byteArray41 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        java.lang.String[] strArray43 = classReader42.getInterfaces();
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader42, 5);
        classWriter45.visitOuterClass("\007\000", "", "hi!");
        classWriter45.visitEnd();
        int int53 = classWriter45.newNameType("hi!", "\007\000");
        // The following exception was thrown during execution in test generation
        try {
            classReader4.accept((org.mockito.asm.ClassVisitor) classWriter45, 151060483);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 202 + "'", int15 == 202);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
    }

    @Test
    public void test19011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19011");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitVarInsn(12, 0);
        methodVisitor69.visitVarInsn(186, 51);
        methodVisitor69.visitIntInsn(119, 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIntInsn(103, 119);
        methodVisitor69.visitIincInsn((int) '4', (int) (short) 1);
        methodVisitor69.visitInsn(131073);
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(1919222016, label95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test19012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19012");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = annotationVisitor77.visitArray("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = annotationVisitor77.visitArray("\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test19013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19013");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        methodVisitor69.visitMultiANewArrayInsn("", 1763772160);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19014");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMaxs(5, (int) (short) -1);
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "\007\000");
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        methodVisitor69.visitTryCatchBlock(label90, label91, label92, "\001");
        methodVisitor69.visitFieldInsn(18, "hi!", "\007\000", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test19015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19015");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        classWriter29.visitSource("", "");
        int int38 = classWriter29.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter29.visitAnnotation("", false);
        int int43 = classWriter29.newUTF8("hi!");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter29, (int) (short) -326);
        int int47 = classReader21.readInt(10);
        int int49 = classReader21.readByte((int) (short) 0);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter51.visitEnd();
        byte[] byteArray53 = classWriter51.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter51.visitAnnotation("", true);
        classWriter51.visitOuterClass("", "", "hi!");
        int int65 = classWriter51.newMethod("", "hi!", "hi!", true);
        int int67 = classWriter51.newUTF8("hi!");
        classWriter51.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter51.visitAnnotation("", false);
        int int73 = classWriter51.newClass("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter51.visitAnnotation("", true);
        int int78 = classWriter51.newUTF8("");
        classWriter51.visitSource("\007\000", "hi!");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter51, 16);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = classWriter51.visitAnnotation("hi!", false);
        int int91 = classWriter51.newMethod("", "hi!", "\007\000", true);
        org.mockito.asm.Attribute attribute92 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter51.visitAttribute(attribute92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 16778088 + "'", int47 == 16778088);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 202 + "'", int49 == 202);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 6 + "'", int65 == 6);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 11 + "'", int91 == 11);
    }

    @Test
    public void test19016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19016");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        java.lang.String str30 = classReader24.getClassName();
        long long32 = classReader24.readLong(33);
        java.lang.String str33 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader24, 7);
        classWriter35.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter45.visitEnd();
        classWriter45.visitSource("hi!", "");
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter45.visit((int) 'a', (int) '4', "", "hi!", "", strArray61);
        byte[] byteArray63 = classWriter45.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter45.visitAnnotation("", false);
        byte[] byteArray67 = classWriter45.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        java.lang.String str69 = classReader68.getSuperName();
        int int71 = classReader68.readInt(10);
        java.lang.String[] strArray72 = classReader68.getInterfaces();
        classWriter35.visit(105, (int) (short) 519, "hi!", "\001", "", strArray72);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 8391739258808830547L + "'", long32 == 8391739258808830547L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 16778088 + "'", int71 == 16778088);
        org.junit.Assert.assertNotNull(strArray72);
    }

    @Test
    public void test19017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19017");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        int int11 = classReader4.readInt(7);
        java.lang.String str12 = classReader4.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(classReader4, 162);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 256 + "'", int11 == 256);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test19018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19018");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 7);
        int int28 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter38.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        byte[] byteArray52 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        java.lang.String[] strArray54 = classReader53.getInterfaces();
        int int55 = classReader53.getAccess();
        int int57 = classReader53.readUnsignedShort(4);
        int int59 = classReader53.readByte(5);
        java.lang.String[] strArray60 = classReader53.getInterfaces();
        classWriter38.visit(2, (int) (short) -1, "", "", "hi!", strArray60);
        classWriter1.visit(7, 73, "hi!", "", "hi!", strArray60);
        classWriter1.visitSource("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter1.visitAnnotation("\007\000", false);
        int int71 = classWriter1.newNameType("hi!", "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 11 + "'", int71 == 11);
    }

    @Test
    public void test19019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19019");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMethodInsn((int) (short) 0, "\007\000", "\007\000", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test19020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19020");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classReader20.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray37, (int) (byte) 0, (-1));
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader41, 151060483);
        java.lang.String str44 = classReader41.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int46 = classReader41.getItem(2304);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2304");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test19021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19021");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 65210);
        methodVisitor69.visitFieldInsn(3, "", "\001", "");
        methodVisitor69.visitIincInsn(327680, 676719);
        methodVisitor69.visitIntInsn(83886080, 48640);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19022");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 190);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotation("hi!", true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test19023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19023");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        int int8 = classWriter1.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        byte[] byteArray24 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader25 = new org.mockito.asm.ClassReader(byteArray24);
        int int27 = classReader25.readUnsignedShort((int) (short) 0);
        java.lang.String str28 = classReader25.getSuperName();
        short short30 = classReader25.readShort(5);
        java.lang.String[] strArray31 = classReader25.getInterfaces();
        classWriter10.visit(119, 11, "hi!", "hi!", "", strArray31);
        int int33 = classWriter1.newConst((java.lang.Object) 119);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 51966 + "'", int27 == 51966);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 0 + "'", short30 == (short) 0);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
    }

    @Test
    public void test19024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19024");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("\007\000", "", "\007\000");
        byte[] byteArray17 = classWriter1.toByteArray();
        int int19 = classWriter1.newClass("\007\000");
        classWriter1.visitInnerClass("hi!", "\001", "\001", 13);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 1, 0, 3, 7, -64, -128, 7, 0, 6, 12, 0, 1, 0, 6, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 4, 0, 7, 0, 8]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
    }

    @Test
    public void test19025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19025");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        byte[] byteArray44 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "hi!", 3);
        classWriter1.visitOuterClass("\007\000", "\007\000", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter1.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter1.visitAnnotation("", false);
        classWriter1.visitOuterClass("hi!", "", "\007\000");
        classWriter1.visitSource("", "\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 2, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 7, 0, 3, 0, 4, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor59);
    }

    @Test
    public void test19026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19026");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitMaxs(21353, 132864);
        methodVisitor69.visitVarInsn(17, (int) (short) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(27, label88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test19027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19027");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitInnerClass("", "", "hi!", (int) (byte) 0);
        int int11 = classWriter1.newUTF8("\007\000");
        classWriter1.visitOuterClass("", "hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor18 = classWriter1.visitAnnotation("\001", false);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        byte[] byteArray27 = classWriter25.toByteArray();
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray27);
        java.lang.String[] strArray29 = classReader28.getInterfaces();
        java.lang.String str30 = classReader28.getSuperName();
        java.lang.String[] strArray31 = classReader28.getInterfaces();
        java.lang.String str32 = classReader28.getSuperName();
        int int33 = classReader28.getAccess();
        java.lang.String[] strArray34 = classReader28.getInterfaces();
        classWriter1.visit((int) (short) 13312, 16777217, "hi!", "hi!", "\001", strArray34);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = annotationVisitor38.visitAnnotation("\007\000", "\007\000");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor18);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(annotationVisitor41);
    }

    @Test
    public void test19028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19028");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 7);
        int int28 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter38.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        byte[] byteArray52 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        java.lang.String[] strArray54 = classReader53.getInterfaces();
        int int55 = classReader53.getAccess();
        int int57 = classReader53.readUnsignedShort(4);
        int int59 = classReader53.readByte(5);
        java.lang.String[] strArray60 = classReader53.getInterfaces();
        classWriter38.visit(2, (int) (short) -1, "", "", "hi!", strArray60);
        classWriter1.visit(7, 73, "hi!", "", "hi!", strArray60);
        int int67 = classWriter1.newMethod("\007\000", "hi!", "\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter1.visitAnnotation("\007\000", true);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("\007\000", true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 13 + "'", int67 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor74);
    }

    @Test
    public void test19029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19029");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        byte[] byteArray8 = classReader7.b;
        int int10 = classReader7.readInt((int) (short) 1);
        java.lang.String str11 = classReader7.getSuperName();
        int int12 = classReader7.header;
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        classWriter15.visitSource("hi!", "");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter15.visit((int) 'a', (int) '4', "", "hi!", "", strArray31);
        byte[] byteArray33 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader35, 256);
        int int39 = classReader35.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        classWriter42.visitSource("hi!", "");
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter42.visit((int) 'a', (int) '4', "", "hi!", "", strArray58);
        byte[] byteArray60 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader61.accept((org.mockito.asm.ClassVisitor) classWriter63, 8);
        char[] charArray72 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj73 = classReader61.readConst((int) (short) 1, charArray72);
        java.lang.Object obj74 = classReader35.readConst(4, charArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = classReader7.readClass(0, charArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-21316096) + "'", int10 == (-21316096));
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + "\007\000" + "'", obj73, "\007\000");
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "Lhi!;");
    }

    @Test
    public void test19030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19030");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String[] strArray21 = classReader20.getInterfaces();
        java.lang.String str22 = classReader20.getSuperName();
        char[] charArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = classReader20.readUTF8(117, charArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test19031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19031");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitEnd();
        int int19 = classWriter1.newField("\007\000", "\001", "hi!");
        classWriter1.visitOuterClass("\007\000", "", "\007\000");
        java.lang.Object obj28 = null;
        org.mockito.asm.FieldVisitor fieldVisitor29 = classWriter1.visitField((int) (short) 1792, "hi!", "", "\007\000", obj28);
        int int31 = classWriter1.newClass("\001");
        int int33 = classWriter1.newConst((java.lang.Object) 27);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) ' ');
        int int43 = classWriter39.newField("", "", "hi!");
        int int46 = classWriter39.newNameType("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter39.visitAnnotation("\001", true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter1.visitField(1763770624, "hi!", "\001", "\001", (java.lang.Object) classWriter39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@204f8d2b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(fieldVisitor29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 13 + "'", int33 == 13);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor49);
    }

    @Test
    public void test19032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19032");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn(48640, "hi!");
        methodVisitor69.visitTypeInsn((int) (short) 256, "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitEnd();
        methodVisitor69.visitIntInsn(14, (int) (short) 872);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test19033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19033");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        int int8 = classWriter1.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", true);
        byte[] byteArray15 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        byte[] byteArray19 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        byte[] byteArray21 = classReader20.b;
        byte[] byteArray22 = classReader20.b;
        int int23 = classReader20.header;
        int int24 = classReader20.getAccess();
        int int25 = classWriter1.newConst((java.lang.Object) int24);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        byte[] byteArray33 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        java.lang.String[] strArray35 = classReader34.getInterfaces();
        int int37 = classReader34.readUnsignedShort(1);
        int int39 = classReader34.readUnsignedShort(0);
        byte[] byteArray40 = classReader34.b;
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray40, 6, (int) (short) 100);
        java.lang.String[] strArray44 = classReader43.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor45 = classWriter1.visitMethod((int) (short) 2387, "\007\000", "hi!", "", strArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 3, 104, 105, 33, 1, 0, 0, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 2, 0, 1, 0, 4, 0, 0, 0, 0, 0, 5, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0, 0, 6, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 65210 + "'", int37 == 65210);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 51966 + "'", int39 == 51966);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
    }

    @Test
    public void test19034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19034");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        byte[] byteArray42 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        java.lang.String[] strArray44 = classReader43.getInterfaces();
        int int45 = classReader43.getAccess();
        int int47 = classReader43.readUnsignedShort(4);
        int int49 = classReader43.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter34.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (byte) 10, (-1), "", "", "", strArray58);
        classWriter1.visit((-889275714), 0, "", "hi!", "hi!", strArray58);
        int int65 = classWriter1.newMethod("hi!", "", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = annotationVisitor68.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = annotationVisitor70.visitAnnotation("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = annotationVisitor70.visitArray("");
        java.lang.Class<?> wildcardClass76 = annotationVisitor75.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test19035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19035");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        byte[] byteArray35 = classReader20.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray35, (int) (byte) 0, 100);
        int int40 = classReader38.readUnsignedShort(1);
        int int42 = classReader38.getItem(0);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int49 = classWriter44.newMethod("", "", "hi!", false);
        classWriter44.visitEnd();
        int int52 = classWriter44.newClass("");
        int int54 = classWriter44.newUTF8("\007\000");
        byte[] byteArray55 = classWriter44.toByteArray();
        classReader38.accept((org.mockito.asm.ClassVisitor) classWriter44, 3);
        int int59 = classReader38.readInt((int) (short) 1);
        int int60 = classReader38.header;
        java.lang.String str61 = classReader38.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 65210 + "'", int40 == 65210);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 1, 0, 3, 7, -64, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-21316096) + "'", int59 == (-21316096));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 73 + "'", int60 == 73);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test19036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19036");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        int int12 = classReader4.header;
        java.lang.String[] strArray13 = classReader4.getInterfaces();
        byte[] byteArray14 = classReader4.b;
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        classWriter17.visitSource("hi!", "");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter17.visit((int) 'a', (int) '4', "", "hi!", "", strArray33);
        byte[] byteArray35 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader36.accept((org.mockito.asm.ClassVisitor) classWriter38, 8);
        int int42 = classReader36.readUnsignedShort((int) (short) 10);
        int int44 = classReader36.readInt(2);
        int int45 = classReader36.header;
        java.lang.String[] strArray46 = classReader36.getInterfaces();
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter(classReader36, 14);
        short short50 = classReader36.readShort(14);
        int int51 = classReader36.header;
        int int52 = classReader36.header;
        char[] charArray57 = new char[] { '4', 'a', 'a' };
        java.lang.String str58 = classReader36.readUTF8(97, charArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = classReader4.readUTF8((int) (byte) 0, charArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 256 + "'", int42 == 256);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1161953280) + "'", int44 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 73 + "'", int45 == 73);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + short50 + "' != '" + (short) 26913 + "'", short50 == (short) 26913);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 73 + "'", int51 == 73);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 73 + "'", int52 == 73);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "\007\000a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "\007\000a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[\007, \000, a]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\007\000" + "'", str58, "\007\000");
    }

    @Test
    public void test19037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19037");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        long long31 = classReader24.readLong(0);
        int int32 = classReader24.header;
        byte[] byteArray33 = classReader24.b;
        byte[] byteArray34 = classReader24.b;
        byte[] byteArray35 = classReader24.b;
        java.lang.String[] strArray36 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader24, 65535);
        byte[] byteArray39 = classReader24.b;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3819410108757049247L) + "'", long31 == (-3819410108757049247L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 103 + "'", int32 == 103);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test19038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19038");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitVarInsn(1, 16778088);
        methodVisitor69.visitMaxs(132864, (int) (byte) -1);
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        methodVisitor69.visitTryCatchBlock(label87, label88, label89, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label96 = null;
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\001", "\007\000", "", label96, label97, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test19039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19039");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(52);
        methodVisitor69.visitMethodInsn(6, "\007\000", "\007\000", "\007\000");
        methodVisitor69.visitMethodInsn((-1161953280), "hi!", "", "\001");
        methodVisitor69.visitMultiANewArrayInsn("hi!", 16777217);
        org.mockito.asm.AnnotationVisitor annotationVisitor96 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor96);
    }

    @Test
    public void test19040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19040");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("hi!", "hi!", "", (int) (short) -1);
        classWriter1.visitOuterClass("hi!", "", "hi!");
        int int20 = classWriter1.newUTF8("\001");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
    }

    @Test
    public void test19041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19041");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        int int59 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int70 = classWriter65.newMethod("", "", "hi!", false);
        classWriter65.visitEnd();
        classWriter65.visitInnerClass("\007\000", "", "\007\000", 254);
        org.mockito.asm.FieldVisitor fieldVisitor77 = classWriter1.visitField(14, "\007\000", "", "hi!", (java.lang.Object) "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = classWriter1.visitAnnotation("", true);
        classWriter1.visitEnd();
        byte[] byteArray82 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader83 = new org.mockito.asm.ClassReader(byteArray82);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-54, -2, -70, -66, 0, 0, 0, 52, 0, 12, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 3, 0, 1, 1, 0, 3, 7, -64, -128, 8, 0, 6, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 100, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 1, 0, 14, 0, 6, 0, 1, 0, 2, 0, 8, 0, 0, 0, 2, 0, 7, 0, 9, 0, 0, 0, 2, 0, 3, 0, 0, 0, 3, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 10, 0, 1, 0, 2, 0, 4, 0, 3, 0, 10, 0, 11, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test19042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19042");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        classWriter22.visitOuterClass("", "hi!", "hi!");
        byte[] byteArray29 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray29, (int) (short) 9, (int) (byte) 0);
        int int33 = classReader32.getAccess();
        int int34 = classReader32.header;
        org.mockito.asm.ClassVisitor classVisitor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            classReader32.accept(classVisitor35, 872);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 3, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3072 + "'", int33 == 3072);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 25 + "'", int34 == 25);
    }

    @Test
    public void test19043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19043");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(0);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter36, 0);
        java.lang.String str39 = classReader20.getSuperName();
        java.lang.String str40 = classReader20.getSuperName();
        int int41 = classReader20.getAccess();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter43.visitAnnotation("", true);
        classWriter43.visitSource("", "");
        int int52 = classWriter43.newNameType("hi!", "hi!");
        int int57 = classWriter43.newMethod("hi!", "hi!", "hi!", true);
        int int59 = classWriter43.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter43.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter64.visitEnd();
        classWriter64.visitSource("hi!", "");
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter64.visit((int) 'a', (int) '4', "", "hi!", "", strArray80);
        byte[] byteArray82 = classWriter64.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter64.visitAnnotation("", false);
        byte[] byteArray86 = classWriter64.toByteArray();
        org.mockito.asm.ClassReader classReader87 = new org.mockito.asm.ClassReader(byteArray86);
        org.mockito.asm.ClassWriter classWriter89 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray90 = new org.mockito.asm.Attribute[] {};
        classReader87.accept((org.mockito.asm.ClassVisitor) classWriter89, attributeArray90, (int) (short) 0);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter43, attributeArray90, 28);
        org.mockito.asm.Attribute attribute95 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter43.visitAttribute(attribute95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 52 + "'", int41 == 52);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 5 + "'", int57 == 5);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray90);
    }

    @Test
    public void test19044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19044");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        int int25 = classReader21.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        byte[] byteArray35 = classWriter33.toByteArray();
        org.mockito.asm.ClassReader classReader36 = new org.mockito.asm.ClassReader(byteArray35);
        java.lang.String[] strArray37 = classReader36.getInterfaces();
        int int38 = classReader36.getAccess();
        int int40 = classReader36.readUnsignedShort(4);
        int int42 = classReader36.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor43 = classWriter27.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!" };
        classWriter27.visit((int) (byte) 10, (-1), "", "", "", strArray51);
        int int54 = classWriter27.newClass("hi!");
        int int56 = classWriter27.newClass("hi!");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter27, 12);
        short short60 = classReader21.readShort(11);
        int int61 = classReader21.getAccess();
        java.lang.String str62 = classReader21.getSuperName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 5 + "'", int56 == 5);
        org.junit.Assert.assertTrue("'" + short60 + "' != '" + (short) 3 + "'", short60 == (short) 3);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 52 + "'", int61 == 52);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test19045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19045");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn((int) (short) -326, "");
        methodVisitor69.visitIntInsn(11, (int) (short) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("", "\001", "\001", label88, label89, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test19046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19046");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("", "hi!", "\007\000", (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        byte[] byteArray36 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        java.lang.String[] strArray38 = classReader37.getInterfaces();
        short short40 = classReader37.readShort((int) (byte) 1);
        java.lang.String str41 = classReader37.getSuperName();
        org.mockito.asm.FieldVisitor fieldVisitor42 = classWriter1.visitField(223337, "\007\000", "hi!", "", (java.lang.Object) str41);
        classWriter1.visitInnerClass("\007\000", "\007\000", "", (int) (short) 9);
        classWriter1.visitSource("hi!", "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -326 + "'", short40 == (short) -326);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(fieldVisitor42);
    }

    @Test
    public void test19047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19047");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        classWriter27.visitSource("", "");
        int int34 = classWriter27.newNameType("hi!", "");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter27, (int) (byte) 10);
        int int38 = classReader21.readInt((int) '#');
        java.lang.String[] strArray39 = classReader21.getInterfaces();
        java.lang.String str40 = classReader21.getSuperName();
        int int41 = classReader21.header;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1919222016 + "'", int38 == 1919222016);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 73 + "'", int41 == 73);
    }

    @Test
    public void test19048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19048");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitVarInsn((int) (short) 100, 256);
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitMaxs(0, 8);
        methodVisitor69.visitMethodInsn(1751720193, "", "\007\000", "hi!");
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        methodVisitor69.visitTryCatchBlock(label89, label90, label91, "\007\000");
        methodVisitor69.visitVarInsn(1751720193, 21353);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", (int) (short) 1792);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test19049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19049");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("", 1763770624);
        methodVisitor69.visitMethodInsn((int) (short) -326, "\007\000", "\007\000", "");
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label[] labelArray89 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(105, 18, label88, labelArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray89);
    }

    @Test
    public void test19050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19050");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        classWriter1.visitSource("hi!", "\007\000");
        int int17 = classWriter1.newClass("\001");
        classWriter1.visitInnerClass("\007\000", "\001", "hi!", 0);
        classWriter1.visitOuterClass("", "\001", "");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test19051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19051");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        java.lang.Object[] objArray80 = null;
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter83.visitEnd();
        byte[] byteArray85 = classWriter83.toByteArray();
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray85);
        int int88 = classReader86.readUnsignedShort((int) (short) 0);
        java.lang.String[] strArray89 = classReader86.getInterfaces();
        methodVisitor69.visitFrame((int) (byte) 1, 0, objArray80, (-1), (java.lang.Object[]) strArray89);
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Attribute attribute92 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 51966 + "'", int88 == 51966);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test19052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19052");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        methodVisitor69.visitMaxs(1919222016, 2);
        methodVisitor69.visitIincInsn(8, (int) (short) 10);
        methodVisitor69.visitInsn((-889275714));
        org.mockito.asm.Label label93 = null;
        int[] intArray94 = new int[] {};
        org.mockito.asm.Label[] labelArray95 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label93, intArray94, labelArray95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[]");
        org.junit.Assert.assertNotNull(labelArray95);
    }

    @Test
    public void test19053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19053");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitMultiANewArrayInsn("hi!", 12);
        methodVisitor69.visitVarInsn(1919222016, 0);
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(14, "\007\000");
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(590080, label97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test19054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19054");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitTypeInsn(48640, "");
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(114);
        methodVisitor69.visitVarInsn(0, 151060483);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test19055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19055");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", true);
        annotationVisitor17.visitEnum("hi!", "hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor17.visitArray("\007\000");
        annotationVisitor23.visitEnum("\007\000", "hi!", "\001");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor23);
    }

    @Test
    public void test19056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19056");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("\007\000", "", "hi!", 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor12 = classWriter1.visitAnnotation("hi!", true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor12);
    }

    @Test
    public void test19057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19057");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readByte((int) (byte) 10);
        int int8 = classReader4.header;
        byte[] byteArray9 = classReader4.b;
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        int int11 = classReader10.getAccess();
        int int12 = classReader10.header;
        char[] charArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = classReader10.readUTF8(65535, charArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test19058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19058");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitIincInsn(48640, (int) (byte) 100);
        methodVisitor69.visitIincInsn(1, 100);
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        methodVisitor69.visitMultiANewArrayInsn("", 28);
        methodVisitor69.visitFieldInsn((int) ' ', "", "\007\000", "\007\000");
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19059");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter28.visitAnnotation("hi!", true);
        classWriter28.visitEnd();
        byte[] byteArray46 = classWriter28.toByteArray();
        byte[] byteArray47 = classWriter28.toByteArray();
        int int49 = classWriter28.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str52 = classReader20.getClassName();
        long long54 = classReader20.readLong((int) (short) 3);
        java.lang.String[] strArray55 = classReader20.getInterfaces();
        java.lang.String[] strArray56 = classReader20.getInterfaces();
        int int58 = classReader20.readInt(80);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-4755801204875851775L) + "'", long54 == (-4755801204875851775L));
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100664320 + "'", int58 == 100664320);
    }

    @Test
    public void test19060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19060");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int9 = classWriter1.newMethod("", "", "", true);
        java.lang.Object obj14 = null;
        org.mockito.asm.FieldVisitor fieldVisitor15 = classWriter1.visitField((int) '#', "", "hi!", "", obj14);
        classWriter1.visitEnd();
        classWriter1.visitSource("\007\000", "hi!");
        classWriter1.visitOuterClass("", "\007\000", "\001");
        org.mockito.asm.FieldVisitor fieldVisitor29 = classWriter1.visitField(341012341, "\007\000", "\001", "\007\000", (java.lang.Object) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor32 = fieldVisitor29.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = annotationVisitor32.visitArray("\007\000");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(fieldVisitor15);
        org.junit.Assert.assertNotNull(fieldVisitor29);
        org.junit.Assert.assertNotNull(annotationVisitor32);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test19061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19061");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("\001", false);
        int int29 = classWriter1.newNameType("\001", "\001");
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        classWriter31.visitSource("hi!", "");
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter31.visit((int) 'a', (int) '4', "", "hi!", "", strArray47);
        byte[] byteArray49 = classWriter31.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter31.visitAnnotation("", false);
        byte[] byteArray53 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        java.lang.String[] strArray55 = classReader54.getInterfaces();
        byte[] byteArray56 = classReader54.b;
        int int57 = classReader54.header;
        java.lang.String[] strArray58 = classReader54.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int59 = classWriter1.newConst((java.lang.Object) strArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.String;@55a036");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 103 + "'", int57 == 103);
        org.junit.Assert.assertNotNull(strArray58);
    }

    @Test
    public void test19062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19062");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3, 2, (int) (short) -1);
        java.lang.String[] strArray9 = classReader8.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            short short11 = classReader8.readShort(3407875);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3407875");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray9);
    }

    @Test
    public void test19063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19063");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        byte[] byteArray44 = classWriter1.toByteArray();
        byte[] byteArray45 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute46 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 2, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 7, 0, 3, 0, 4, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 2, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 7, 0, 3, 0, 4, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test19064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19064");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn((int) (short) 256, "hi!", "", "");
        methodVisitor69.visitInsn(48640);
        methodVisitor69.visitMethodInsn(65210, "\007\000", "\001", "\001");
        java.lang.Class<?> wildcardClass89 = methodVisitor69.getClass();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test19065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19065");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        int int13 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("\001", "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test19066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19066");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "\007\000");
        int int32 = classWriter1.newUTF8("\007\000");
        int int35 = classWriter1.newNameType("\001", "\007\000");
        classWriter1.visitInnerClass("\001", "\007\000", "", 38);
        classWriter1.visitInnerClass("\001", "hi!", "\007\000", 26729);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
    }

    @Test
    public void test19067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19067");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        classWriter1.visitSource("hi!", "\007\000");
        int int17 = classWriter1.newClass("\001");
        classWriter1.visitInnerClass("\007\000", "\001", "hi!", 0);
        int int26 = classWriter1.newField("", "\001", "hi!");
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter57.visitEnd();
        classWriter57.visitSource("", "");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter57, 100);
        java.lang.String[] strArray64 = classReader51.getInterfaces();
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter(classReader51, 13);
        classWriter66.visitInnerClass("hi!", "hi!", "\007\000", 17);
        org.mockito.asm.FieldVisitor fieldVisitor72 = classWriter1.visitField(676719, "\001", "\007\000", "\007\000", (java.lang.Object) "hi!");
        int int75 = classWriter1.newNameType("hi!", "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 11 + "'", int26 == 11);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(fieldVisitor72);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 13 + "'", int75 == 13);
    }

    @Test
    public void test19068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19068");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        int int8 = classWriter1.newMethod("hi!", "", "hi!", true);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        byte[] byteArray21 = classWriter19.toByteArray();
        byte[] byteArray22 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray22);
        int int25 = classReader23.readInt((int) (short) 1);
        java.lang.String[] strArray26 = classReader23.getInterfaces();
        classWriter1.visit(186, 1919222016, "", "", "hi!", strArray26);
        classWriter1.visitSource("", "\007\000");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-21316096) + "'", int25 == (-21316096));
        org.junit.Assert.assertNotNull(strArray26);
    }

    @Test
    public void test19069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19069");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readByte((int) (byte) 10);
        int int8 = classReader4.getAccess();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        long long11 = classReader4.readLong(0);
        int int12 = classReader4.header;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = classReader4.readLong((-889275714));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3819410108757049344L) + "'", long11 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test19070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19070");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int29 = classReader20.header;
        java.lang.String[] strArray30 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader20, 14);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        classWriter34.visitSource("hi!", "");
        classWriter34.visitEnd();
        classWriter34.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter34.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter45.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = annotationVisitor48.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = annotationVisitor48.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = annotationVisitor52.visitAnnotation("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = annotationVisitor52.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = annotationVisitor57.visitAnnotation("hi!", "hi!");
        int int61 = classWriter34.newConst((java.lang.Object) "hi!");
        int int66 = classWriter34.newMethod("", "", "", true);
        classWriter34.visitSource("\007\000", "hi!");
        classWriter34.visitSource("\007\000", "");
        int int73 = classWriter32.newConst((java.lang.Object) "");
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter32.visitAnnotation("\001", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 73 + "'", int29 == 73);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 6 + "'", int66 == 6);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test19071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19071");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) 10);
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19072");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitSource("", "");
        int int26 = classWriter1.newNameType("", "hi!");
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter56.visitEnd();
        classWriter56.visitSource("hi!", "");
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter56.visit((int) 'a', (int) '4', "", "hi!", "", strArray72);
        classWriter32.visit((int) (byte) 1, 100, "", "hi!", "", strArray72);
        classWriter32.visitInnerClass("hi!", "hi!", "", (int) (short) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = classWriter32.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = annotationVisitor82.visitArray("\007\000");
        annotationVisitor82.visitEnum("\007\000", "\007\000", "\007\000");
        org.mockito.asm.FieldVisitor fieldVisitor89 = classWriter1.visitField(0, "", "hi!", "hi!", (java.lang.Object) "\007\000");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(fieldVisitor89);
    }

    @Test
    public void test19073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19073");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str37 = classReader20.getClassName();
        byte[] byteArray38 = classReader20.b;
        java.lang.String[] strArray39 = classReader20.getInterfaces();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray39);
    }

    @Test
    public void test19074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19074");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn((-889275714), "hi!");
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitLdcInsn((java.lang.Object) 1);
        methodVisitor69.visitMethodInsn((int) '4', "hi!", "\001", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19075");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        methodVisitor69.visitTryCatchBlock(label78, label79, label80, "");
        methodVisitor69.visitMethodInsn(0, "", "\007\000", "");
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(24948, "\001", "", "");
        methodVisitor69.visitIntInsn(0, (int) (short) 29813);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19076");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getSuperName();
        int int29 = classReader24.header;
        byte[] byteArray30 = classReader24.b;
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader31, 3072);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        classWriter35.visitSource("hi!", "");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter35.visit((int) 'a', (int) '4', "", "hi!", "", strArray51);
        byte[] byteArray53 = classWriter35.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter35.visitAnnotation("", false);
        byte[] byteArray57 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(classReader58, 2);
        int int62 = classWriter60.newClass("");
        classWriter60.visitOuterClass("\007\000", "hi!", "\007\000");
        int int68 = classWriter60.newUTF8("");
        int int72 = classWriter60.newField("hi!", "\007\000", "\007\000");
        classReader31.accept((org.mockito.asm.ClassVisitor) classWriter60, (int) (short) -16896);
        int int76 = classReader31.readInt((int) (short) 9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 103 + "'", int29 == 103);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 13 + "'", int72 == 13);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 151060483 + "'", int76 == 151060483);
    }

    @Test
    public void test19077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19077");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        java.lang.String str30 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        byte[] byteArray34 = classWriter32.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter32.visitAnnotation("", true);
        classWriter32.visitOuterClass("", "", "hi!");
        int int46 = classWriter32.newMethod("", "hi!", "hi!", true);
        int int49 = classWriter32.newNameType("hi!", "\007\000");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter32, 47806);
        short short53 = classReader24.readShort(5);
        java.lang.String str54 = classReader24.getSuperName();
        java.lang.String str55 = classReader24.getSuperName();
        org.mockito.asm.ClassWriter classWriter57 = new org.mockito.asm.ClassWriter(classReader24, (int) (short) -16896);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter63.visitEnd();
        classWriter63.visitSource("hi!", "");
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter63.visit((int) 'a', (int) '4', "", "hi!", "", strArray79);
        byte[] byteArray81 = classWriter63.toByteArray();
        org.mockito.asm.ClassReader classReader82 = new org.mockito.asm.ClassReader(byteArray81);
        org.mockito.asm.ClassReader classReader83 = new org.mockito.asm.ClassReader(byteArray81);
        org.mockito.asm.ClassReader classReader84 = new org.mockito.asm.ClassReader(byteArray81);
        org.mockito.asm.ClassReader classReader85 = new org.mockito.asm.ClassReader(byteArray81);
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor87 = classWriter57.visitField((int) (short) 519, "", "\007\000", "", (java.lang.Object) byteArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@537b81a4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + short53 + "' != '" + (short) 0 + "'", short53 == (short) 0);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test19078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19078");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(51966, "hi!");
        methodVisitor69.visitVarInsn(6, 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn(196612, "hi!", "\001", "\007\000");
        methodVisitor69.visitIntInsn(16777223, 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test19079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19079");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(1, "", "hi!", "");
        methodVisitor69.visitFieldInsn(16778088, "hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitTypeInsn(8, "");
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label label93 = null;
        org.mockito.asm.Label label94 = null;
        methodVisitor69.visitTryCatchBlock(label92, label93, label94, "\007\000");
        org.mockito.asm.Attribute attribute97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test19080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19080");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitTypeInsn(186, "");
        methodVisitor69.visitFieldInsn(28, "hi!", "\007\000", "hi!");
        methodVisitor69.visitVarInsn(38, (int) (short) 2049);
        methodVisitor69.visitIntInsn(51, (int) (short) 13312);
        methodVisitor69.visitVarInsn((int) (short) 4097, (int) (short) 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test19081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19081");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotation("", true);
        annotationVisitor78.visitEnum("\001", "\007\000", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test19082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19082");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("", 1763770624);
        methodVisitor69.visitMethodInsn((int) (short) -326, "\007\000", "\007\000", "");
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 11);
        org.mockito.asm.Attribute attribute90 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19083");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(3, "\007\000", "", "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitIincInsn(341012341, 0);
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        org.mockito.asm.Label label96 = null;
        methodVisitor69.visitTryCatchBlock(label94, label95, label96, "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19084");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn((-889275714));
        methodVisitor69.visitTypeInsn(1919222016, "");
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(18, "\007\000");
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        methodVisitor69.visitTryCatchBlock(label88, label89, label90, "\001");
        org.mockito.asm.Label label96 = null;
        org.mockito.asm.Label label97 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\001", "\001", "\007\000", label96, label97, 3072);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test19085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19085");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        long long9 = classReader4.readLong(0);
        short short11 = classReader4.readShort((int) (short) 1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3819410108757049344L) + "'", long9 == (-3819410108757049344L));
        org.junit.Assert.assertTrue("'" + short11 + "' != '" + (short) -326 + "'", short11 == (short) -326);
    }

    @Test
    public void test19086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19086");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int8 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        byte[] byteArray17 = classWriter15.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter15.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        byte[] byteArray29 = classWriter27.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        java.lang.String[] strArray31 = classReader30.getInterfaces();
        int int32 = classReader30.getAccess();
        int int34 = classReader30.readUnsignedShort(4);
        int int36 = classReader30.readByte(5);
        java.lang.String[] strArray37 = classReader30.getInterfaces();
        classWriter15.visit(2, (int) (short) -1, "", "", "hi!", strArray37);
        classWriter1.visit(5, (int) 'a', "hi!", "", "\007\000", strArray37);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("\001", "\001", "hi!", (int) (byte) 0);
        classWriter1.visitEnd();
        int int53 = classWriter1.newUTF8("");
        int int56 = classWriter1.newNameType("\007\000", "hi!");
        classWriter1.visitInnerClass("", "", "\007\000", 327680);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
    }

    @Test
    public void test19087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19087");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        long long9 = classReader4.readLong(0);
        byte[] byteArray10 = classReader4.b;
        int int11 = classReader4.header;
        byte[] byteArray12 = classReader4.b;
        int int13 = classReader4.header;
        byte[] byteArray14 = classReader4.b;
        int int15 = classReader4.getAccess();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3819410108757049344L) + "'", long9 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test19088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19088");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        int int21 = classWriter1.newNameType("", "");
        int int25 = classWriter1.newField("\007\000", "\001", "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("\001", true);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor28);
    }

    @Test
    public void test19089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19089");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classReader21.b;
        short short28 = classReader21.readShort(10);
        long long30 = classReader21.readLong((int) ' ');
        java.lang.String[] strArray31 = classReader21.getInterfaces();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 29813);
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter33, 26729);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 256 + "'", short28 == (short) 256);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 7022366853158731786L + "'", long30 == 7022366853158731786L);
        org.junit.Assert.assertNotNull(strArray31);
    }

    @Test
    public void test19090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19090");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        int int5 = classWriter1.newField("", "", "hi!");
        int int7 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("", true);
        classWriter1.visitEnd();
        int int14 = classWriter1.newNameType("\007\000", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "hi!", (int) (short) 1280);
        classWriter1.visitSource("hi!", "\001");
        int int24 = classWriter1.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("", "");
        int int37 = classWriter30.newNameType("hi!", "");
        int int41 = classWriter30.newField("hi!", "hi!", "hi!");
        int int44 = classWriter30.newNameType("\007\000", "hi!");
        classWriter30.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter30.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter30.visitAnnotation("hi!", false);
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter1.visitField((int) (short) 13312, "\001", "\007\000", "", (java.lang.Object) false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 3 + "'", int37 == 3);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(fieldVisitor54);
    }

    @Test
    public void test19091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19091");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitSource("", "");
        int int26 = classWriter1.newNameType("hi!", "");
        classWriter1.visitOuterClass("\007\000", "", "");
        int int33 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitOuterClass("hi!", "", "hi!");
        classWriter1.visitInnerClass("", "", "\007\000", (int) (short) 0);
        byte[] byteArray43 = classWriter1.toByteArray();
        int int45 = classWriter1.newClass("");
        classWriter1.visitSource("\001", "\007\000");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
    }

    @Test
    public void test19092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19092");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        int int35 = classReader20.readInt(13);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        classWriter37.visitEnd();
        byte[] byteArray43 = classWriter37.toByteArray();
        int int47 = classWriter37.newField("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter37.visitAnnotation("", true);
        int int53 = classWriter37.newNameType("", "hi!");
        byte[] byteArray54 = classWriter37.toByteArray();
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter37, 13);
        java.lang.String str57 = classReader20.getClassName();
        int int58 = classReader20.header;
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter(classReader20, 7);
        byte[] byteArray61 = classReader20.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray61, 28, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1751720193 + "'", int35 == 1751720193);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 7 + "'", int47 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 0, 7, 0, 4, 12, 0, 4, 0, 4, 9, 0, 5, 0, 6, 12, 0, 4, 0, 1, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 4, 0, 0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 73 + "'", int58 == 73);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test19093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19093");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitSource("", "");
        int int26 = classWriter1.newNameType("hi!", "");
        classWriter1.visitOuterClass("\007\000", "", "");
        int int33 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitOuterClass("hi!", "", "hi!");
        classWriter1.visitInnerClass("", "", "\007\000", (int) (short) 0);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("\001", "\007\000", "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
    }

    @Test
    public void test19094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19094");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = fieldVisitor16.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = fieldVisitor16.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor25 = annotationVisitor22.visitAnnotation("hi!", "");
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        byte[] byteArray46 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(classReader48, 256);
        java.lang.String str51 = classReader48.getClassName();
        java.lang.String str52 = classReader48.getSuperName();
        java.lang.String str53 = classReader48.getSuperName();
        java.lang.String str54 = classReader48.getSuperName();
        annotationVisitor22.visit("\007\000", (java.lang.Object) str54);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor25);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test19095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19095");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        java.lang.String[] strArray24 = classReader21.getInterfaces();
        java.lang.String[] strArray25 = classReader21.getInterfaces();
        int int26 = classReader21.getAccess();
        long long28 = classReader21.readLong((int) ' ');
        java.lang.String[] strArray29 = classReader21.getInterfaces();
        int int31 = classReader21.readInt((int) (short) 3);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7022366853158731786L + "'", long28 == 7022366853158731786L);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1107296256) + "'", int31 == (-1107296256));
    }

    @Test
    public void test19096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19096");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        classWriter10.visitSource("hi!", "");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter10.visit((int) 'a', (int) '4', "", "hi!", "", strArray26);
        byte[] byteArray28 = classWriter10.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter10.visitAnnotation("", false);
        byte[] byteArray32 = classWriter10.toByteArray();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        java.lang.String[] strArray42 = classReader41.getInterfaces();
        short short44 = classReader41.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter10.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = fieldVisitor45.visitAnnotation("", true);
        org.mockito.asm.FieldVisitor fieldVisitor49 = classWriter1.visitField(4, "hi!", "hi!", "hi!", (java.lang.Object) true);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "", 14);
        classWriter1.visitSource("", "\007\000");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter70.visitEnd();
        byte[] byteArray72 = classWriter70.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        int int75 = classReader73.readUnsignedShort((int) (short) 0);
        java.lang.String str76 = classReader73.getSuperName();
        short short78 = classReader73.readShort(5);
        java.lang.String[] strArray79 = classReader73.getInterfaces();
        int int80 = classReader73.header;
        java.lang.String[] strArray81 = classReader73.getInterfaces();
        classWriter1.visit(65535, 1751720193, "", "\007\000", "\001", strArray81);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -326 + "'", short44 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(fieldVisitor49);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 51966 + "'", int75 == 51966);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + short78 + "' != '" + (short) 0 + "'", short78 == (short) 0);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test19097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19097");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort(13);
        int int30 = classReader26.getItem(3);
        int int31 = classReader26.header;
        java.lang.String[] strArray32 = classReader26.getInterfaces();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        classWriter34.visitSource("hi!", "");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter34.visit((int) 'a', (int) '4', "", "hi!", "", strArray50);
        byte[] byteArray52 = classWriter34.toByteArray();
        classWriter34.visitInnerClass("hi!", "hi!", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = classWriter34.visitAnnotation("hi!", false);
        classWriter34.visitOuterClass("", "", "");
        classWriter34.visitEnd();
        org.mockito.asm.Attribute[] attributeArray66 = null;
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter34, attributeArray66, 28526);
        int int70 = classWriter34.newClass("\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 1792 + "'", short28 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 17 + "'", int30 == 17);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 73 + "'", int31 == 73);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor60);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
    }

    @Test
    public void test19098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19098");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classReader20.b;
        int int38 = classReader20.header;
        byte[] byteArray39 = classReader20.b;
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        java.lang.String str41 = classReader40.getSuperName();
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter(classReader40, 3407875);
        org.mockito.asm.Attribute attribute44 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter43.visitAttribute(attribute44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 73 + "'", int38 == 73);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test19099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19099");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        int int24 = classReader21.header;
        int int26 = classReader21.readInt(11);
        java.lang.String str27 = classReader21.getClassName();
        java.lang.String str28 = classReader21.getClassName();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        classWriter31.visitSource("hi!", "");
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter31.visit((int) 'a', (int) '4', "", "hi!", "", strArray47);
        byte[] byteArray49 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray49);
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray49);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(classReader51, 256);
        int int55 = classReader51.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter58.visitEnd();
        classWriter58.visitSource("hi!", "");
        java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter58.visit((int) 'a', (int) '4', "", "hi!", "", strArray74);
        byte[] byteArray76 = classWriter58.toByteArray();
        org.mockito.asm.ClassReader classReader77 = new org.mockito.asm.ClassReader(byteArray76);
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader77.accept((org.mockito.asm.ClassVisitor) classWriter79, 8);
        char[] charArray88 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj89 = classReader77.readConst((int) (short) 1, charArray88);
        java.lang.Object obj90 = classReader51.readConst(4, charArray88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj91 = classReader21.readConst(29813, charArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 29813");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 73 + "'", int24 == 73);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 223337 + "'", int26 == 223337);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray88);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray88), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray88), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray88), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj89 + "' != '" + "\007\000" + "'", obj89, "\007\000");
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "Lhi!;");
    }

    @Test
    public void test19100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19100");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(14);
        methodVisitor69.visitInsn((int) (byte) -1);
        methodVisitor69.visitTypeInsn(0, "hi!");
        methodVisitor69.visitFieldInsn(19, "\007\000", "hi!", "\007\000");
        methodVisitor69.visitFieldInsn(28263, "", "", "\007\000");
        methodVisitor69.visitMaxs((int) (short) 24832, 65536);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test19101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19101");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int9 = classWriter1.newClass("hi!");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray16 = classWriter15.toByteArray();
        classWriter15.visitInnerClass("hi!", "\007\000", "\007\000", (int) (byte) 0);
        classWriter15.visitSource("", "\007\000");
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        byte[] byteArray33 = classWriter31.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor36 = classWriter31.visitAnnotation("", true);
        classWriter31.visitOuterClass("", "", "hi!");
        int int45 = classWriter31.newMethod("", "hi!", "hi!", true);
        int int49 = classWriter31.newField("hi!", "", "hi!");
        classWriter31.visitInnerClass("hi!", "hi!", "", 7);
        classWriter31.visitOuterClass("hi!", "hi!", "");
        classWriter31.visitOuterClass("\007\000", "hi!", "\007\000");
        classWriter31.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter31.visitAnnotation("\007\000", false);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter73.visitEnd();
        byte[] byteArray75 = classWriter73.toByteArray();
        org.mockito.asm.ClassReader classReader76 = new org.mockito.asm.ClassReader(byteArray75);
        int int78 = classReader76.readUnsignedShort((int) (short) 0);
        java.lang.String str79 = classReader76.getSuperName();
        short short81 = classReader76.readShort(5);
        java.lang.String[] strArray82 = classReader76.getInterfaces();
        classWriter31.visit((-1107296256), (int) (short) 2049, "\007\000", "hi!", "", strArray82);
        classWriter15.visit(83886080, 28533, "", "\007\000", "hi!", strArray82);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor85 = classWriter1.visitMethod((int) (short) 256, "\001", "hi!", "hi!", strArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor36);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 51966 + "'", int78 == 51966);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + short81 + "' != '" + (short) 0 + "'", short81 == (short) 0);
        org.junit.Assert.assertNotNull(strArray82);
    }

    @Test
    public void test19102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19102");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        methodVisitor69.visitTryCatchBlock(label78, label79, label80, "");
        methodVisitor69.visitMethodInsn(0, "", "\007\000", "");
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(24948, "\001", "", "");
        methodVisitor69.visitIincInsn(327680, 51);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19103");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        byte[] byteArray8 = classWriter1.toByteArray();
        classWriter1.visitSource("hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", true);
        int int16 = classWriter1.newClass("hi!");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test19104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19104");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        int int59 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter66.visitEnd();
        byte[] byteArray68 = classWriter66.toByteArray();
        org.mockito.asm.ClassReader classReader69 = new org.mockito.asm.ClassReader(byteArray68);
        java.lang.String[] strArray70 = classReader69.getInterfaces();
        java.lang.String str71 = classReader69.getSuperName();
        int int72 = classReader69.header;
        java.lang.String[] strArray73 = classReader69.getInterfaces();
        classWriter1.visit((int) (byte) 100, 7, "hi!", "hi!", "hi!", strArray73);
        classWriter1.visitEnd();
        int int78 = classWriter1.newNameType("\001", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = classWriter1.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = classWriter1.visitAnnotation("\007\000", true);
        int int86 = classWriter1.newUTF8("hi!");
        classWriter1.visitOuterClass("\001", "\001", "hi!");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 7 + "'", int78 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
    }

    @Test
    public void test19105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19105");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitIincInsn(256, (int) '4');
        methodVisitor69.visitMaxs(7, 16777223);
        methodVisitor69.visitTypeInsn(3, "");
        methodVisitor69.visitMaxs((int) (short) 97, 186);
        methodVisitor69.visitEnd();
        methodVisitor69.visitIincInsn((int) (short) 26729, (-889275714));
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19106");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn(48640, "hi!");
        methodVisitor69.visitTypeInsn((int) (short) 256, "\007\000");
        methodVisitor69.visitMultiANewArrayInsn("\007\000", (int) (short) 4097);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19107");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getClassName();
        java.lang.String[] strArray29 = classReader24.getInterfaces();
        java.lang.String str30 = classReader24.getClassName();
        byte[] byteArray31 = classReader24.b;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test19108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19108");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int6 = classReader4.getAccess();
        byte[] byteArray7 = classReader4.b;
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray7, 10, 10);
        byte[] byteArray11 = classReader10.b;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = classReader10.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test19109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19109");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        classWriter1.visitOuterClass("", "hi!", "\007\000");
        classWriter1.visitOuterClass("\007\000", "\001", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitSource("\001", "\007\000");
        org.mockito.asm.Attribute attribute58 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(annotationVisitor54);
    }

    @Test
    public void test19110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19110");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        classWriter22.visitOuterClass("", "hi!", "hi!");
        byte[] byteArray29 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray29, (int) (short) 9, (int) (byte) 0);
        int int33 = classReader32.getAccess();
        int int34 = classReader32.header;
        byte[] byteArray35 = classReader32.b;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 3, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 2, 0, 5]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3072 + "'", int33 == 3072);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 25 + "'", int34 == 25);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 3, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 2, 0, 5]");
    }

    @Test
    public void test19111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19111");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        classWriter1.visitSource("hi!", "");
        byte[] byteArray5 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor9 = classWriter1.visitAnnotation("\001", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter16.visitEnd();
        byte[] byteArray18 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray18);
        int int22 = classReader20.readByte(0);
        byte[] byteArray23 = classReader20.b;
        java.lang.String[] strArray24 = classReader20.getInterfaces();
        classWriter1.visit((int) (short) 2, 1281, "", "", "", strArray24);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        classWriter31.visitSource("hi!", "");
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter31.visit((int) 'a', (int) '4', "", "hi!", "", strArray47);
        byte[] byteArray49 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray49);
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray49);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter(classReader51, 256);
        classWriter53.visitInnerClass("\001", "\007\000", "", 196612);
        classWriter53.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor60 = classWriter1.visitField(65542, "", "hi!", "", (java.lang.Object) classWriter53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@5cb35763");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor9);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 202 + "'", int22 == 202);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test19112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19112");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter(classReader7, 28);
        java.lang.String str10 = classReader7.getSuperName();
        byte[] byteArray11 = classReader7.b;
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, 1953854053);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = classReader14.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
    }

    @Test
    public void test19113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19113");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int25 = classReader24.getAccess();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader24, (-1));
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 51966);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        classWriter35.visitSource("hi!", "");
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter35.visit((int) 'a', (int) '4', "", "hi!", "", strArray51);
        byte[] byteArray53 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader54 = new org.mockito.asm.ClassReader(byteArray53);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader54.accept((org.mockito.asm.ClassVisitor) classWriter56, 8);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter60.visitEnd();
        classWriter60.visitSource("", "");
        classReader54.accept((org.mockito.asm.ClassVisitor) classWriter60, 100);
        java.lang.String[] strArray67 = classReader54.getInterfaces();
        java.lang.String str68 = classReader54.getClassName();
        java.lang.String[] strArray69 = classReader54.getInterfaces();
        int int71 = classReader54.readInt(20);
        short short73 = classReader54.readShort(0);
        org.mockito.asm.FieldVisitor fieldVisitor74 = classWriter29.visitField(87, "", "", "\001", (java.lang.Object) short73);
        fieldVisitor74.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 132864 + "'", int71 == 132864);
        org.junit.Assert.assertTrue("'" + short73 + "' != '" + (short) -13570 + "'", short73 == (short) -13570);
        org.junit.Assert.assertNotNull(fieldVisitor74);
    }

    @Test
    public void test19114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19114");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("", 1763770624);
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label[] labelArray85 = new org.mockito.asm.Label[] { label84 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(78, 28533, label83, labelArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray85);
    }

    @Test
    public void test19115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19115");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        java.lang.Class<?> wildcardClass36 = classReader35.getClass();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test19116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19116");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter23.visitEnd();
        classWriter23.visitSource("hi!", "");
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter23.visit((int) 'a', (int) '4', "", "hi!", "", strArray39);
        byte[] byteArray41 = classWriter23.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter23.visitAnnotation("", false);
        byte[] byteArray45 = classWriter23.toByteArray();
        classWriter23.visitInnerClass("hi!", "", "", 8);
        int int55 = classWriter23.newMethod("hi!", "", "", true);
        int int57 = classWriter23.newConst((java.lang.Object) 2);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter64.visitEnd();
        classWriter64.visitSource("hi!", "");
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter64.visit((int) 'a', (int) '4', "", "hi!", "", strArray80);
        byte[] byteArray82 = classWriter64.toByteArray();
        org.mockito.asm.ClassReader classReader83 = new org.mockito.asm.ClassReader(byteArray82);
        org.mockito.asm.ClassWriter classWriter85 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader83.accept((org.mockito.asm.ClassVisitor) classWriter85, 8);
        int int89 = classReader83.readUnsignedShort((int) (short) 10);
        int int91 = classReader83.readInt(2);
        int int92 = classReader83.header;
        java.lang.String[] strArray93 = classReader83.getInterfaces();
        classWriter23.visit((int) 'a', 6, "hi!", "hi!", "\007\000", strArray93);
        org.mockito.asm.MethodVisitor methodVisitor95 = classWriter1.visitMethod(14, "", "\007\000", "", strArray93);
        methodVisitor95.visitTypeInsn((int) (byte) 1, "\007\000");
        methodVisitor95.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 11 + "'", int57 == 11);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 256 + "'", int89 == 256);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1161953280) + "'", int91 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 73 + "'", int92 == 73);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(methodVisitor95);
    }

    @Test
    public void test19117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19117");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitTypeInsn(13, "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn((int) (short) 256, 83886080);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(4, 28526);
        methodVisitor69.visitTypeInsn((int) (short) 5203, "");
        methodVisitor69.visitTypeInsn(1635022194, "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn(3072);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test19118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19118");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        byte[] byteArray27 = classReader20.b;
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray27);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader28, 0);
        java.lang.String str31 = classReader28.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test19119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19119");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int8 = classWriter1.newNameType("hi!", "");
        classWriter1.visitInnerClass("\007\000", "", "hi!", 202);
        byte[] byteArray14 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray14);
        java.lang.String[] strArray16 = classReader15.getInterfaces();
        java.lang.String[] strArray17 = classReader15.getInterfaces();
        int int19 = classReader15.readByte(119);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter(classReader15, 57174305);
        int int22 = classReader15.header;
        java.lang.String str23 = classReader15.getSuperName();
        int int25 = classReader15.readByte(13);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 10, 0, 1, 0, 5, 0, 6, 0, 2, 0, -54]");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 87 + "'", int22 == 87);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test19120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19120");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(51966, 20);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor69.visitAnnotation("\001", false);
        methodVisitor69.visitTypeInsn(119, "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test19121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19121");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 256);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        byte[] byteArray12 = classWriter10.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor15 = classWriter10.visitAnnotation("", true);
        classWriter10.visitOuterClass("", "", "hi!");
        int int24 = classWriter10.newMethod("", "hi!", "hi!", true);
        int int26 = classWriter10.newUTF8("hi!");
        classWriter10.visitEnd();
        byte[] byteArray28 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray28);
        int int31 = classReader29.readUnsignedShort(5);
        java.lang.String[] strArray32 = classReader29.getInterfaces();
        java.lang.String[] strArray33 = classReader29.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter1.visitMethod((int) 'a', "hi!", "\001", "\007\000", strArray33);
        java.lang.Class<?> wildcardClass35 = methodVisitor34.getClass();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor15);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test19122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19122");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitTypeInsn(13, "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn((int) (short) 256, 83886080);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(26729, "hi!", "", "");
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test19123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19123");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "", 8);
        int int33 = classWriter1.newMethod("hi!", "", "", true);
        byte[] byteArray34 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray34, 0, (int) (short) 24832);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader37, 131073);
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter45.visitEnd();
        byte[] byteArray47 = classWriter45.toByteArray();
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray47);
        java.lang.String[] strArray49 = classReader48.getInterfaces();
        int int51 = classReader48.readInt((int) (byte) 0);
        java.lang.String str52 = classReader48.getSuperName();
        java.lang.String[] strArray53 = classReader48.getInterfaces();
        java.lang.String str54 = classReader48.getSuperName();
        int int56 = classReader48.readUnsignedShort(20);
        byte[] byteArray57 = classReader48.b;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor58 = classWriter39.visitField(33554688, "", "\007\000", "", (java.lang.Object) byteArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@4fe67b5b");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 12, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 12, 0, 2, 0, 2, 11, 0, 4, 0, 9, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 11, 0, 0, 0, 10, 0, 1, 0, 4, 0, 3, 0, 2, 0, 8, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-889275714) + "'", int51 == (-889275714));
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test19124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19124");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor79 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitMaxs((int) (byte) 1, (-1161953280));
        methodVisitor69.visitMaxs((int) (byte) 100, 28);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("hi!", false);
        methodVisitor69.visitVarInsn((-889275714), 256);
        methodVisitor69.visitIntInsn(73, 100);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test19125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19125");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String str25 = classReader24.getSuperName();
        int int27 = classReader24.readInt(10);
        int int28 = classReader24.header;
        int int30 = classReader24.getItem((int) (short) 4);
        java.lang.String[] strArray31 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter33.visitEnd();
        classWriter33.visitSource("", "");
        int int42 = classWriter33.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter33.visitAnnotation("", false);
        classWriter33.visitSource("hi!", "hi!");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter33, 131073);
        int int55 = classWriter33.newMethod("", "hi!", "hi!", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16778088 + "'", int27 == 16778088);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 103 + "'", int28 == 103);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 23 + "'", int30 == 23);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 5 + "'", int55 == 5);
    }

    @Test
    public void test19126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19126");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        int int24 = classReader21.header;
        byte[] byteArray25 = classReader21.b;
        int int26 = classReader21.header;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 73 + "'", int24 == 73);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 73 + "'", int26 == 73);
    }

    @Test
    public void test19127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19127");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "", 8);
        int int33 = classWriter1.newMethod("hi!", "", "", true);
        byte[] byteArray34 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        java.lang.String str36 = classReader35.getClassName();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader35, 1751720193);
        org.mockito.asm.Attribute attribute39 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter38.visitAttribute(attribute39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 12, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 12, 0, 2, 0, 2, 11, 0, 4, 0, 9, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 11, 0, 0, 0, 10, 0, 1, 0, 4, 0, 3, 0, 2, 0, 8, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test19128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19128");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitFieldInsn((int) (short) -326, "hi!", "hi!", "hi!");
        methodVisitor69.visitInsn(52);
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "\007\000");
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label[] labelArray92 = new org.mockito.asm.Label[] { label91 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(17, (int) (byte) 1, label90, labelArray92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray92);
    }

    @Test
    public void test19129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19129");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        classWriter19.visitSource("hi!", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter19.visit((int) 'a', (int) '4', "", "hi!", "", strArray35);
        byte[] byteArray37 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader38.accept((org.mockito.asm.ClassVisitor) classWriter40, 8);
        byte[] byteArray43 = classWriter40.toByteArray();
        int int45 = classWriter40.newClass("hi!");
        int int46 = classWriter1.newConst((java.lang.Object) int45);
        int int51 = classWriter1.newMethod("", "\007\000", "", true);
        byte[] byteArray52 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter1.visitAnnotation("\007\000", true);
        int int57 = classWriter1.newClass("hi!");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 15, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 2, 12, 0, 1, 0, 1, 12, 0, 2, 0, 2, 3, 0, 0, 0, 4, 7, 0, 1, 1, 0, 3, 7, -64, -128, 12, 0, 8, 0, 1, 11, 0, 7, 0, 9, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 11, 0, 0, 0, 2, 0, 1, 0, 12, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 3, 0, 4, 0, 14, 0, 0, 0, 10, 0, 2, 0, 1, 0, 0, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
    }

    @Test
    public void test19130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19130");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 254);
        methodVisitor69.visitInsn(51966);
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "\007\000");
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 202);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19131");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        int int35 = classReader20.readInt(13);
        int int37 = classReader20.readByte(10);
        byte[] byteArray38 = classReader20.b;
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        java.lang.String[] strArray40 = classReader39.getInterfaces();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1751720193 + "'", int35 == 1751720193);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test19132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19132");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitInnerClass("", "hi!", "\007\000", (int) (byte) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        byte[] byteArray36 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        java.lang.String[] strArray38 = classReader37.getInterfaces();
        short short40 = classReader37.readShort((int) (byte) 1);
        java.lang.String str41 = classReader37.getSuperName();
        org.mockito.asm.FieldVisitor fieldVisitor42 = classWriter1.visitField(223337, "\007\000", "hi!", "", (java.lang.Object) str41);
        classWriter1.visitInnerClass("\007\000", "\007\000", "", (int) (short) 9);
        int int52 = classWriter1.newMethod("hi!", "hi!", "", true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + short40 + "' != '" + (short) -326 + "'", short40 == (short) -326);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(fieldVisitor42);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
    }

    @Test
    public void test19133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19133");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getSuperName();
        int int29 = classReader24.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = classReader24.readByte(2049);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
    }

    @Test
    public void test19134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19134");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        java.lang.String[] strArray10 = classReader4.getInterfaces();
        int int12 = classReader4.readByte((int) (short) 0);
        int int13 = classReader4.getAccess();
        int int15 = classReader4.getItem(0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 202 + "'", int12 == 202);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test19135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19135");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader4.readUnsignedShort((int) (short) 0);
        java.lang.String str7 = classReader4.getSuperName();
        short short9 = classReader4.readShort(5);
        java.lang.String[] strArray10 = classReader4.getInterfaces();
        java.lang.String[] strArray11 = classReader4.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = classReader4.readByte((int) (short) 2049);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 51966 + "'", int6 == 51966);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) 0 + "'", short9 == (short) 0);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
    }

    @Test
    public void test19136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19136");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitFieldInsn((int) (byte) 1, "hi!", "hi!", "\001");
        methodVisitor69.visitCode();
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label[] labelArray86 = new org.mockito.asm.Label[] { label85 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(1635022194, 1919222016, label84, labelArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(labelArray86);
    }

    @Test
    public void test19137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19137");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader24, 5);
        classWriter27.visitOuterClass("\007\000", "", "hi!");
        classWriter27.visitInnerClass("hi!", "\007\000", "\007\000", 1);
        classWriter27.visitEnd();
        int int42 = classWriter27.newMethod("", "\001", "\001", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 14 + "'", int42 == 14);
    }

    @Test
    public void test19138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19138");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitIntInsn(0, 0);
        methodVisitor69.visitMaxs(4, (int) (short) 0);
        methodVisitor69.visitIincInsn((-21316096), (int) (short) 1);
        org.mockito.asm.Label label83 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19139");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        int int22 = classWriter1.newUTF8("\007\000");
        classWriter1.visitOuterClass("\001", "\001", "\007\000");
        classWriter1.visitSource("\007\000", "\007\000");
        classWriter1.visitInnerClass("\007\000", "\001", "hi!", 872);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
    }

    @Test
    public void test19140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19140");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) 10);
        methodVisitor69.visitMaxs(47806, 119);
        methodVisitor69.visitVarInsn(1281, (-889275714));
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitParameterAnnotation(12, "", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19141");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str37 = classReader20.getClassName();
        int int39 = classReader20.readInt(28);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter41.visitAnnotation("", true);
        int int47 = classWriter41.newNameType("hi!", "hi!");
        int int51 = classWriter41.newField("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter41.visitAnnotation("hi!", true);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter41, (int) (short) 3);
        java.lang.String[] strArray57 = classReader20.getInterfaces();
        byte[] byteArray58 = classReader20.b;
        java.lang.String[] strArray59 = classReader20.getInterfaces();
        java.lang.String[] strArray60 = classReader20.getInterfaces();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1399416686 + "'", int39 == 1399416686);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
    }

    @Test
    public void test19142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19142");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        methodVisitor69.visitMaxs(14, 8);
        methodVisitor69.visitTypeInsn(4, "\007\000");
        methodVisitor69.visitTypeInsn(65535, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test19143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19143");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitTypeInsn(48640, "");
        methodVisitor69.visitIntInsn(768, (int) (short) -17730);
        methodVisitor69.visitMethodInsn(0, "hi!", "", "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test19144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19144");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter36.visitEnd();
        classWriter36.visitSource("hi!", "");
        int int45 = classWriter36.newMethod("", "hi!", "", false);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter36, 9);
        byte[] byteArray48 = classReader20.b;
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        classWriter50.visitSource("hi!", "");
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter50.visit((int) 'a', (int) '4', "", "hi!", "", strArray66);
        byte[] byteArray68 = classWriter50.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = classWriter50.visitAnnotation("", false);
        byte[] byteArray72 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader73 = new org.mockito.asm.ClassReader(byteArray72);
        java.lang.String[] strArray74 = classReader73.getInterfaces();
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter(classReader73, 5);
        classWriter76.visitInnerClass("\007\000", "\007\000", "\007\000", (int) '4');
        classWriter76.visitSource("hi!", "\007\000");
        java.lang.String[] strArray90 = null;
        classWriter76.visit(104, 223337, "", "\007\000", "hi!", strArray90);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter76, 16778088);
        java.lang.String str94 = classReader20.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test19145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19145");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn((int) (short) -326, "");
        methodVisitor69.visitIntInsn(11, (int) (short) 0);
        methodVisitor69.visitFieldInsn(0, "\007\000", "hi!", "hi!");
        methodVisitor69.visitIincInsn(20, 28526);
        methodVisitor69.visitIincInsn(151060483, 512);
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(190, label96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19146");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray6 = classReader5.b;
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        int int8 = classReader7.header;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = classReader7.getItem(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test19147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19147");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(8);
        classWriter1.visitOuterClass("\001", "", "\001");
        classWriter1.visitInnerClass("", "\001", "\001", 9);
        java.lang.String[] strArray15 = null;
        org.mockito.asm.MethodVisitor methodVisitor16 = classWriter1.visitMethod(6, "\007\000", "\001", "\007\000", strArray15);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        byte[] byteArray30 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        java.lang.String[] strArray32 = classReader31.getInterfaces();
        int int33 = classReader31.getAccess();
        int int35 = classReader31.readUnsignedShort(4);
        int int37 = classReader31.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor38 = classWriter22.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "hi!" };
        classWriter22.visit((int) (byte) 10, (-1), "", "", "", strArray46);
        int int49 = classWriter22.newClass("hi!");
        int int51 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", 1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter22.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter65.visitEnd();
        byte[] byteArray67 = classWriter65.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        java.lang.String[] strArray69 = classReader68.getInterfaces();
        int int71 = classReader68.readInt((int) (byte) 0);
        java.lang.String str72 = classReader68.getSuperName();
        java.lang.String[] strArray73 = classReader68.getInterfaces();
        byte[] byteArray74 = classReader68.b;
        int int75 = classReader68.header;
        int int76 = classReader68.header;
        java.lang.String[] strArray77 = classReader68.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor78 = classWriter22.visitMethod(83, "", "hi!", "", strArray77);
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter1.visitMethod(676719, "", "\007\000", "", strArray77);
        methodVisitor79.visitInsn(28263);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor79.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(methodVisitor16);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor38);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 5 + "'", int51 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-889275714) + "'", int71 == (-889275714));
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor78);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test19148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19148");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        int int35 = classReader20.readInt(13);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        classWriter37.visitEnd();
        byte[] byteArray43 = classWriter37.toByteArray();
        int int47 = classWriter37.newField("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter37.visitAnnotation("", true);
        int int53 = classWriter37.newNameType("", "hi!");
        byte[] byteArray54 = classWriter37.toByteArray();
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter37, 13);
        long long58 = classReader20.readLong((int) (short) 2);
        long long60 = classReader20.readLong(6);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) 24832);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1751720193 + "'", int35 == 1751720193);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 7 + "'", int47 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 0, 7, 0, 4, 12, 0, 4, 0, 4, 9, 0, 5, 0, 6, 12, 0, 4, 0, 1, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 4, 0, 0]");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-4990551337073573880L) + "'", long58 == (-4990551337073573880L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 27303107117450088L + "'", long60 == 27303107117450088L);
    }

    @Test
    public void test19149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19149");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String str25 = classReader24.getSuperName();
        int int27 = classReader24.readInt(10);
        java.lang.String[] strArray28 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader24, 21353);
        int int32 = classReader24.readInt(26);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16778088 + "'", int27 == 16778088);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 611177 + "'", int32 == 611177);
    }

    @Test
    public void test19150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19150");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(0, 83886080);
        methodVisitor69.visitIntInsn((int) (short) 1280, 3);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "");
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 20);
        methodVisitor69.visitMethodInsn(0, "\007\000", "", "\007\000");
        org.mockito.asm.Attribute attribute92 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19151");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        int int25 = classReader21.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        byte[] byteArray46 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader47.accept((org.mockito.asm.ClassVisitor) classWriter49, 8);
        char[] charArray58 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj59 = classReader47.readConst((int) (short) 1, charArray58);
        java.lang.Object obj60 = classReader21.readConst(4, charArray58);
        java.lang.String str61 = classReader21.getClassName();
        java.lang.String[] strArray62 = classReader21.getInterfaces();
        int int64 = classReader21.readInt(3);
        java.lang.String str65 = classReader21.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            long long67 = classReader21.readLong(1635022194);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + "\007\000" + "'", obj59, "\007\000");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "Lhi!;");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "Lhi!;");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "Lhi!;");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1107296256) + "'", int64 == (-1107296256));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test19152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19152");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter1.visitSource("", "");
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("", "", "", (int) (short) 0);
        int int39 = classWriter1.newMethod("\007\000", "", "\001", true);
        int int44 = classWriter1.newMethod("hi!", "hi!", "\001", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter1.visitAnnotation("\007\000", true);
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 11 + "'", int39 == 11);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 13 + "'", int44 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor47);
    }

    @Test
    public void test19153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19153");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = annotationVisitor19.visitArray("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor19.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = annotationVisitor23.visitAnnotation("\007\000", "hi!");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test19154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19154");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String str25 = classReader24.getSuperName();
        int int27 = classReader24.readInt(10);
        short short29 = classReader24.readShort(11);
        java.lang.String str30 = classReader24.getClassName();
        int int32 = classReader24.readInt((int) (short) 9);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int39 = classWriter34.newMethod("", "", "hi!", false);
        classWriter34.visitEnd();
        int int42 = classWriter34.newClass("");
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        byte[] byteArray50 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray50, 2, (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor56 = classWriter34.visitField((int) (short) 1, "\007\000", "hi!", "", (java.lang.Object) 2);
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter34, 16777223);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter34.visitAnnotation("", true);
        int int63 = classWriter34.newClass("");
        int int68 = classWriter34.newMethod("hi!", "hi!", "\001", true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16778088 + "'", int27 == 16778088);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 3 + "'", short29 == (short) 3);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 151060483 + "'", int32 == 151060483);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 11 + "'", int68 == 11);
    }

    @Test
    public void test19155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19155");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitSource("hi!", "hi!");
        int int12 = classWriter1.newClass("");
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        // The following exception was thrown during execution in test generation
        try {
            short short16 = classReader14.readShort(25966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25966");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 3, 104, 105, 33, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test19156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19156");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int25 = classReader24.getAccess();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = classReader24.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test19157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19157");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, (int) 'a');
        methodVisitor69.visitFieldInsn(26729, "hi!", "", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19158");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("hi!", "", "\007\000", 8);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        int int35 = classWriter28.newUTF8("");
        classWriter28.visitOuterClass("hi!", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter28.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = annotationVisitor42.visitAnnotation("hi!", "\007\000");
        org.mockito.asm.FieldVisitor fieldVisitor46 = classWriter1.visitField((int) (short) 10, "hi!", "\007\000", "", (java.lang.Object) "\007\000");
        fieldVisitor46.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = fieldVisitor46.visitAnnotation("\001", true);
        fieldVisitor46.visitEnd();
        org.mockito.asm.Attribute attribute52 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor46.visitAttribute(attribute52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(fieldVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor50);
    }

    @Test
    public void test19159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19159");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitVarInsn(12, 0);
        methodVisitor69.visitIntInsn(100, (int) (short) 1792);
        methodVisitor69.visitMultiANewArrayInsn("hi!", (int) (short) -1);
        methodVisitor69.visitInsn((-1107296256));
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
    }

    @Test
    public void test19160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19160");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        methodVisitor69.visitTryCatchBlock(label78, label79, label80, "");
        methodVisitor69.visitIincInsn((int) (byte) 100, (-889275714));
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn(24832, (-21316096));
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitParameterAnnotation((int) (short) -326, "\001", true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19161");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter24.visitEnd();
        byte[] byteArray26 = classWriter24.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        java.lang.String[] strArray28 = classReader27.getInterfaces();
        int int29 = classReader27.getAccess();
        int int31 = classReader27.readUnsignedShort(4);
        int int33 = classReader27.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter18.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (byte) 10, (-1), "", "", "", strArray42);
        classWriter1.visit((int) (short) 256, 8, "", "hi!", "hi!", strArray42);
        classWriter1.visitInnerClass("\001", "\001", "\001", 78);
        org.mockito.asm.Attribute attribute50 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(strArray42);
    }

    @Test
    public void test19162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19162");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter1.visitAnnotation("", true);
        int int31 = classWriter1.newClass("hi!");
        classWriter1.visitSource("\001", "hi!");
        classWriter1.visitSource("\007\000", "\007\000");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
    }

    @Test
    public void test19163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19163");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        byte[] byteArray8 = classWriter1.toByteArray();
        classWriter1.visitSource("hi!", "\007\000");
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = classWriter17.visitAnnotation("", true);
        classWriter17.visitSource("", "");
        classWriter17.visitOuterClass("hi!", "", "");
        int int31 = classWriter17.newField("", "hi!", "");
        classWriter17.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        byte[] byteArray44 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        java.lang.String[] strArray46 = classReader45.getInterfaces();
        int int48 = classReader45.readInt((int) (byte) 0);
        java.lang.String str49 = classReader45.getSuperName();
        java.lang.String[] strArray50 = classReader45.getInterfaces();
        java.lang.String[] strArray51 = classReader45.getInterfaces();
        classWriter17.visit(0, (int) (short) 0, "", "", "", strArray51);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter58.visitEnd();
        byte[] byteArray60 = classWriter58.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        java.lang.String[] strArray62 = classReader61.getInterfaces();
        short short64 = classReader61.readShort((int) (byte) 1);
        java.lang.String str65 = classReader61.getSuperName();
        java.lang.String str66 = classReader61.getSuperName();
        org.mockito.asm.FieldVisitor fieldVisitor67 = classWriter17.visitField((int) (byte) 100, "", "", "hi!", (java.lang.Object) str66);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = fieldVisitor67.visitAnnotation("\007\000", false);
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter1.visitField((int) (short) 256, "", "", "", (java.lang.Object) "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = annotationVisitor74.visitArray("\001");
        annotationVisitor76.visitEnum("hi!", "", "\007\000");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-889275714) + "'", int48 == (-889275714));
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + short64 + "' != '" + (short) -326 + "'", short64 == (short) -326);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(fieldVisitor67);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test19164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19164");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int8 = classWriter1.newNameType("hi!", "");
        classWriter1.visitInnerClass("\007\000", "", "hi!", 202);
        byte[] byteArray14 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader15 = new org.mockito.asm.ClassReader(byteArray14);
        java.lang.String[] strArray16 = classReader15.getInterfaces();
        int int17 = classReader15.header;
        int int18 = classReader15.header;
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 4, 7, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 10, 0, 1, 0, 5, 0, 6, 0, 2, 0, -54]");
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 87 + "'", int17 == 87);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 87 + "'", int18 == 87);
    }

    @Test
    public void test19165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19165");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMethodInsn(65210, "hi!", "hi!", "");
        methodVisitor69.visitInsn(254);
        methodVisitor69.visitInsn(2);
        methodVisitor69.visitIincInsn((int) (short) 4, 104);
        methodVisitor69.visitVarInsn((int) (short) 29285, 47806);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19166");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        int int22 = classWriter1.newUTF8("\007\000");
        int int27 = classWriter1.newMethod("hi!", "hi!", "", false);
        int int30 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        classWriter37.visitEnd();
        byte[] byteArray43 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray43);
        java.lang.String[] strArray45 = classReader44.getInterfaces();
        classWriter1.visit((int) (short) 872, 1763770624, "", "\007\000", "", strArray45);
        classWriter1.visitOuterClass("\007\000", "", "");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray45);
    }

    @Test
    public void test19167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19167");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter10.visitAnnotation("", true);
        classWriter10.visitSource("", "");
        classWriter10.visitOuterClass("hi!", "", "");
        classWriter10.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter30.visit((int) 'a', (int) '4', "", "hi!", "", strArray46);
        byte[] byteArray48 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter51, 8);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("", "");
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter55, 100);
        java.lang.String[] strArray62 = classReader49.getInterfaces();
        classWriter10.visit((-1), 256, "", "hi!", "", strArray62);
        org.mockito.asm.FieldVisitor fieldVisitor64 = classWriter1.visitField(11, "", "", "\007\000", (java.lang.Object) 256);
        classWriter1.visitEnd();
        int int67 = classWriter1.newUTF8("");
        classWriter1.visitSource("hi!", "\007\000");
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(fieldVisitor64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
    }

    @Test
    public void test19168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19168");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader5.getAccess();
        int int7 = classReader5.header;
        java.lang.String[] strArray8 = classReader5.getInterfaces();
        int int10 = classReader5.readInt((int) (short) 10);
        byte[] byteArray11 = classReader5.b;
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray11, 0, (int) (short) 100);
        byte[] byteArray15 = classReader14.b;
        byte[] byteArray16 = classReader14.b;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test19169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19169");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitSource("\007\000", "");
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = annotationVisitor31.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = annotationVisitor31.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = annotationVisitor35.visitAnnotation("hi!", "");
        annotationVisitor38.visitEnum("", "", "hi!");
        annotationVisitor38.visitEnd();
        annotationVisitor38.visit("", (java.lang.Object) 51966);
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField((int) (byte) 0, "\007\000", "", "\007\000", (java.lang.Object) 51966);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = fieldVisitor47.visitAnnotation("", false);
        fieldVisitor47.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor50);
    }

    @Test
    public void test19170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19170");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(73);
        classWriter1.visitInnerClass("", "hi!", "\007\000", (int) ' ');
        classWriter1.visitEnd();
    }

    @Test
    public void test19171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19171");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit((int) (byte) 1, 100, "", "hi!", "", strArray41);
        classWriter1.visitInnerClass("hi!", "hi!", "", (int) (short) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = annotationVisitor51.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = annotationVisitor53.visitAnnotation("\007\000", "hi!");
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter59.visitEnd();
        byte[] byteArray61 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        java.lang.String[] strArray63 = classReader62.getInterfaces();
        int int64 = classReader62.getAccess();
        int int66 = classReader62.readUnsignedShort((int) (byte) 10);
        annotationVisitor53.visit("", (java.lang.Object) int66);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = annotationVisitor53.visitArray("\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor71 = annotationVisitor53.visitArray("hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor71);
    }

    @Test
    public void test19172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19172");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitSource("", "");
        int int26 = classWriter1.newNameType("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = classWriter1.visitAnnotation("", false);
        int int32 = classWriter1.newNameType("hi!", "");
        int int37 = classWriter1.newMethod("", "", "\007\000", false);
        byte[] byteArray38 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray38);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 6 + "'", int26 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(byteArray38);
    }

    @Test
    public void test19173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19173");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "hi!");
        classWriter1.visitInnerClass("", "hi!", "", (int) '#');
        classWriter1.visitSource("\001", "hi!");
        classWriter1.visitInnerClass("", "hi!", "\001", (int) (short) 1792);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
    }

    @Test
    public void test19174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19174");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray5);
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray5, 0, 768);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = classReader9.getClassName();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test19175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19175");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(51966, (int) (byte) 1);
        methodVisitor69.visitIincInsn(3, 11);
        methodVisitor69.visitIntInsn((-1161953280), (int) ' ');
        methodVisitor69.visitCode();
        methodVisitor69.visitMaxs((-21316096), 173);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test19176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19176");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitIincInsn(48640, (int) (byte) 100);
        methodVisitor69.visitIincInsn(1, 100);
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        methodVisitor69.visitMultiANewArrayInsn("", 254);
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19177");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (byte) -1, 9);
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) 1792, (int) (short) -326);
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "");
        methodVisitor69.visitTypeInsn(1, "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test19178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19178");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        int int20 = classWriter1.newClass("hi!");
        classWriter1.visitOuterClass("", "\001", "");
        org.mockito.asm.Attribute attribute25 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
    }

    @Test
    public void test19179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19179");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "", 8);
        int int33 = classWriter1.newMethod("hi!", "", "", true);
        byte[] byteArray34 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray34, 0, (int) (short) 24832);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader37, 131073);
        int int41 = classWriter39.newClass("");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 12, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 12, 0, 2, 0, 2, 11, 0, 4, 0, 9, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 11, 0, 0, 0, 10, 0, 1, 0, 4, 0, 3, 0, 2, 0, 8, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
    }

    @Test
    public void test19180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19180");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter27.visitEnd();
        classWriter27.visitSource("", "");
        int int34 = classWriter27.newNameType("hi!", "");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter27, (int) (byte) 10);
        long long38 = classReader21.readLong(17);
        java.lang.String str39 = classReader21.getClassName();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        classWriter42.visitSource("hi!", "");
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter42.visit((int) 'a', (int) '4', "", "hi!", "", strArray58);
        byte[] byteArray60 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader61.accept((org.mockito.asm.ClassVisitor) classWriter63, 8);
        char[] charArray72 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj73 = classReader61.readConst((int) (short) 1, charArray72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj74 = classReader21.readConst(0, charArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 7696615407617L + "'", long38 == 7696615407617L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + "\007\000" + "'", obj73, "\007\000");
    }

    @Test
    public void test19181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19181");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-1));
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        java.lang.Object obj11 = null;
        org.mockito.asm.FieldVisitor fieldVisitor12 = classWriter1.visitField(0, "\001", "\007\000", "\001", obj11);
        classWriter1.visitInnerClass("", "hi!", "", 1024);
        org.junit.Assert.assertNotNull(fieldVisitor12);
    }

    @Test
    public void test19182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19182");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit((int) (byte) 1, 100, "", "hi!", "", strArray41);
        classWriter1.visitInnerClass("", "", "", (int) '#');
        int int53 = classWriter1.newMethod("", "hi!", "\007\000", true);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter60.visitEnd();
        byte[] byteArray62 = classWriter60.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor65 = classWriter60.visitAnnotation("", true);
        classWriter60.visitOuterClass("", "", "hi!");
        int int74 = classWriter60.newMethod("", "hi!", "hi!", true);
        classWriter60.visitSource("hi!", "");
        int int79 = classWriter60.newClass("hi!");
        org.mockito.asm.ClassWriter classWriter86 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter86.visitEnd();
        byte[] byteArray88 = classWriter86.toByteArray();
        org.mockito.asm.ClassReader classReader89 = new org.mockito.asm.ClassReader(byteArray88);
        java.lang.String[] strArray90 = classReader89.getInterfaces();
        java.lang.String str91 = classReader89.getSuperName();
        long long93 = classReader89.readLong((int) (byte) 0);
        java.lang.String str94 = classReader89.getSuperName();
        java.lang.String str95 = classReader89.getSuperName();
        int int96 = classReader89.getAccess();
        java.lang.String[] strArray97 = classReader89.getInterfaces();
        classWriter60.visit((int) (short) 20, (int) (short) 26729, "hi!", "\007\000", "\001", strArray97);
        org.mockito.asm.FieldVisitor fieldVisitor99 = classWriter1.visitField(17, "\001", "", "hi!", (java.lang.Object) (short) 26729);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor65);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 7 + "'", int79 == 7);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-3819410108757049344L) + "'", long93 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertNotNull(strArray97);
        org.junit.Assert.assertNotNull(fieldVisitor99);
    }

    @Test
    public void test19183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19183");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        short short27 = classReader24.readShort(104);
        short short29 = classReader24.readShort(10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 13312 + "'", short27 == (short) 13312);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 256 + "'", short29 == (short) 256);
    }

    @Test
    public void test19184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19184");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "\007\000");
    }

    @Test
    public void test19185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19185");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitMaxs((int) (short) 0, 51966);
        methodVisitor69.visitMultiANewArrayInsn("hi!", 1);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19186");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 1751720193);
        methodVisitor69.visitInsn(29285);
        methodVisitor69.visitIincInsn((int) (short) 10, 11);
        methodVisitor69.visitMethodInsn((int) (short) 100, "\007\000", "\007\000", "hi!");
        methodVisitor69.visitMultiANewArrayInsn("hi!", 24832);
        methodVisitor69.visitCode();
        methodVisitor69.visitLdcInsn((java.lang.Object) 2304);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19187");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitIntInsn(6, 52);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn((int) (short) 13312, "", "", "hi!");
        methodVisitor69.visitIntInsn(28533, 1869509376);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test19188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19188");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        int int28 = classWriter1.newClass("hi!");
        int int30 = classWriter1.newClass("hi!");
        classWriter1.visitInnerClass("hi!", "", "hi!", 1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("", true);
        java.lang.String[] strArray43 = null;
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter1.visitMethod((int) (short) 1792, "\007\000", "", "hi!", strArray43);
        int int49 = classWriter1.newMethod("\001", "", "hi!", true);
        int int51 = classWriter1.newClass("\001");
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter58.visitEnd();
        byte[] byteArray60 = classWriter58.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        java.lang.String[] strArray62 = classReader61.getInterfaces();
        java.lang.String str63 = classReader61.getSuperName();
        long long65 = classReader61.readLong((int) (byte) 0);
        java.lang.String str66 = classReader61.getSuperName();
        java.lang.String str67 = classReader61.getSuperName();
        int int68 = classReader61.getAccess();
        java.lang.String[] strArray69 = classReader61.getInterfaces();
        classWriter1.visit(24832, 0, "", "\007\000", "hi!", strArray69);
        int int73 = classWriter1.newNameType("\007\000", "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-3819410108757049344L) + "'", long65 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 11 + "'", int73 == 11);
    }

    @Test
    public void test19189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19189");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(12, 202);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "");
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(2304, (int) (short) 26913);
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label label93 = null;
        org.mockito.asm.Label label94 = null;
        methodVisitor69.visitTryCatchBlock(label92, label93, label94, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test19190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19190");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int6 = classReader4.getAccess();
        int int8 = classReader4.readUnsignedShort(4);
        int int10 = classReader4.readByte(5);
        java.lang.String[] strArray11 = classReader4.getInterfaces();
        java.lang.String str12 = classReader4.getSuperName();
        java.lang.String str13 = classReader4.getSuperName();
        int int15 = classReader4.readByte((int) (byte) 0);
        byte[] byteArray16 = classReader4.b;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = classReader4.readInt((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 202 + "'", int15 == 202);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test19191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19191");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        int int15 = classWriter1.newMethod("\001", "", "\007\000", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test19192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19192");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray6 = classReader5.b;
        int int8 = classReader5.readUnsignedShort(2);
        int int9 = classReader5.getAccess();
        int int11 = classReader5.readUnsignedShort(1);
        java.lang.String[] strArray12 = classReader5.getInterfaces();
        int int14 = classReader5.getItem(0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 47806 + "'", int8 == 47806);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 65210 + "'", int11 == 65210);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test19193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19193");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        byte[] byteArray37 = classReader20.b;
        java.lang.String[] strArray38 = classReader20.getInterfaces();
        byte[] byteArray39 = classReader20.b;
        java.lang.String str40 = classReader20.getClassName();
        int int42 = classReader20.readByte(50);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test19194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19194");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit((int) (byte) 1, 100, "", "hi!", "", strArray41);
        classWriter1.visitInnerClass("hi!", "hi!", "", (int) (short) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = annotationVisitor54.visitAnnotation("", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor60 = annotationVisitor57.visitAnnotation("\001", "\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor57);
        org.junit.Assert.assertNotNull(annotationVisitor60);
    }

    @Test
    public void test19195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19195");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        int int5 = classReader4.header;
        int int6 = classReader4.header;
        int int7 = classReader4.getAccess();
        int int8 = classReader4.getAccess();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test19196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19196");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        byte[] byteArray26 = classReader24.b;
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        classWriter28.visitSource("", "");
        classWriter28.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor43 = classWriter28.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter28.visitOuterClass("", "", "");
        classWriter28.visitSource("", "");
        int int53 = classWriter28.newNameType("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter28.visitAnnotation("", false);
        classWriter28.visitOuterClass("\007\000", "", "");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter64 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter64.visitEnd();
        classWriter64.visitSource("hi!", "");
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter64.visit((int) 'a', (int) '4', "", "hi!", "", strArray80);
        classWriter64.visitInnerClass("hi!", "", "", (int) 'a');
        byte[] byteArray87 = classWriter64.toByteArray();
        int int89 = classWriter64.newClass("hi!");
        classWriter64.visitOuterClass("hi!", "", "\007\000");
        int int95 = classWriter64.newClass("\007\000");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter64, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int99 = classReader24.readInt(65535);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(fieldVisitor43);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 3, 0, 2, 0, 97]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 4 + "'", int89 == 4);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 11 + "'", int95 == 11);
    }

    @Test
    public void test19197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19197");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        classWriter26.visitOuterClass("hi!", "\001", "\007\000");
        int int37 = classWriter26.newField("", "\001", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 9 + "'", int37 == 9);
    }

    @Test
    public void test19198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19198");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter28.visitAnnotation("hi!", true);
        classWriter28.visitEnd();
        byte[] byteArray46 = classWriter28.toByteArray();
        byte[] byteArray47 = classWriter28.toByteArray();
        int int49 = classWriter28.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int52 = classReader20.getAccess();
        int int54 = classReader20.readUnsignedShort(3);
        int int55 = classReader20.getAccess();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 48640 + "'", int54 == 48640);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
    }

    @Test
    public void test19199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19199");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = fieldVisitor36.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = fieldVisitor36.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = annotationVisitor42.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = annotationVisitor44.visitArray("");
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(1);
        classWriter49.visitInnerClass("", "", "hi!", 9);
        int int58 = classWriter49.newField("\007\000", "", "\007\000");
        byte[] byteArray59 = classWriter49.toByteArray();
        classWriter49.visitInnerClass("\007\000", "", "hi!", (int) (short) 5203);
        annotationVisitor44.visit("", (java.lang.Object) "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 7 + "'", int58 == 7);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 1, 0, 3, 7, -64, -128, 7, 0, 4, 12, 0, 1, 0, 4, 9, 0, 5, 0, 6, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 0, 0, 10, 0, 1, 0, 2, 0, 2, 0, 3, 0, 9]");
    }

    @Test
    public void test19200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19200");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int9 = classWriter1.newUTF8("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor12 = classWriter1.visitAnnotation("\001", false);
        classWriter1.visitInnerClass("\007\000", "", "hi!", 3);
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter24.visitEnd();
        classWriter24.visitSource("hi!", "");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter24.visit((int) 'a', (int) '4', "", "hi!", "", strArray40);
        byte[] byteArray42 = classWriter24.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray42);
        java.lang.String[] strArray45 = classReader44.getInterfaces();
        classWriter1.visit(1919222016, 10, "\001", "\007\000", "", strArray45);
        int int49 = classWriter1.newNameType("hi!", "\001");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor12);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
    }

    @Test
    public void test19201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19201");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "", 8);
        byte[] byteArray29 = classWriter1.toByteArray();
        int int31 = classWriter1.newUTF8("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = annotationVisitor34.visitAnnotation("\001", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = annotationVisitor37.visitAnnotation("", "");
        annotationVisitor37.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 9, 0, 0, 0, 10, 0, 1, 0, 4, 0, 3, 0, 2, 0, 8, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test19202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19202");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(14);
        methodVisitor69.visitIntInsn((int) (short) 97, 0);
        methodVisitor69.visitIntInsn(0, (-1161953280));
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test19203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19203");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", false);
        int int17 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("hi!", "", "hi!", 23);
        int int25 = classWriter1.newClass("\001");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 7 + "'", int25 == 7);
    }

    @Test
    public void test19204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19204");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIntInsn((-1), 1399416686);
        methodVisitor69.visitMaxs(186, 9);
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "hi!");
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        methodVisitor69.visitTryCatchBlock(label88, label89, label90, "hi!");
        org.mockito.asm.Label label94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn((int) (short) 1792, label94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test19205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19205");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitMaxs(1399416686, 1751720193);
        methodVisitor69.visitMethodInsn(26729, "\007\000", "\007\000", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label[] labelArray88 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(12, 327680, label87, labelArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(labelArray88);
    }

    @Test
    public void test19206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19206");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter24.visitEnd();
        byte[] byteArray26 = classWriter24.toByteArray();
        org.mockito.asm.ClassReader classReader27 = new org.mockito.asm.ClassReader(byteArray26);
        java.lang.String[] strArray28 = classReader27.getInterfaces();
        int int29 = classReader27.getAccess();
        int int31 = classReader27.readUnsignedShort(4);
        int int33 = classReader27.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter18.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!" };
        classWriter18.visit((int) (byte) 10, (-1), "", "", "", strArray42);
        classWriter1.visit((int) (short) 256, 8, "", "hi!", "hi!", strArray42);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray52 = classWriter51.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter51.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = annotationVisitor55.visitAnnotation("\007\000", "\007\000");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.FieldVisitor fieldVisitor59 = classWriter1.visitField(116, "", "", "hi!", (java.lang.Object) annotationVisitor58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.AnnotationWriter@5e1cd2");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
    }

    @Test
    public void test19207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19207");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassReader classReader23 = new org.mockito.asm.ClassReader(byteArray19, 14, 872);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test19208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19208");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        classWriter29.visitEnd();
        classWriter29.visitSource("\007\000", "");
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        byte[] byteArray41 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        java.lang.String[] strArray43 = classReader42.getInterfaces();
        int int44 = classReader42.getAccess();
        int int46 = classReader42.readUnsignedShort(4);
        int int48 = classReader42.readByte(5);
        java.lang.String[] strArray49 = classReader42.getInterfaces();
        int int51 = classReader42.getItem(0);
        java.lang.String[] strArray52 = classReader42.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor53 = classWriter29.visitMethod(0, "", "\001", "hi!", strArray52);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter59.visitEnd();
        byte[] byteArray61 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        int int64 = classReader62.readByte(1);
        java.lang.String[] strArray65 = classReader62.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor66 = classWriter29.visitMethod(104, "\001", "", "hi!", strArray65);
        methodVisitor66.visitVarInsn(65536, 16);
        methodVisitor66.visitCode();
        org.mockito.asm.Label label74 = null;
        org.mockito.asm.Label label75 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor66.visitLocalVariable("\001", "", "hi!", label74, label75, 553713664);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(methodVisitor53);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 254 + "'", int64 == 254);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(methodVisitor66);
    }

    @Test
    public void test19209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19209");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int25 = classReader24.getAccess();
        java.lang.String str26 = classReader24.getSuperName();
        java.lang.String[] strArray27 = classReader24.getInterfaces();
        byte[] byteArray28 = classReader24.b;
        java.lang.String str29 = classReader24.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test19210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19210");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        byte[] byteArray24 = classWriter22.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter22.visitAnnotation("", true);
        classWriter22.visitOuterClass("", "", "hi!");
        int int36 = classWriter22.newMethod("", "hi!", "hi!", true);
        int int40 = classWriter22.newField("hi!", "", "hi!");
        classWriter22.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter22.visitAnnotation("hi!", true);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter1.visitField(51966, "\007\000", "hi!", "\007\000", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = fieldVisitor48.visitAnnotation("", false);
        fieldVisitor48.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = fieldVisitor48.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = fieldVisitor48.visitAnnotation("\007\000", false);
        fieldVisitor48.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = fieldVisitor48.visitAnnotation("hi!", false);
        org.mockito.asm.Attribute attribute63 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor48.visitAttribute(attribute63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor62);
    }

    @Test
    public void test19211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19211");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        int int35 = classReader20.readInt(13);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) -326);
        classWriter37.visitEnd();
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) ' ');
        int int48 = classWriter44.newField("", "", "hi!");
        int int50 = classWriter44.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter44.visitAnnotation("", true);
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter37.visitField(28, "hi!", "hi!", "hi!", (java.lang.Object) "");
        classWriter37.visitOuterClass("\007\000", "hi!", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1751720193 + "'", int35 == 1751720193);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(fieldVisitor54);
    }

    @Test
    public void test19212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19212");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("\007\000", "\001", "\007\000", 83);
        classWriter1.visitInnerClass("", "hi!", "hi!", (int) (short) -326);
        int int28 = classWriter1.newClass("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("\007\000", true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor31);
    }

    @Test
    public void test19213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19213");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitInsn((int) '4');
        methodVisitor69.visitMaxs(6, (int) (short) 0);
        methodVisitor69.visitMultiANewArrayInsn("hi!", (int) (byte) 0);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", (int) (short) 24832);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitParameterAnnotation(2048, "\007\000", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19214");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = classReader20.readLong((int) (short) 519);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test19215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19215");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String str25 = classReader24.getSuperName();
        byte[] byteArray26 = classReader24.b;
        byte[] byteArray27 = classReader24.b;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test19216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19216");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter11.visitEnd();
        classWriter11.visitSource("hi!", "");
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter11.visit((int) 'a', (int) '4', "", "hi!", "", strArray27);
        byte[] byteArray29 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader30.accept((org.mockito.asm.ClassVisitor) classWriter32, 8);
        int int36 = classWriter32.newUTF8("");
        java.lang.String[] strArray42 = null;
        classWriter32.visit(17, 103, "", "\001", "\007\000", strArray42);
        org.mockito.asm.FieldVisitor fieldVisitor44 = classWriter1.visitField(0, "\001", "hi!", "\007\000", (java.lang.Object) 103);
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter1.visitAnnotation("\001", false);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(fieldVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor47);
    }

    @Test
    public void test19217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19217");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-889275714));
        int int4 = classWriter1.newNameType("\001", "\007\000");
        int int7 = classWriter1.newNameType("\007\000", "");
        classWriter1.visitInnerClass("\007\000", "\007\000", "", (int) (short) 256);
        classWriter1.visitSource("hi!", "hi!");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
    }

    @Test
    public void test19218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19218");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "hi!", "", (int) (byte) 100);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter31.visitEnd();
        byte[] byteArray33 = classWriter31.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        java.lang.String[] strArray35 = classReader34.getInterfaces();
        int int37 = classReader34.readByte((int) (byte) 10);
        int int38 = classReader34.getAccess();
        java.lang.String[] strArray39 = classReader34.getInterfaces();
        classWriter1.visit(0, 1919222016, "\007\000", "\007\000", "", strArray39);
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(strArray39);
    }

    @Test
    public void test19219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19219");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        long long8 = classReader4.readLong((int) (byte) 0);
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        int int10 = classReader4.getAccess();
        java.lang.String str11 = classReader4.getSuperName();
        int int12 = classReader4.getAccess();
        int int13 = classReader4.getAccess();
        java.lang.String str14 = classReader4.getSuperName();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3819410108757049344L) + "'", long8 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test19220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19220");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(100, 11);
        methodVisitor69.visitTypeInsn(1281, "");
        org.mockito.asm.Label label97 = null;
        org.mockito.asm.Label[] labelArray98 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(132864, 17, label97, labelArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(labelArray98);
    }

    @Test
    public void test19221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19221");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitIincInsn(256, (int) '4');
        methodVisitor69.visitMaxs(7, 16777223);
        methodVisitor69.visitTypeInsn(3, "");
        methodVisitor69.visitVarInsn((int) (short) 5203, (int) (byte) -1);
        methodVisitor69.visitMaxs(1763770624, 254);
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("", "\001", "\007\000", label94, label95, 65542);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19222");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitMethodInsn((int) (short) 100, "hi!", "hi!", "\007\000");
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        methodVisitor69.visitTryCatchBlock(label78, label79, label80, "");
        methodVisitor69.visitMethodInsn(0, "", "\007\000", "");
        methodVisitor69.visitInsn(51966);
        methodVisitor69.visitInsn(50);
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19223");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitVarInsn(1, 100);
        methodVisitor69.visitIntInsn((int) (short) 1280, 0);
        methodVisitor69.visitInsn(52);
        methodVisitor69.visitMethodInsn((int) (short) 97, "\007\000", "\001", "\007\000");
        org.mockito.asm.Label label93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(65536, label93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19224");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 7);
        int int28 = classWriter1.newField("", "hi!", "hi!");
        byte[] byteArray29 = classWriter1.toByteArray();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 7, 0, 3, 9, 0, 7, 0, 4, 9, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 10, 0, 0, 0, 4, 0, 2, 0, 4, 0, 11, 0, 0, 0, 10, 0, 1, 0, 7, 0, 7, 0, 1, 0, 7, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test19225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19225");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter30.visitAnnotation("", true);
        int int36 = classWriter30.newNameType("hi!", "hi!");
        classWriter30.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        classWriter48.visitSource("hi!", "");
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter48.visit((int) 'a', (int) '4', "", "hi!", "", strArray64);
        byte[] byteArray66 = classWriter48.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter48.visitAnnotation("", false);
        byte[] byteArray70 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        java.lang.String[] strArray72 = classReader71.getInterfaces();
        classWriter30.visit(51966, (int) 'a', "", "\007\000", "", strArray72);
        classWriter30.visitEnd();
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter30, (int) (byte) 1);
        classWriter30.visitInnerClass("hi!", "\007\000", "hi!", 151060483);
        int int85 = classWriter30.newField("\007\000", "\001", "\001");
        org.mockito.asm.Attribute attribute86 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter30.visitAttribute(attribute86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
    }

    @Test
    public void test19226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19226");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        byte[] byteArray26 = classReader24.b;
        java.lang.String str27 = classReader24.getSuperName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16779008);
        int int30 = classReader24.header;
        java.lang.String str31 = classReader24.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = classReader24.readByte((int) (short) -13570);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 103 + "'", int30 == 103);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test19227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19227");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int15 = classWriter10.newMethod("", "", "hi!", false);
        classWriter10.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter10.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter25.visitAnnotation("", true);
        classWriter25.visitSource("", "");
        classWriter25.visitSource("", "hi!");
        int int38 = classWriter25.newField("hi!", "hi!", "hi!");
        int int42 = classWriter25.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor43 = classWriter10.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor44 = classWriter1.visitField((int) (short) 0, "hi!", "hi!", "hi!", (java.lang.Object) "");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = fieldVisitor44.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = fieldVisitor44.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = fieldVisitor44.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = fieldVisitor44.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = fieldVisitor44.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = fieldVisitor44.visitAnnotation("\007\000", false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor43);
        org.junit.Assert.assertNotNull(fieldVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor62);
    }

    @Test
    public void test19228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19228");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitTypeInsn(13, "hi!");
        methodVisitor69.visitMaxs((int) (short) 0, (int) '4');
        methodVisitor69.visitCode();
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\007\000", "", "\001", label83, label84, 16779603);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19229");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "hi!");
        int int9 = classWriter1.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        byte[] byteArray23 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        int int26 = classReader24.getAccess();
        int int28 = classReader24.readUnsignedShort(4);
        int int30 = classReader24.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter15.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        classWriter15.visit((int) (byte) 10, (-1), "", "", "", strArray39);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter46.visitEnd();
        classWriter46.visitSource("hi!", "");
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter46.visit((int) 'a', (int) '4', "", "hi!", "", strArray62);
        byte[] byteArray64 = classWriter46.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader65.accept((org.mockito.asm.ClassVisitor) classWriter67, 8);
        long long71 = classReader65.readLong(7);
        org.mockito.asm.ClassWriter classWriter73 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter73.visitAnnotation("", true);
        int int79 = classWriter73.newNameType("hi!", "hi!");
        classReader65.accept((org.mockito.asm.ClassVisitor) classWriter73, (int) (byte) 0);
        java.lang.String[] strArray82 = classReader65.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor83 = classWriter15.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray82);
        methodVisitor83.visitFieldInsn(3, "hi!", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor89 = classWriter1.visitField((int) (byte) 0, "", "", "", (java.lang.Object) "");
        fieldVisitor89.visitEnd();
        org.mockito.asm.Attribute attribute91 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor89.visitAttribute(attribute91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 6989595422067222633L + "'", long71 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(methodVisitor83);
        org.junit.Assert.assertNotNull(fieldVisitor89);
    }

    @Test
    public void test19230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19230");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        classWriter22.visitOuterClass("", "hi!", "hi!");
        classWriter22.visitOuterClass("hi!", "hi!", "hi!");
        classWriter22.visitEnd();
        int int35 = classWriter22.newClass("hi!");
        classWriter22.visitEnd();
        int int38 = classWriter22.newClass("hi!");
        classWriter22.visitSource("\007\000", "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
    }

    @Test
    public void test19231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19231");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader35, 196613);
        java.lang.String str38 = classReader35.getSuperName();
        long long40 = classReader35.readLong((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        classWriter42.visitSource("hi!", "");
        classWriter42.visitEnd();
        int int49 = classWriter42.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter42.visitAnnotation("hi!", false);
        int int55 = classWriter42.newNameType("\007\000", "\007\000");
        classWriter42.visitEnd();
        classReader35.accept((org.mockito.asm.ClassVisitor) classWriter42, (-21316096));
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter42.visitAnnotation("\007\000", false);
        int int63 = classWriter42.newClass("\007\000");
        classWriter42.visitSource("hi!", "\001");
        org.mockito.asm.Attribute attribute67 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter42.visitAttribute(attribute67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-3819410108757049247L) + "'", long40 == (-3819410108757049247L));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 7 + "'", int63 == 7);
    }

    @Test
    public void test19232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19232");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int9 = classWriter1.newUTF8("hi!");
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitOuterClass("", "hi!", "");
        classWriter1.visitInnerClass("\001", "hi!", "\001", (int) (short) 24832);
        classWriter1.visitInnerClass("", "\001", "", 196612);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        byte[] byteArray36 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray36);
        java.lang.String[] strArray38 = classReader37.getInterfaces();
        java.lang.String str39 = classReader37.getSuperName();
        long long41 = classReader37.readLong((int) (byte) 0);
        java.lang.String[] strArray42 = classReader37.getInterfaces();
        int int43 = classReader37.getAccess();
        int int45 = classReader37.readUnsignedShort((int) (short) 0);
        java.lang.String[] strArray46 = classReader37.getInterfaces();
        classWriter1.visit(151060483, (int) (short) -326, "hi!", "", "\001", strArray46);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-3819410108757049344L) + "'", long41 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 51966 + "'", int45 == 51966);
        org.junit.Assert.assertNotNull(strArray46);
    }

    @Test
    public void test19233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19233");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter11.visitEnd();
        byte[] byteArray13 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray13);
        java.lang.String[] strArray15 = classReader14.getInterfaces();
        java.lang.String str16 = classReader14.getSuperName();
        long long18 = classReader14.readLong((int) (byte) 0);
        java.lang.String str19 = classReader14.getSuperName();
        java.lang.String str20 = classReader14.getSuperName();
        int int21 = classReader14.getAccess();
        int int23 = classReader14.readInt(4);
        java.lang.String[] strArray24 = classReader14.getInterfaces();
        classWriter1.visit(8, 202, "", "\007\000", "\007\000", strArray24);
        int int28 = classWriter1.newNameType("", "");
        classWriter1.visitSource("", "\007\000");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3819410108757049344L) + "'", long18 == (-3819410108757049344L));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
    }

    @Test
    public void test19234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19234");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        int int9 = classReader4.readUnsignedShort(0);
        int int10 = classReader4.header;
        java.lang.String str11 = classReader4.getSuperName();
        int int12 = classReader4.header;
        // The following exception was thrown during execution in test generation
        try {
            long long14 = classReader4.readLong(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51966 + "'", int9 == 51966);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test19235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19235");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(14);
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter30.visit((int) 'a', (int) '4', "", "hi!", "", strArray46);
        byte[] byteArray48 = classWriter30.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader49.accept((org.mockito.asm.ClassVisitor) classWriter51, 8);
        byte[] byteArray54 = classWriter51.toByteArray();
        int int56 = classWriter51.newClass("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = classWriter51.visitAnnotation("hi!", true);
        org.mockito.asm.Attribute[] attributeArray60 = new org.mockito.asm.Attribute[] {};
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter51, attributeArray60, 51966);
        int int64 = classReader20.readInt((int) (short) 3);
        int int66 = classReader20.readInt(18);
        int int67 = classReader20.header;
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter(classReader20, 13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1763770624 + "'", int28 == 1763770624);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(attributeArray60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1107296256) + "'", int64 == (-1107296256));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 458754 + "'", int66 == 458754);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 73 + "'", int67 == 73);
    }

    @Test
    public void test19236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19236");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitTypeInsn(48640, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitVarInsn(51, 7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test19237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19237");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getClassName();
        int int30 = classReader24.readUnsignedShort(3);
        int int31 = classReader24.getAccess();
        int int32 = classReader24.header;
        byte[] byteArray33 = classReader24.b;
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        java.lang.String str35 = classReader34.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 48640 + "'", int30 == 48640);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 103 + "'", int32 == 103);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test19238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19238");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        int int5 = classWriter1.newField("", "", "hi!");
        int int7 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("", true);
        classWriter1.visitEnd();
        int int14 = classWriter1.newNameType("\007\000", "hi!");
        int int16 = classWriter1.newUTF8("");
        int int21 = classWriter1.newMethod("\007\000", "\007\000", "", true);
        int int23 = classWriter1.newClass("\007\000");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
    }

    @Test
    public void test19239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19239");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        byte[] byteArray44 = classWriter1.toByteArray();
        int int47 = classWriter1.newNameType("\007\000", "");
        classWriter1.visitEnd();
        classWriter1.visitSource("\001", "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 2, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 7, 0, 3, 0, 4, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
    }

    @Test
    public void test19240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19240");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int16 = classWriter1.newNameType("", "\007\000");
        int int19 = classWriter1.newNameType("", "\001");
        classWriter1.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        classWriter28.visitInnerClass("hi!", "", "", (int) 'a');
        int int54 = classWriter28.newField("", "hi!", "hi!");
        int int56 = classWriter28.newUTF8("hi!");
        int int60 = classWriter28.newField("\007\000", "hi!", "\007\000");
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter66.visitAnnotation("", true);
        classWriter66.visitSource("", "");
        classWriter66.visitSource("", "hi!");
        int int79 = classWriter66.newField("hi!", "hi!", "hi!");
        classWriter66.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter66.visitSource("", "");
        classWriter66.visitSource("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = classWriter66.visitAnnotation("hi!", false);
        org.mockito.asm.FieldVisitor fieldVisitor94 = classWriter28.visitField(1, "\007\000", "hi!", "", (java.lang.Object) false);
        org.mockito.asm.FieldVisitor fieldVisitor95 = classWriter1.visitField(768, "\007\000", "\001", "\007\000", (java.lang.Object) "\007\000");
        org.mockito.asm.Attribute attribute96 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor95.visitAttribute(attribute96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 5 + "'", int79 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor93);
        org.junit.Assert.assertNotNull(fieldVisitor94);
        org.junit.Assert.assertNotNull(fieldVisitor95);
    }

    @Test
    public void test19241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19241");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int16 = classWriter1.newNameType("", "\007\000");
        int int19 = classWriter1.newNameType("", "\001");
        java.lang.String[] strArray25 = null;
        classWriter1.visit(13, 0, "\001", "hi!", "\001", strArray25);
        int int29 = classWriter1.newNameType("\007\000", "");
        byte[] byteArray30 = classWriter1.toByteArray();
        int int32 = classWriter1.newClass("hi!");
        int int34 = classWriter1.newClass("");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11 + "'", int29 == 11);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 13, 0, 17, 1, 0, 0, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 4, 1, 0, 3, 7, -64, -128, 12, 0, 1, 0, 6, 1, 0, 1, 1, 12, 0, 1, 0, 8, 7, 0, 8, 12, 0, 6, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 10, 0, 10, 0, 0, 0, 0, 0, 0, 0, 5, 0, 12, 0, 0, 0, 2, 0, 4, 0, 13, 0, 0, 0, 2, 0, 1, 0, 14, 0, 0, 0, 3, 104, 105, 33, 0, 15, 0, 0, 0, 4, 0, 2, 0, 3, 0, 16, 0, 0, 0, 10, 0, 1, 0, 2, 0, 5, 0, 1, -1, -1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test19242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19242");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 1751720193);
        methodVisitor69.visitInsn(29285);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitLdcInsn((java.lang.Object) 104);
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        methodVisitor69.visitTryCatchBlock(label87, label88, label89, "\007\000");
        methodVisitor69.visitTypeInsn(141, "hi!");
        org.mockito.asm.Label label96 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(24948, label96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
    }

    @Test
    public void test19243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19243");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "");
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn((int) (short) -326, 28);
        methodVisitor69.visitVarInsn(202, 119);
        org.mockito.asm.Label label96 = null;
        org.mockito.asm.Label[] labelArray97 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn((int) (short) 7, (int) (short) 26729, label96, labelArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray97);
    }

    @Test
    public void test19244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19244");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(52);
        byte[] byteArray2 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("", "\001", "hi!", (int) (short) 2);
        byte[] byteArray13 = classWriter1.toByteArray();
        org.mockito.asm.Attribute attribute14 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 3, 104, 105, 33, 7, 0, 1, 1, 0, 0, 12, 0, 3, 0, 3, 7, 0, 3, 1, 0, 1, 1, 7, 0, 6, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 8, 0, 0, 0, 4, 0, 2, 0, 4, 0, 9, 0, 0, 0, 10, 0, 1, 0, 5, 0, 7, 0, 1, 0, 2]");
    }

    @Test
    public void test19245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19245");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int9 = classWriter1.newClass("hi!");
        int int13 = classWriter1.newField("hi!", "", "");
        classWriter1.visitSource("hi!", "\001");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
    }

    @Test
    public void test19246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19246");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        int int25 = classReader21.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 10);
        classWriter27.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        byte[] byteArray39 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        java.lang.String[] strArray41 = classReader40.getInterfaces();
        int int43 = classReader40.readUnsignedShort(1);
        int int45 = classReader40.readUnsignedShort(0);
        byte[] byteArray46 = classReader40.b;
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray46, 6, (int) (short) 100);
        org.mockito.asm.ClassReader classReader50 = new org.mockito.asm.ClassReader(byteArray46);
        java.lang.String[] strArray51 = classReader50.getInterfaces();
        classWriter27.visit(51, 2, "\001", "hi!", "", strArray51);
        int int54 = classWriter27.newClass("hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 65210 + "'", int43 == 65210);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 51966 + "'", int45 == 51966);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
    }

    @Test
    public void test19247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19247");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit((int) (byte) 1, 100, "", "hi!", "", strArray41);
        int int48 = classWriter1.newMethod("", "hi!", "", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter1.visitAnnotation("", true);
        int int53 = classWriter1.newUTF8("\001");
        classWriter1.visitSource("hi!", "\007\000");
        int int58 = classWriter1.newClass("hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
    }

    @Test
    public void test19248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19248");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter16.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter16.visitOuterClass("", "", "");
        classWriter16.visitSource("", "");
        int int41 = classWriter16.newNameType("", "hi!");
        byte[] byteArray42 = classWriter16.toByteArray();
        int int46 = classWriter16.newField("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField(0, "hi!", "hi!", "hi!", (java.lang.Object) "");
        byte[] byteArray48 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 1, 0, 3, 104, 105, 33, 3, 0, 0, 0, 1, 7, 0, 1, 12, 0, 1, 0, 1, 12, 0, 1, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 2, 0, 2, 0, 2, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 4, 0, 4, 0, 5, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 13 + "'", int46 == 13);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 8, 0, 1, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 2, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test19249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19249");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getClassName();
        java.lang.String[] strArray29 = classReader24.getInterfaces();
        java.lang.String str30 = classReader24.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = classReader24.readByte((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test19250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19250");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        int int11 = classWriter1.newField("", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor14 = classWriter1.visitAnnotation("", true);
        classWriter1.visitInnerClass("", "", "", 0);
        classWriter1.visitInnerClass("hi!", "\007\000", "hi!", (int) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("", false);
        byte[] byteArray28 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("", "", "\001");
        classWriter1.visitInnerClass("\001", "\001", "\007\000", 0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor14);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 14, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 0, 7, 0, 4, 12, 0, 4, 0, 4, 9, 0, 5, 0, 6, 7, 0, 1, 1, 0, 3, 7, -64, -128, 7, 0, 9, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0, 0, 11, 0, 0, 0, 18, 0, 2, 0, 5, 0, 5, 0, 4, 0, 0, 0, 8, 0, 10, 0, 1, 0, 1, 0, 12, 0, 0, 0, 6, 0, 1, 0, 4, 0, 0, 0, 13, 0, 0, 0, 6, 0, 1, 0, 4, 0, 0]");
    }

    @Test
    public void test19251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19251");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = fieldVisitor16.visitAnnotation("", false);
        fieldVisitor16.visitEnd();
        fieldVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = fieldVisitor16.visitAnnotation("\001", true);
        fieldVisitor16.visitEnd();
        org.mockito.asm.Attribute attribute26 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor16.visitAttribute(attribute26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(annotationVisitor24);
    }

    @Test
    public void test19252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19252");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        java.lang.String[] strArray10 = classReader4.getInterfaces();
        int int11 = classReader4.header;
        int int12 = classReader4.header;
        int int14 = classReader4.readUnsignedShort(7);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test19253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19253");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readByte((int) (byte) 10);
        int int8 = classReader4.header;
        java.lang.String str9 = classReader4.getSuperName();
        java.lang.String str10 = classReader4.getSuperName();
        short short12 = classReader4.readShort(0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + short12 + "' != '" + (short) -13570 + "'", short12 == (short) -13570);
    }

    @Test
    public void test19254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19254");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        int int5 = classWriter1.newField("", "", "hi!");
        int int8 = classWriter1.newNameType("", "");
        classWriter1.visitEnd();
        byte[] byteArray10 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray10);
        byte[] byteArray12 = classReader11.b;
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 9, 0, 2, 0, 4, 12, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 9, 0, 2, 0, 4, 12, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test19255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19255");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray3, 7, (int) ' ');
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray3, 11, (-889275714));
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray3, (int) (byte) 10, 2);
        int int15 = classReader14.getAccess();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test19256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19256");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        methodVisitor69.visitMethodInsn(8, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitIntInsn(0, 8);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotation("\007\000", true);
        methodVisitor69.visitIincInsn(100664320, 14);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor86);
    }

    @Test
    public void test19257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19257");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        methodVisitor69.visitMethodInsn((int) (byte) -1, "hi!", "", "hi!");
        methodVisitor69.visitTypeInsn((int) (short) -1, "\007\000");
        methodVisitor69.visitVarInsn(223337, 20);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test19258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19258");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = annotationVisitor4.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor8 = annotationVisitor4.visitArray("hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor11 = annotationVisitor8.visitAnnotation("hi!", "");
        annotationVisitor11.visitEnum("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = annotationVisitor11.visitArray("hi!");
        annotationVisitor11.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = annotationVisitor11.visitArray("");
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = annotationVisitor11.visitAnnotation("\001", "\007\000");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitInnerClass("", "hi!", "hi!", 10);
        int int33 = classWriter26.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        classWriter40.visitSource("hi!", "");
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter40.visit((int) 'a', (int) '4', "", "hi!", "", strArray56);
        byte[] byteArray58 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader59.accept((org.mockito.asm.ClassVisitor) classWriter61, 8);
        long long65 = classReader59.readLong(7);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter67.visitAnnotation("", true);
        int int73 = classWriter67.newNameType("hi!", "hi!");
        classReader59.accept((org.mockito.asm.ClassVisitor) classWriter67, (int) (byte) 0);
        java.lang.String str76 = classReader59.getClassName();
        java.lang.String str77 = classReader59.getSuperName();
        java.lang.String[] strArray78 = classReader59.getInterfaces();
        classWriter26.visit((int) ' ', 0, "", "\007\000", "hi!", strArray78);
        int int81 = classWriter26.newUTF8("");
        classWriter26.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = classWriter26.visitAnnotation("", false);
        classWriter26.visitSource("\001", "");
        classWriter26.visitInnerClass("\007\000", "\007\000", "\007\000", 20);
        byte[] byteArray94 = classWriter26.toByteArray();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor11.visit("hi!", (java.lang.Object) classWriter26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@33fa25cf");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor8);
        org.junit.Assert.assertNotNull(annotationVisitor11);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 6989595422067222633L + "'", long65 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor70);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-54, -2, -70, -66, 0, 0, 0, 32, 0, 13, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 3, 7, -64, -128, 1, 0, 1, 1, 7, 0, 5, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 2, 0, 4, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 5, 0, 8, 0, 0, 0, 2, 0, 5, 0, 9, 0, 0, 0, 2, 0, 6, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 18, 0, 2, 0, 2, 0, 4, 0, 3, 0, 10, 0, 7, 0, 7, 0, 5, 0, 20, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test19259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19259");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitInnerClass("", "", "hi!", (int) (byte) 0);
        int int11 = classWriter1.newUTF8("\007\000");
        int int16 = classWriter1.newMethod("\001", "", "\007\000", false);
        classWriter1.visitSource("", "hi!");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
    }

    @Test
    public void test19260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19260");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        java.lang.String[] strArray24 = classReader21.getInterfaces();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        short short28 = classReader21.readShort((int) (byte) 1);
        java.lang.String str29 = classReader21.getClassName();
        int int30 = classReader21.header;
        int int31 = classReader21.getAccess();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader21, 1);
        int int34 = classReader21.getAccess();
        java.lang.String str35 = classReader21.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -326 + "'", short28 == (short) -326);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 73 + "'", int30 == 73);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test19261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19261");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        java.lang.String[] strArray24 = classReader21.getInterfaces();
        java.lang.String[] strArray25 = classReader21.getInterfaces();
        int int26 = classReader21.getAccess();
        long long28 = classReader21.readLong((int) ' ');
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter30.visitAnnotation("", true);
        classWriter30.visitSource("", "");
        int int39 = classWriter30.newNameType("hi!", "hi!");
        classWriter30.visitInnerClass("", "hi!", "hi!", 254);
        classWriter30.visitOuterClass("hi!", "", "\007\000");
        classReader21.accept((org.mockito.asm.ClassVisitor) classWriter30, 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter30.visitAnnotation("", false);
        int int55 = classWriter30.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter61.visitEnd();
        byte[] byteArray63 = classWriter61.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray63, (int) (byte) -1, 100);
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray63);
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray63);
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray63, (int) (short) 3, (int) (byte) 1);
        java.lang.String[] strArray72 = classReader71.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor73 = classWriter30.visitMethod((int) (short) 5203, "", "\007\000", "\001", strArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 2");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 7022366853158731786L + "'", long28 == 7022366853158731786L);
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray72);
    }

    @Test
    public void test19262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19262");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter17 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter17.visitEnd();
        classWriter17.visitSource("hi!", "");
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter17.visit((int) 'a', (int) '4', "", "hi!", "", strArray33);
        byte[] byteArray35 = classWriter17.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter17.visitAnnotation("", false);
        byte[] byteArray39 = classWriter17.toByteArray();
        org.mockito.asm.ClassReader classReader40 = new org.mockito.asm.ClassReader(byteArray39);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader40, 2);
        java.lang.String str43 = classReader40.getClassName();
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter(classReader40, 16778088);
        int int47 = classWriter45.newClass("\007\000");
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int58 = classWriter53.newMethod("", "", "hi!", false);
        classWriter53.visitEnd();
        int int61 = classWriter53.newClass("");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter68.visitEnd();
        byte[] byteArray70 = classWriter68.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        java.lang.String[] strArray72 = classReader71.getInterfaces();
        int int74 = classReader71.readInt((int) (byte) 0);
        java.lang.String str75 = classReader71.getSuperName();
        java.lang.String[] strArray76 = classReader71.getInterfaces();
        java.lang.String[] strArray77 = classReader71.getInterfaces();
        classWriter53.visit(2, (-1), "hi!", "hi!", "hi!", strArray77);
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter45.visitMethod((-1), "\007\000", "", "\007\000", strArray77);
        methodVisitor79.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            int int81 = classWriter1.newConst((java.lang.Object) methodVisitor79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.MethodWriter@f5b1817");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 5 + "'", int58 == 5);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-889275714) + "'", int74 == (-889275714));
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor79);
    }

    @Test
    public void test19263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19263");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        java.lang.String str34 = classReader20.getClassName();
        int int36 = classReader20.readUnsignedShort(114);
        byte[] byteArray37 = classReader20.b;
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 256 + "'", int36 == 256);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test19264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19264");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "\007\000");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitParameterAnnotation(0, "", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test19265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19265");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 254);
        methodVisitor69.visitInsn(51966);
        methodVisitor69.visitTypeInsn((int) (byte) -1, "hi!");
        methodVisitor69.visitVarInsn(73, 27);
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        methodVisitor69.visitTryCatchBlock(label88, label89, label90, "\001");
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMethodInsn(3, "", "hi!", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test19266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19266");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(5, "hi!", "hi!", "");
        methodVisitor69.visitMultiANewArrayInsn("", 21353);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotation("\001", true);
        methodVisitor69.visitIntInsn(1792, 16784210);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test19267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19267");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        int int59 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int70 = classWriter65.newMethod("", "", "hi!", false);
        classWriter65.visitEnd();
        classWriter65.visitInnerClass("\007\000", "", "\007\000", 254);
        org.mockito.asm.FieldVisitor fieldVisitor77 = classWriter1.visitField(14, "\007\000", "", "hi!", (java.lang.Object) "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = fieldVisitor77.visitAnnotation("\001", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = fieldVisitor77.visitAnnotation("\001", true);
        org.mockito.asm.Attribute attribute84 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor77.visitAttribute(attribute84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test19268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19268");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        int int28 = classWriter1.newClass("hi!");
        int int30 = classWriter1.newClass("hi!");
        classWriter1.visitInnerClass("hi!", "", "hi!", 1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("", true);
        java.lang.String[] strArray43 = null;
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter1.visitMethod((int) (short) 1792, "\007\000", "", "hi!", strArray43);
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("\007\000", "");
        int int53 = classWriter1.newNameType("", "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
    }

    @Test
    public void test19269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19269");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "hi!");
        methodVisitor69.visitMaxs((int) '4', 48640);
        methodVisitor69.visitFieldInsn((int) (short) 2, "", "\001", "");
        methodVisitor69.visitMaxs(872, (int) (short) 24948);
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test19270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19270");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.ClassWriter classWriter75 = new org.mockito.asm.ClassWriter(2);
        classWriter75.visitEnd();
        classWriter75.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLdcInsn((java.lang.Object) classWriter75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassWriter@1b144f08");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
    }

    @Test
    public void test19271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19271");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getSuperName();
        java.lang.String[] strArray29 = classReader24.getInterfaces();
        byte[] byteArray30 = classReader24.b;
        java.lang.String str31 = classReader24.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = classReader24.readUnsignedShort(1919222016);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test19272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19272");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter14.visitEnd();
        classWriter14.visitSource("hi!", "");
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter14.visit((int) 'a', (int) '4', "", "hi!", "", strArray30);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        classWriter38.visitSource("hi!", "");
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter38.visit((int) 'a', (int) '4', "", "hi!", "", strArray54);
        classWriter14.visit((int) (byte) 1, 100, "", "hi!", "", strArray54);
        classWriter14.visitInnerClass("hi!", "hi!", "", (int) (short) 10);
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter68.visitEnd();
        byte[] byteArray70 = classWriter68.toByteArray();
        org.mockito.asm.ClassReader classReader71 = new org.mockito.asm.ClassReader(byteArray70);
        java.lang.String[] strArray72 = classReader71.getInterfaces();
        java.lang.String str73 = classReader71.getSuperName();
        long long75 = classReader71.readLong((int) (byte) 0);
        java.lang.String[] strArray76 = classReader71.getInterfaces();
        classWriter14.visit(29285, 13, "hi!", "", "", strArray76);
        classWriter1.visit((-1161953280), 1751720193, "", "hi!", "hi!", strArray76);
        int int80 = classWriter1.newUTF8("hi!");
        int int84 = classWriter1.newField("\001", "\007\000", "\007\000");
        classWriter1.visitSource("\001", "hi!");
        int int91 = classWriter1.newField("\001", "", "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-3819410108757049344L) + "'", long75 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 12 + "'", int91 == 12);
    }

    @Test
    public void test19273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19273");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(256);
        classWriter1.visitOuterClass("\007\000", "", "\007\000");
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter11.visitEnd();
        classWriter11.visitSource("hi!", "");
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter11.visit((int) 'a', (int) '4', "", "hi!", "", strArray27);
        byte[] byteArray29 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray29);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader30.accept((org.mockito.asm.ClassVisitor) classWriter32, 8);
        int int36 = classReader30.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        classWriter38.visitSource("hi!", "");
        classWriter38.visitEnd();
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        classWriter38.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = classWriter38.visitAnnotation("hi!", true);
        classWriter38.visitEnd();
        byte[] byteArray56 = classWriter38.toByteArray();
        byte[] byteArray57 = classWriter38.toByteArray();
        int int59 = classWriter38.newClass("");
        classReader30.accept((org.mockito.asm.ClassVisitor) classWriter38, (int) (byte) 0);
        int int62 = classReader30.getAccess();
        byte[] byteArray63 = classReader30.b;
        byte[] byteArray64 = classReader30.b;
        java.lang.String str65 = classReader30.getClassName();
        byte[] byteArray66 = classReader30.b;
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        java.lang.String[] strArray68 = classReader67.getInterfaces();
        java.lang.String[] strArray69 = classReader67.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor70 = classWriter1.visitMethod((int) (short) 7, "", "\001", "\007\000", strArray69);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 256 + "'", int36 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor54);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(methodVisitor70);
    }

    @Test
    public void test19274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19274");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor35 = classWriter22.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = annotationVisitor35.visitAnnotation("hi!", "hi!");
        annotationVisitor35.visitEnum("\001", "\001", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor35);
        org.junit.Assert.assertNotNull(annotationVisitor38);
    }

    @Test
    public void test19275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19275");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("", false);
        int int23 = classWriter1.newUTF8("");
        classWriter1.visitInnerClass("\007\000", "", "\001", 13);
        classWriter1.visitSource("\007\000", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter1.visitAnnotation("\007\000", true);
        annotationVisitor34.visitEnd();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor34);
    }

    @Test
    public void test19276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19276");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        int int25 = classReader21.readUnsignedShort(8);
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 10);
        classWriter27.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        int int46 = classWriter37.newMethod("", "hi!", "", false);
        int int48 = classWriter37.newClass("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = classWriter37.visitAnnotation("\001", false);
        org.mockito.asm.FieldVisitor fieldVisitor52 = classWriter27.visitField(20, "", "hi!", "", (java.lang.Object) "\001");
        classWriter27.visitInnerClass("hi!", "\001", "", 80);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(fieldVisitor52);
    }

    @Test
    public void test19277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19277");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 7);
        int int28 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter38.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        byte[] byteArray52 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        java.lang.String[] strArray54 = classReader53.getInterfaces();
        int int55 = classReader53.getAccess();
        int int57 = classReader53.readUnsignedShort(4);
        int int59 = classReader53.readByte(5);
        java.lang.String[] strArray60 = classReader53.getInterfaces();
        classWriter38.visit(2, (int) (short) -1, "", "", "hi!", strArray60);
        classWriter1.visit(7, 73, "hi!", "", "hi!", strArray60);
        classWriter1.visitSource("hi!", "hi!");
        int int67 = classWriter1.newUTF8("\007\000");
        int int69 = classWriter1.newClass("");
        int int71 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
    }

    @Test
    public void test19278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19278");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitOuterClass("", "\001", "hi!");
        classWriter1.visitSource("\001", "");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", 16784210);
        org.junit.Assert.assertNotNull(strArray17);
    }

    @Test
    public void test19279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19279");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter1.visitOuterClass("\001", "", "\007\000");
        int int7 = classWriter1.newUTF8("");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
    }

    @Test
    public void test19280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19280");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(25966, (int) (short) -326);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19281");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        byte[] byteArray23 = classWriter21.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        classWriter1.visit(5, (int) (short) 10, "", "hi!", "hi!", strArray25);
        int int29 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("", "", "", 47806);
        int int36 = classWriter1.newUTF8("");
        classWriter1.visitInnerClass("hi!", "", "hi!", 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter1.visitAnnotation("\001", true);
        classWriter1.visitOuterClass("\007\000", "hi!", "hi!");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor44);
    }

    @Test
    public void test19282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19282");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        byte[] byteArray5 = classReader4.b;
        byte[] byteArray6 = classReader4.b;
        int int7 = classReader4.header;
        short short9 = classReader4.readShort((int) (short) 1);
        long long11 = classReader4.readLong((int) (short) 0);
        java.lang.String[] strArray12 = classReader4.getInterfaces();
        int int13 = classReader4.getAccess();
        java.lang.String[] strArray14 = classReader4.getInterfaces();
        int int16 = classReader4.readInt(0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + short9 + "' != '" + (short) -326 + "'", short9 == (short) -326);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3819410108757049344L) + "'", long11 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-889275714) + "'", int16 == (-889275714));
    }

    @Test
    public void test19283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19283");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn(103);
        methodVisitor69.visitMultiANewArrayInsn("\001", 34013185);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test19284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19284");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classReader21.b;
        short short28 = classReader21.readShort(10);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = classReader21.readByte(1281);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 256 + "'", short28 == (short) 256);
    }

    @Test
    public void test19285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19285");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 254);
        methodVisitor69.visitInsn(51966);
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("\001", false);
        org.mockito.asm.Label label88 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test19286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19286");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitFieldInsn(47806, "hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = methodVisitor69.visitAnnotation("\001", false);
        org.mockito.asm.Label label93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLabel(label93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(annotationVisitor92);
    }

    @Test
    public void test19287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19287");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        int int9 = classReader4.readUnsignedShort(0);
        byte[] byteArray10 = classReader4.b;
        org.mockito.asm.ClassReader classReader13 = new org.mockito.asm.ClassReader(byteArray10, 0, (int) (short) 28526);
        org.mockito.asm.ClassReader classReader14 = new org.mockito.asm.ClassReader(byteArray10);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = classReader14.readByte((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51966 + "'", int9 == 51966);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test19288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19288");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitVarInsn(14, 1399416686);
        methodVisitor69.visitIntInsn(3, 12);
        methodVisitor69.visitMultiANewArrayInsn("hi!", 196613);
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label label88 = null;
        methodVisitor69.visitTryCatchBlock(label86, label87, label88, "");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor94 = methodVisitor69.visitParameterAnnotation(48640, "\001", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19289");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        long long31 = classReader24.readLong(0);
        int int32 = classReader24.header;
        byte[] byteArray33 = classReader24.b;
        byte[] byteArray34 = classReader24.b;
        byte[] byteArray35 = classReader24.b;
        int int36 = classReader24.getAccess();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3819410108757049247L) + "'", long31 == (-3819410108757049247L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 103 + "'", int32 == 103);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
    }

    @Test
    public void test19290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19290");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = annotationVisitor82.visitAnnotation("\007\000", "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test19291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19291");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        int int26 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitSource("hi!", "");
        byte[] byteArray30 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(256);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter36.visitAnnotation("\007\000", false);
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter1.visitField((int) (short) 1024, "\001", "\001", "\007\000", (java.lang.Object) false);
        org.mockito.asm.Attribute attribute41 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor40.visitAttribute(attribute41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 12, 0, 1, 0, 1, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertNotNull(fieldVisitor40);
    }

    @Test
    public void test19292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19292");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader35, 196613);
        java.lang.String str38 = classReader35.getSuperName();
        long long40 = classReader35.readLong((int) (byte) 0);
        int int42 = classReader35.readUnsignedShort(17);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = classReader35.readByte((int) (short) 13312);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-3819410108757049247L) + "'", long40 == (-3819410108757049247L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
    }

    @Test
    public void test19293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19293");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-1));
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitEnd();
        int int10 = classWriter1.newField("hi!", "\001", "\007\000");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter16.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("hi!", "");
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter26.visit((int) 'a', (int) '4', "", "hi!", "", strArray42);
        classWriter16.visit((int) ' ', 48640, "hi!", "", "", strArray42);
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter16.visitAnnotation("hi!", true);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter1.visitField(196613, "\007\000", "", "", (java.lang.Object) "hi!");
        classWriter1.visitOuterClass("hi!", "", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter1.visitAnnotation("\001", false);
        org.mockito.asm.ClassWriter classWriter58 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter58.visitEnd();
        byte[] byteArray60 = classWriter58.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        int int63 = classReader61.readUnsignedShort((int) (short) 0);
        java.lang.String str64 = classReader61.getSuperName();
        short short66 = classReader61.readShort(5);
        java.lang.String str67 = classReader61.getSuperName();
        java.lang.String[] strArray68 = classReader61.getInterfaces();
        java.lang.String str69 = classReader61.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor55.visit("\007\000", (java.lang.Object) str69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 51966 + "'", int63 == 51966);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + short66 + "' != '" + (short) 0 + "'", short66 == (short) 0);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test19294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19294");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        int int37 = classReader35.readByte(10);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter(classReader35, 8);
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter(classReader35, 33);
        byte[] byteArray42 = classReader35.b;
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader35, 131073);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
    }

    @Test
    public void test19295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19295");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        org.mockito.asm.ClassWriter classWriter13 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter13.visitEnd();
        classWriter13.visitSource("hi!", "");
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter13.visit((int) 'a', (int) '4', "", "hi!", "", strArray29);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter37.visit((int) 'a', (int) '4', "", "hi!", "", strArray53);
        classWriter13.visit((int) (byte) 1, 100, "", "hi!", "", strArray53);
        classWriter1.visit((int) '4', (int) (short) 100, "", "", "", strArray53);
        int int59 = classWriter1.newNameType("hi!", "");
        org.mockito.asm.ClassWriter classWriter65 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int70 = classWriter65.newMethod("", "", "hi!", false);
        classWriter65.visitEnd();
        classWriter65.visitInnerClass("\007\000", "", "\007\000", 254);
        org.mockito.asm.FieldVisitor fieldVisitor77 = classWriter1.visitField(14, "\007\000", "", "hi!", (java.lang.Object) "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = fieldVisitor77.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = fieldVisitor77.visitAnnotation("hi!", true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test19296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19296");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        int int9 = classReader4.readUnsignedShort(0);
        int int10 = classReader4.header;
        int int12 = classReader4.getItem(0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 51966 + "'", int9 == 51966);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test19297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19297");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        byte[] byteArray27 = classReader24.b;
        java.lang.String str28 = classReader24.getClassName();
        short short30 = classReader24.readShort((int) (short) 10);
        byte[] byteArray31 = classReader24.b;
        java.lang.String[] strArray32 = classReader24.getInterfaces();
        long long34 = classReader24.readLong((int) (byte) 100);
        java.lang.String[] strArray35 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        byte[] byteArray39 = classWriter37.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor42 = classWriter37.visitAnnotation("", true);
        classWriter37.visitOuterClass("", "", "hi!");
        int int51 = classWriter37.newMethod("", "hi!", "hi!", true);
        int int55 = classWriter37.newField("hi!", "", "hi!");
        classWriter37.visitInnerClass("hi!", "hi!", "", 7);
        classWriter37.visitOuterClass("hi!", "hi!", "");
        classWriter37.visitOuterClass("\007\000", "hi!", "\007\000");
        classWriter37.visitEnd();
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter37, 151060483);
        byte[] byteArray72 = classReader24.b;
        // The following exception was thrown during execution in test generation
        try {
            short short74 = classReader24.readShort(553713664);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 553713664");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + short30 + "' != '" + (short) 256 + "'", short30 == (short) 256);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 8029481630357783296L + "'", long34 == 8029481630357783296L);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor42);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 6 + "'", int51 == 6);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test19298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19298");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        int int29 = classWriter1.newUTF8("hi!");
        int int33 = classWriter1.newField("\007\000", "hi!", "\007\000");
        int int36 = classWriter1.newNameType("\007\000", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter1.visitAnnotation("hi!", true);
        annotationVisitor39.visitEnum("hi!", "\007\000", "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 11 + "'", int36 == 11);
        org.junit.Assert.assertNotNull(annotationVisitor39);
    }

    @Test
    public void test19299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19299");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) -1, (int) (byte) -1);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(254, 0);
        methodVisitor69.visitVarInsn(26729, 83);
        methodVisitor69.visitIincInsn((int) (short) 2049, 25);
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        org.mockito.asm.Label label92 = null;
        methodVisitor69.visitTryCatchBlock(label90, label91, label92, "\007\000");
        org.mockito.asm.Attribute attribute95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(annotationVisitor80);
    }

    @Test
    public void test19300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19300");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader24, 5);
        int int28 = classReader24.header;
        int int30 = classReader24.readInt(11);
        java.lang.String str31 = classReader24.getSuperName();
        // The following exception was thrown during execution in test generation
        try {
            int int33 = classReader24.getItem(22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 103 + "'", int28 == 103);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 223337 + "'", int30 == 223337);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test19301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19301");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((-889275714));
        int int3 = classWriter1.newClass("\001");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test19302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19302");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(28);
        int int3 = classWriter1.newUTF8("");
        classWriter1.visitOuterClass("\007\000", "\001", "\001");
        org.mockito.asm.Attribute attribute8 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test19303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19303");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String str25 = classReader24.getSuperName();
        int int27 = classReader24.readInt(10);
        short short29 = classReader24.readShort(11);
        java.lang.String str30 = classReader24.getClassName();
        int int32 = classReader24.readInt((int) (short) 9);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int39 = classWriter34.newMethod("", "", "hi!", false);
        classWriter34.visitEnd();
        int int42 = classWriter34.newClass("");
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        byte[] byteArray50 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassReader classReader55 = new org.mockito.asm.ClassReader(byteArray50, 2, (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor56 = classWriter34.visitField((int) (short) 1, "\007\000", "hi!", "", (java.lang.Object) 2);
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter34, 16777223);
        java.lang.String[] strArray59 = classReader24.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            long long61 = classReader24.readLong((int) (short) 28526);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16778088 + "'", int27 == 16778088);
        org.junit.Assert.assertTrue("'" + short29 + "' != '" + (short) 3 + "'", short29 == (short) 3);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 151060483 + "'", int32 == 151060483);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor56);
        org.junit.Assert.assertNotNull(strArray59);
    }

    @Test
    public void test19304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19304");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(141);
        int int3 = classWriter1.newUTF8("");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test19305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19305");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        int int36 = classReader20.readByte((int) '4');
        int int37 = classReader20.getAccess();
        int int38 = classReader20.getAccess();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) 26978);
        classWriter40.visitSource("\001", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20 + "'", int36 == 20);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
    }

    @Test
    public void test19306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19306");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("\007\000", (int) (byte) -1);
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(0, "\007\000", "", "\007\000");
        methodVisitor69.visitMaxs(114, 1763770624);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test19307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19307");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("", "\001", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("\007\000", "hi!", "\007\000");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test19308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19308");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "\007\000");
        int int32 = classWriter1.newUTF8("\007\000");
        int int37 = classWriter1.newMethod("\007\000", "\007\000", "\007\000", false);
        classWriter1.visitInnerClass("", "", "hi!", 1869967971);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
    }

    @Test
    public void test19309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19309");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        methodVisitor69.visitMaxs(14, 8);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn((int) (short) 10, "\007\000", "\007\000", "hi!");
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test19310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19310");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit((int) (byte) 1, 100, "", "hi!", "", strArray41);
        classWriter1.visitInnerClass("hi!", "hi!", "", (int) (short) 10);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        byte[] byteArray57 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        java.lang.String[] strArray59 = classReader58.getInterfaces();
        java.lang.String str60 = classReader58.getSuperName();
        long long62 = classReader58.readLong((int) (byte) 0);
        java.lang.String[] strArray63 = classReader58.getInterfaces();
        classWriter1.visit(29285, 13, "hi!", "", "", strArray63);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-3819410108757049344L) + "'", long62 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray63);
    }

    @Test
    public void test19311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19311");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("\007\000", false);
        org.mockito.asm.Attribute attribute18 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
    }

    @Test
    public void test19312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19312");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str37 = classReader20.getClassName();
        byte[] byteArray38 = classReader20.b;
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classReader20.getItem(110);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 110");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
    }

    @Test
    public void test19313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19313");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitVarInsn(8, (-1));
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitFieldInsn(0, "", "hi!", "");
        methodVisitor69.visitIntInsn(196613, 202);
        methodVisitor69.visitMaxs((int) (short) 2, 24832);
        methodVisitor69.visitFieldInsn(173, "\007\000", "\001", "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test19314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19314");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(3);
        classWriter1.visitOuterClass("hi!", "hi!", "");
        classWriter1.visitOuterClass("\007\000", "\001", "hi!");
        classWriter1.visitSource("\007\000", "");
    }

    @Test
    public void test19315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19315");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        long long31 = classReader24.readLong(0);
        int int32 = classReader24.header;
        byte[] byteArray33 = classReader24.b;
        byte[] byteArray34 = classReader24.b;
        int int35 = classReader24.getAccess();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3819410108757049247L) + "'", long31 == (-3819410108757049247L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 103 + "'", int32 == 103);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
    }

    @Test
    public void test19316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19316");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn(3, "hi!", "", "");
        methodVisitor69.visitInsn((-1));
        methodVisitor69.visitTypeInsn((int) (short) 1792, "\007\000");
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        methodVisitor69.visitTryCatchBlock(label80, label81, label82, "hi!");
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "");
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19317");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        int int35 = classReader20.readInt(13);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) -326);
        byte[] byteArray38 = classWriter37.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter37.visitAnnotation("\007\000", true);
        org.mockito.asm.ClassWriter classWriter47 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor50 = classWriter47.visitAnnotation("", true);
        int int53 = classWriter47.newNameType("hi!", "hi!");
        classWriter47.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        classWriter47.visitSource("hi!", "\007\000");
        int int63 = classWriter47.newClass("\001");
        classWriter47.visitInnerClass("\007\000", "\001", "hi!", 0);
        classWriter47.visitOuterClass("", "\001", "");
        classWriter47.visitInnerClass("\007\000", "hi!", "\001", 254);
        org.mockito.asm.FieldVisitor fieldVisitor78 = classWriter37.visitField(22, "hi!", "\001", "hi!", (java.lang.Object) "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1751720193 + "'", int35 == 1751720193);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 8 + "'", int63 == 8);
        org.junit.Assert.assertNotNull(fieldVisitor78);
    }

    @Test
    public void test19318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19318");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        int int28 = classWriter1.newClass("hi!");
        int int30 = classWriter1.newClass("hi!");
        classWriter1.visitInnerClass("hi!", "", "hi!", 1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor38 = classWriter1.visitAnnotation("", true);
        java.lang.String[] strArray43 = null;
        org.mockito.asm.MethodVisitor methodVisitor44 = classWriter1.visitMethod((int) (short) 1792, "\007\000", "", "hi!", strArray43);
        int int49 = classWriter1.newMethod("\001", "", "hi!", true);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter55.visitEnd();
        classWriter55.visitSource("hi!", "");
        classWriter55.visitEnd();
        classWriter55.visitEnd();
        byte[] byteArray62 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader63 = new org.mockito.asm.ClassReader(byteArray62);
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray62);
        long long66 = classReader64.readLong(0);
        java.lang.String[] strArray67 = classReader64.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor68 = classWriter1.visitMethod((int) (byte) 10, "\001", "hi!", "", strArray67);
        methodVisitor68.visitMethodInsn(190, "\001", "", "hi!");
        methodVisitor68.visitVarInsn(88, 1869967971);
        org.mockito.asm.Label label77 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor68.visitLabel(label77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 5 + "'", int30 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor38);
        org.junit.Assert.assertNotNull(methodVisitor44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-3819410108757049344L) + "'", long66 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(methodVisitor68);
    }

    @Test
    public void test19319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19319");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        java.lang.String str24 = classReader21.getClassName();
        java.lang.String str25 = classReader21.getSuperName();
        int int26 = classReader21.header;
        short short28 = classReader21.readShort(13);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = classReader21.readUnsignedShort(29813);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 73 + "'", int26 == 73);
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 26729 + "'", short28 == (short) 26729);
    }

    @Test
    public void test19320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19320");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(1280);
        int int6 = classWriter1.newMethod("\007\000", "\007\000", "", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
    }

    @Test
    public void test19321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19321");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) -1, (int) (byte) -1);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitVarInsn(7, (int) (short) -17730);
        methodVisitor69.visitIntInsn(20, (int) (short) -1);
        methodVisitor69.visitMethodInsn(51966, "\001", "hi!", "\007\000");
        methodVisitor69.visitCode();
        org.mockito.asm.Label label92 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn(262147, label92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
    }

    @Test
    public void test19322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19322");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        java.lang.String str34 = classReader20.getClassName();
        java.lang.String[] strArray35 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) -1);
        int int39 = classReader20.readInt(28);
        java.lang.String[] strArray40 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader20, 16);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) 1280);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = classReader20.getItem(1536);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1536");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1399416686 + "'", int39 == 1399416686);
        org.junit.Assert.assertNotNull(strArray40);
    }

    @Test
    public void test19323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19323");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(7, (-21316096));
        methodVisitor69.visitTypeInsn((int) '4', "");
        methodVisitor69.visitIntInsn(6, 52);
        org.mockito.asm.AnnotationVisitor annotationVisitor86 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitVarInsn((int) (short) -17730, 3);
        org.mockito.asm.Label label93 = null;
        int[] intArray96 = new int[] { 1280, 38 };
        org.mockito.asm.Label[] labelArray97 = new org.mockito.asm.Label[] {};
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLookupSwitchInsn(label93, intArray96, labelArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor86);
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[1280, 38]");
        org.junit.Assert.assertNotNull(labelArray97);
    }

    @Test
    public void test19324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19324");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String str9 = classReader4.getSuperName();
        byte[] byteArray10 = classReader4.b;
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray10);
        java.lang.String[] strArray12 = classReader11.getInterfaces();
        short short14 = classReader11.readShort(4);
        int int15 = classReader11.header;
        int int16 = classReader11.getAccess();
        int int17 = classReader11.getAccess();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 0 + "'", short14 == (short) 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test19325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19325");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitSource("\007\000", "");
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter24.visitEnd();
        classWriter24.visitSource("hi!", "");
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter24.visit((int) 'a', (int) '4', "", "hi!", "", strArray40);
        byte[] byteArray42 = classWriter24.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter24.visitAnnotation("", false);
        byte[] byteArray46 = classWriter24.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter(classReader47, 2);
        java.lang.String str50 = classReader47.getClassName();
        org.mockito.asm.ClassWriter classWriter52 = new org.mockito.asm.ClassWriter(classReader47, 16778088);
        classWriter52.visitEnd();
        classWriter52.visitSource("\007\000", "");
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        byte[] byteArray64 = classWriter62.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        java.lang.String[] strArray66 = classReader65.getInterfaces();
        int int67 = classReader65.getAccess();
        int int69 = classReader65.readUnsignedShort(4);
        int int71 = classReader65.readByte(5);
        java.lang.String[] strArray72 = classReader65.getInterfaces();
        int int74 = classReader65.getItem(0);
        java.lang.String[] strArray75 = classReader65.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor76 = classWriter52.visitMethod(0, "", "\001", "hi!", strArray75);
        org.mockito.asm.ClassWriter classWriter82 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter82.visitEnd();
        byte[] byteArray84 = classWriter82.toByteArray();
        org.mockito.asm.ClassReader classReader85 = new org.mockito.asm.ClassReader(byteArray84);
        int int87 = classReader85.readByte(1);
        java.lang.String[] strArray88 = classReader85.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor89 = classWriter52.visitMethod(104, "\001", "", "hi!", strArray88);
        classWriter1.visit(190, 21353, "\007\000", "", "", strArray88);
        classWriter1.visitSource("\001", "\001");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(methodVisitor76);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 254 + "'", int87 == 254);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(methodVisitor89);
    }

    @Test
    public void test19326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19326");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitTypeInsn(13, "hi!");
        methodVisitor69.visitMaxs((int) (short) 0, (int) '4');
        methodVisitor69.visitIincInsn((int) (short) 4, 16779008);
        methodVisitor69.visitIntInsn((int) (short) 9, 1399416686);
        methodVisitor69.visitFieldInsn(202, "\001", "", "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 0, "\001");
        org.mockito.asm.Label label94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber((int) (short) 10, label94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19327");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMultiANewArrayInsn("\007\000", 1751720193);
        methodVisitor69.visitInsn(29285);
        methodVisitor69.visitVarInsn((int) (short) 10, 0);
        methodVisitor69.visitIntInsn(12, (int) (short) 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitAnnotation("\001", true);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor90);
    }

    @Test
    public void test19328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19328");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        methodVisitor69.visitMethodInsn(8, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIntInsn((int) (short) 1792, 14);
        methodVisitor69.visitTypeInsn((int) (short) 1792, "");
        methodVisitor69.visitMethodInsn(190, "", "", "\007\000");
        methodVisitor69.visitMultiANewArrayInsn("\001", (int) ' ');
        methodVisitor69.visitEnd();
        methodVisitor69.visitMethodInsn(1953854053, "hi!", "\007\000", "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor78);
    }

    @Test
    public void test19329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19329");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "" };
        classWriter1.visit((int) (byte) 100, 7, "", "", "hi!", strArray25);
        int int29 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitOuterClass("hi!", "", "\007\000");
        int int35 = classWriter1.newClass("\001");
        int int40 = classWriter1.newMethod("", "", "\007\000", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter1.visitAnnotation("", false);
        classWriter1.visitInnerClass("", "\001", "hi!", 52);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor44);
    }

    @Test
    public void test19330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19330");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        java.lang.String str29 = classReader20.getSuperName();
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader20, 47806);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter38.visitAnnotation("", true);
        classWriter38.visitOuterClass("", "", "hi!");
        int int52 = classWriter38.newMethod("", "hi!", "hi!", true);
        int int56 = classWriter38.newField("hi!", "", "hi!");
        classWriter38.visitInnerClass("hi!", "hi!", "", 7);
        classWriter38.visitOuterClass("hi!", "hi!", "");
        classWriter38.visitOuterClass("\007\000", "hi!", "\007\000");
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = classWriter38.visitAnnotation("\007\000", false);
        org.mockito.asm.ClassWriter classWriter80 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter80.visitEnd();
        byte[] byteArray82 = classWriter80.toByteArray();
        org.mockito.asm.ClassReader classReader83 = new org.mockito.asm.ClassReader(byteArray82);
        int int85 = classReader83.readUnsignedShort((int) (short) 0);
        java.lang.String str86 = classReader83.getSuperName();
        short short88 = classReader83.readShort(5);
        java.lang.String[] strArray89 = classReader83.getInterfaces();
        classWriter38.visit((-1107296256), (int) (short) 2049, "\007\000", "hi!", "", strArray89);
        classWriter31.visit(151060483, 25966, "\007\000", "hi!", "hi!", strArray89);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 51966 + "'", int85 == 51966);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + short88 + "' != '" + (short) 0 + "'", short88 == (short) 0);
        org.junit.Assert.assertNotNull(strArray89);
    }

    @Test
    public void test19331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19331");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter27 = new org.mockito.asm.ClassWriter(classReader24, 5);
        int int28 = classReader24.header;
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter30.visitEnd();
        classWriter30.visitSource("hi!", "");
        classWriter30.visitEnd();
        int int37 = classWriter30.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter30.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter30.visitAnnotation("hi!", true);
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter30, 0);
        long long47 = classReader24.readLong(0);
        java.lang.String str48 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter(classReader24, (int) (short) 26978);
        char[] charArray57 = new char[] { ' ', ' ', ' ', '4', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = classReader24.readClass(18, charArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 103 + "'", int28 == 103);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-3819410108757049247L) + "'", long47 == (-3819410108757049247L));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "   4 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "   4 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[ ,  ,  , 4,  ]");
    }

    @Test
    public void test19332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19332");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        int int38 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter44.visitEnd();
        classWriter44.visitSource("", "");
        int int51 = classWriter44.newNameType("hi!", "");
        int int55 = classWriter44.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor56 = classWriter1.visitField(65210, "", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor59 = fieldVisitor56.visitAnnotation("\001", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = fieldVisitor56.visitAnnotation("\001", false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor56);
        org.junit.Assert.assertNotNull(annotationVisitor59);
        org.junit.Assert.assertNotNull(annotationVisitor62);
    }

    @Test
    public void test19333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19333");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(5, "hi!", "", "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(1919116612);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19334");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        byte[] byteArray8 = classReader7.b;
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray8);
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray8, (int) (short) 9, (int) (short) 8449);
        int int13 = classReader12.getAccess();
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter16.visitEnd();
        classWriter16.visitSource("hi!", "");
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter16.visit((int) 'a', (int) '4', "", "hi!", "", strArray32);
        byte[] byteArray34 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader35.accept((org.mockito.asm.ClassVisitor) classWriter37, 8);
        long long41 = classReader35.readLong(7);
        org.mockito.asm.ClassWriter classWriter43 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = classWriter43.visitAnnotation("", true);
        int int49 = classWriter43.newNameType("hi!", "hi!");
        classReader35.accept((org.mockito.asm.ClassVisitor) classWriter43, (int) (byte) 0);
        int int53 = classReader35.getItem(0);
        org.mockito.asm.ClassWriter classWriter56 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter56.visitEnd();
        classWriter56.visitSource("hi!", "");
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter56.visit((int) 'a', (int) '4', "", "hi!", "", strArray72);
        byte[] byteArray74 = classWriter56.toByteArray();
        org.mockito.asm.ClassReader classReader75 = new org.mockito.asm.ClassReader(byteArray74);
        org.mockito.asm.ClassWriter classWriter77 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader75.accept((org.mockito.asm.ClassVisitor) classWriter77, 8);
        char[] charArray86 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj87 = classReader75.readConst((int) (short) 1, charArray86);
        java.lang.String str88 = classReader35.readUTF8(103, charArray86);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj89 = classReader12.readConst(2048, charArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2048");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 25966 + "'", int13 == 25966);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 6989595422067222633L + "'", long41 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj87 + "' != '" + "\007\000" + "'", obj87, "\007\000");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test19335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19335");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        short short10 = classReader4.readShort(13);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter(classReader4, 1399416686);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
    }

    @Test
    public void test19336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19336");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        java.lang.String str6 = classReader4.getSuperName();
        int int7 = classReader4.header;
        java.lang.String[] strArray8 = classReader4.getInterfaces();
        long long10 = classReader4.readLong(3);
        byte[] byteArray11 = classReader4.b;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-4755801206503243520L) + "'", long10 == (-4755801206503243520L));
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test19337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19337");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        classWriter10.visitSource("hi!", "");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter10.visit((int) 'a', (int) '4', "", "hi!", "", strArray26);
        byte[] byteArray28 = classWriter10.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter10.visitAnnotation("", false);
        byte[] byteArray32 = classWriter10.toByteArray();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        java.lang.String[] strArray42 = classReader41.getInterfaces();
        short short44 = classReader41.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter10.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = fieldVisitor45.visitAnnotation("", true);
        org.mockito.asm.FieldVisitor fieldVisitor49 = classWriter1.visitField(4, "hi!", "hi!", "hi!", (java.lang.Object) true);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "", 14);
        classWriter1.visitSource("", "\007\000");
        classWriter1.visitSource("", "hi!");
        classWriter1.visitOuterClass("", "", "hi!");
        classWriter1.visitOuterClass("\007\000", "hi!", "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -326 + "'", short44 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(fieldVisitor49);
    }

    @Test
    public void test19338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19338");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int37 = classReader20.getAccess();
        short short39 = classReader20.readShort(100);
        java.lang.String[] strArray40 = classReader20.getInterfaces();
        int int42 = classReader20.readUnsignedShort(6);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertTrue("'" + short39 + "' != '" + (short) 1280 + "'", short39 == (short) 1280);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
    }

    @Test
    public void test19339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19339");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIntInsn(57174305, 114);
        methodVisitor69.visitTypeInsn(26913, "");
        methodVisitor69.visitMultiANewArrayInsn("", 52);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test19340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19340");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMethodInsn(256, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitFieldInsn((int) ' ', "\007\000", "hi!", "hi!");
        methodVisitor69.visitInsn(132864);
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        methodVisitor69.visitTryCatchBlock(label89, label90, label91, "\007\000");
        methodVisitor69.visitIincInsn(1025, 2305);
        org.mockito.asm.Label label98 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLineNumber(202, label98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test19341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19341");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn((-1161953280));
        methodVisitor69.visitMethodInsn((-21316096), "hi!", "\007\000", "hi!");
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn(47806, (int) (byte) 10);
        methodVisitor69.visitEnd();
        methodVisitor69.visitTypeInsn((int) (byte) 100, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19342");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String str25 = classReader24.getSuperName();
        int int27 = classReader24.readInt(10);
        int int28 = classReader24.header;
        long long30 = classReader24.readLong((int) ' ');
        int int31 = classReader24.getAccess();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader24, 13);
        int int35 = classReader24.getItem(5);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16778088 + "'", int27 == 16778088);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 103 + "'", int28 == 103);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 7022366853158731786L + "'", long30 == 7022366853158731786L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 26 + "'", int35 == 26);
    }

    @Test
    public void test19343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19343");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn(48640, "hi!");
        methodVisitor69.visitFieldInsn(1, "", "\007\000", "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = methodVisitor69.visitAnnotation("\007\000", false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor95);
    }

    @Test
    public void test19344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19344");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("", "", "hi!");
        int int45 = classWriter1.newNameType("\007\000", "\001");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
    }

    @Test
    public void test19345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19345");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(33);
        classWriter1.visitSource("\007\000", "");
    }

    @Test
    public void test19346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19346");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        int int8 = classWriter1.newMethod("hi!", "", "hi!", true);
        int int12 = classWriter1.newField("", "", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        byte[] byteArray21 = classWriter19.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor24 = classWriter19.visitAnnotation("", true);
        classWriter19.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        byte[] byteArray44 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray44);
        java.lang.String[] strArray46 = classReader45.getInterfaces();
        int int47 = classReader45.getAccess();
        int int49 = classReader45.readUnsignedShort(4);
        int int51 = classReader45.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor52 = classWriter36.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!" };
        classWriter36.visit((int) (byte) 10, (-1), "", "", "", strArray60);
        classWriter19.visit((int) (short) 256, 8, "", "hi!", "hi!", strArray60);
        classWriter1.visit(8, (int) 'a', "hi!", "", "", strArray60);
        classWriter1.visitSource("", "");
        int int71 = classWriter1.newMethod("\001", "\001", "\007\000", false);
        org.mockito.asm.Attribute attribute72 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor24);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 13 + "'", int71 == 13);
    }

    @Test
    public void test19347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19347");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        java.lang.String[] strArray10 = classReader4.getInterfaces();
        int int12 = classReader4.readInt(0);
        int int13 = classReader4.header;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-889275714) + "'", int12 == (-889275714));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test19348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19348");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "hi!", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitEnd();
        byte[] byteArray33 = classWriter1.toByteArray();
        int int35 = classWriter1.newClass("hi!");
        classWriter1.visitSource("hi!", "\001");
        classWriter1.visitSource("", "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 12, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 12, 0, 2, 0, 2, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 6, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 3, 0, 8, 0, 10, 0, 0, 0, 10, 0, 1, 0, 4, 0, 4, 0, 2, 0, 100, 0, 11, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
    }

    @Test
    public void test19349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19349");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "", "", 8);
        int int33 = classWriter1.newMethod("hi!", "", "", true);
        byte[] byteArray34 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray34);
        java.lang.String str36 = classReader35.getClassName();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader35, 1751720193);
        classWriter38.visitSource("\001", "");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 12, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 12, 0, 2, 0, 2, 11, 0, 4, 0, 9, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 11, 0, 0, 0, 10, 0, 1, 0, 4, 0, 3, 0, 2, 0, 8, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test19350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19350");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", false);
        int int8 = classWriter1.newUTF8("\007\000");
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        byte[] byteArray27 = classWriter25.toByteArray();
        org.mockito.asm.ClassReader classReader28 = new org.mockito.asm.ClassReader(byteArray27);
        java.lang.String[] strArray29 = classReader28.getInterfaces();
        int int30 = classReader28.getAccess();
        int int32 = classReader28.readUnsignedShort(4);
        int int34 = classReader28.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor35 = classWriter19.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!" };
        classWriter19.visit((int) (byte) 10, (-1), "", "", "", strArray43);
        int int46 = classWriter19.newClass("hi!");
        int int48 = classWriter19.newClass("hi!");
        classWriter19.visitInnerClass("hi!", "", "hi!", 1919222016);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter19.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        byte[] byteArray64 = classWriter62.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        java.lang.String[] strArray66 = classReader65.getInterfaces();
        int int68 = classReader65.readInt((int) (byte) 0);
        java.lang.String str69 = classReader65.getSuperName();
        java.lang.String[] strArray70 = classReader65.getInterfaces();
        byte[] byteArray71 = classReader65.b;
        int int72 = classReader65.header;
        int int73 = classReader65.header;
        java.lang.String[] strArray74 = classReader65.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor75 = classWriter19.visitMethod(83, "", "hi!", "", strArray74);
        classWriter1.visit(2049, 114, "\007\000", "", "hi!", strArray74);
        classWriter1.visitInnerClass("", "\001", "", (int) (short) 8449);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor35);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-889275714) + "'", int68 == (-889275714));
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(methodVisitor75);
    }

    @Test
    public void test19351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19351");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        int int31 = classWriter29.newClass("\007\000");
        classWriter29.visitOuterClass("\001", "\007\000", "");
        org.mockito.asm.ClassWriter classWriter41 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter41.visitEnd();
        byte[] byteArray43 = classWriter41.toByteArray();
        org.mockito.asm.ClassReader classReader44 = new org.mockito.asm.ClassReader(byteArray43);
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray43);
        org.mockito.asm.ClassReader classReader46 = new org.mockito.asm.ClassReader(byteArray43);
        int int47 = classReader46.header;
        java.lang.String[] strArray48 = classReader46.getInterfaces();
        java.lang.String[] strArray49 = classReader46.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor50 = classWriter29.visitMethod((int) (short) -326, "\001", "", "", strArray49);
        int int53 = classWriter29.newNameType("\007\000", "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(methodVisitor50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 14 + "'", int53 == 14);
    }

    @Test
    public void test19352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19352");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 254);
        methodVisitor69.visitInsn(73);
        methodVisitor69.visitIincInsn((int) (byte) 100, (int) (short) -16896);
        methodVisitor69.visitMultiANewArrayInsn("\001", (int) (byte) -1);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19353");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        int int26 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitSource("hi!", "");
        byte[] byteArray30 = classWriter1.toByteArray();
        byte[] byteArray31 = classWriter1.toByteArray();
        classWriter1.visitSource("\001", "hi!");
        int int36 = classWriter1.newUTF8("\001");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 12, 0, 1, 0, 1, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 12, 0, 1, 0, 1, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
    }

    @Test
    public void test19354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19354");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitOuterClass("hi!", "", "\007\000");
        classWriter1.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        classWriter19.visitSource("hi!", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter19.visit((int) 'a', (int) '4', "", "hi!", "", strArray35);
        byte[] byteArray37 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader38.accept((org.mockito.asm.ClassVisitor) classWriter40, 8);
        long long44 = classReader38.readLong(7);
        org.mockito.asm.ClassWriter classWriter46 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter46.visitAnnotation("", true);
        int int52 = classWriter46.newNameType("hi!", "hi!");
        classReader38.accept((org.mockito.asm.ClassVisitor) classWriter46, (int) (byte) 0);
        byte[] byteArray55 = classReader38.b;
        int int56 = classReader38.header;
        byte[] byteArray57 = classReader38.b;
        int int58 = classReader38.header;
        java.lang.String[] strArray59 = classReader38.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor60 = classWriter1.visitMethod(162, "", "hi!", "\001", strArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 3");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 6989595422067222633L + "'", long44 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 73 + "'", int56 == 73);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 73 + "'", int58 == 73);
        org.junit.Assert.assertNotNull(strArray59);
    }

    @Test
    public void test19355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19355");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        int int27 = classReader21.readInt(20);
        int int29 = classReader21.readUnsignedShort(0);
        byte[] byteArray30 = classReader21.b;
        java.lang.String str31 = classReader21.getClassName();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader21, 5);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 132864 + "'", int27 == 132864);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 51966 + "'", int29 == 51966);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test19356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19356");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitIntInsn((-1161953280), 13);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMaxs(254, 38);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor85);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test19357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19357");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort(13);
        int int30 = classReader26.getItem(3);
        int int31 = classReader26.header;
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader26, 97);
        org.mockito.asm.Attribute attribute34 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter33.visitAttribute(attribute34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 1792 + "'", short28 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 17 + "'", int30 == 17);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 73 + "'", int31 == 73);
    }

    @Test
    public void test19358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19358");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("hi!", "hi!", "\007\000", 7);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("\007\000", "\001");
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test19359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19359");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitMaxs(16777223, 13);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotation("hi!", false);
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        org.mockito.asm.Label label85 = null;
        methodVisitor69.visitTryCatchBlock(label83, label84, label85, "\007\000");
        methodVisitor69.visitVarInsn(5203, 83886080);
        org.mockito.asm.Label label94 = null;
        org.mockito.asm.Label label95 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\001", "\001", "\001", label94, label95, (int) (short) 8449);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test19360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19360");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        byte[] byteArray26 = classWriter25.toByteArray();
        int int28 = classWriter25.newClass("");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        classWriter34.visitSource("hi!", "");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter34.visit((int) 'a', (int) '4', "", "hi!", "", strArray50);
        byte[] byteArray52 = classWriter34.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter34.visitAnnotation("", false);
        byte[] byteArray56 = classWriter34.toByteArray();
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        byte[] byteArray64 = classWriter62.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        java.lang.String[] strArray66 = classReader65.getInterfaces();
        short short68 = classReader65.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor69 = classWriter34.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        fieldVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = fieldVisitor69.visitAnnotation("hi!", false);
        org.mockito.asm.FieldVisitor fieldVisitor74 = classWriter25.visitField(16777223, "hi!", "hi!", "\001", (java.lang.Object) false);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = classWriter25.visitAnnotation("", true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + short68 + "' != '" + (short) -326 + "'", short68 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
        org.junit.Assert.assertNotNull(fieldVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor77);
    }

    @Test
    public void test19361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19361");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        long long26 = classReader24.readLong((int) (byte) 100);
        int int27 = classReader24.header;
        java.lang.String str28 = classReader24.getSuperName();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor33 = classWriter30.visitAnnotation("", true);
        classWriter30.visitSource("", "");
        classWriter30.visitSource("", "hi!");
        int int43 = classWriter30.newField("hi!", "hi!", "hi!");
        classWriter30.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter30.visitSource("", "");
        int int53 = classWriter30.newClass("hi!");
        classWriter30.visitInnerClass("hi!", "", "hi!", (-889275714));
        classWriter30.visitOuterClass("", "hi!", "");
        classWriter30.visitOuterClass("", "hi!", "\001");
        org.mockito.asm.ClassWriter classWriter68 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter68.visitEnd();
        classWriter68.visitSource("hi!", "");
        java.lang.String[] strArray84 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter68.visit((int) 'a', (int) '4', "", "hi!", "", strArray84);
        byte[] byteArray86 = classWriter68.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = classWriter68.visitAnnotation("", false);
        byte[] byteArray90 = classWriter68.toByteArray();
        org.mockito.asm.ClassReader classReader91 = new org.mockito.asm.ClassReader(byteArray90);
        org.mockito.asm.ClassWriter classWriter93 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray94 = new org.mockito.asm.Attribute[] {};
        classReader91.accept((org.mockito.asm.ClassVisitor) classWriter93, attributeArray94, (int) (short) 0);
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter30, attributeArray94, (int) (short) 8449);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 8029481630357783296L + "'", long26 == 8029481630357783296L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 103 + "'", int27 == 103);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(annotationVisitor33);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor89);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray94);
    }

    @Test
    public void test19362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19362");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        int int25 = classReader24.getAccess();
        short short27 = classReader24.readShort(4);
        long long29 = classReader24.readLong(13);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = classReader24.readInt((int) (short) 3073);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + short27 + "' != '" + (short) 0 + "'", short27 == (short) 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 7523580940677809920L + "'", long29 == 7523580940677809920L);
    }

    @Test
    public void test19363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19363");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        classWriter1.visitInnerClass("hi!", "hi!", "hi!", 0);
        classWriter1.visitSource("", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("", false);
        classWriter1.visitOuterClass("", "", "\001");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor26);
    }

    @Test
    public void test19364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19364");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int29 = classReader20.header;
        java.lang.String[] strArray30 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader20, 14);
        short short34 = classReader20.readShort(14);
        int int35 = classReader20.header;
        int int36 = classReader20.header;
        long long38 = classReader20.readLong((int) (short) 2);
        java.lang.String str39 = classReader20.getClassName();
        int int40 = classReader20.getAccess();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 73 + "'", int29 == 73);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) 26913 + "'", short34 == (short) 26913);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 73 + "'", int35 == 73);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 73 + "'", int36 == 73);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-4990551337073573880L) + "'", long38 == (-4990551337073573880L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
    }

    @Test
    public void test19365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19365");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newConst((java.lang.Object) (short) 0);
        classWriter1.visitInnerClass("hi!", "\007\000", "", 10);
        classWriter1.visitInnerClass("", "hi!", "", 29285);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
    }

    @Test
    public void test19366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19366");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader35, 196613);
        byte[] byteArray38 = classWriter37.toByteArray();
        int int43 = classWriter37.newMethod("", "hi!", "\001", false);
        classWriter37.visitOuterClass("\001", "\007\000", "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 11 + "'", int43 == 11);
    }

    @Test
    public void test19367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19367");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        methodVisitor69.visitIincInsn(16777223, (-21316096));
        methodVisitor69.visitEnd();
        methodVisitor69.visitIincInsn(29813, 151060483);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test19368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19368");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitFieldInsn(1, "", "hi!", "");
        methodVisitor69.visitIntInsn((-21316096), 132864);
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test19369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19369");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(52);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        classWriter10.visitSource("hi!", "");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter10.visit((int) 'a', (int) '4', "", "hi!", "", strArray26);
        byte[] byteArray28 = classWriter10.toByteArray();
        org.mockito.asm.ClassReader classReader29 = new org.mockito.asm.ClassReader(byteArray28);
        org.mockito.asm.ClassReader classReader30 = new org.mockito.asm.ClassReader(byteArray28);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter(classReader30, 256);
        int int33 = classReader30.header;
        int int35 = classReader30.readInt(11);
        java.lang.String str36 = classReader30.getClassName();
        java.lang.String[] strArray37 = classReader30.getInterfaces();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        classWriter40.visitSource("hi!", "");
        java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter40.visit((int) 'a', (int) '4', "", "hi!", "", strArray56);
        byte[] byteArray58 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader59.accept((org.mockito.asm.ClassVisitor) classWriter61, 8);
        char[] charArray70 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj71 = classReader59.readConst((int) (short) 1, charArray70);
        java.lang.Object obj72 = classReader30.readConst(1, charArray70);
        java.lang.String[] strArray73 = classReader30.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor74 = classWriter1.visitMethod(872, "", "hi!", "", strArray73);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor74.visitAnnotationDefault();
        methodVisitor74.visitIincInsn(16779603, 25966);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 73 + "'", int33 == 73);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 223337 + "'", int35 == 223337);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj71 + "' != '" + "\007\000" + "'", obj71, "\007\000");
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + "\007\000" + "'", obj72, "\007\000");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(methodVisitor74);
        org.junit.Assert.assertNotNull(annotationVisitor75);
    }

    @Test
    public void test19370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19370");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("hi!", "");
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter26.visit((int) 'a', (int) '4', "", "hi!", "", strArray42);
        byte[] byteArray44 = classWriter26.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter26.visitAnnotation("", false);
        byte[] byteArray48 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassWriter classWriter51 = new org.mockito.asm.ClassWriter(classReader49, 2);
        java.lang.String str52 = classReader49.getClassName();
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter(classReader49, 16778088);
        classWriter54.visitEnd();
        int int58 = classWriter54.newNameType("\007\000", "\007\000");
        int int59 = classWriter1.newConst((java.lang.Object) int58);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter66.visitEnd();
        classWriter66.visitSource("hi!", "");
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter66.visit((int) 'a', (int) '4', "", "hi!", "", strArray82);
        byte[] byteArray84 = classWriter66.toByteArray();
        org.mockito.asm.ClassReader classReader85 = new org.mockito.asm.ClassReader(byteArray84);
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray84);
        java.lang.String[] strArray87 = classReader86.getInterfaces();
        classWriter1.visit(1399416686, (int) (short) 24832, "\001", "\007\000", "", strArray87);
        classWriter1.visitInnerClass("hi!", "", "hi!", (-1));
        int int95 = classWriter1.newClass("\001");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 7 + "'", int95 == 7);
    }

    @Test
    public void test19371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19371");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        methodVisitor69.visitTryCatchBlock(label78, label79, label80, "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label[] labelArray88 = new org.mockito.asm.Label[] { label87 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn(2049, (int) (short) 7, label86, labelArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(labelArray88);
    }

    @Test
    public void test19372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19372");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "hi!", "\001");
        int int45 = classWriter1.newClass("\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = classWriter1.visitAnnotation("hi!", true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 13 + "'", int45 == 13);
        org.junit.Assert.assertNotNull(annotationVisitor48);
    }

    @Test
    public void test19373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19373");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassReader classReader21 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter23 = new org.mockito.asm.ClassWriter(classReader21, 256);
        java.lang.String[] strArray24 = classReader21.getInterfaces();
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader21, (int) (short) 100);
        short short28 = classReader21.readShort((int) (byte) 1);
        java.lang.String str29 = classReader21.getClassName();
        int int30 = classReader21.header;
        int int31 = classReader21.getAccess();
        org.mockito.asm.ClassWriter classWriter33 = new org.mockito.asm.ClassWriter(classReader21, 1);
        // The following exception was thrown during execution in test generation
        try {
            short short35 = classReader21.readShort(65535);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65535");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) -326 + "'", short28 == (short) -326);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 73 + "'", int30 == 73);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
    }

    @Test
    public void test19374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19374");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn((int) (short) 256, (-1));
        methodVisitor69.visitMaxs((-889275714), 202);
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor84 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMethodInsn((int) (short) 1792, "", "", "hi!");
        methodVisitor69.visitMultiANewArrayInsn("", 7);
        methodVisitor69.visitVarInsn((int) (short) 8449, (int) (byte) 0);
        org.mockito.asm.AnnotationVisitor annotationVisitor98 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor84);
        org.junit.Assert.assertNotNull(annotationVisitor98);
    }

    @Test
    public void test19375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19375");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        java.lang.Object obj15 = null;
        org.mockito.asm.FieldVisitor fieldVisitor16 = classWriter1.visitField((-1), "", "", "", obj15);
        fieldVisitor16.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor20 = fieldVisitor16.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor23 = fieldVisitor16.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = fieldVisitor16.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = fieldVisitor16.visitAnnotation("", true);
        fieldVisitor16.visitEnd();
        fieldVisitor16.visitEnd();
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(fieldVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor20);
        org.junit.Assert.assertNotNull(annotationVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test19376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19376");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        byte[] byteArray23 = classWriter21.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter21.visitAnnotation("", true);
        classWriter21.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter44.visitEnd();
        byte[] byteArray46 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        java.lang.String[] strArray48 = classReader47.getInterfaces();
        int int49 = classReader47.getAccess();
        int int51 = classReader47.readUnsignedShort(4);
        int int53 = classReader47.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter38.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!" };
        classWriter38.visit((int) (byte) 10, (-1), "", "", "", strArray62);
        classWriter21.visit((int) (short) 256, 8, "", "hi!", "hi!", strArray62);
        classWriter1.visit((int) (short) -1, (-21316096), "hi!", "", "", strArray62);
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter72.visitEnd();
        byte[] byteArray74 = classWriter72.toByteArray();
        org.mockito.asm.ClassReader classReader75 = new org.mockito.asm.ClassReader(byteArray74);
        int int77 = classReader75.readUnsignedShort((int) (short) 0);
        byte[] byteArray78 = classReader75.b;
        byte[] byteArray79 = classReader75.b;
        java.lang.String[] strArray80 = classReader75.getInterfaces();
        classWriter1.visit(100, 1751720193, "", "\007\000", "hi!", strArray80);
        int int84 = classWriter1.newNameType("", "hi!");
        int int88 = classWriter1.newField("hi!", "\007\000", "\001");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 51966 + "'", int77 == 51966);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 8 + "'", int84 == 8);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 11 + "'", int88 == 11);
    }

    @Test
    public void test19377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19377");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 17509);
    }

    @Test
    public void test19378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19378");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        classWriter1.visitEnd();
        int int46 = classWriter1.newUTF8("");
        classWriter1.visitInnerClass("", "hi!", "", (-1161953280));
        byte[] byteArray52 = classWriter1.toByteArray();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 2, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 7, 0, 3, 0, 4, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 2, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 3, 0, 4, 0, 2, 0, 0]");
    }

    @Test
    public void test19379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19379");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter1.visitAnnotation("\007\000", false);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(104);
        int int28 = classWriter26.newUTF8("\001");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int39 = classWriter34.newMethod("", "", "hi!", false);
        classWriter34.visitEnd();
        int int42 = classWriter34.newClass("");
        int int44 = classWriter34.newClass("");
        int int46 = classWriter34.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter53.visitEnd();
        byte[] byteArray55 = classWriter53.toByteArray();
        org.mockito.asm.ClassReader classReader56 = new org.mockito.asm.ClassReader(byteArray55);
        java.lang.String[] strArray57 = classReader56.getInterfaces();
        classWriter34.visit((int) (byte) 1, 7, "", "hi!", "hi!", strArray57);
        org.mockito.asm.MethodVisitor methodVisitor59 = classWriter26.visitMethod(27, "\001", "", "\007\000", strArray57);
        classWriter26.visitInnerClass("hi!", "\007\000", "\001", (int) (short) 3);
        byte[] byteArray65 = classWriter26.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        java.lang.String[] strArray67 = classReader66.getInterfaces();
        classWriter1.visit(24832, 16778088, "hi!", "", "", strArray67);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(methodVisitor59);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 1, 1, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 3, 7, -64, -128, 7, 0, 5, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 27, 0, 1, 0, 2, 0, 1, 0, 7, 0, 0, 0, 2, 0, 5, 0, 1, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 6, 0, 1, 0, 3]");
        org.junit.Assert.assertNotNull(strArray67);
    }

    @Test
    public void test19380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19380");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        int int20 = classWriter1.newUTF8("");
        int int22 = classWriter1.newUTF8("\001");
        int int27 = classWriter1.newMethod("hi!", "\001", "\001", true);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7 + "'", int22 == 7);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test19381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19381");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        fieldVisitor17.visitEnd();
        fieldVisitor17.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = fieldVisitor17.visitAnnotation("\007\000", true);
        fieldVisitor17.visitEnd();
        fieldVisitor17.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(annotationVisitor22);
    }

    @Test
    public void test19382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19382");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        int int31 = classWriter26.newClass("\007\000");
        classWriter26.visitOuterClass("", "", "\007\000");
        classWriter26.visitInnerClass("\007\000", "\001", "\007\000", 17);
        int int42 = classWriter26.newClass("\001");
        classWriter26.visitSource("\007\000", "\007\000");
        classWriter26.visitEnd();
        int int48 = classWriter26.newUTF8("\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
    }

    @Test
    public void test19383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19383");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        java.lang.String str30 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        byte[] byteArray34 = classWriter32.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter32.visitAnnotation("", true);
        classWriter32.visitOuterClass("", "", "hi!");
        int int46 = classWriter32.newMethod("", "hi!", "hi!", true);
        int int49 = classWriter32.newNameType("hi!", "\007\000");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter32, 47806);
        classWriter32.visitOuterClass("\007\000", "\007\000", "");
        int int58 = classWriter32.newNameType("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = classWriter32.visitAnnotation("", true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 6 + "'", int46 == 6);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(annotationVisitor61);
    }

    @Test
    public void test19384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19384");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray3);
        int int6 = classReader5.getAccess();
        int int7 = classReader5.header;
        java.lang.String[] strArray8 = classReader5.getInterfaces();
        int int10 = classReader5.readInt((int) (short) 10);
        byte[] byteArray11 = classReader5.b;
        org.mockito.asm.ClassReader classReader12 = new org.mockito.asm.ClassReader(byteArray11);
        byte[] byteArray13 = classReader12.b;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test19385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19385");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readUnsignedShort(1);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = classReader4.getItem(116);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 116");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 65210 + "'", int7 == 65210);
    }

    @Test
    public void test19386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19386");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(104);
        int int3 = classWriter1.newUTF8("\001");
        org.mockito.asm.ClassWriter classWriter9 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int14 = classWriter9.newMethod("", "", "hi!", false);
        classWriter9.visitEnd();
        int int17 = classWriter9.newClass("");
        int int19 = classWriter9.newClass("");
        int int21 = classWriter9.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        byte[] byteArray30 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        java.lang.String[] strArray32 = classReader31.getInterfaces();
        classWriter9.visit((int) (byte) 1, 7, "", "hi!", "hi!", strArray32);
        org.mockito.asm.MethodVisitor methodVisitor34 = classWriter1.visitMethod(27, "\001", "", "\007\000", strArray32);
        classWriter1.visitInnerClass("hi!", "\007\000", "\001", (int) (short) 3);
        byte[] byteArray40 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        java.lang.String str42 = classReader41.getSuperName();
        char[] charArray44 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj45 = classReader41.readConst(65536, charArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 65536");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(methodVisitor34);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 1, 1, 1, 0, 0, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 3, 7, -64, -128, 7, 0, 5, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 27, 0, 1, 0, 2, 0, 1, 0, 7, 0, 0, 0, 2, 0, 5, 0, 1, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 6, 0, 1, 0, 3]");
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test19387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19387");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitOuterClass("hi!", "", "hi!");
        int int27 = classWriter1.newMethod("hi!", "", "hi!", true);
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter34.visitEnd();
        classWriter34.visitSource("hi!", "");
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter34.visit((int) 'a', (int) '4', "", "hi!", "", strArray50);
        byte[] byteArray52 = classWriter34.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        org.mockito.asm.ClassWriter classWriter55 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader53.accept((org.mockito.asm.ClassVisitor) classWriter55, 8);
        byte[] byteArray58 = classWriter55.toByteArray();
        int int60 = classWriter55.newClass("hi!");
        classWriter55.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray66 = classWriter55.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray66);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter(classReader68, 196613);
        byte[] byteArray71 = classWriter70.toByteArray();
        int int76 = classWriter70.newMethod("", "hi!", "\001", false);
        org.mockito.asm.FieldVisitor fieldVisitor77 = classWriter1.visitField((int) (short) 1792, "\001", "\001", "", (java.lang.Object) "");
        fieldVisitor77.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = fieldVisitor77.visitAnnotation("", true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 11 + "'", int76 == 11);
        org.junit.Assert.assertNotNull(fieldVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test19388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19388");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitOuterClass("hi!", "", "");
        int int14 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("", true);
        int int22 = classWriter1.newMethod("hi!", "hi!", "hi!", true);
        classWriter1.visitInnerClass("", "hi!", "hi!", 73);
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter1.visitAnnotation("", true);
        int int35 = classWriter1.newMethod("hi!", "hi!", "", false);
        int int38 = classWriter1.newNameType("", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter1.visitAnnotation("\007\000", true);
        int int44 = classWriter1.newNameType("", "");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
    }

    @Test
    public void test19389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19389");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-1), 5);
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        methodVisitor69.visitTryCatchBlock(label89, label90, label91, "\001");
        methodVisitor69.visitEnd();
        methodVisitor69.visitVarInsn((int) (short) 10, (int) (short) -1);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test19390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19390");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        methodVisitor69.visitMethodInsn(8, "", "hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMultiANewArrayInsn("", 114);
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn(97, "", "\007\000", "\001");
        methodVisitor69.visitTypeInsn(3, "\001");
        methodVisitor69.visitMultiANewArrayInsn("\001", 26913);
        org.mockito.asm.AnnotationVisitor annotationVisitor99 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor87);
        org.junit.Assert.assertNotNull(annotationVisitor99);
    }

    @Test
    public void test19391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19391");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        java.lang.String str37 = classReader20.getClassName();
        int int39 = classReader20.readUnsignedShort(12);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = classReader20.readInt((int) (short) 2049);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 872 + "'", int39 == 872);
    }

    @Test
    public void test19392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19392");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        methodVisitor69.visitIntInsn(0, 0);
        methodVisitor69.visitTypeInsn((int) 'a', "");
        methodVisitor69.visitMultiANewArrayInsn("hi!", 5);
        methodVisitor69.visitMethodInsn(57174305, "\007\000", "", "hi!");
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        methodVisitor69.visitTryCatchBlock(label88, label89, label90, "hi!");
        org.mockito.asm.Label label95 = null;
        org.mockito.asm.Label label96 = null;
        org.mockito.asm.Label[] labelArray97 = new org.mockito.asm.Label[] { label96 };
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitTableSwitchInsn((int) (short) -326, (int) (byte) 100, label95, labelArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(labelArray97);
    }

    @Test
    public void test19393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19393");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "\007\000", "hi!");
        byte[] byteArray15 = classWriter1.toByteArray();
        classWriter1.visitOuterClass("hi!", "\001", "hi!");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 10, 0, 2, 0, 4, 7, 0, 3, 1, 0, 3, 7, -64, -128, 12, 0, 7, 0, 3, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 4, 0, 6, 0, 8, 0, 10, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0]");
    }

    @Test
    public void test19394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19394");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int8 = classWriter1.newNameType("hi!", "");
        int int12 = classWriter1.newField("hi!", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter18 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter18.visitAnnotation("", true);
        classWriter18.visitSource("", "");
        classWriter18.visitOuterClass("hi!", "", "");
        int int31 = classWriter18.newNameType("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter18.visitAnnotation("", true);
        int int39 = classWriter18.newMethod("hi!", "hi!", "hi!", true);
        classWriter18.visitInnerClass("", "hi!", "hi!", 73);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter1.visitField(83886080, "hi!", "hi!", "", (java.lang.Object) 73);
        java.lang.Class<?> wildcardClass46 = fieldVisitor45.getClass();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test19395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19395");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        long long31 = classReader24.readLong(0);
        int int32 = classReader24.header;
        byte[] byteArray33 = classReader24.b;
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter(classReader24, 27);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int42 = classWriter37.newMethod("", "", "hi!", false);
        classWriter37.visitEnd();
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter45.visitEnd();
        classWriter45.visitSource("hi!", "");
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter45.visit((int) 'a', (int) '4', "", "hi!", "", strArray61);
        byte[] byteArray63 = classWriter45.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor66 = classWriter45.visitAnnotation("", false);
        byte[] byteArray67 = classWriter45.toByteArray();
        org.mockito.asm.ClassReader classReader68 = new org.mockito.asm.ClassReader(byteArray67);
        org.mockito.asm.ClassWriter classWriter70 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray71 = new org.mockito.asm.Attribute[] {};
        classReader68.accept((org.mockito.asm.ClassVisitor) classWriter70, attributeArray71, (int) (short) 0);
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter37, attributeArray71, 1869509376);
        int int76 = classReader24.getAccess();
        org.mockito.asm.ClassWriter classWriter78 = new org.mockito.asm.ClassWriter(classReader24, 104);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3819410108757049247L) + "'", long31 == (-3819410108757049247L));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 103 + "'", int32 == 103);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 52 + "'", int76 == 52);
    }

    @Test
    public void test19396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19396");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", 51966);
        org.mockito.asm.ClassWriter classWriter19 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter19.visitEnd();
        classWriter19.visitSource("hi!", "");
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter19.visit((int) 'a', (int) '4', "", "hi!", "", strArray35);
        byte[] byteArray37 = classWriter19.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter19.visitAnnotation("", false);
        byte[] byteArray41 = classWriter19.toByteArray();
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray41);
        java.lang.String[] strArray43 = classReader42.getInterfaces();
        classWriter1.visit(51966, (int) 'a', "", "\007\000", "", strArray43);
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("\007\000", "", "");
        classWriter1.visitSource("\001", "");
        classWriter1.visitInnerClass("\001", "\007\000", "", 0);
        classWriter1.visitOuterClass("", "\001", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor64 = classWriter1.visitAnnotation("\001", false);
        int int66 = classWriter1.newUTF8("");
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter1.visitAnnotation("hi!", true);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(annotationVisitor64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor69);
    }

    @Test
    public void test19397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19397");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn((int) (short) 256, "hi!", "", "");
        methodVisitor69.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotation("\007\000", true);
        methodVisitor69.visitVarInsn((int) (short) 97, 196612);
        methodVisitor69.visitMaxs(52, (int) (short) 1536);
        methodVisitor69.visitFieldInsn(1919222016, "", "", "hi!");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test19398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19398");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(16778088);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        classWriter7.visitSource("hi!", "");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter7.visit((int) 'a', (int) '4', "", "hi!", "", strArray23);
        byte[] byteArray25 = classWriter7.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor28 = classWriter7.visitAnnotation("", false);
        byte[] byteArray29 = classWriter7.toByteArray();
        classWriter7.visitInnerClass("hi!", "", "", 8);
        int int39 = classWriter7.newMethod("hi!", "", "", true);
        int int41 = classWriter7.newConst((java.lang.Object) 2);
        org.mockito.asm.ClassWriter classWriter48 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter48.visitEnd();
        classWriter48.visitSource("hi!", "");
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter48.visit((int) 'a', (int) '4', "", "hi!", "", strArray64);
        byte[] byteArray66 = classWriter48.toByteArray();
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray66);
        org.mockito.asm.ClassWriter classWriter69 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader67.accept((org.mockito.asm.ClassVisitor) classWriter69, 8);
        int int73 = classReader67.readUnsignedShort((int) (short) 10);
        int int75 = classReader67.readInt(2);
        int int76 = classReader67.header;
        java.lang.String[] strArray77 = classReader67.getInterfaces();
        classWriter7.visit((int) 'a', 6, "hi!", "hi!", "\007\000", strArray77);
        org.mockito.asm.MethodVisitor methodVisitor79 = classWriter1.visitMethod(114, "", "\007\000", "hi!", strArray77);
        int int83 = classWriter1.newField("\001", "hi!", "hi!");
        classWriter1.visitSource("hi!", "\007\000");
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 11 + "'", int41 == 11);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 256 + "'", int73 == 256);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1161953280) + "'", int75 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 73 + "'", int76 == 73);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(methodVisitor79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
    }

    @Test
    public void test19399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19399");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        int int13 = classWriter1.newUTF8("hi!");
        int int15 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        classWriter28.visitSource("", "");
        classWriter28.visitSource("", "hi!");
        int int41 = classWriter28.newField("hi!", "hi!", "hi!");
        classWriter28.visitInnerClass("hi!", "", "", (int) ' ');
        classWriter28.visitSource("", "");
        classWriter28.visitSource("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitEnd();
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter63.visitEnd();
        byte[] byteArray65 = classWriter63.toByteArray();
        org.mockito.asm.ClassReader classReader66 = new org.mockito.asm.ClassReader(byteArray65);
        org.mockito.asm.ClassReader classReader67 = new org.mockito.asm.ClassReader(byteArray65);
        java.lang.String[] strArray68 = classReader67.getInterfaces();
        java.lang.String[] strArray69 = classReader67.getInterfaces();
        classWriter28.visit((int) (byte) 100, 1, "\001", "\001", "\001", strArray69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor71 = classWriter1.visitMethod(83886080, "\007\000", "", "\001", strArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
    }

    @Test
    public void test19400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19400");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        byte[] byteArray42 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        java.lang.String[] strArray44 = classReader43.getInterfaces();
        int int45 = classReader43.getAccess();
        int int47 = classReader43.readUnsignedShort(4);
        int int49 = classReader43.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter34.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (byte) 10, (-1), "", "", "", strArray58);
        classWriter1.visit((-889275714), 0, "", "hi!", "hi!", strArray58);
        int int65 = classWriter1.newMethod("hi!", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter71.visitEnd();
        classWriter71.visitSource("hi!", "");
        int int80 = classWriter71.newMethod("", "hi!", "", false);
        java.lang.Object obj85 = null;
        org.mockito.asm.FieldVisitor fieldVisitor86 = classWriter71.visitField(12, "hi!", "hi!", "", obj85);
        org.mockito.asm.FieldVisitor fieldVisitor87 = classWriter1.visitField((int) (short) 9, "\007\000", "\007\000", "\007\000", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = fieldVisitor87.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = fieldVisitor87.visitAnnotation("", false);
        fieldVisitor87.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor97 = fieldVisitor87.visitAnnotation("hi!", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor86);
        org.junit.Assert.assertNotNull(fieldVisitor87);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(annotationVisitor93);
        org.junit.Assert.assertNotNull(annotationVisitor97);
    }

    @Test
    public void test19401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19401");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("\007\000", "hi!", "hi!", (int) (short) 10);
        classWriter1.visitOuterClass("", "", "\007\000");
        classWriter1.visitSource("hi!", "hi!");
        int int28 = classWriter1.newMethod("\001", "hi!", "hi!", false);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 11 + "'", int28 == 11);
    }

    @Test
    public void test19402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19402");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        byte[] byteArray35 = classReader20.b;
        java.lang.String str36 = classReader20.getClassName();
        int int38 = classReader20.readInt(83);
        int int40 = classReader20.readUnsignedShort(103);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter(classReader20, 21353);
        java.lang.String[] strArray43 = classReader20.getInterfaces();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 196612 + "'", int38 == 196612);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test19403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19403");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(254, (int) ' ');
        methodVisitor69.visitInsn((int) (short) -1);
        methodVisitor69.visitInsn(83886080);
        methodVisitor69.visitTypeInsn(2, "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor96 = methodVisitor69.visitAnnotation("\001", false);
        methodVisitor69.visitTypeInsn((-1161953280), "\001");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor96);
    }

    @Test
    public void test19404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19404");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        long long26 = classReader20.readLong(7);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter28.visitAnnotation("", true);
        int int34 = classWriter28.newNameType("hi!", "hi!");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int43 = classWriter38.newMethod("", "", "hi!", false);
        classWriter38.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter38.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor56 = classWriter53.visitAnnotation("", true);
        classWriter53.visitSource("", "");
        classWriter53.visitSource("", "hi!");
        int int66 = classWriter53.newField("hi!", "hi!", "hi!");
        int int70 = classWriter53.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor71 = classWriter38.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor74 = classWriter38.visitAnnotation("", true);
        org.mockito.asm.Attribute[] attributeArray75 = new org.mockito.asm.Attribute[] {};
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter38, attributeArray75, 256);
        byte[] byteArray78 = classReader20.b;
        int int79 = classReader20.header;
        org.mockito.asm.ClassWriter classWriter81 = new org.mockito.asm.ClassWriter(classReader20, 0);
        java.lang.String str82 = classReader20.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 6989595422067222633L + "'", long26 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 5 + "'", int43 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(annotationVisitor56);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor71);
        org.junit.Assert.assertNotNull(annotationVisitor74);
        org.junit.Assert.assertNotNull(attributeArray75);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 73 + "'", int79 == 73);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test19405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19405");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String str33 = classReader20.getClassName();
        int int34 = classReader20.header;
        byte[] byteArray35 = classReader20.b;
        java.lang.String str36 = classReader20.getClassName();
        int int38 = classReader20.readInt(83);
        int int40 = classReader20.readUnsignedShort(103);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = classReader20.readUnsignedShort(16777223);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 73 + "'", int34 == 73);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 196612 + "'", int38 == 196612);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test19406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19406");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        java.lang.String str27 = classReader24.getClassName();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter(classReader24, 16778088);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        byte[] byteArray37 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray37, 7, (int) ' ');
        org.mockito.asm.ClassReader classReader45 = new org.mockito.asm.ClassReader(byteArray37, 11, (-889275714));
        org.mockito.asm.ClassReader classReader48 = new org.mockito.asm.ClassReader(byteArray37, (int) (byte) 10, 2);
        short short50 = classReader48.readShort((int) (short) 2);
        org.mockito.asm.FieldVisitor fieldVisitor51 = classWriter29.visitField((int) (short) 26978, "\007\000", "\007\000", "", (java.lang.Object) short50);
        org.mockito.asm.AnnotationVisitor annotationVisitor54 = fieldVisitor51.visitAnnotation("\001", true);
        fieldVisitor51.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short50 + "' != '" + (short) -17730 + "'", short50 == (short) -17730);
        org.junit.Assert.assertNotNull(fieldVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor54);
    }

    @Test
    public void test19407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19407");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor21 = classWriter1.visitAnnotation("", false);
        int int23 = classWriter1.newUTF8("");
        classWriter1.visitInnerClass("", "hi!", "", 2);
        classWriter1.visitInnerClass("hi!", "", "\007\000", (int) (short) 256);
        classWriter1.visitSource("\007\000", "\007\000");
        byte[] byteArray37 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = classWriter1.visitAnnotation("", true);
        annotationVisitor40.visitEnum("\007\000", "", "\007\000");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(annotationVisitor40);
    }

    @Test
    public void test19408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19408");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 20);
    }

    @Test
    public void test19409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19409");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        byte[] byteArray26 = classReader24.b;
        java.lang.String str27 = classReader24.getSuperName();
        java.lang.String str28 = classReader24.getSuperName();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int35 = classWriter30.newMethod("", "", "hi!", false);
        classWriter30.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter30.visitAnnotation("hi!", false);
        classWriter30.visitOuterClass("hi!", "\007\000", "hi!");
        int int47 = classWriter30.newField("\007\000", "hi!", "\001");
        int int50 = classWriter30.newNameType("\001", "\001");
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter30, 11);
        org.mockito.asm.ClassWriter classWriter54 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter54.visitEnd();
        classWriter54.visitSource("hi!", "");
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter54.visit((int) 'a', (int) '4', "", "hi!", "", strArray70);
        byte[] byteArray72 = classWriter54.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = classWriter54.visitAnnotation("", false);
        byte[] byteArray76 = classWriter54.toByteArray();
        org.mockito.asm.ClassReader classReader77 = new org.mockito.asm.ClassReader(byteArray76);
        org.mockito.asm.ClassWriter classWriter79 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray80 = new org.mockito.asm.Attribute[] {};
        classReader77.accept((org.mockito.asm.ClassVisitor) classWriter79, attributeArray80, (int) (short) 0);
        byte[] byteArray83 = classReader77.b;
        java.lang.String[] strArray84 = classReader77.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            int int85 = classWriter30.newConst((java.lang.Object) strArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [Ljava.lang.String;@51b7c353");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 5 + "'", int35 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 12 + "'", int47 == 12);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 13 + "'", int50 == 13);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray80);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray84);
    }

    @Test
    public void test19410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19410");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        classWriter22.visitSource("", "");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter34.visitAnnotation("", true);
        classWriter34.visitSource("", "");
        classWriter34.visitOuterClass("hi!", "", "");
        int int48 = classWriter34.newField("", "hi!", "");
        classWriter34.visitOuterClass("", "hi!", "");
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter59.visitEnd();
        byte[] byteArray61 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader62 = new org.mockito.asm.ClassReader(byteArray61);
        java.lang.String[] strArray63 = classReader62.getInterfaces();
        int int65 = classReader62.readInt((int) (byte) 0);
        java.lang.String str66 = classReader62.getSuperName();
        java.lang.String[] strArray67 = classReader62.getInterfaces();
        java.lang.String[] strArray68 = classReader62.getInterfaces();
        classWriter34.visit(0, (int) (short) 0, "", "", "", strArray68);
        classWriter22.visit(51966, 73, "hi!", "\007\000", "", strArray68);
        int int74 = classWriter22.newField("", "hi!", "hi!");
        org.mockito.asm.Attribute attribute75 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter22.visitAttribute(attribute75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-889275714) + "'", int65 == (-889275714));
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 7 + "'", int74 == 7);
    }

    @Test
    public void test19411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19411");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        int int11 = classWriter1.newClass("");
        int int13 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter20 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter20.visitEnd();
        classWriter20.visitSource("hi!", "");
        int int28 = classWriter20.newField("", "hi!", "hi!");
        classWriter20.visitSource("hi!", "");
        int int33 = classWriter20.newUTF8("\007\000");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField(2, "\007\000", "", "\007\000", (java.lang.Object) int33);
        classWriter1.visitOuterClass("", "hi!", "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor34);
    }

    @Test
    public void test19412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19412");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitIntInsn(47806, 20);
        methodVisitor69.visitIincInsn(48640, 11);
        org.mockito.asm.Label label88 = null;
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        methodVisitor69.visitTryCatchBlock(label88, label89, label90, "hi!");
        methodVisitor69.visitEnd();
        methodVisitor69.visitFieldInsn(7, "", "hi!", "\001");
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19413");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("", 1763770624);
        methodVisitor69.visitMethodInsn((int) (short) -326, "\007\000", "\007\000", "");
        methodVisitor69.visitMultiANewArrayInsn("", (-21316096));
        methodVisitor69.visitTypeInsn(2049, "\001");
        methodVisitor69.visitVarInsn(105, 553713664);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19414");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        int int22 = classWriter1.newUTF8("\007\000");
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        byte[] byteArray30 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        java.lang.String[] strArray32 = classReader31.getInterfaces();
        short short34 = classReader31.readShort((int) (byte) 1);
        java.lang.String str35 = classReader31.getSuperName();
        int int37 = classReader31.readByte(6);
        int int39 = classReader31.readInt(2);
        org.mockito.asm.FieldVisitor fieldVisitor40 = classWriter1.visitField((-1), "", "\007\000", "\007\000", (java.lang.Object) 2);
        fieldVisitor40.visitEnd();
        fieldVisitor40.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = fieldVisitor40.visitAnnotation("\007\000", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = fieldVisitor40.visitAnnotation("", true);
        java.lang.Object obj50 = null;
        // The following exception was thrown during execution in test generation
        try {
            annotationVisitor48.visit("", obj50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + short34 + "' != '" + (short) -326 + "'", short34 == (short) -326);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1161953280) + "'", int39 == (-1161953280));
        org.junit.Assert.assertNotNull(fieldVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
    }

    @Test
    public void test19415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19415");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 0);
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        classWriter7.visitSource("hi!", "");
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter7.visit((int) 'a', (int) '4', "", "hi!", "", strArray23);
        byte[] byteArray25 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter28, 8);
        int int32 = classReader26.readUnsignedShort((int) (short) 10);
        int int34 = classReader26.readInt(2);
        int int35 = classReader26.header;
        java.lang.String[] strArray36 = classReader26.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor37 = classWriter1.visitMethod(1751720193, "\007\000", "hi!", "hi!", strArray36);
        methodVisitor37.visitIincInsn(0, 151060483);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 256 + "'", int32 == 256);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1161953280) + "'", int34 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 73 + "'", int35 == 73);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(methodVisitor37);
    }

    @Test
    public void test19416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19416");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        int int28 = classReader20.readInt(2);
        int int29 = classReader20.header;
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter(classReader20, 51966);
        int int33 = classWriter31.newUTF8("");
        int int35 = classWriter31.newUTF8("");
        classWriter31.visitSource("hi!", "hi!");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1161953280) + "'", int28 == (-1161953280));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 73 + "'", int29 == 73);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test19417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19417");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int19 = classWriter1.newField("hi!", "", "hi!");
        classWriter1.visitInnerClass("hi!", "hi!", "", 7);
        int int28 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = classWriter38.visitAnnotation("", false);
        org.mockito.asm.ClassWriter classWriter50 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter50.visitEnd();
        byte[] byteArray52 = classWriter50.toByteArray();
        org.mockito.asm.ClassReader classReader53 = new org.mockito.asm.ClassReader(byteArray52);
        java.lang.String[] strArray54 = classReader53.getInterfaces();
        int int55 = classReader53.getAccess();
        int int57 = classReader53.readUnsignedShort(4);
        int int59 = classReader53.readByte(5);
        java.lang.String[] strArray60 = classReader53.getInterfaces();
        classWriter38.visit(2, (int) (short) -1, "", "", "hi!", strArray60);
        classWriter1.visit(7, 73, "hi!", "", "hi!", strArray60);
        classWriter1.visitSource("hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor68 = classWriter1.visitAnnotation("\007\000", false);
        annotationVisitor68.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor72 = annotationVisitor68.visitAnnotation("", "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(annotationVisitor68);
        org.junit.Assert.assertNotNull(annotationVisitor72);
    }

    @Test
    public void test19418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19418");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        int int14 = classWriter1.newField("hi!", "hi!", "hi!");
        int int18 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("", "hi!", "", 254);
        classWriter1.visitInnerClass("", "", "", 10);
        org.mockito.asm.ClassWriter classWriter35 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter35.visitEnd();
        byte[] byteArray37 = classWriter35.toByteArray();
        org.mockito.asm.ClassReader classReader38 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassReader classReader39 = new org.mockito.asm.ClassReader(byteArray37);
        org.mockito.asm.ClassReader classReader42 = new org.mockito.asm.ClassReader(byteArray37, 2, (int) (short) -1);
        java.lang.String[] strArray43 = classReader42.getInterfaces();
        java.lang.String[] strArray44 = classReader42.getInterfaces();
        classWriter1.visit((int) (byte) 10, 65210, "\007\000", "hi!", "hi!", strArray44);
        classWriter1.visitSource("", "\001");
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("hi!", false);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(annotationVisitor52);
    }

    @Test
    public void test19419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19419");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        classWriter1.visitSource("", "hi!");
        org.mockito.asm.ClassWriter classWriter12 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter12.visitEnd();
        classWriter12.visitSource("hi!", "");
        java.lang.String[] strArray28 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter12.visit((int) 'a', (int) '4', "", "hi!", "", strArray28);
        byte[] byteArray30 = classWriter12.toByteArray();
        org.mockito.asm.ClassReader classReader31 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray30);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader32, 256);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter(classReader32, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter(classReader32, (int) (short) 100);
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        classWriter40.visitSource("", "");
        int int49 = classWriter40.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter40.visitAnnotation("", false);
        int int54 = classWriter40.newUTF8("hi!");
        classReader32.accept((org.mockito.asm.ClassVisitor) classWriter40, (int) (short) -326);
        int int58 = classReader32.readInt(10);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter60.visitEnd();
        classWriter60.visitSource("hi!", "");
        classWriter60.visitEnd();
        classWriter60.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor69 = classWriter60.visitAnnotation("hi!", false);
        classWriter60.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = classWriter60.visitAnnotation("hi!", true);
        classWriter60.visitEnd();
        byte[] byteArray78 = classWriter60.toByteArray();
        classReader32.accept((org.mockito.asm.ClassVisitor) classWriter60, 1);
        classWriter60.visitOuterClass("\001", "hi!", "\001");
        int int85 = classWriter1.newConst((java.lang.Object) "\001");
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 16778088 + "'", int58 == 16778088);
        org.junit.Assert.assertNotNull(annotationVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
    }

    @Test
    public void test19420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19420");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitSource("hi!", "");
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        byte[] byteArray23 = classWriter21.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter21.visitAnnotation("", true);
        classWriter21.visitInnerClass("hi!", "", "hi!", 2);
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter44.visitEnd();
        byte[] byteArray46 = classWriter44.toByteArray();
        org.mockito.asm.ClassReader classReader47 = new org.mockito.asm.ClassReader(byteArray46);
        java.lang.String[] strArray48 = classReader47.getInterfaces();
        int int49 = classReader47.getAccess();
        int int51 = classReader47.readUnsignedShort(4);
        int int53 = classReader47.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter38.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray62 = new java.lang.String[] { "", "hi!" };
        classWriter38.visit((int) (byte) 10, (-1), "", "", "", strArray62);
        classWriter21.visit((int) (short) 256, 8, "", "hi!", "hi!", strArray62);
        classWriter1.visit((int) (short) -1, (-21316096), "hi!", "", "", strArray62);
        org.mockito.asm.ClassWriter classWriter72 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter72.visitEnd();
        byte[] byteArray74 = classWriter72.toByteArray();
        org.mockito.asm.ClassReader classReader75 = new org.mockito.asm.ClassReader(byteArray74);
        int int77 = classReader75.readUnsignedShort((int) (short) 0);
        byte[] byteArray78 = classReader75.b;
        byte[] byteArray79 = classReader75.b;
        java.lang.String[] strArray80 = classReader75.getInterfaces();
        classWriter1.visit(100, 1751720193, "", "\007\000", "hi!", strArray80);
        int int84 = classWriter1.newNameType("", "hi!");
        classWriter1.visitInnerClass("hi!", "", "\007\000", 87);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor54);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 51966 + "'", int77 == 51966);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 8 + "'", int84 == 8);
    }

    @Test
    public void test19421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19421");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", (int) (short) -326);
        methodVisitor69.visitIincInsn(48640, (int) (byte) 100);
        methodVisitor69.visitIincInsn(1, 100);
        methodVisitor69.visitCode();
        methodVisitor69.visitTypeInsn(9, "");
        methodVisitor69.visitMaxs((int) (byte) -1, 17);
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label label93 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("", "\007\000", "\007\000", label92, label93, 105);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19422");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        int int34 = classReader20.readByte(1);
        int int35 = classReader20.getAccess();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) 3);
        int int38 = classReader20.header;
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 254 + "'", int34 == 254);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 73 + "'", int38 == 73);
    }

    @Test
    public void test19423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19423");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitFieldInsn(9, "", "\007\000", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor81 = methodVisitor69.visitAnnotation("", false);
        methodVisitor69.visitFieldInsn((int) (short) -17730, "\001", "\001", "hi!");
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("\001", "", "hi!", label90, label91, 14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor81);
    }

    @Test
    public void test19424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19424");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        java.lang.String str21 = classReader20.getClassName();
        java.lang.String[] strArray22 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter24 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) 26978);
        int int25 = classReader20.getAccess();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
    }

    @Test
    public void test19425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19425");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        int int32 = classWriter26.newNameType("", "\007\000");
        int int37 = classWriter26.newMethod("", "\007\000", "", true);
        classWriter26.visitSource("\007\000", "");
        classWriter26.visitOuterClass("hi!", "", "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 6 + "'", int32 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
    }

    @Test
    public void test19426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19426");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray2, (int) (byte) 0, (-1));
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray2);
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray2, (int) (short) 0, 51966);
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray2);
        org.mockito.asm.ClassReader classReader11 = new org.mockito.asm.ClassReader(byteArray2);
        java.lang.String str12 = classReader11.getSuperName();
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        classWriter15.visitSource("hi!", "");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter15.visit((int) 'a', (int) '4', "", "hi!", "", strArray31);
        byte[] byteArray33 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader35 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader35, 256);
        int int38 = classReader35.header;
        int int40 = classReader35.readInt(11);
        java.lang.String str41 = classReader35.getClassName();
        java.lang.String[] strArray42 = classReader35.getInterfaces();
        org.mockito.asm.ClassWriter classWriter45 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter45.visitEnd();
        classWriter45.visitSource("hi!", "");
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter45.visit((int) 'a', (int) '4', "", "hi!", "", strArray61);
        byte[] byteArray63 = classWriter45.toByteArray();
        org.mockito.asm.ClassReader classReader64 = new org.mockito.asm.ClassReader(byteArray63);
        org.mockito.asm.ClassWriter classWriter66 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader64.accept((org.mockito.asm.ClassVisitor) classWriter66, 8);
        char[] charArray75 = new char[] { '4', ' ', 'a', '#', '4' };
        java.lang.Object obj76 = classReader64.readConst((int) (short) 1, charArray75);
        java.lang.Object obj77 = classReader35.readConst(1, charArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = classReader11.readUTF8(1399416686, charArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 73 + "'", int38 == 73);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 223337 + "'", int40 == 223337);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "\007\000a#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "\007\000a#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[\007, \000, a, #, 4]");
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + "\007\000" + "'", obj76, "\007\000");
        org.junit.Assert.assertEquals("'" + obj77 + "' != '" + "\007\000" + "'", obj77, "\007\000");
    }

    @Test
    public void test19427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19427");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("hi!", "\001", "\001", 768);
        classWriter1.visitOuterClass("\001", "\001", "\007\000");
        org.mockito.asm.Attribute attribute25 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
    }

    @Test
    public void test19428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19428");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        org.mockito.asm.ClassWriter classWriter11 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter11.visitEnd();
        classWriter11.visitSource("hi!", "");
        byte[] byteArray16 = classWriter11.toByteArray();
        org.mockito.asm.ClassReader classReader17 = new org.mockito.asm.ClassReader(byteArray16);
        byte[] byteArray18 = classReader17.b;
        int int20 = classReader17.readInt((int) (short) 1);
        java.lang.String[] strArray21 = classReader17.getInterfaces();
        classWriter1.visit(87, 73, "", "\001", "", strArray21);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-21316096) + "'", int20 == (-21316096));
        org.junit.Assert.assertNotNull(strArray21);
    }

    @Test
    public void test19429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19429");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        int int27 = classWriter22.newClass("hi!");
        classWriter22.visitInnerClass("hi!", "", "hi!", (int) '#');
        byte[] byteArray33 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassReader classReader37 = new org.mockito.asm.ClassReader(byteArray33, (int) (byte) 0, 16778088);
        int int38 = classReader37.getAccess();
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        byte[] byteArray42 = classWriter40.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter40.visitAnnotation("", true);
        classWriter40.visitOuterClass("", "", "hi!");
        int int54 = classWriter40.newMethod("", "hi!", "hi!", true);
        int int56 = classWriter40.newUTF8("hi!");
        int int59 = classWriter40.newNameType("hi!", "hi!");
        classWriter40.visitInnerClass("", "hi!", "\007\000", 83);
        classWriter40.visitOuterClass("", "\001", "\007\000");
        classReader37.accept((org.mockito.asm.ClassVisitor) classWriter40, 105);
        org.mockito.asm.Attribute attribute71 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter40.visitAttribute(attribute71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 10, 0, 1, 0, 4, 0, 2, 0, 3, 0, 35]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
    }

    @Test
    public void test19430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19430");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        int int26 = classReader20.readUnsignedShort((int) (short) 10);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        classWriter28.visitEnd();
        classWriter28.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor37 = classWriter28.visitAnnotation("hi!", false);
        classWriter28.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor44 = classWriter28.visitAnnotation("hi!", true);
        classWriter28.visitEnd();
        byte[] byteArray46 = classWriter28.toByteArray();
        byte[] byteArray47 = classWriter28.toByteArray();
        int int49 = classWriter28.newClass("");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter28, (int) (byte) 0);
        int int52 = classReader20.getAccess();
        byte[] byteArray53 = classReader20.b;
        byte[] byteArray54 = classReader20.b;
        java.lang.String str55 = classReader20.getClassName();
        byte[] byteArray56 = classReader20.b;
        org.mockito.asm.ClassReader classReader57 = new org.mockito.asm.ClassReader(byteArray56);
        int int59 = classReader57.readUnsignedShort(4);
        org.mockito.asm.ClassWriter classWriter61 = new org.mockito.asm.ClassWriter(classReader57, 1919222016);
        classWriter61.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 256 + "'", int26 == 256);
        org.junit.Assert.assertNotNull(annotationVisitor37);
        org.junit.Assert.assertNotNull(annotationVisitor44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test19431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19431");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        int int7 = classWriter1.newNameType("hi!", "hi!");
        int int11 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("\001", "", "");
        classWriter1.visitSource("", "");
        int int28 = classWriter1.newField("", "\001", "\007\000");
        int int30 = classWriter1.newClass("\007\000");
        int int35 = classWriter1.newMethod("", "hi!", "\007\000", true);
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter37.visitEnd();
        classWriter37.visitSource("hi!", "");
        classWriter37.visitEnd();
        byte[] byteArray43 = classWriter37.toByteArray();
        org.mockito.asm.ClassWriter classWriter49 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter49.visitAnnotation("", true);
        classWriter49.visitSource("", "");
        classWriter49.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor64 = classWriter49.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter49.visitOuterClass("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor69 = classWriter37.visitField(100, "", "hi!", "", (java.lang.Object) "");
        classWriter37.visitInnerClass("", "", "", (int) '4');
        int int78 = classWriter37.newField("", "", "");
        int int80 = classWriter37.newClass("\007\000");
        int int84 = classWriter37.newField("\007\000", "", "hi!");
        classWriter37.visitInnerClass("hi!", "hi!", "\001", (int) (short) -16896);
        org.mockito.asm.AnnotationVisitor annotationVisitor92 = classWriter37.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor95 = classWriter37.visitAnnotation("hi!", true);
        byte[] byteArray96 = classWriter37.toByteArray();
        org.mockito.asm.ClassReader classReader97 = new org.mockito.asm.ClassReader(byteArray96);
        // The following exception was thrown during execution in test generation
        try {
            int int98 = classWriter1.newConst((java.lang.Object) classReader97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value org.mockito.asm.ClassReader@4c7d704f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 12 + "'", int28 == 12);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 13 + "'", int30 == 13);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 15 + "'", int35 == 15);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(fieldVisitor64);
        org.junit.Assert.assertNotNull(fieldVisitor69);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 8 + "'", int78 == 8);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 12 + "'", int84 == 12);
        org.junit.Assert.assertNotNull(annotationVisitor92);
        org.junit.Assert.assertNotNull(annotationVisitor95);
        org.junit.Assert.assertNotNull(byteArray96);
    }

    @Test
    public void test19432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19432");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        java.lang.Object[] objArray80 = null;
        org.mockito.asm.ClassWriter classWriter83 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter83.visitEnd();
        byte[] byteArray85 = classWriter83.toByteArray();
        org.mockito.asm.ClassReader classReader86 = new org.mockito.asm.ClassReader(byteArray85);
        int int88 = classReader86.readUnsignedShort((int) (short) 0);
        java.lang.String[] strArray89 = classReader86.getInterfaces();
        methodVisitor69.visitFrame((int) (byte) 1, 0, objArray80, (-1), (java.lang.Object[]) strArray89);
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotation("\001", false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 51966 + "'", int88 == 51966);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test19433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19433");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "hi!");
        methodVisitor69.visitTypeInsn((int) (byte) 100, "hi!");
        methodVisitor69.visitIincInsn((int) (short) -1, 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label89 = null;
        org.mockito.asm.Label label90 = null;
        org.mockito.asm.Label label91 = null;
        methodVisitor69.visitTryCatchBlock(label89, label90, label91, "hi!");
        methodVisitor69.visitTypeInsn((int) (short) -17730, "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test19434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19434");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        int int29 = classWriter16.newField("hi!", "hi!", "hi!");
        int int33 = classWriter16.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor34 = classWriter1.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        classWriter1.visitSource("", "");
        classWriter1.visitInnerClass("", "\001", "", (int) (short) 20);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor34);
    }

    @Test
    public void test19435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19435");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        methodVisitor69.visitMaxs(256, 9);
        org.mockito.asm.AnnotationVisitor annotationVisitor89 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitVarInsn((int) (short) 24832, (int) 'a');
        methodVisitor69.visitMultiANewArrayInsn("", 28);
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor89);
    }

    @Test
    public void test19436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19436");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        org.mockito.asm.ClassWriter classWriter31 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor34 = classWriter31.visitAnnotation("", true);
        classWriter31.visitSource("", "");
        classWriter31.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor46 = classWriter31.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter31.visitOuterClass("", "", "");
        classWriter31.visitSource("", "");
        int int56 = classWriter31.newNameType("", "hi!");
        byte[] byteArray57 = classWriter31.toByteArray();
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter59.visitEnd();
        classWriter59.visitSource("hi!", "");
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter59.visit((int) 'a', (int) '4', "", "hi!", "", strArray75);
        byte[] byteArray77 = classWriter59.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = classWriter59.visitAnnotation("", false);
        byte[] byteArray81 = classWriter59.toByteArray();
        org.mockito.asm.ClassReader classReader82 = new org.mockito.asm.ClassReader(byteArray81);
        org.mockito.asm.ClassWriter classWriter84 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray85 = new org.mockito.asm.Attribute[] {};
        classReader82.accept((org.mockito.asm.ClassVisitor) classWriter84, attributeArray85, (int) (short) 0);
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter31, attributeArray85, 48640);
        classWriter31.visitOuterClass("hi!", "\001", "\007\000");
        classWriter31.visitOuterClass("hi!", "", "\007\000");
        org.mockito.asm.Attribute attribute98 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter31.visitAttribute(attribute98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertNotNull(annotationVisitor34);
        org.junit.Assert.assertNotNull(fieldVisitor46);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 1, 0, 3, 104, 105, 33, 3, 0, 0, 0, 1, 7, 0, 1, 12, 0, 1, 0, 1, 12, 0, 1, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 2, 0, 2, 0, 2, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 4, 0, 4, 0, 5, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray85);
    }

    @Test
    public void test19437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19437");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitEnd();
        methodVisitor69.visitCode();
        methodVisitor69.visitIntInsn(38, 8460);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19438");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter1.visitSource("", "hi!");
        classWriter1.visitOuterClass("", "", "");
        classWriter1.visitInnerClass("", "hi!", "", (int) (short) -1);
        int int15 = classWriter1.newClass("\007\000");
        classWriter1.visitEnd();
        int int18 = classWriter1.newClass("\007\000");
        classWriter1.visitOuterClass("hi!", "\001", "");
        int int24 = classWriter1.newClass("");
        classWriter1.visitInnerClass("hi!", "hi!", "hi!", 16779008);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test19439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19439");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIntInsn((-1), 1399416686);
        methodVisitor69.visitVarInsn(83, 16778088);
        methodVisitor69.visitCode();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
    }

    @Test
    public void test19440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19440");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newNameType("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor19 = classWriter16.visitAnnotation("", true);
        classWriter16.visitSource("", "");
        classWriter16.visitSource("", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor31 = classWriter16.visitField(10, "hi!", "hi!", "hi!", (java.lang.Object) 1);
        classWriter16.visitOuterClass("", "", "");
        classWriter16.visitSource("", "");
        int int41 = classWriter16.newNameType("", "hi!");
        byte[] byteArray42 = classWriter16.toByteArray();
        int int46 = classWriter16.newField("", "", "");
        org.mockito.asm.FieldVisitor fieldVisitor47 = classWriter1.visitField(0, "hi!", "hi!", "hi!", (java.lang.Object) "");
        byte[] byteArray48 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader49 = new org.mockito.asm.ClassReader(byteArray48);
        org.mockito.asm.ClassReader classReader52 = new org.mockito.asm.ClassReader(byteArray48, 14, 65210);
        int int54 = classReader52.readByte((int) (short) 7);
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(annotationVisitor19);
        org.junit.Assert.assertNotNull(fieldVisitor31);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 13, 1, 0, 0, 1, 0, 3, 104, 105, 33, 3, 0, 0, 0, 1, 7, 0, 1, 12, 0, 1, 0, 1, 12, 0, 1, 0, 2, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 10, 0, 2, 0, 2, 0, 2, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 2, 0, 2, 0, 0, 0, 4, 0, 9, 0, 0, 0, 2, 0, 1, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 4, 0, 4, 0, 5, 0, 12, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 13 + "'", int46 == 13);
        org.junit.Assert.assertNotNull(fieldVisitor47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 10, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 8, 0, 1, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 5, 0, 0, 0, 2, 0, 4, 0, 6, 0, 0, 0, 2, 0, 2, 0, 0, 0, 3, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test19441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19441");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(0);
        classWriter1.visitInnerClass("hi!", "\007\000", "hi!", 119);
        org.mockito.asm.Attribute attribute7 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test19442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19442");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        classWriter26.visitOuterClass("hi!", "", "hi!");
        byte[] byteArray37 = classWriter26.toByteArray();
        byte[] byteArray38 = classWriter26.toByteArray();
        int int42 = classWriter26.newField("hi!", "", "");
        classWriter26.visitEnd();
        int int46 = classWriter26.newNameType("\001", "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 1, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 4, 0, 5]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 1, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 4, 0, 5]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 11 + "'", int42 == 11);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 14 + "'", int46 == 14);
    }

    @Test
    public void test19443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19443");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "", "" };
        classWriter1.visit((int) (byte) 100, 7, "", "", "hi!", strArray25);
        int int29 = classWriter1.newNameType("hi!", "hi!");
        classWriter1.visitOuterClass("hi!", "", "\007\000");
        classWriter1.visitEnd();
        int int37 = classWriter1.newNameType("hi!", "");
        classWriter1.visitOuterClass("hi!", "", "");
        classWriter1.visitSource("\001", "\001");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
    }

    @Test
    public void test19444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19444");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.Attribute[] attributeArray27 = new org.mockito.asm.Attribute[] {};
        classReader24.accept((org.mockito.asm.ClassVisitor) classWriter26, attributeArray27, (int) (short) 0);
        long long31 = classReader24.readLong(0);
        java.lang.String str32 = classReader24.getClassName();
        java.lang.String str33 = classReader24.getClassName();
        java.lang.String[] strArray34 = classReader24.getInterfaces();
        int int35 = classReader24.getAccess();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(attributeArray27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3819410108757049247L) + "'", long31 == (-3819410108757049247L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
    }

    @Test
    public void test19445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19445");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        byte[] byteArray8 = classReader7.b;
        int int9 = classReader7.header;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
    }

    @Test
    public void test19446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19446");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        int int27 = classWriter1.newField("", "hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter40 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter40.visitEnd();
        byte[] byteArray42 = classWriter40.toByteArray();
        org.mockito.asm.ClassReader classReader43 = new org.mockito.asm.ClassReader(byteArray42);
        java.lang.String[] strArray44 = classReader43.getInterfaces();
        int int45 = classReader43.getAccess();
        int int47 = classReader43.readUnsignedShort(4);
        int int49 = classReader43.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor50 = classWriter34.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        classWriter34.visit((int) (byte) 10, (-1), "", "", "", strArray58);
        classWriter1.visit((-889275714), 0, "", "hi!", "hi!", strArray58);
        int int65 = classWriter1.newMethod("hi!", "", "hi!", false);
        org.mockito.asm.ClassWriter classWriter71 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter71.visitEnd();
        classWriter71.visitSource("hi!", "");
        int int80 = classWriter71.newMethod("", "hi!", "", false);
        java.lang.Object obj85 = null;
        org.mockito.asm.FieldVisitor fieldVisitor86 = classWriter71.visitField(12, "hi!", "hi!", "", obj85);
        org.mockito.asm.FieldVisitor fieldVisitor87 = classWriter1.visitField((int) (short) 9, "\007\000", "\007\000", "\007\000", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor90 = fieldVisitor87.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = fieldVisitor87.visitAnnotation("", false);
        org.mockito.asm.Attribute attribute94 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor87.visitAttribute(attribute94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor86);
        org.junit.Assert.assertNotNull(fieldVisitor87);
        org.junit.Assert.assertNotNull(annotationVisitor90);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test19447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19447");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        int int10 = classWriter1.newMethod("", "hi!", "", false);
        int int13 = classWriter1.newNameType("hi!", "hi!");
        byte[] byteArray14 = classWriter1.toByteArray();
        int int17 = classWriter1.newNameType("\001", "\007\000");
        int int21 = classWriter1.newField("hi!", "hi!", "hi!");
        classWriter1.visitInnerClass("hi!", "\007\000", "\001", 15);
        classWriter1.visitSource("\001", "");
        classWriter1.visitSource("hi!", "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 12, 0, 1, 0, 2, 10, 0, 3, 0, 4, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 2, 0, 1, 0, 8, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
    }

    @Test
    public void test19448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19448");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        byte[] byteArray20 = classWriter1.toByteArray();
        int int24 = classWriter1.newField("", "", "hi!");
        int int27 = classWriter1.newNameType("", "hi!");
        classWriter1.visitInnerClass("", "hi!", "\007\000", (int) (byte) 10);
        classWriter1.visitSource("\007\000", "hi!");
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("", "hi!", "hi!");
        classWriter1.visitInnerClass("\001", "\007\000", "", 327680);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 11 + "'", int27 == 11);
    }

    @Test
    public void test19449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19449");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        int int35 = classReader20.readInt(13);
        int int36 = classReader20.getAccess();
        byte[] byteArray37 = classReader20.b;
        java.lang.String str38 = classReader20.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int40 = classReader20.readByte((int) (short) 2049);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1751720193 + "'", int35 == 1751720193);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test19450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19450");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(10);
        methodVisitor69.visitInsn(3);
        methodVisitor69.visitEnd();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 100);
        methodVisitor69.visitMultiANewArrayInsn("hi!", 196612);
        methodVisitor69.visitTypeInsn(100, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19451");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String str25 = classReader24.getSuperName();
        int int27 = classReader24.readInt(10);
        java.lang.String[] strArray28 = classReader24.getInterfaces();
        org.mockito.asm.ClassWriter classWriter30 = new org.mockito.asm.ClassWriter(classReader24, 21353);
        int int32 = classWriter30.newUTF8("\001");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16778088 + "'", int27 == 16778088);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
    }

    @Test
    public void test19452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19452");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter(classReader24, 2);
        org.mockito.asm.ClassWriter classWriter28 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter28.visitEnd();
        classWriter28.visitSource("hi!", "");
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter28.visit((int) 'a', (int) '4', "", "hi!", "", strArray44);
        byte[] byteArray46 = classWriter28.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter28.visitAnnotation("", false);
        byte[] byteArray50 = classWriter28.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        java.lang.String str52 = classReader51.getSuperName();
        int int54 = classReader51.readInt(10);
        int int55 = classReader51.header;
        long long57 = classReader51.readLong((int) ' ');
        java.lang.String[] strArray58 = classReader51.getInterfaces();
        byte[] byteArray59 = classReader51.b;
        // The following exception was thrown during execution in test generation
        try {
            int int60 = classWriter26.newConst((java.lang.Object) byteArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: value [B@579485fa");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16778088 + "'", int54 == 16778088);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 103 + "'", int55 == 103);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 7022366853158731786L + "'", long57 == 7022366853158731786L);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
    }

    @Test
    public void test19453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19453");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitIincInsn(196613, (-1));
        methodVisitor69.visitTypeInsn(16777223, "");
        methodVisitor69.visitMaxs(16777223, (int) (short) -1);
        methodVisitor69.visitInsn(3);
        methodVisitor69.visitInsn(223337);
        methodVisitor69.visitEnd();
        methodVisitor69.visitMethodInsn((int) (short) 29813, "hi!", "\001", "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19454");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        org.mockito.asm.ClassWriter classWriter16 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter16.visitEnd();
        byte[] byteArray18 = classWriter16.toByteArray();
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray18);
        java.lang.String[] strArray20 = classReader19.getInterfaces();
        int int22 = classReader19.readInt((int) (byte) 0);
        java.lang.String str23 = classReader19.getSuperName();
        java.lang.String[] strArray24 = classReader19.getInterfaces();
        java.lang.String[] strArray25 = classReader19.getInterfaces();
        classWriter1.visit(2, (-1), "hi!", "hi!", "hi!", strArray25);
        int int31 = classWriter1.newMethod("", "\007\000", "", false);
        classWriter1.visitEnd();
        classWriter1.visitSource("\007\000", "hi!");
        classWriter1.visitEnd();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-889275714) + "'", int22 == (-889275714));
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
    }

    @Test
    public void test19455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19455");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitCode();
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs(12, 202);
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitMultiANewArrayInsn("hi!", (int) (short) 100);
        methodVisitor69.visitEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.AnnotationVisitor annotationVisitor90 = methodVisitor69.visitParameterAnnotation(33554688, "", false);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test19456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19456");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor16 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        classWriter1.visitOuterClass("hi!", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor30 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitInnerClass("hi!", "\007\000", "\007\000", 14);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter42.visitEnd();
        classWriter42.visitSource("hi!", "");
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter42.visit((int) 'a', (int) '4', "", "hi!", "", strArray58);
        byte[] byteArray60 = classWriter42.toByteArray();
        org.mockito.asm.ClassReader classReader61 = new org.mockito.asm.ClassReader(byteArray60);
        org.mockito.asm.ClassWriter classWriter63 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader61.accept((org.mockito.asm.ClassVisitor) classWriter63, 8);
        org.mockito.asm.ClassWriter classWriter67 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter67.visitEnd();
        classWriter67.visitSource("", "");
        classReader61.accept((org.mockito.asm.ClassVisitor) classWriter67, 100);
        java.lang.String[] strArray74 = classReader61.getInterfaces();
        int int76 = classReader61.readInt(13);
        int int77 = classReader61.getAccess();
        java.lang.String[] strArray78 = classReader61.getInterfaces();
        classWriter1.visit(1399416686, 19, "", "\007\000", "", strArray78);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(annotationVisitor16);
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertNotNull(annotationVisitor30);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1751720193 + "'", int76 == 1751720193);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(strArray78);
    }

    @Test
    public void test19457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19457");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        int int15 = classWriter1.newMethod("", "", "hi!", true);
        org.mockito.asm.ClassWriter classWriter21 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter21.visitEnd();
        classWriter21.visitSource("hi!", "");
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter21.visit((int) 'a', (int) '4', "", "hi!", "", strArray37);
        classWriter21.visitOuterClass("hi!", "", "hi!");
        int int47 = classWriter21.newMethod("hi!", "", "hi!", true);
        classWriter21.visitEnd();
        classWriter21.visitInnerClass("", "\007\000", "\007\000", 51);
        org.mockito.asm.FieldVisitor fieldVisitor54 = classWriter1.visitField(0, "hi!", "\007\000", "hi!", (java.lang.Object) "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor57 = fieldVisitor54.visitAnnotation("\007\000", false);
        annotationVisitor57.visitEnum("", "\007\000", "hi!");
        annotationVisitor57.visitEnum("\001", "hi!", "\001");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(fieldVisitor54);
        org.junit.Assert.assertNotNull(annotationVisitor57);
    }

    @Test
    public void test19458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19458");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray2 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader5 = new org.mockito.asm.ClassReader(byteArray2, (int) (byte) 0, (-1));
        org.mockito.asm.ClassReader classReader6 = new org.mockito.asm.ClassReader(byteArray2);
        org.mockito.asm.ClassReader classReader9 = new org.mockito.asm.ClassReader(byteArray2, 0, 512);
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray2);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = classReader10.readByte(50);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test19459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19459");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        classWriter26.visitOuterClass("hi!", "", "hi!");
        byte[] byteArray37 = classWriter26.toByteArray();
        int int40 = classWriter26.newNameType("\007\000", "\007\000");
        classWriter26.visitEnd();
        int int46 = classWriter26.newMethod("\001", "hi!", "\007\000", false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 10, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 12, 0, 1, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 2, 0, 3, 0, 8, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0, 4, 0, 5]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 11 + "'", int40 == 11);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 15 + "'", int46 == 15);
    }

    @Test
    public void test19460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19460");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor77 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.AnnotationVisitor annotationVisitor78 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn((-21316096), 186);
        methodVisitor69.visitMaxs((int) (byte) 10, 10);
        methodVisitor69.visitMaxs(16779008, (int) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) 28526, 65542);
        methodVisitor69.visitIincInsn(254, 15);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor78);
        org.junit.Assert.assertNotNull(annotationVisitor88);
    }

    @Test
    public void test19461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19461");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        org.mockito.asm.Label label85 = null;
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        methodVisitor69.visitTryCatchBlock(label85, label86, label87, "\007\000");
        org.mockito.asm.Label label93 = null;
        org.mockito.asm.Label label94 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitLocalVariable("", "hi!", "hi!", label93, label94, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test19462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19462");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitIincInsn(196613, (-1));
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitFieldInsn(15, "hi!", "\007\000", "");
        methodVisitor69.visitTypeInsn(676719, "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor91 = methodVisitor69.visitAnnotation("\001", false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor91);
    }

    @Test
    public void test19463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19463");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        byte[] byteArray25 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader26 = new org.mockito.asm.ClassReader(byteArray25);
        short short28 = classReader26.readShort(13);
        int int30 = classReader26.getItem(3);
        int int32 = classReader26.readUnsignedShort(8);
        int int34 = classReader26.readInt((int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor39 = classWriter36.visitAnnotation("", true);
        int int42 = classWriter36.newNameType("hi!", "hi!");
        int int46 = classWriter36.newField("hi!", "hi!", "hi!");
        classWriter36.visitSource("hi!", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter36.visitAnnotation("\007\000", false);
        classWriter36.visitEnd();
        classReader26.accept((org.mockito.asm.ClassVisitor) classWriter36, (int) (short) 1280);
        int int57 = classWriter36.newClass("hi!");
        byte[] byteArray58 = classWriter36.toByteArray();
        org.mockito.asm.ClassReader classReader59 = new org.mockito.asm.ClassReader(byteArray58);
        org.mockito.asm.ClassReader classReader60 = new org.mockito.asm.ClassReader(byteArray58);
        // The following exception was thrown during execution in test generation
        try {
            int int62 = classReader60.getItem(1953854053);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1953854053");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 7, 0, 3, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 2, 0, 2, 0, 6, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 2, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 3, 0, 6, 0, 0, 0, 2, 0, 3, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + short28 + "' != '" + (short) 1792 + "'", short28 == (short) 1792);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 17 + "'", int30 == 17);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16777223 + "'", int34 == 16777223);
        org.junit.Assert.assertNotNull(annotationVisitor39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 4 + "'", int57 == 4);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 13, 1, 0, 0, 1, 0, 3, 104, 105, 33, 12, 0, 2, 0, 2, 7, 0, 2, 9, 0, 4, 0, 3, 1, 0, 3, 7, -64, -128, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 7, 0, 7, 0, 6, 0, 4, 0, 7, 0, 4, 0, 4, 0, 4, 0, 7, 0, 0, 0, 0, 0, 5, 0, 8, 0, 0, 0, 2, 0, 2, 0, 9, 0, 0, 0, 2, 0, 2, 0, 10, 0, 0, 0, 0, 0, 11, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 12, 0, 0, 0, 6, 0, 1, 0, 6, 0, 0]");
    }

    @Test
    public void test19464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19464");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitIincInsn(2, (int) '#');
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotation("", true);
        methodVisitor69.visitMethodInsn(65210, "", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(51966, (int) (byte) 1);
        methodVisitor69.visitIincInsn(3, 11);
        methodVisitor69.visitIntInsn((-1161953280), (int) ' ');
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor93 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor82);
        org.junit.Assert.assertNotNull(annotationVisitor93);
    }

    @Test
    public void test19465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19465");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "");
        int int10 = classWriter1.newMethod("", "hi!", "hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("", false);
        classWriter1.visitSource("hi!", "hi!");
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter22.visitEnd();
        byte[] byteArray24 = classWriter22.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter22.visitAnnotation("", true);
        classWriter22.visitOuterClass("", "", "hi!");
        int int36 = classWriter22.newMethod("", "hi!", "hi!", true);
        int int40 = classWriter22.newField("hi!", "", "hi!");
        classWriter22.visitOuterClass("", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor47 = classWriter22.visitAnnotation("hi!", true);
        org.mockito.asm.FieldVisitor fieldVisitor48 = classWriter1.visitField(51966, "\007\000", "hi!", "\007\000", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor51 = fieldVisitor48.visitAnnotation("", false);
        fieldVisitor48.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor55 = fieldVisitor48.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor58 = fieldVisitor48.visitAnnotation("", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor61 = fieldVisitor48.visitAnnotation("\007\000", false);
        org.mockito.asm.Attribute attribute62 = null;
        // The following exception was thrown during execution in test generation
        try {
            fieldVisitor48.visitAttribute(attribute62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor47);
        org.junit.Assert.assertNotNull(fieldVisitor48);
        org.junit.Assert.assertNotNull(annotationVisitor51);
        org.junit.Assert.assertNotNull(annotationVisitor55);
        org.junit.Assert.assertNotNull(annotationVisitor58);
        org.junit.Assert.assertNotNull(annotationVisitor61);
    }

    @Test
    public void test19466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19466");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        byte[] byteArray6 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader7 = new org.mockito.asm.ClassReader(byteArray6);
        byte[] byteArray8 = classReader7.b;
        int int10 = classReader7.readInt((int) (short) 1);
        int int11 = classReader7.header;
        int int13 = classReader7.readUnsignedShort((int) (short) 9);
        int int14 = classReader7.getAccess();
        byte[] byteArray15 = classReader7.b;
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-21316096) + "'", int10 == (-21316096));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1025 + "'", int13 == 1025);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
    }

    @Test
    public void test19467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19467");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((-21316096), 0);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor82 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitVarInsn(23, 51);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor82);
    }

    @Test
    public void test19468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19468");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor73 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIincInsn((int) (short) -1, (int) (byte) -1);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitVarInsn(7, (int) (short) -17730);
        methodVisitor69.visitEnd();
        methodVisitor69.visitMaxs((int) (short) -17730, 8);
        methodVisitor69.visitCode();
        methodVisitor69.visitVarInsn((int) (byte) 100, 0);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor73);
    }

    @Test
    public void test19469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19469");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassWriter classWriter29 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter29.visitEnd();
        byte[] byteArray31 = classWriter29.toByteArray();
        org.mockito.asm.ClassReader classReader32 = new org.mockito.asm.ClassReader(byteArray31);
        java.lang.String[] strArray33 = classReader32.getInterfaces();
        short short35 = classReader32.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor36 = classWriter1.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        fieldVisitor36.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor40 = fieldVisitor36.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor43 = fieldVisitor36.visitAnnotation("hi!", true);
        org.mockito.asm.AnnotationVisitor annotationVisitor46 = fieldVisitor36.visitAnnotation("\007\000", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = fieldVisitor36.visitAnnotation("", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = fieldVisitor36.visitAnnotation("\001", false);
        fieldVisitor36.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + short35 + "' != '" + (short) -326 + "'", short35 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor36);
        org.junit.Assert.assertNotNull(annotationVisitor40);
        org.junit.Assert.assertNotNull(annotationVisitor43);
        org.junit.Assert.assertNotNull(annotationVisitor46);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor52);
    }

    @Test
    public void test19470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19470");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        classWriter1.visitInnerClass("hi!", "", "", (int) 'a');
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = classWriter1.visitAnnotation("", true);
        int int31 = classWriter1.newMethod("", "hi!", "", true);
        classWriter1.visitEnd();
        classWriter1.visitSource("", "hi!");
        classWriter1.visitInnerClass("\001", "\007\000", "", 18);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 6 + "'", int31 == 6);
    }

    @Test
    public void test19471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19471");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        classWriter1.visitOuterClass("", "hi!", "\007\000");
        classWriter1.visitOuterClass("\007\000", "", "\007\000");
        classWriter1.visitEnd();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
    }

    @Test
    public void test19472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19472");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        methodVisitor69.visitMultiANewArrayInsn("", 2);
        org.mockito.asm.Label label79 = null;
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        methodVisitor69.visitTryCatchBlock(label79, label80, label81, "hi!");
        methodVisitor69.visitCode();
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotationDefault();
        org.mockito.asm.Label label86 = null;
        org.mockito.asm.Label label87 = null;
        org.mockito.asm.Label label88 = null;
        methodVisitor69.visitTryCatchBlock(label86, label87, label88, "\001");
        methodVisitor69.visitInsn((int) ' ');
        methodVisitor69.visitInsn(47806);
        methodVisitor69.visitTypeInsn(0, "\007\000");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test19473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19473");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int6 = classWriter1.newMethod("", "", "hi!", false);
        classWriter1.visitEnd();
        int int9 = classWriter1.newClass("");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        byte[] byteArray17 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader18 = new org.mockito.asm.ClassReader(byteArray17);
        org.mockito.asm.ClassReader classReader19 = new org.mockito.asm.ClassReader(byteArray17);
        org.mockito.asm.ClassReader classReader22 = new org.mockito.asm.ClassReader(byteArray17, 2, (int) (short) -1);
        org.mockito.asm.FieldVisitor fieldVisitor23 = classWriter1.visitField((int) (short) 1, "\007\000", "hi!", "", (java.lang.Object) 2);
        org.mockito.asm.AnnotationVisitor annotationVisitor26 = fieldVisitor23.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor29 = fieldVisitor23.visitAnnotation("\007\000", true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(fieldVisitor23);
        org.junit.Assert.assertNotNull(annotationVisitor26);
        org.junit.Assert.assertNotNull(annotationVisitor29);
    }

    @Test
    public void test19474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19474");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String str25 = classReader24.getSuperName();
        int int27 = classReader24.readInt(10);
        java.lang.String[] strArray28 = classReader24.getInterfaces();
        byte[] byteArray29 = classReader24.b;
        int int30 = classReader24.getAccess();
        java.lang.String str31 = classReader24.getClassName();
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16778088 + "'", int27 == 16778088);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test19475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19475");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("hi!", "hi!", "", (int) (byte) 100);
        org.mockito.asm.AnnotationVisitor annotationVisitor27 = classWriter1.visitAnnotation("hi!", false);
        int int29 = classWriter1.newUTF8("\007\000");
        int int34 = classWriter1.newMethod("\007\000", "", "\007\000", true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
    }

    @Test
    public void test19476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19476");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        short short7 = classReader4.readShort((int) (byte) 1);
        java.lang.String str8 = classReader4.getSuperName();
        short short10 = classReader4.readShort(13);
        long long12 = classReader4.readLong((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = classReader4.readLong(2048);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) -326 + "'", short7 == (short) -326);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + short10 + "' != '" + (short) 0 + "'", short10 == (short) 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test19477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19477");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        classWriter22.visitOuterClass("", "hi!", "hi!");
        classWriter22.visitInnerClass("hi!", "hi!", "\007\000", 0);
        int int38 = classWriter22.newMethod("\007\000", "hi!", "", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor41 = classWriter22.visitAnnotation("\007\000", true);
        classWriter22.visitInnerClass("\007\000", "\001", "\007\000", 10);
        org.mockito.asm.AnnotationVisitor annotationVisitor49 = classWriter22.visitAnnotation("", false);
        byte[] byteArray50 = classWriter22.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(annotationVisitor41);
        org.junit.Assert.assertNotNull(annotationVisitor49);
        org.junit.Assert.assertNotNull(byteArray50);
    }

    @Test
    public void test19478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19478");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn(9, (int) 'a');
        methodVisitor69.visitMaxs((int) (short) 0, 48640);
        org.mockito.asm.AnnotationVisitor annotationVisitor76 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitInsn(256);
        methodVisitor69.visitEnd();
        org.mockito.asm.Label label80 = null;
        org.mockito.asm.Label label81 = null;
        org.mockito.asm.Label label82 = null;
        methodVisitor69.visitTryCatchBlock(label80, label81, label82, "");
        org.mockito.asm.AnnotationVisitor annotationVisitor85 = methodVisitor69.visitAnnotationDefault();
        methodVisitor69.visitIntInsn((int) (byte) 10, 262147);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor76);
        org.junit.Assert.assertNotNull(annotationVisitor85);
    }

    @Test
    public void test19479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19479");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitFieldInsn(4, "hi!", "hi!", "hi!");
        methodVisitor69.visitMethodInsn(7, "hi!", "hi!", "hi!");
        methodVisitor69.visitTypeInsn((-889275714), "hi!");
        methodVisitor69.visitVarInsn(0, 1751720193);
        methodVisitor69.visitIntInsn((-21316096), 1399416686);
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19480");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitTypeInsn(65210, "");
        org.mockito.asm.ClassWriter classWriter74 = new org.mockito.asm.ClassWriter(100);
        byte[] byteArray75 = classWriter74.toByteArray();
        org.mockito.asm.ClassReader classReader78 = new org.mockito.asm.ClassReader(byteArray75, (int) (byte) 0, (-1));
        long long80 = classReader78.readLong(12);
        methodVisitor69.visitLdcInsn((java.lang.Object) 12);
        org.mockito.asm.Label label82 = null;
        org.mockito.asm.Label label83 = null;
        org.mockito.asm.Label label84 = null;
        methodVisitor69.visitTryCatchBlock(label82, label83, label84, "\001");
        org.mockito.asm.Attribute attribute87 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitAttribute(attribute87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
    }

    @Test
    public void test19481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19481");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter(52);
        byte[] byteArray2 = classWriter1.toByteArray();
        classWriter1.visitEnd();
        classWriter1.visitOuterClass("", "", "\007\000");
        classWriter1.visitSource("", "\001");
        int int14 = classWriter1.newField("\001", "\007\000", "");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("\007\000", true);
        classWriter1.visitOuterClass("hi!", "\001", "\007\000");
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(annotationVisitor17);
    }

    @Test
    public void test19482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19482");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        int int5 = classWriter1.newField("", "", "hi!");
        int int7 = classWriter1.newClass("");
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int19 = classWriter1.newMethod("", "hi!", "\007\000", false);
        org.mockito.asm.Attribute attribute20 = null;
        // The following exception was thrown during execution in test generation
        try {
            classWriter1.visitAttribute(attribute20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test19483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19483");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitIincInsn((int) 'a', (int) (short) -1);
        methodVisitor69.visitTypeInsn(13, "hi!");
        methodVisitor69.visitMaxs((int) (short) 0, (int) '4');
        methodVisitor69.visitIincInsn((int) (short) 4, 16779008);
        methodVisitor69.visitIntInsn(83, 3);
        methodVisitor69.visitInsn((int) (short) 0);
        methodVisitor69.visitFieldInsn(341012341, "\001", "\001", "\001");
        org.mockito.asm.Label label92 = null;
        org.mockito.asm.Label label93 = null;
        org.mockito.asm.Label label94 = null;
        methodVisitor69.visitTryCatchBlock(label92, label93, label94, "");
        methodVisitor69.visitInsn(57174305);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
    }

    @Test
    public void test19484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19484");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        classWriter1.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor10 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitOuterClass("hi!", "hi!", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor17 = classWriter1.visitAnnotation("hi!", true);
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        byte[] byteArray20 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("\007\000", "\007\000", "hi!", 2048);
        org.junit.Assert.assertNotNull(annotationVisitor10);
        org.junit.Assert.assertNotNull(annotationVisitor17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 3, 104, 105, 33, 7, 0, 1, 12, 0, 1, 0, 1, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 4, 0, 0, 0, 2, 0, 1, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 2, 0, 3, 0, 7, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
    }

    @Test
    public void test19485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19485");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        methodVisitor69.visitVarInsn(3, (int) 'a');
        methodVisitor69.visitCode();
        methodVisitor69.visitMultiANewArrayInsn("hi!", 254);
        methodVisitor69.visitIntInsn(20, 202);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = methodVisitor69.visitAnnotationDefault();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor83);
    }

    @Test
    public void test19486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19486");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        classWriter22.visitOuterClass("", "hi!", "hi!");
        classWriter22.visitInnerClass("hi!", "hi!", "\007\000", 0);
        int int38 = classWriter22.newMethod("\007\000", "hi!", "\007\000", false);
        org.mockito.asm.ClassWriter classWriter44 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int49 = classWriter44.newMethod("", "", "hi!", false);
        classWriter44.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor53 = classWriter44.visitAnnotation("hi!", false);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        classWriter59.visitSource("", "");
        classWriter59.visitSource("", "hi!");
        int int72 = classWriter59.newField("hi!", "hi!", "hi!");
        int int76 = classWriter59.newField("hi!", "hi!", "hi!");
        org.mockito.asm.FieldVisitor fieldVisitor77 = classWriter44.visitField((int) (byte) 100, "hi!", "", "hi!", (java.lang.Object) "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor80 = fieldVisitor77.visitAnnotation("hi!", false);
        org.mockito.asm.AnnotationVisitor annotationVisitor83 = fieldVisitor77.visitAnnotation("hi!", false);
        fieldVisitor77.visitEnd();
        fieldVisitor77.visitEnd();
        org.mockito.asm.AnnotationVisitor annotationVisitor88 = fieldVisitor77.visitAnnotation("\007\000", true);
        org.mockito.asm.FieldVisitor fieldVisitor89 = classWriter22.visitField((int) (short) 4, "\001", "", "", (java.lang.Object) "\007\000");
        int int91 = classWriter22.newUTF8("");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(annotationVisitor53);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5 + "'", int76 == 5);
        org.junit.Assert.assertNotNull(fieldVisitor77);
        org.junit.Assert.assertNotNull(annotationVisitor80);
        org.junit.Assert.assertNotNull(annotationVisitor83);
        org.junit.Assert.assertNotNull(annotationVisitor88);
        org.junit.Assert.assertNotNull(fieldVisitor89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test19487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19487");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        int int30 = classWriter1.newField("", "", "");
        java.lang.String[] strArray36 = null;
        classWriter1.visit((-889275714), 0, "", "", "", strArray36);
        int int42 = classWriter1.newMethod("\007\000", "", "", false);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 7 + "'", int30 == 7);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
    }

    @Test
    public void test19488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19488");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        org.mockito.asm.AnnotationVisitor annotationVisitor13 = classWriter1.visitAnnotation("hi!", false);
        classWriter1.visitInnerClass("hi!", "", "\007\000", (int) (short) 1);
        byte[] byteArray19 = classWriter1.toByteArray();
        classWriter1.visitInnerClass("\007\000", "", "\007\000", (int) (short) 0);
        classWriter1.visitInnerClass("\007\000", "", "", 1763770624);
        int int33 = classWriter1.newField("hi!", "\001", "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertNotNull(annotationVisitor13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 11, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 7, 0, 3, 1, 0, 3, 7, -64, -128, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 12, 73, 110, 110, 101, 114, 67, 108, 97, 115, 115, 101, 115, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 10, 0, 1, 0, 5, 0, 2, 0, 6, 0, 1, 0, 9, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0, 0, 10, 0, 0, 0, 6, 0, 1, 0, 3, 0, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 14 + "'", int33 == 14);
    }

    @Test
    public void test19489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19489");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader4 = new org.mockito.asm.ClassReader(byteArray3);
        java.lang.String[] strArray5 = classReader4.getInterfaces();
        int int7 = classReader4.readInt((int) (byte) 0);
        java.lang.String str8 = classReader4.getSuperName();
        java.lang.String[] strArray9 = classReader4.getInterfaces();
        java.lang.String[] strArray10 = classReader4.getInterfaces();
        int int11 = classReader4.header;
        int int12 = classReader4.header;
        int int13 = classReader4.header;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-889275714) + "'", int7 == (-889275714));
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test19490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19490");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitInnerClass("hi!", "", "\007\000", 8);
        classWriter1.visitInnerClass("", "\001", "hi!", 116);
        int int32 = classWriter1.newMethod("\001", "\001", "", false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 12 + "'", int32 == 12);
    }

    @Test
    public void test19491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19491");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        classWriter1.visitEnd();
        byte[] byteArray7 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader8 = new org.mockito.asm.ClassReader(byteArray7);
        int int9 = classReader8.header;
        java.lang.String str10 = classReader8.getSuperName();
        int int11 = classReader8.header;
        int int12 = classReader8.getAccess();
        org.mockito.asm.ClassWriter classWriter14 = new org.mockito.asm.ClassWriter(classReader8, 65536);
        int int16 = classReader8.readUnsignedShort(73);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 4, 1, 0, 3, 104, 105, 33, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 256 + "'", int16 == 256);
    }

    @Test
    public void test19492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19492");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor22 = classWriter1.visitAnnotation("", false);
        byte[] byteArray23 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader24 = new org.mockito.asm.ClassReader(byteArray23);
        java.lang.String[] strArray25 = classReader24.getInterfaces();
        byte[] byteArray26 = classReader24.b;
        long long28 = classReader24.readLong(100);
        java.lang.String str29 = classReader24.getSuperName();
        byte[] byteArray30 = classReader24.b;
        short short32 = classReader24.readShort((int) (byte) 10);
        org.mockito.asm.ClassWriter classWriter34 = new org.mockito.asm.ClassWriter(classReader24, 154);
        // The following exception was thrown during execution in test generation
        try {
            short short36 = classReader24.readShort((int) (short) -16896);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -16896");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 8029481630357783296L + "'", long28 == 8029481630357783296L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertTrue("'" + short32 + "' != '" + (short) 256 + "'", short32 == (short) 256);
    }

    @Test
    public void test19493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19493");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitCode();
        methodVisitor69.visitInsn(0);
        org.mockito.asm.AnnotationVisitor annotationVisitor75 = methodVisitor69.visitAnnotation("hi!", true);
        methodVisitor69.visitCode();
        org.mockito.asm.Label label77 = null;
        org.mockito.asm.Label label78 = null;
        org.mockito.asm.Label label79 = null;
        methodVisitor69.visitTryCatchBlock(label77, label78, label79, "\001");
        org.mockito.asm.Label label83 = null;
        // The following exception was thrown during execution in test generation
        try {
            methodVisitor69.visitJumpInsn((int) (byte) -1, label83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertNotNull(annotationVisitor75);
    }

    @Test
    public void test19494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19494");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classWriter1.visitEnd();
        classWriter1.visitInnerClass("\007\000", "hi!", "", 88);
    }

    @Test
    public void test19495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19495");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        org.mockito.asm.ClassWriter classWriter22 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter22, 8);
        org.mockito.asm.ClassWriter classWriter26 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter26.visitEnd();
        classWriter26.visitSource("", "");
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter26, 100);
        java.lang.String[] strArray33 = classReader20.getInterfaces();
        java.lang.String str34 = classReader20.getClassName();
        java.lang.String[] strArray35 = classReader20.getInterfaces();
        org.mockito.asm.ClassWriter classWriter37 = new org.mockito.asm.ClassWriter(classReader20, (int) (short) -1);
        org.mockito.asm.ClassWriter classWriter39 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter39.visitEnd();
        classWriter39.visitSource("hi!", "");
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter39.visit((int) 'a', (int) '4', "", "hi!", "", strArray55);
        byte[] byteArray57 = classWriter39.toByteArray();
        org.mockito.asm.ClassReader classReader58 = new org.mockito.asm.ClassReader(byteArray57);
        org.mockito.asm.ClassWriter classWriter60 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader58.accept((org.mockito.asm.ClassVisitor) classWriter60, 8);
        int int64 = classWriter60.newUTF8("");
        int int67 = classWriter60.newNameType("\007\000", "\007\000");
        org.mockito.asm.AnnotationVisitor annotationVisitor70 = classWriter60.visitAnnotation("", true);
        classReader20.accept((org.mockito.asm.ClassVisitor) classWriter60, 2);
        char[] charArray74 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = classReader20.readClass(47806, charArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 47806");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 6 + "'", int67 == 6);
        org.junit.Assert.assertNotNull(annotationVisitor70);
    }

    @Test
    public void test19496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19496");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        classWriter1.visitSource("hi!", "");
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter1.visit((int) 'a', (int) '4', "", "hi!", "", strArray17);
        org.mockito.asm.ClassWriter classWriter25 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter25.visitEnd();
        classWriter25.visitSource("hi!", "");
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter25.visit((int) 'a', (int) '4', "", "hi!", "", strArray41);
        classWriter1.visit(2, 7, "", "", "hi!", strArray41);
        classWriter1.visitEnd();
        int int46 = classWriter1.newUTF8("");
        classWriter1.visitInnerClass("", "hi!", "", (-1161953280));
        classWriter1.visitInnerClass("", "\001", "", (int) (short) 4);
        classWriter1.visitSource("\001", "\007\000");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
    }

    @Test
    public void test19497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19497");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor4 = classWriter1.visitAnnotation("", true);
        org.mockito.asm.ClassWriter classWriter10 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter10.visitEnd();
        classWriter10.visitSource("hi!", "");
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter10.visit((int) 'a', (int) '4', "", "hi!", "", strArray26);
        byte[] byteArray28 = classWriter10.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor31 = classWriter10.visitAnnotation("", false);
        byte[] byteArray32 = classWriter10.toByteArray();
        org.mockito.asm.ClassWriter classWriter38 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter38.visitEnd();
        byte[] byteArray40 = classWriter38.toByteArray();
        org.mockito.asm.ClassReader classReader41 = new org.mockito.asm.ClassReader(byteArray40);
        java.lang.String[] strArray42 = classReader41.getInterfaces();
        short short44 = classReader41.readShort((int) (byte) 1);
        org.mockito.asm.FieldVisitor fieldVisitor45 = classWriter10.visitField(6, "hi!", "", "hi!", (java.lang.Object) (byte) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor48 = fieldVisitor45.visitAnnotation("", true);
        org.mockito.asm.FieldVisitor fieldVisitor49 = classWriter1.visitField(4, "hi!", "hi!", "hi!", (java.lang.Object) true);
        org.mockito.asm.AnnotationVisitor annotationVisitor52 = classWriter1.visitAnnotation("\007\000", false);
        classWriter1.visitOuterClass("\007\000", "", "\007\000");
        org.mockito.asm.ClassWriter classWriter62 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter62.visitEnd();
        byte[] byteArray64 = classWriter62.toByteArray();
        org.mockito.asm.ClassReader classReader65 = new org.mockito.asm.ClassReader(byteArray64);
        java.lang.String[] strArray66 = classReader65.getInterfaces();
        java.lang.String str67 = classReader65.getSuperName();
        long long69 = classReader65.readLong((int) (byte) 0);
        java.lang.String[] strArray70 = classReader65.getInterfaces();
        int int71 = classReader65.getAccess();
        int int73 = classReader65.readUnsignedShort((int) (short) 0);
        java.lang.String[] strArray74 = classReader65.getInterfaces();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.MethodVisitor methodVisitor75 = classWriter1.visitMethod((int) '#', "", "", "hi!", strArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 1");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(annotationVisitor4);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 9, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 1, 0, 27, 82, 117, 110, 116, 105, 109, 101, 73, 110, 118, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0, 0, 8, 0, 0, 0, 6, 0, 1, 0, 2, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + short44 + "' != '" + (short) -326 + "'", short44 == (short) -326);
        org.junit.Assert.assertNotNull(fieldVisitor45);
        org.junit.Assert.assertNotNull(annotationVisitor48);
        org.junit.Assert.assertNotNull(fieldVisitor49);
        org.junit.Assert.assertNotNull(annotationVisitor52);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-3819410108757049344L) + "'", long69 == (-3819410108757049344L));
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 51966 + "'", int73 == 51966);
        org.junit.Assert.assertNotNull(strArray74);
    }

    @Test
    public void test19498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19498");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitInnerClass("", "hi!", "hi!", 10);
        int int8 = classWriter1.newUTF8("hi!");
        org.mockito.asm.ClassWriter classWriter15 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter15.visitEnd();
        classWriter15.visitSource("hi!", "");
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter15.visit((int) 'a', (int) '4', "", "hi!", "", strArray31);
        byte[] byteArray33 = classWriter15.toByteArray();
        org.mockito.asm.ClassReader classReader34 = new org.mockito.asm.ClassReader(byteArray33);
        org.mockito.asm.ClassWriter classWriter36 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader34.accept((org.mockito.asm.ClassVisitor) classWriter36, 8);
        long long40 = classReader34.readLong(7);
        org.mockito.asm.ClassWriter classWriter42 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor45 = classWriter42.visitAnnotation("", true);
        int int48 = classWriter42.newNameType("hi!", "hi!");
        classReader34.accept((org.mockito.asm.ClassVisitor) classWriter42, (int) (byte) 0);
        java.lang.String str51 = classReader34.getClassName();
        java.lang.String str52 = classReader34.getSuperName();
        java.lang.String[] strArray53 = classReader34.getInterfaces();
        classWriter1.visit((int) ' ', 0, "", "\007\000", "hi!", strArray53);
        int int56 = classWriter1.newUTF8("");
        classWriter1.visitEnd();
        int int61 = classWriter1.newField("", "hi!", "");
        classWriter1.visitOuterClass("", "", "\001");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 6989595422067222633L + "'", long40 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 7 + "'", int61 == 7);
    }

    @Test
    public void test19499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19499");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) ' ');
        org.mockito.asm.ClassWriter classWriter7 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter7.visitEnd();
        byte[] byteArray9 = classWriter7.toByteArray();
        org.mockito.asm.ClassReader classReader10 = new org.mockito.asm.ClassReader(byteArray9);
        java.lang.String[] strArray11 = classReader10.getInterfaces();
        int int12 = classReader10.getAccess();
        int int14 = classReader10.readUnsignedShort(4);
        int int16 = classReader10.readByte(5);
        org.mockito.asm.FieldVisitor fieldVisitor17 = classWriter1.visitField(7, "", "hi!", "", (java.lang.Object) 5);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        classWriter1.visit((int) (byte) 10, (-1), "", "", "", strArray25);
        org.mockito.asm.ClassWriter classWriter32 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter32.visitEnd();
        classWriter32.visitSource("hi!", "");
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "hi!", "hi!", "hi!", "" };
        classWriter32.visit((int) 'a', (int) '4', "", "hi!", "", strArray48);
        byte[] byteArray50 = classWriter32.toByteArray();
        org.mockito.asm.ClassReader classReader51 = new org.mockito.asm.ClassReader(byteArray50);
        org.mockito.asm.ClassWriter classWriter53 = new org.mockito.asm.ClassWriter((int) (byte) 1);
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter53, 8);
        long long57 = classReader51.readLong(7);
        org.mockito.asm.ClassWriter classWriter59 = new org.mockito.asm.ClassWriter((int) (short) 1);
        org.mockito.asm.AnnotationVisitor annotationVisitor62 = classWriter59.visitAnnotation("", true);
        int int65 = classWriter59.newNameType("hi!", "hi!");
        classReader51.accept((org.mockito.asm.ClassVisitor) classWriter59, (int) (byte) 0);
        java.lang.String[] strArray68 = classReader51.getInterfaces();
        org.mockito.asm.MethodVisitor methodVisitor69 = classWriter1.visitMethod((int) (byte) 1, "hi!", "hi!", "hi!", strArray68);
        methodVisitor69.visitFieldInsn((int) (byte) 100, "hi!", "hi!", "");
        org.mockito.asm.ClassWriter classWriter76 = new org.mockito.asm.ClassWriter((int) (short) 1);
        int int81 = classWriter76.newMethod("", "", "hi!", false);
        int int83 = classWriter76.newUTF8("");
        methodVisitor69.visitLdcInsn((java.lang.Object) int83);
        org.mockito.asm.AnnotationVisitor annotationVisitor87 = methodVisitor69.visitAnnotation("\007\000", false);
        methodVisitor69.visitTypeInsn((int) (short) 10, "hi!");
        methodVisitor69.visitTypeInsn(23, "hi!");
        methodVisitor69.visitEnd();
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(fieldVisitor17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-54, -2, -70, -66, 0, 0, 0, 97, 0, 8, 1, 0, 3, 104, 105, 33, 1, 0, 0, 7, 0, 2, 7, 0, 1, 1, 0, 9, 83, 105, 103, 110, 97, 116, 117, 114, 101, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 20, 83, 111, 117, 114, 99, 101, 68, 101, 98, 117, 103, 69, 120, 116, 101, 110, 115, 105, 111, 110, 0, 52, 0, 3, 0, 3, 0, 6, 0, 4, 0, 3, 0, 4, 0, 4, 0, 4, 0, 3, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 2, 0, 1, 0, 6, 0, 0, 0, 2, 0, 1, 0, 7, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 6989595422067222633L + "'", long57 == 6989595422067222633L);
        org.junit.Assert.assertNotNull(annotationVisitor62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(methodVisitor69);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 5 + "'", int81 == 5);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(annotationVisitor87);
    }

    @Test
    public void test19500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest38.test19500");
        org.mockito.asm.ClassWriter classWriter1 = new org.mockito.asm.ClassWriter((int) (short) 1);
        classWriter1.visitEnd();
        byte[] byteArray3 = classWriter1.toByteArray();
        org.mockito.asm.AnnotationVisitor annotationVisitor6 = classWriter1.visitAnnotation("", true);
        classWriter1.visitOuterClass("", "", "hi!");
        int int15 = classWriter1.newMethod("", "hi!", "hi!", true);
        int int17 = classWriter1.newUTF8("hi!");
        classWriter1.visitEnd();
        byte[] byteArray19 = classWriter1.toByteArray();
        org.mockito.asm.ClassReader classReader20 = new org.mockito.asm.ClassReader(byteArray19);
        int int22 = classReader20.readUnsignedShort(5);
        int int24 = classReader20.getItem(5);
        java.lang.String str25 = classReader20.getSuperName();
        java.lang.String str26 = classReader20.getSuperName();
        java.lang.String[] strArray27 = classReader20.getInterfaces();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(annotationVisitor6);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 6 + "'", int15 == 6);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, -2, -70, -66, 0, 0, 0, 0, 0, 9, 1, 0, 0, 7, 0, 1, 1, 0, 3, 104, 105, 33, 12, 0, 1, 0, 3, 12, 0, 3, 0, 3, 11, 0, 2, 0, 5, 1, 0, 15, 69, 110, 99, 108, 111, 115, 105, 110, 103, 77, 101, 116, 104, 111, 100, 1, 0, 25, 82, 117, 110, 116, 105, 109, 101, 86, 105, 115, 105, 98, 108, 101, 65, 110, 110, 111, 116, 97, 116, 105, 111, 110, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 4, 0, 2, 0, 4, 0, 8, 0, 0, 0, 6, 0, 1, 0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 28 + "'", int24 == 28);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(strArray27);
    }
}


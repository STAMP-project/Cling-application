import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test5001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5001");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        int int6 = localDate2.getYearOfEra();
        org.joda.time.LocalDate localDate8 = localDate2.minusWeeks(32);
        int int9 = localDate2.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int11 = localDate2.get(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime17 = dateTime15.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfYear(2);
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime19.minusSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime28 = dateTime26.withLaterOffsetAtOverlap();
        org.joda.time.TimeOfDay timeOfDay29 = dateTime28.toTimeOfDay();
        org.joda.time.DateTime dateTime30 = dateTime28.withTimeAtStartOfDay();
        int int31 = dateTime28.getDayOfYear();
        org.joda.time.DateTime.Property property32 = dateTime28.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property34 = dateTime28.property(dateTimeFieldType33);
        org.joda.time.DateTime dateTime36 = dateTime22.withField(dateTimeFieldType33, 53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate38 = localDate2.withField(dateTimeFieldType33, 26052);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 69 + "'", int9 == 69);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 19 + "'", int11 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test5002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5002");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear((int) (short) 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test5003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5003");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.yearOfCentury();
        org.joda.time.Duration duration7 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.copy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfCentury();
        org.joda.time.Duration duration15 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight13);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration17 = duration15.toDuration();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        org.joda.time.DateTime dateTime25 = dateTime22.minusYears(100);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType30 = null;
        boolean boolean31 = periodType29.isSupported(durationFieldType30);
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 1, 0L, periodType29);
        java.lang.String str33 = period32.toString();
        org.joda.time.Period period35 = period32.minusMonths(9);
        org.joda.time.Period period37 = period35.withSeconds(0);
        org.joda.time.Period period39 = period35.plusDays(1);
        org.joda.time.Period period41 = period39.minusYears((int) (short) -1);
        org.joda.time.DateTime dateTime43 = dateTime25.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 2);
        org.joda.time.DateTime dateTime44 = dateTime25.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.001S" + "'", str33, "PT0.001S");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test5004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5004");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval6 = localDate5.toInterval();
        boolean boolean7 = interval2.isBefore((org.joda.time.ReadableInterval) interval6);
        long long8 = interval6.getStartMillis();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) -1, chronology10);
        org.joda.time.LocalDate localDate13 = localDate11.minusYears(1);
        org.joda.time.LocalDate.Property property14 = localDate11.year();
        org.joda.time.LocalDate localDate15 = property14.roundHalfFloorCopy();
        int int16 = localDate15.getYearOfEra();
        org.joda.time.LocalDate localDate18 = localDate15.withDayOfMonth(31);
        org.joda.time.Interval interval19 = localDate15.toInterval();
        boolean boolean20 = interval6.isBefore((org.joda.time.ReadableInterval) interval19);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(periodType21);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval25 = localDate24.toInterval();
        org.joda.time.MutableInterval mutableInterval26 = interval25.toMutableInterval();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval29 = localDate28.toInterval();
        boolean boolean30 = interval25.isBefore((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology31 = interval29.getChronology();
        long long32 = interval29.toDurationMillis();
        mutablePeriod22.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval36 = localDate35.toInterval();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval39 = localDate38.toInterval();
        org.joda.time.MutableInterval mutableInterval40 = interval39.toMutableInterval();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval43 = localDate42.toInterval();
        boolean boolean44 = interval39.isBefore((org.joda.time.ReadableInterval) interval43);
        org.joda.time.MutableInterval mutableInterval45 = interval43.toMutableInterval();
        boolean boolean46 = interval36.isBefore((org.joda.time.ReadableInterval) mutableInterval45);
        org.joda.time.DateTime dateTime47 = mutableInterval45.getStart();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval50 = localDate49.toInterval();
        org.joda.time.MutableInterval mutableInterval51 = interval50.toMutableInterval();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval54 = localDate53.toInterval();
        boolean boolean55 = interval50.isBefore((org.joda.time.ReadableInterval) interval54);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime();
        int int57 = mutableDateTime56.getDayOfMonth();
        org.joda.time.Instant instant58 = mutableDateTime56.toInstant();
        org.joda.time.Instant instant60 = instant58.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime();
        int int62 = mutableDateTime61.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone65);
        org.joda.time.DateTime dateTime67 = dateTime66.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType69 = periodType68.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime61, (org.joda.time.ReadableInstant) dateTime66, periodType69);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod74 = mutablePeriod73.copy();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(chronology75);
        org.joda.time.DateMidnight.Property property77 = dateMidnight76.yearOfCentury();
        org.joda.time.Duration duration78 = mutablePeriod74.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight76);
        mutablePeriod70.setPeriod((org.joda.time.ReadableDuration) duration78);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant58, (org.joda.time.ReadableDuration) duration78);
        org.joda.time.Interval interval81 = interval54.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration78);
        boolean boolean82 = mutableInterval45.contains((org.joda.time.ReadableInterval) interval54);
        boolean boolean83 = interval29.isBefore((org.joda.time.ReadableInterval) mutableInterval45);
        boolean boolean84 = interval6.isAfter((org.joda.time.ReadableInterval) mutableInterval45);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86400000L + "'", long32 == 86400000L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(mutableInterval51);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 22 + "'", int62 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(mutablePeriod74);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test5005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5005");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        int int5 = dateTime4.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(obj0, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.year();
        mutableDateTime10.addWeeks((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        int int15 = mutableDateTime14.getDayOfMonth();
        org.joda.time.Instant instant16 = mutableDateTime14.toInstant();
        boolean boolean18 = mutableDateTime14.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int22 = dateTimeZone20.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime14.setZone(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        int int25 = mutableDateTime24.getDayOfMonth();
        org.joda.time.Instant instant26 = mutableDateTime24.toInstant();
        boolean boolean28 = mutableDateTime24.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int32 = dateTimeZone30.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime24.setZone(dateTimeZone30);
        long long35 = dateTimeZone30.previousTransition((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime14.toMutableDateTime(dateTimeZone30);
        int int38 = dateTimeZone30.getOffset(0L);
        mutableDateTime10.setZoneRetainFields(dateTimeZone30);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime10.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test5006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5006");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        mutableDateTime0.add(durationFieldType2, (int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = timeOfDay19.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.plusHours((-1));
        org.joda.time.Chronology chronology23 = timeOfDay22.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) timeOfDay26, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology23);
        org.joda.time.DateTime dateTime32 = dateTime13.toDateTime(chronology23);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone35);
        org.joda.time.Chronology chronology37 = chronology23.withZone(dateTimeZone35);
        boolean boolean38 = dateTimeZone6.equals((java.lang.Object) chronology23);
        org.joda.time.DurationField durationField39 = durationFieldType2.getField(chronology23);
        org.joda.time.DurationField durationField40 = chronology23.minutes();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-86399999L) + "'", long30 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
    }

    @Test
    public void test5007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5007");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("Sat Oct 31 23:59:59 GMT 1970", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5008");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType6 = periodType5.withWeeksRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4, periodType5);
        java.lang.Object obj8 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.plusHours((-1));
        org.joda.time.Chronology chronology17 = timeOfDay16.getChronology();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withChronologyRetainFields(chronology21);
        long long24 = chronology17.set((org.joda.time.ReadablePartial) timeOfDay20, (long) (byte) -1);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType28 = null;
        boolean boolean29 = periodType27.isSupported(durationFieldType28);
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 1, 0L, periodType27);
        int[] intArray33 = chronology17.get((org.joda.time.ReadablePeriod) period30, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(obj8, chronology17);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 17, (long) (byte) -1, periodType5, chronology17);
        org.joda.time.DateTimeField dateTimeField36 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology17.minuteOfDay();
        java.lang.String str38 = dateTimeField37.toString();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-86399999L) + "'", long24 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str38, "DateTimeField[minuteOfDay]");
    }

    @Test
    public void test5009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5009");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        java.lang.Object obj5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(obj5, dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        int int9 = property3.compareTo((org.joda.time.ReadablePartial) localDateTime7);
        java.lang.Object obj10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(obj10, dateTimeZone11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.secondOfMinute();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.Period period16 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime7, (org.joda.time.ReadablePartial) localDateTime15);
        int int17 = localDateTime7.getYear();
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 46L + "'", long4 == 46L);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
    }

    @Test
    public void test5010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5010");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        int int5 = property2.getMaximumValue();
        org.joda.time.LocalTime localTime6 = property2.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property2.addNoWrapToCopy(0);
        org.joda.time.LocalTime localTime10 = property2.setCopy((int) '#');
        org.joda.time.LocalTime localTime11 = property2.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399999 + "'", int5 == 86399999);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test5011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5011");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight3 = property2.withMinimumValue();
        java.lang.String str4 = property2.toString();
        org.joda.time.DateMidnight dateMidnight5 = property2.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight6 = property2.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight7 = property2.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight8 = property2.getDateMidnight();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[dayOfWeek]" + "'", str4, "Property[dayOfWeek]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test5012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5012");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        int int8 = property7.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int10 = mutableDateTime9.getDayOfMonth();
        org.joda.time.Instant instant11 = mutableDateTime9.toInstant();
        org.joda.time.Instant instant13 = instant11.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        int int15 = mutableDateTime14.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime19, periodType22);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod26.copy();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.yearOfCentury();
        org.joda.time.Duration duration31 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        mutablePeriod23.setPeriod((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant11, (org.joda.time.ReadableDuration) duration31);
        int int34 = property7.compareTo((org.joda.time.ReadableInstant) instant11);
        java.lang.String str35 = property7.getAsString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 99 + "'", int8 == 99);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "70" + "'", str35, "70");
    }

    @Test
    public void test5013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5013");
        org.joda.time.Period period1 = org.joda.time.Period.millis(39421);
        org.joda.time.Period period3 = period1.withMinutes(50);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test5014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5014");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withSecondOfMinute((int) (short) 10);
        int int3 = localDateTime0.getCenturyOfEra();
        int int4 = localDateTime0.getDayOfMonth();
        int int5 = localDateTime0.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
    }

    @Test
    public void test5015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5015");
        java.util.Date date1 = new java.util.Date((long) 6);
        date1.setMinutes(1);
        java.lang.String str4 = date1.toLocaleString();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.year();
        int int7 = property6.get();
        org.joda.time.YearMonthDay yearMonthDay8 = property6.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay9 = property6.withMaximumValue();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate13 = localDate11.plusWeeks(9);
        org.joda.time.LocalDate.Property property14 = localDate13.monthOfYear();
        org.joda.time.LocalDate localDate16 = localDate13.withYear((int) (short) 10);
        int int17 = localDate16.getWeekOfWeekyear();
        org.joda.time.Period period18 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) yearMonthDay9, (org.joda.time.ReadablePartial) localDate16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = yearMonthDay9.getFieldTypes();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) yearMonthDay9);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:01:00 GMT 1970");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-1-1 0:01:00" + "'", str4, "1970-1-1 0:01:00");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
    }

    @Test
    public void test5016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5016");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.LocalDateTime localDateTime5 = dateTime4.toLocalDateTime();
        org.joda.time.DateTime dateTime7 = dateTime4.minusHours(465);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test5017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5017");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test5018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5018");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        long long5 = dateTimeZone1.convertLocalToUTC((-1L), false, 10L);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod9.copy();
        org.joda.time.format.PeriodFormatter periodFormatter11 = null;
        java.lang.String str12 = mutablePeriod10.toString(periodFormatter11);
        org.joda.time.LocalTime localTime14 = localTime6.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod10, 93);
        org.joda.time.LocalTime.Property property15 = localTime6.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.099S" + "'", str12, "PT0.099S");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test5019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5019");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        java.lang.Object obj2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(obj2, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusYears((int) (short) 0);
        int int8 = localDateTime4.getValue(2);
        int int9 = localDateTime4.getHourOfDay();
        boolean boolean10 = calendar0.after((java.lang.Object) localDateTime4);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        calendar0.add((int) (short) 10, 53);
        int int15 = calendar0.getWeekYear();
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder20 = builder16.setWeekDate(36000001, 86399999, 2968);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.lang.String str22 = timeZone21.getID();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone21);
        java.util.Calendar.Builder builder24 = builder16.setTimeZone(timeZone21);
        calendar0.setTimeZone(timeZone21);
        java.lang.String str26 = timeZone21.getID();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=190800000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GMT" + "'", str22, "GMT");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645514174337,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=14,MILLISECOND=337,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GMT" + "'", str26, "GMT");
    }

    @Test
    public void test5020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5020");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime5, periodType8);
        org.joda.time.LocalDateTime localDateTime10 = dateTime5.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusSeconds(36000001);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withSecondOfMinute(71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 71 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test5021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5021");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(4, (int) (short) 10, (int) '#', chronology3);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusHours(17);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale15 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale.FilteringMode filteringMode23 = null;
        java.util.List<java.util.Locale> localeList24 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList21, filteringMode23);
        boolean boolean25 = charSet9.removeAll((java.util.Collection<java.util.Locale>) localeList24);
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category26, locale27);
        boolean boolean29 = charSet9.contains((java.lang.Object) category26);
        java.util.Locale locale30 = java.util.Locale.getDefault(category26);
        int int31 = property7.getMaximumTextLength(locale30);
        java.lang.String str32 = locale30.getLanguage();
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale19.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh" + "'", str32, "zh");
    }

    @Test
    public void test5022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5022");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        int int2 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Instant instant3 = mutableDateTime1.toInstant();
        boolean boolean5 = mutableDateTime1.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int9 = dateTimeZone7.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime1.setZone(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        int int12 = mutableDateTime11.getDayOfMonth();
        org.joda.time.Instant instant13 = mutableDateTime11.toInstant();
        boolean boolean15 = mutableDateTime11.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int19 = dateTimeZone17.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime11.setZone(dateTimeZone17);
        long long22 = dateTimeZone17.previousTransition((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime1.toMutableDateTime(dateTimeZone17);
        mutableDateTime23.setMillisOfSecond(11);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.ReadableInterval readableInterval29 = null;
        mutablePeriod28.add(readableInterval29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.Duration duration36 = mutablePeriod28.toDurationTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateTime dateTime41 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime41.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.year();
        org.joda.time.Chronology chronology44 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone47);
        org.joda.time.DateTime dateTime49 = dateTime48.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime49.toMutableDateTime();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.TimeOfDay timeOfDay53 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = timeOfDay55.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay55.plusHours((-1));
        org.joda.time.Chronology chronology59 = timeOfDay58.getChronology();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.TimeOfDay timeOfDay62 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay62.withChronologyRetainFields(chronology63);
        long long66 = chronology59.set((org.joda.time.ReadablePartial) timeOfDay62, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay67 = new org.joda.time.TimeOfDay(chronology59);
        org.joda.time.DateTime dateTime68 = dateTime49.toDateTime(chronology59);
        mutableDateTime42.setMillis((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) mutableDateTime42, periodType70);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType73 = periodType72.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableInstant) mutableDateTime42, periodType72);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int78 = dateTimeZone76.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now(dateTimeZone76);
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime23.toMutableDateTime(dateTimeZone76);
        long long82 = dateTimeZone76.nextTransition((long) (short) 10);
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight(1645513832082L, dateTimeZone76);
        org.joda.time.MutableDateTime mutableDateTime84 = org.joda.time.MutableDateTime.now(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-86399999L) + "'", long66 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10L + "'", long82 == 10L);
        org.junit.Assert.assertNotNull(mutableDateTime84);
    }

    @Test
    public void test5023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5023");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfDay();
        java.lang.String str6 = localTime3.toString("22");
        org.joda.time.LocalTime localTime8 = localTime3.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = localTime3.isSupported(dateTimeFieldType9);
        org.joda.time.Period period13 = new org.joda.time.Period((long) 1, (long) (short) 0);
        org.joda.time.LocalTime localTime14 = localTime3.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.LocalTime localTime16 = localTime3.withMillisOfDay((int) 'a');
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.Chronology chronology18 = localTime16.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval19 = new org.joda.time.Interval(0L, (long) (-694369169), chronology18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "22" + "'", str6, "22");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test5024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5024");
        java.util.Date date1 = new java.util.Date((long) 6);
        date1.setMinutes(1);
        java.lang.String str4 = date1.toLocaleString();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.year();
        org.joda.time.YearMonthDay yearMonthDay8 = property6.setCopy(0);
        java.util.Locale locale10 = java.util.Locale.PRC;
        org.joda.time.YearMonthDay yearMonthDay11 = property6.setCopy("1976", locale10);
        org.joda.time.YearMonthDay yearMonthDay12 = property6.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay14 = property6.addToCopy(18);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusDays(3);
        org.joda.time.LocalDate localDate17 = yearMonthDay14.toLocalDate();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:01:00 GMT 1970");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-1-1 0:01:00" + "'", str4, "1970-1-1 0:01:00");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test5025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5025");
        java.lang.Character[] charArray1 = new java.lang.Character[] { '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet2 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet2, charArray1);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale locale9 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.Locale locale13 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale9, locale10, locale13 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.Locale.FilteringMode filteringMode17 = null;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList15, filteringMode17);
        boolean boolean19 = charSet2.containsAll((java.util.Collection<java.util.Locale>) localeList15);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str22 = yearMonthDay21.toString();
        java.lang.String str23 = yearMonthDay21.toString();
        boolean boolean24 = charSet2.remove((java.lang.Object) str23);
        java.lang.Character[] charArray26 = new java.lang.Character[] { '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet27 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet27, charArray26);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale38 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale34, locale35, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale.FilteringMode filteringMode42 = null;
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList40, filteringMode42);
        boolean boolean44 = charSet27.containsAll((java.util.Collection<java.util.Locale>) localeList40);
        boolean boolean45 = charSet2.removeAll((java.util.Collection<java.util.Locale>) localeList40);
        charSet2.clear();
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale13.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test5026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5026");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra(3991);
        org.joda.time.LocalDate.Property property8 = localDate5.year();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test5027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5027");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth4 = new org.joda.time.YearMonth(dateTimeZone3);
        int int5 = yearMonth4.getYear();
        org.joda.time.Chronology chronology6 = yearMonth4.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth(10, 365, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test5028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5028");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        int int2 = charSet1.size();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.standard();
        java.lang.String str5 = periodType4.getName();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.plusHours((-1));
        org.joda.time.Chronology chronology20 = timeOfDay19.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withChronologyRetainFields(chronology24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) timeOfDay23, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(chronology20);
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime(chronology20);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 'x', periodType4, chronology20);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology20);
        boolean boolean32 = charSet1.equals((java.lang.Object) mutableDateTime31);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfDay();
        org.joda.time.LocalTime localTime37 = property35.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime38 = property35.roundHalfFloorCopy();
        int int39 = localTime38.size();
        org.joda.time.LocalTime localTime41 = localTime38.minusSeconds(100);
        org.joda.time.LocalTime localTime43 = localTime41.minusMillis(11);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        boolean boolean45 = localTime41.isSupported(durationFieldType44);
        boolean boolean46 = charSet1.contains((java.lang.Object) localTime41);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean48 = localTime41.isSupported(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Standard" + "'", str5, "Standard");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-86399999L) + "'", long27 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test5029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5029");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        java.lang.Object obj2 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        int int7 = dateTime6.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(obj2, dateTimeZone9);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.year();
        boolean boolean14 = calendar0.after((java.lang.Object) property13);
        calendar0.setMinimalDaysInFirstWeek(69);
        calendar0.set(27, 32769, 100, 19, 53);
        int int23 = calendar0.getFirstDayOfWeek();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime27.getZone();
        java.util.Locale locale31 = new java.util.Locale("hours", "ISOChronology[UTC]");
        java.util.Calendar calendar32 = dateTime27.toCalendar(locale31);
        java.lang.String str33 = locale31.getDisplayName();
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = null;
        org.joda.time.format.DateTimeParser dateTimeParser35 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter34, dateTimeParser35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter36.withOffsetParsed();
        java.util.Locale locale38 = java.util.Locale.KOREA;
        java.lang.String str40 = locale38.getExtension('u');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter36.withLocale(locale38);
        java.lang.String str42 = locale31.getDisplayScript(locale38);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap43 = calendar0.getDisplayNames(25995785, (-694369169), locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=69,ERA=1,YEAR=27,MONTH=32769,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=19,MINUTE=53,SECOND=14,MILLISECOND=735,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals(locale31.toString(), "hours_ISOCHRONOLOGY[UTC]");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hours (ISOCHRONOLOGY[UTC])" + "'", str33, "hours (ISOCHRONOLOGY[UTC])");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko_KR");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test5030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5030");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = chronology14.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight1.withChronology(chronology14);
        org.joda.time.DateMidnight.Property property24 = dateMidnight1.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight25 = property24.getDateMidnight();
        int int26 = property24.get();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateTime dateTime31 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime31.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.year();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.MutableDateTime mutableDateTime36 = property33.set(5);
        org.joda.time.MutableDateTime mutableDateTime37 = property33.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.secondOfMinute();
        int int39 = property24.getDifference((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.DateMidnight dateMidnight40 = property24.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight41 = property24.withMaximumValue();
        java.lang.Object obj44 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.TimeOfDay timeOfDay47 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = timeOfDay49.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay49.plusHours((-1));
        org.joda.time.Chronology chronology53 = timeOfDay52.getChronology();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.TimeOfDay timeOfDay56 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay56.withChronologyRetainFields(chronology57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) timeOfDay56, (long) (byte) -1);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType64 = null;
        boolean boolean65 = periodType63.isSupported(durationFieldType64);
        org.joda.time.Period period66 = new org.joda.time.Period((long) (byte) 1, 0L, periodType63);
        int[] intArray69 = chronology53.get((org.joda.time.ReadablePeriod) period66, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime(obj44, chronology53);
        org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay(0, 0, chronology53);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight41.withChronology(chronology53);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 105249 + "'", int39 == 105249);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-86399999L) + "'", long60 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateMidnight72);
    }

    @Test
    public void test5031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5031");
        java.lang.Object obj0 = null;
        java.lang.Object obj5 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType25 = null;
        boolean boolean26 = periodType24.isSupported(durationFieldType25);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 1, 0L, periodType24);
        int[] intArray30 = chronology14.get((org.joda.time.ReadablePeriod) period27, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(obj5, chronology14);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, 0, chronology14);
        org.joda.time.DateTimeZone dateTimeZone33 = chronology14.getZone();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(8, (int) (short) 0, chronology14);
        org.joda.time.DurationField durationField35 = chronology14.days();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(obj0, chronology14);
        org.joda.time.DateTimeField dateTimeField37 = chronology14.clockhourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test5032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5032");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear(2);
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime10 = dateTime7.plusHours(10);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        int int12 = mutableDateTime11.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime11, (org.joda.time.ReadableInstant) dateTime16, periodType19);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod23.copy();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.yearOfCentury();
        org.joda.time.Duration duration28 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod32.copy();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.yearOfCentury();
        org.joda.time.Duration duration37 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod40.copy();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.yearOfCentury();
        org.joda.time.Duration duration45 = mutablePeriod41.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight43);
        boolean boolean46 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period47 = duration45.toPeriod();
        boolean boolean48 = duration28.isEqual((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period49 = duration28.toPeriod();
        org.joda.time.Period period51 = period49.minusMinutes(6);
        org.joda.time.DateTime dateTime53 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) period49, (int) (short) 1);
        org.joda.time.DateTime dateTime54 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property55 = dateTime10.era();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test5033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5033");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusMinutes((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime7 = localTime5.withHourOfDay(91);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 91 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test5034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5034");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime6 = property4.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime7 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime13 = property10.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        org.joda.time.Period period15 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime7, (org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime localTime17 = localTime7.plusHours((int) '#');
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("fr");
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone19);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromCalendarFields(calendar20);
        org.joda.time.LocalTime localTime22 = localTime17.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType26 = null;
        boolean boolean27 = periodType25.isSupported(durationFieldType26);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 1, 0L, periodType25);
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.LocalTime localTime31 = localTime17.withPeriodAdded((org.joda.time.ReadablePeriod) period28, (int) 'a');
        org.joda.time.PeriodType periodType32 = period28.getPeriodType();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = timeOfDay37.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay37.plusHours((-1));
        org.joda.time.Chronology chronology41 = timeOfDay40.getChronology();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.withChronologyRetainFields(chronology45);
        long long48 = chronology41.set((org.joda.time.ReadablePartial) timeOfDay44, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(chronology41);
        org.joda.time.Chronology chronology50 = chronology41.withUTC();
        org.joda.time.DateMidnight dateMidnight51 = org.joda.time.DateMidnight.now(chronology41);
        long long55 = chronology41.add((long) 802, 1966140000L, 58);
        org.joda.time.Period period56 = new org.joda.time.Period(481L, (-61764076799990L), periodType32, chronology41);
        org.joda.time.DurationField durationField57 = chronology41.months();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645514174942,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=14,MILLISECOND=942,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-86399999L) + "'", long48 == (-86399999L));
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 114036120802L + "'", long55 == 114036120802L);
        org.junit.Assert.assertNotNull(durationField57);
    }

    @Test
    public void test5035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5035");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.setCopy((int) (short) 10);
        int int5 = localTime4.getMillisOfDay();
        org.joda.time.LocalTime.Property property6 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property6.roundFloorCopy();
        org.joda.time.LocalTime localTime9 = property6.setCopy(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test5036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5036");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime5.toTimeOfDay();
        org.joda.time.DateTime dateTime7 = dateTime5.withTimeAtStartOfDay();
        int int8 = dateTime5.getDayOfYear();
        org.joda.time.DateTime.Property property9 = dateTime5.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property11 = dateTime5.property(dateTimeFieldType10);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        java.lang.Object obj17 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = timeOfDay22.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay22.plusHours((-1));
        org.joda.time.Chronology chronology26 = timeOfDay25.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.withChronologyRetainFields(chronology30);
        long long33 = chronology26.set((org.joda.time.ReadablePartial) timeOfDay29, (long) (byte) -1);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType37 = null;
        boolean boolean38 = periodType36.isSupported(durationFieldType37);
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 1, 0L, periodType36);
        int[] intArray42 = chronology26.get((org.joda.time.ReadablePeriod) period39, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(obj17, chronology26);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0, 0, chronology26);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(43L, periodType14, chronology26);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        int int49 = mutableDateTime48.getDayOfMonth();
        org.joda.time.Instant instant50 = mutableDateTime48.toInstant();
        int int51 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) instant50);
        long long52 = instant50.getMillis();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod45, (org.joda.time.ReadableInstant) instant50);
        int int54 = mutablePeriod45.getMillis();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        int int56 = mutableDateTime55.getDayOfMonth();
        org.joda.time.Instant instant57 = mutableDateTime55.toInstant();
        org.joda.time.MutableDateTime mutableDateTime58 = instant57.toMutableDateTime();
        org.joda.time.Instant instant61 = instant57.withDurationAdded(43L, (-1));
        org.joda.time.Instant instant64 = instant61.withDurationAdded(1L, (int) 'a');
        org.joda.time.Instant instant66 = instant61.withMillis((long) 6);
        org.joda.time.Duration duration67 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) instant61);
        org.joda.time.DateTime dateTime68 = dateTime5.plus((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.DateTime dateTime71 = dateTime68.withDurationAdded((long) 33, (int) '4');
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-86399999L) + "'", long33 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645514175004L + "'", long52 == 1645514175004L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 43 + "'", int54 == 43);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test5037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5037");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str2 = yearMonthDay1.toString();
        org.joda.time.Interval interval3 = yearMonthDay1.toInterval();
        long long4 = interval3.getStartMillis();
        long long5 = interval3.toDurationMillis();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86400000L + "'", long5 == 86400000L);
    }

    @Test
    public void test5038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5038");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withYear((int) 'u');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.millisOfDay();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str9 = dateTimeFieldType8.getName();
        boolean boolean10 = localDateTime7.isSupported(dateTimeFieldType8);
        int int11 = localDateTime7.getDayOfWeek();
        int int12 = localDateTime7.getEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withHourOfDay(16);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime3.withSecondOfMinute(929);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 929 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514175148,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=15,MILLISECOND=148,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "dayOfMonth" + "'", str9, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test5039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5039");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        java.lang.String str3 = interval2.toString();
        org.joda.time.Duration duration4 = interval2.toDuration();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        int int6 = mutableDateTime5.getDayOfMonth();
        org.joda.time.Instant instant7 = mutableDateTime5.toInstant();
        org.joda.time.MutableDateTime mutableDateTime8 = instant7.toMutableDateTime();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate12 = localDate10.plusWeeks(9);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.weeks();
        boolean boolean14 = localDate12.isSupported(durationFieldType13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17, periodType18);
        org.joda.time.Period period22 = period20.withSeconds(0);
        org.joda.time.LocalDate localDate23 = localDate12.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period24 = period20.toPeriod();
        org.joda.time.Duration duration25 = period20.toStandardDuration();
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration25, 2);
        org.joda.time.ReadableDuration readableDuration28 = null;
        boolean boolean29 = duration25.isLongerThan(readableDuration28);
        org.joda.time.Interval interval30 = interval2.withDurationAfterStart(readableDuration28);
        org.joda.time.Interval interval31 = interval30.toInterval();
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str3, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
    }

    @Test
    public void test5040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5040");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.yearOfCentury();
        org.joda.time.Duration duration7 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.DateMidnight.Property property8 = dateMidnight5.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int10 = mutableDateTime9.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType17 = periodType16.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) dateTime14, periodType17);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod21.copy();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.yearOfCentury();
        org.joda.time.Duration duration26 = mutablePeriod22.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        mutablePeriod18.setPeriod((org.joda.time.ReadableDuration) duration26);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod30.copy();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.yearOfCentury();
        org.joda.time.Duration duration35 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod38.copy();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.yearOfCentury();
        org.joda.time.Duration duration43 = mutablePeriod39.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        boolean boolean44 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Period period45 = duration43.toPeriod();
        boolean boolean46 = duration26.isEqual((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Period period47 = duration26.toPeriod();
        org.joda.time.Duration duration48 = duration26.toDuration();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod52 = mutablePeriod51.copy();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(chronology53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.yearOfCentury();
        org.joda.time.Duration duration56 = mutablePeriod52.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod60 = mutablePeriod59.copy();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(chronology61);
        org.joda.time.DateMidnight.Property property63 = dateMidnight62.yearOfCentury();
        org.joda.time.Duration duration64 = mutablePeriod60.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight62);
        boolean boolean65 = duration56.isShorterThan((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Period period66 = duration64.toPeriod();
        int int67 = duration48.compareTo((org.joda.time.ReadableDuration) duration64);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight5.withDurationAdded((org.joda.time.ReadableDuration) duration48, 42);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateMidnight69);
    }

    @Test
    public void test5041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5041");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 58);
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod4.copy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.yearOfCentury();
        org.joda.time.Duration duration9 = mutablePeriod5.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight7);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod12.copy();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.yearOfCentury();
        org.joda.time.Duration duration17 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight15);
        boolean boolean18 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration19 = duration17.toDuration();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTime();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = timeOfDay30.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay30.plusHours((-1));
        org.joda.time.Chronology chronology34 = timeOfDay33.getChronology();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay37.withChronologyRetainFields(chronology38);
        long long41 = chronology34.set((org.joda.time.ReadablePartial) timeOfDay37, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(chronology34);
        org.joda.time.DateTime dateTime43 = dateTime24.toDateTime(chronology34);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = dateTime24.toDateTime(chronology44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime45);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration19, 100);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(chronology49);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight53 = property51.addToCopy((int) 'u');
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.era();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime();
        int int58 = mutableDateTime57.getDayOfMonth();
        boolean boolean59 = dateMidnight55.isEqual((org.joda.time.ReadableInstant) mutableDateTime57);
        int int60 = mutableDateTime57.getWeekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod63.copy();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.yearOfCentury();
        org.joda.time.Duration duration68 = mutablePeriod64.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod72 = mutablePeriod71.copy();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(chronology73);
        org.joda.time.DateMidnight.Property property75 = dateMidnight74.yearOfCentury();
        org.joda.time.Duration duration76 = mutablePeriod72.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight74);
        boolean boolean77 = duration68.isEqual((org.joda.time.ReadableDuration) duration76);
        mutableDateTime57.add((org.joda.time.ReadableDuration) duration76, 0);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight53.plus((org.joda.time.ReadableDuration) duration76);
        boolean boolean81 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Duration duration82 = duration19.toDuration();
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-86399999L) + "'", long41 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 22 + "'", int58 == 22);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(mutablePeriod72);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(duration82);
    }

    @Test
    public void test5042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5042");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime5, periodType8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime0.dayOfWeek();
        org.joda.time.DurationField durationField12 = property11.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth16 = new org.joda.time.YearMonth(dateTimeZone15);
        int int17 = yearMonth16.getYear();
        org.joda.time.YearMonth.Property property18 = yearMonth16.year();
        int int19 = property18.get();
        org.joda.time.DurationField durationField20 = property18.getRangeDurationField();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        int int22 = property18.getMaximumShortTextLength(locale21);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale30 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale34 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale30, locale31, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale.FilteringMode filteringMode38 = null;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList36, filteringMode38);
        boolean boolean40 = charSet24.removeAll((java.util.Collection<java.util.Locale>) localeList39);
        java.util.Locale.Category category41 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category41, locale42);
        boolean boolean44 = charSet24.contains((java.lang.Object) category41);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth47 = new org.joda.time.YearMonth(dateTimeZone46);
        int int48 = yearMonth47.getYear();
        org.joda.time.YearMonth.Property property49 = yearMonth47.year();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        int int51 = mutableDateTime50.getDayOfMonth();
        org.joda.time.Instant instant52 = mutableDateTime50.toInstant();
        boolean boolean54 = mutableDateTime50.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int58 = dateTimeZone56.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime50.setZone(dateTimeZone56);
        int int60 = property49.compareTo((org.joda.time.ReadableInstant) mutableDateTime50);
        int int61 = property49.get();
        java.util.Locale locale62 = java.util.Locale.PRC;
        java.lang.String str63 = locale62.getDisplayScript();
        int int64 = property49.getMaximumShortTextLength(locale62);
        java.util.Locale.setDefault(category41, locale62);
        java.lang.String str66 = locale62.getISO3Country();
        java.lang.String str67 = locale21.getDisplayName(locale62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime68 = property11.set("February", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"February\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNull(durationField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.FORMAT + "'", category41.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "CHN" + "'", str66, "CHN");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u82f1\u6587\u52a0\u62ff\u5927)" + "'", str67, "\u82f1\u6587\u52a0\u62ff\u5927)");
    }

    @Test
    public void test5043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5043");
        java.util.Date date1 = new java.util.Date((long) 6);
        date1.setMinutes(1);
        java.lang.String str4 = date1.toLocaleString();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.year();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.plusDays(292278993);
        int int9 = yearMonthDay8.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay8.minusMonths(59000);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        int int13 = mutableDateTime12.getDayOfMonth();
        org.joda.time.Instant instant14 = mutableDateTime12.toInstant();
        boolean boolean16 = mutableDateTime12.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int20 = dateTimeZone18.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime12.setZone(dateTimeZone18);
        boolean boolean22 = dateTimeZone18.isFixed();
        org.joda.time.DateTime dateTime23 = yearMonthDay8.toDateTimeAtCurrentTime(dateTimeZone18);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:01:00 GMT 1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-1-1 0:01:00" + "'", str4, "1970-1-1 0:01:00");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test5044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5044");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZone(dateTimeZone4);
        java.lang.Integer int6 = dateTimeFormatter5.getPivotYear();
        boolean boolean7 = dateTimeFormatter5.isPrinter();
        org.joda.time.Period period11 = org.joda.time.Period.years(58);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.PeriodType periodType13 = mutablePeriod12.getPeriodType();
        java.lang.Object obj14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(obj14, dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusYears((int) (short) 0);
        int int20 = localDateTime16.getValue(2);
        int int21 = localDateTime16.getHourOfDay();
        org.joda.time.Chronology chronology22 = localDateTime16.getChronology();
        org.joda.time.Period period23 = new org.joda.time.Period(2177884800000L, (long) 4, periodType13, chronology22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter5.withChronology(chronology22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withDefaultYear(32770);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.parse("\u610f\u5927\u5229\u6587", dateTimeFormatter24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test5045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5045");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay7.toDateTimeToday();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11, periodType12);
        org.joda.time.Period period16 = period14.withSeconds(0);
        org.joda.time.Period period18 = period16.plusMinutes((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay7.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.monthOfYear();
        org.joda.time.Chronology chronology24 = mutableDateTime22.getChronology();
        mutableDateTime22.setWeekyear(4);
        org.joda.time.Chronology chronology27 = mutableDateTime22.getChronology();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(100L, (-1836080280000L), chronology27);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay19.withChronologyRetainFields(chronology27);
        org.joda.time.DurationField durationField30 = chronology27.weekyears();
        int int33 = durationField30.getValue(117L, 11457944763000L);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test5046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5046");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = timeOfDay7.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.plusHours((-1));
        org.joda.time.Chronology chronology11 = timeOfDay10.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        long long18 = chronology11.set((org.joda.time.ReadablePartial) timeOfDay14, (long) (byte) -1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType22 = null;
        boolean boolean23 = periodType21.isSupported(durationFieldType22);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 1, 0L, periodType21);
        int[] intArray27 = chronology11.get((org.joda.time.ReadablePeriod) period24, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(obj2, chronology11);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (-292275054), (long) 17, chronology11);
        long long30 = interval29.getStartMillis();
        org.joda.time.DateTime dateTime31 = interval29.getEnd();
        org.joda.time.DateTime dateTime32 = interval29.getEnd();
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-86399999L) + "'", long18 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-292275054L) + "'", long30 == (-292275054L));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test5047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5047");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = timeOfDay7.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.plusHours((-1));
        org.joda.time.Chronology chronology11 = timeOfDay10.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        long long18 = chronology11.set((org.joda.time.ReadablePartial) timeOfDay14, (long) (byte) -1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType22 = null;
        boolean boolean23 = periodType21.isSupported(durationFieldType22);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 1, 0L, periodType21);
        int[] intArray27 = chronology11.get((org.joda.time.ReadablePeriod) period24, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(obj2, chronology11);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, 0, chronology11);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.hourOfDay();
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.lang.String str35 = locale32.getUnicodeLocaleType("22");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay36 = property30.setCopy("java.io.IOException: 17", locale32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.io.IOException: 17\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-86399999L) + "'", long18 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u4e2d\u6587" + "'", str33, "\u4e2d\u6587");
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test5048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5048");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.monthOfYear();
        int int5 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        int int7 = mutableDateTime6.getDayOfMonth();
        org.joda.time.Instant instant8 = mutableDateTime6.toInstant();
        boolean boolean10 = mutableDateTime6.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime6.setZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int17 = mutableDateTime16.getDayOfMonth();
        org.joda.time.Instant instant18 = mutableDateTime16.toInstant();
        boolean boolean20 = mutableDateTime16.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int24 = dateTimeZone22.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime16.setZone(dateTimeZone22);
        long long27 = dateTimeZone22.previousTransition((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime6.toMutableDateTime(dateTimeZone22);
        mutableDateTime28.addMinutes((int) 'x');
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime28.millisOfDay();
        java.lang.String str33 = mutableDateTime28.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T09:16:18.514Z" + "'", str33, "2022-02-22T09:16:18.514Z");
    }

    @Test
    public void test5049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5049");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("gio");
        java.util.Collection<java.lang.String> strCollection2 = null;
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("UTC");
        java.lang.String str5 = languageRange4.getRange();
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("UTC");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange4, languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale18 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale18, locale19, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale.FilteringMode filteringMode26 = null;
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList24, filteringMode26);
        boolean boolean28 = charSet12.removeAll((java.util.Collection<java.util.Locale>) localeList27);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap30);
        org.joda.time.tz.Provider provider32 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider32);
        java.util.Set<java.lang.String> strSet34 = provider32.getAvailableIDs();
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet34);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Locale locale41 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Locale locale45 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale41, locale42, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale.FilteringMode filteringMode49 = null;
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList47, filteringMode49);
        java.lang.String[] strArray74 = new java.lang.String[] { "PT0.099S", "22", "PeriodType[YearMonthDayTime]", "hi!", "PT0S", "2022-02-22T07:09:21.203Z", "7", "2022-02-22T07:09:21.203Z", "22", "\u5fb7\u56fd", "22", "Standard", "zho", "UTC", "DateTimeField[millisOfSecond]", "zho", "22", "hi!", "-0001-02-23T07:09:19.011", "PeriodType[YearMonthDayTime]", "DateTimeField[yearOfCentury]", "DateTimeField[yearOfCentury]", "hi!" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        java.util.Locale.FilteringMode filteringMode77 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.lang.String>) strList75, filteringMode77);
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList78, filteringMode79);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags(languageRangeList1, strCollection2, filteringMode79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "utc" + "'", str5, "utc");
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(provider32);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "utc" + "'", str35, "utc");
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + filteringMode77 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode77.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode79.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList80);
    }

    @Test
    public void test5050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5050");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 8);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.withDayOfMonth(6);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.plusMonths((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.plusDays((-694336399));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) yearMonthDay7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.YearMonthDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
    }

    @Test
    public void test5051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5051");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 100);
        java.lang.Object obj2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(obj2, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minus((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod13.copy();
        mutablePeriod9.add((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType20 = periodType19.withWeeksRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, readableDuration18, periodType19);
        org.joda.time.Period period23 = period21.withSeconds(0);
        boolean boolean24 = mutablePeriod14.equals((java.lang.Object) period21);
        mutablePeriod14.addMinutes(2);
        mutablePeriod14.setPeriod(480L);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.year();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int41 = dateTimeZone39.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        long long43 = property36.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime42.copy();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType49 = periodType48.withWeeksRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, readableDuration47, periodType48);
        org.joda.time.Period period52 = period50.withSeconds(0);
        org.joda.time.Period period54 = period52.plusMinutes((int) (byte) 1);
        org.joda.time.Period period56 = period52.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period59 = period52.withField(durationFieldType57, 7);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime();
        int int63 = mutableDateTime62.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone66);
        org.joda.time.DateTime dateTime68 = dateTime67.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType70 = periodType69.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime62, (org.joda.time.ReadableInstant) dateTime67, periodType70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(208L, (long) 100, periodType70, chronology72);
        org.joda.time.Period period74 = period52.withPeriodType(periodType70);
        org.joda.time.Duration duration75 = period52.toStandardDuration();
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime44, (org.joda.time.ReadableDuration) duration75, periodType76);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration75);
        boolean boolean79 = mutableDateTime1.isAfterNow();
        int int80 = mutableDateTime1.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-52L) + "'", long43 == (-52L));
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 22 + "'", int63 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test5052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5052");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        int int11 = mutableDateTime10.getDayOfMonth();
        org.joda.time.Instant instant12 = mutableDateTime10.toInstant();
        boolean boolean14 = mutableDateTime10.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int18 = dateTimeZone16.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime10.setZone(dateTimeZone16);
        long long21 = dateTimeZone16.previousTransition((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime0.toMutableDateTime(dateTimeZone16);
        mutableDateTime22.setMillisOfSecond(11);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.ReadableInterval readableInterval28 = null;
        mutablePeriod27.add(readableInterval28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.Duration duration35 = mutablePeriod27.toDurationTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateTime dateTime40 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime40.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.year();
        org.joda.time.Chronology chronology43 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateTime dateTime48 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime48.toMutableDateTime();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.TimeOfDay timeOfDay52 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = timeOfDay54.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay54.plusHours((-1));
        org.joda.time.Chronology chronology58 = timeOfDay57.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.TimeOfDay timeOfDay61 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay61.withChronologyRetainFields(chronology62);
        long long65 = chronology58.set((org.joda.time.ReadablePartial) timeOfDay61, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay66 = new org.joda.time.TimeOfDay(chronology58);
        org.joda.time.DateTime dateTime67 = dateTime48.toDateTime(chronology58);
        mutableDateTime41.setMillis((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) mutableDateTime41, periodType69);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType72 = periodType71.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableInstant) mutableDateTime41, periodType71);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime76 = dateTime74.minusYears((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime();
        int int78 = mutableDateTime77.getDayOfMonth();
        org.joda.time.Instant instant79 = mutableDateTime77.toInstant();
        org.joda.time.MutableDateTime mutableDateTime80 = instant79.toMutableDateTime();
        boolean boolean81 = dateTime74.isEqual((org.joda.time.ReadableInstant) instant79);
        int int82 = mutableDateTime41.compareTo((org.joda.time.ReadableInstant) instant79);
        int int83 = mutableDateTime41.getDayOfYear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-86399999L) + "'", long65 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 22 + "'", int78 == 22);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
// flaky:         org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test5053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5053");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(dateTimeZone1);
        int int3 = yearMonth2.getYear();
        org.joda.time.YearMonth.Property property4 = yearMonth2.year();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        org.joda.time.YearMonth yearMonth7 = property4.addToCopy((int) 'u');
        java.lang.String str8 = property4.getAsShortText();
        org.joda.time.YearMonth yearMonth10 = property4.addToCopy(70);
        org.joda.time.YearMonth yearMonth12 = yearMonth10.withYear(31);
        org.joda.time.YearMonth yearMonth14 = yearMonth12.plusMonths((int) 'a');
        int int15 = yearMonth12.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(yearMonth12);
        org.junit.Assert.assertNotNull(yearMonth14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
    }

    @Test
    public void test5054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5054");
        org.joda.time.YearMonth yearMonth0 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.withYear(7);
        org.joda.time.YearMonth.Property property3 = yearMonth2.year();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        java.lang.String str5 = property3.getAsShortText();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.DurationField durationField7 = property3.getDurationField();
        org.junit.Assert.assertNotNull(yearMonth0);
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "7" + "'", str5, "7");
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test5055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5055");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronology();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str10 = yearMonthDay9.toString();
        java.lang.String str11 = yearMonthDay9.toString();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.plusDays(4);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.plusYears(22);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        long long20 = dateTimeZone18.convertUTCToLocal((long) (-1));
        org.joda.time.DateMidnight dateMidnight21 = yearMonthDay13.toDateMidnight(dateTimeZone18);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay13.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay24 = property22.addToCopy(12);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int28 = dateTimeZone26.getOffset(0L);
        long long31 = dateTimeZone26.convertLocalToUTC((long) (short) 0, true);
        org.joda.time.DateTime dateTime32 = yearMonthDay24.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) 8);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusDays(32769);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay34.minusDays((int) '4');
        org.joda.time.DateMidnight dateMidnight39 = yearMonthDay34.toDateMidnight();
        boolean boolean40 = dateTimeZone26.equals((java.lang.Object) dateMidnight39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter5.withZone(dateTimeZone26);
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = dateTimeFormatter5.getPrinter();
        boolean boolean43 = dateTimeFormatter5.isOffsetParsed();
        boolean boolean44 = dateTimeFormatter5.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01" + "'", str10, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNull(dateTimePrinter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test5056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5056");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMinutes(6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusHours(2387);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusMillis(366);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test5057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5057");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("fr");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.lang.String str3 = calendar2.getCalendarType();
        calendar2.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = calendar2.getGreatestMinimum(29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 29");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
    }

    @Test
    public void test5058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5058");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        long long11 = dateTimeZone6.previousTransition((long) (short) -1);
        long long13 = dateTimeZone6.previousTransition((long) (short) 10);
        java.util.TimeZone timeZone14 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        int int17 = dateTimeZone15.getOffsetFromLocal(672L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test5059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5059");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.LocalTime localTime6 = dateTime4.toLocalTime();
        org.joda.time.LocalTime.Property property7 = localTime6.hourOfDay();
        org.joda.time.LocalTime localTime9 = property7.addCopy(292278993);
        org.joda.time.DateTime dateTime10 = localTime9.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test5060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5060");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        mutableDateTime0.setMillisOfDay((int) ' ');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.weekyear();
        java.lang.String str13 = property12.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(53);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setDate(70005, 366, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test5061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5061");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.DateTime dateTime16 = timeOfDay11.toDateTimeToday();
        int int17 = timeOfDay11.size();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay11.minusMinutes(14);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.year();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundCeiling();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfDay();
        java.lang.String str32 = localTime29.toString("22");
        org.joda.time.LocalTime localTime34 = localTime29.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalTime.Property property35 = localTime34.secondOfMinute();
        org.joda.time.LocalTime localTime36 = property35.withMinimumValue();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType38 = periodType37.withWeeksRemoved();
        java.lang.String str39 = periodType38.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType44 = periodType43.withWeeksRemoved();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight41, readableDuration42, periodType43);
        org.joda.time.Period period47 = period45.withSeconds(0);
        int int48 = period47.getDays();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        int int50 = mutableDateTime49.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        mutableDateTime49.add(durationFieldType51, (int) (short) 100);
        int int54 = period47.get(durationFieldType51);
        boolean boolean55 = periodType38.isSupported(durationFieldType51);
        boolean boolean56 = localTime36.isSupported(durationFieldType51);
        mutableDateTime27.add(durationFieldType51, 6);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime();
        int int60 = mutableDateTime59.getDayOfMonth();
        org.joda.time.Instant instant61 = mutableDateTime59.toInstant();
        boolean boolean63 = mutableDateTime59.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int67 = dateTimeZone65.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime59.setZone(dateTimeZone65);
        mutableDateTime27.setZone(dateTimeZone65);
        org.joda.time.LocalTime localTime70 = org.joda.time.LocalTime.now(dateTimeZone65);
        org.joda.time.DateTime dateTime71 = timeOfDay11.toDateTimeToday(dateTimeZone65);
        long long73 = dateTimeZone65.nextTransition(549L);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "22" + "'", str32, "22");
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PeriodType[YearMonthDayTime]" + "'", str39, "PeriodType[YearMonthDayTime]");
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 22 + "'", int60 == 22);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 549L + "'", long73 == 549L);
    }

    @Test
    public void test5062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5062");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.util.TimeZone.setDefault(timeZone0);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.lang.String str4 = timeZone3.getID();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone5.observesDaylightTime();
        boolean boolean7 = timeZone3.hasSameRules(timeZone5);
        boolean boolean8 = timeZone0.hasSameRules(timeZone5);
        int int9 = timeZone0.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.year();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        java.lang.Object obj18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj18, dateTimeZone19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.secondOfMinute();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.lang.String str24 = localDateTime20.toString("22", locale23);
        java.lang.String str25 = locale23.getLanguage();
        int int26 = property16.getMaximumShortTextLength(locale23);
        java.lang.String str27 = locale23.getDisplayVariant();
        java.lang.String str28 = timeZone0.getDisplayName(locale23);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "GMT" + "'", str1, "GMT");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "22" + "'", str24, "22");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr" + "'", str25, "fr");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Heure de Greenwich" + "'", str28, "Heure de Greenwich");
    }

    @Test
    public void test5063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5063");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        int int3 = mutableDateTime0.getRoundingMode();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.era();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 58);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod9.copy();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.yearOfCentury();
        org.joda.time.Duration duration14 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod17.copy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfCentury();
        org.joda.time.Duration duration22 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        boolean boolean23 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration24 = duration22.toDuration();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = timeOfDay35.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay35.plusHours((-1));
        org.joda.time.Chronology chronology39 = timeOfDay38.getChronology();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay42.withChronologyRetainFields(chronology43);
        long long46 = chronology39.set((org.joda.time.ReadablePartial) timeOfDay42, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(chronology39);
        org.joda.time.DateTime dateTime48 = dateTime29.toDateTime(chronology39);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime29.toDateTime(chronology49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime50);
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration24, 100);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType58 = periodType57.withWeeksRemoved();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight55, readableDuration56, periodType57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.TimeOfDay timeOfDay62 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay62.withChronologyRetainFields(chronology63);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = timeOfDay64.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay64.plusHours((-1));
        org.joda.time.Chronology chronology68 = timeOfDay67.getChronology();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.TimeOfDay timeOfDay71 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.TimeOfDay timeOfDay73 = timeOfDay71.withChronologyRetainFields(chronology72);
        long long75 = chronology68.set((org.joda.time.ReadablePartial) timeOfDay71, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField76 = chronology68.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight55.withChronology(chronology68);
        org.joda.time.DateTimeField dateTimeField78 = chronology68.millisOfSecond();
        int int79 = mutableDateTime6.get(dateTimeField78);
        int int81 = dateTimeField78.getMaximumValue((long) 999);
        int int83 = dateTimeField78.get(157L);
        mutableDateTime0.setRounding(dateTimeField78);
        long long86 = dateTimeField78.roundHalfFloor((long) 16);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-86399999L) + "'", long46 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-86399999L) + "'", long75 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 958 + "'", int79 == 958);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 999 + "'", int81 == 999);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 157 + "'", int83 == 157);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 16L + "'", long86 == 16L);
    }

    @Test
    public void test5064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5064");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        int int11 = mutableDateTime10.getDayOfMonth();
        org.joda.time.Instant instant12 = mutableDateTime10.toInstant();
        boolean boolean14 = mutableDateTime10.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int18 = dateTimeZone16.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime10.setZone(dateTimeZone16);
        long long21 = dateTimeZone16.previousTransition((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime0.toMutableDateTime(dateTimeZone16);
        mutableDateTime22.setMillisOfSecond(11);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod27.copy();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfCentury();
        org.joda.time.Duration duration32 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod36 = mutablePeriod35.copy();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.yearOfCentury();
        org.joda.time.Duration duration40 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight38);
        boolean boolean41 = duration32.isEqual((org.joda.time.ReadableDuration) duration40);
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration40, 0);
        org.joda.time.Instant instant44 = org.joda.time.Instant.now();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) instant44);
        boolean boolean46 = interval45.containsNow();
        org.joda.time.DateTime dateTime47 = interval45.getEnd();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test5065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5065");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfYear((int) '#');
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime19 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear(2);
        int int22 = property12.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime24 = dateTime19.withMillisOfSecond(999);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(2);
        boolean boolean27 = localDateTime8.equals((java.lang.Object) 2);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime8.minusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMonths(21);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test5066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5066");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = timeOfDay7.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.plusHours((-1));
        org.joda.time.Chronology chronology11 = timeOfDay10.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        long long18 = chronology11.set((org.joda.time.ReadablePartial) timeOfDay14, (long) (byte) -1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType22 = null;
        boolean boolean23 = periodType21.isSupported(durationFieldType22);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 1, 0L, periodType21);
        int[] intArray27 = chronology11.get((org.joda.time.ReadablePeriod) period24, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(obj2, chronology11);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, 0, chronology11);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay31 = property30.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay33 = property30.addWrapFieldToCopy(19);
        org.joda.time.TimeOfDay timeOfDay35 = property30.addToCopy((int) (byte) 10);
        int int36 = property30.getMinimumValueOverall();
        java.lang.String str37 = property30.getAsText();
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-86399999L) + "'", long18 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
    }

    @Test
    public void test5067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5067");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 'u');
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        int int5 = dateMidnight4.getWeekOfWeekyear();
        org.joda.time.Period period7 = new org.joda.time.Period((long) '4');
        int int8 = period7.getYears();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime16 = dateTime14.toLocalDateTime();
        java.lang.Object obj17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(obj17, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.minus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear((-1));
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime16, (org.joda.time.ReadablePartial) localDateTime27);
        int int29 = localDateTime27.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight4.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = timeOfDay36.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay36.plusHours((-1));
        org.joda.time.Chronology chronology40 = timeOfDay39.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.TimeOfDay timeOfDay43 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.withChronologyRetainFields(chronology44);
        long long47 = chronology40.set((org.joda.time.ReadablePartial) timeOfDay43, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(chronology40);
        org.joda.time.Chronology chronology49 = chronology40.withUTC();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(252L, chronology40);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight52.plusYears(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.withField(dateTimeFieldType58, 0);
        int int61 = mutableDateTime50.get(dateTimeFieldType58);
        java.lang.String str62 = dateTimeFieldType58.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime64 = localDateTime27.withField(dateTimeFieldType58, 157);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 157 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-86399999L) + "'", long47 == (-86399999L));
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "era" + "'", str62, "era");
    }

    @Test
    public void test5068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5068");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.Period period6 = new org.joda.time.Period((long) '4');
        int int7 = period6.getYears();
        org.joda.time.LocalDate localDate8 = localDate1.plus((org.joda.time.ReadablePeriod) period6);
        int int9 = localDate1.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = localDate1.toDateMidnight(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = localDate1.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test5069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5069");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(36000001, 86399999, 2968);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.lang.String str6 = timeZone5.getID();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        java.util.Calendar.Builder builder8 = builder0.setTimeZone(timeZone5);
        java.util.Locale locale11 = new java.util.Locale("-0001-02-23T07:10:31.138", "2022-02-22T07:09:53.280Z");
        java.util.Calendar.Builder builder12 = builder8.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(true);
        java.util.Calendar.Builder builder18 = builder12.setWeekDate(432, 3, (-4));
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.lang.String str22 = locale21.getISO3Language();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.fromCalendarFields(calendar23);
        calendar23.set((int) (short) 100, 70, (int) (short) 1, 1970, 0);
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!");
        java.util.Map<java.lang.String, java.lang.Integer> strMap36 = calendar23.getDisplayNames(0, 0, locale35);
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.lang.String str38 = locale37.getDisplayScript();
        java.lang.String str39 = locale35.getDisplayCountry(locale37);
        java.lang.String str40 = locale21.getDisplayLanguage(locale35);
        java.util.Locale.setDefault(category19, locale35);
        java.util.Calendar.Builder builder42 = builder18.setLocale(locale35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar43 = builder18.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: -4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514186771,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=26,MILLISECOND=771,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals(locale11.toString(), "-0001-02-23t07:10:31.138_2022-02-22T07:09:53.280Z");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zho" + "'", str22, "zho");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=70,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=1970,MINUTE=0,SECOND=26,MILLISECOND=771,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(strMap36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "HI!" + "'", str39, "HI!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese" + "'", str40, "Chinese");
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test5070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5070");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) mutableDateTime1);
        mutableDateTime1.addWeekyears(22);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        int int6 = mutableDateTime5.getDayOfMonth();
        org.joda.time.Instant instant7 = mutableDateTime5.toInstant();
        boolean boolean9 = mutableDateTime5.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int13 = dateTimeZone11.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime5.setZone(dateTimeZone11);
        long long16 = dateTimeZone11.previousTransition((long) (short) -1);
        long long18 = dateTimeZone11.previousTransition((long) (short) 10);
        java.util.TimeZone timeZone19 = dateTimeZone11.toTimeZone();
        org.joda.time.YearMonth yearMonth20 = org.joda.time.YearMonth.now(dateTimeZone11);
        org.joda.time.DateTime dateTime21 = mutableDateTime1.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 10L + "'", long18 == 10L);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(yearMonth20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test5071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5071");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime5, periodType8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime0.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableDuration11, (org.joda.time.ReadableInstant) mutableDateTime12);
        mutablePeriod13.addMillis(70);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) mutablePeriod13);
        java.util.GregorianCalendar gregorianCalendar17 = mutableDateTime0.toGregorianCalendar();
        int int18 = gregorianCalendar17.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = gregorianCalendar17.getMaximum((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(gregorianCalendar17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
    }

    @Test
    public void test5072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5072");
        org.joda.time.YearMonth yearMonth0 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.withYear(7);
        org.joda.time.YearMonth.Property property3 = yearMonth2.year();
        org.joda.time.YearMonth yearMonth5 = property3.setCopy(2);
        int int6 = property3.get();
        org.joda.time.YearMonth yearMonth8 = property3.addToCopy(2023);
        org.joda.time.YearMonth yearMonth10 = property3.addWrapFieldToCopy(60);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth13 = new org.joda.time.YearMonth(dateTimeZone12);
        int int14 = yearMonth13.getYear();
        org.joda.time.YearMonth.Property property15 = yearMonth13.year();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int17 = mutableDateTime16.getDayOfMonth();
        org.joda.time.Instant instant18 = mutableDateTime16.toInstant();
        boolean boolean20 = mutableDateTime16.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int24 = dateTimeZone22.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime16.setZone(dateTimeZone22);
        int int26 = property15.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        int int27 = property15.get();
        java.util.Locale locale28 = java.util.Locale.PRC;
        java.lang.String str29 = locale28.getDisplayScript();
        int int30 = property15.getMaximumShortTextLength(locale28);
        int int31 = property15.getMinimumValueOverall();
        java.util.Locale locale34 = new java.util.Locale("hours", "ISOChronology[UTC]");
        java.lang.String str35 = property15.getAsText(locale34);
        org.joda.time.YearMonth yearMonth36 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth38 = yearMonth36.withYear(7);
        org.joda.time.YearMonth.Property property39 = yearMonth38.year();
        org.joda.time.YearMonth yearMonth41 = property39.setCopy(2);
        int int42 = property39.get();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet44 = locale43.getExtensionKeys();
        int int45 = property39.getMaximumShortTextLength(locale43);
        java.lang.String str46 = locale34.getDisplayName(locale43);
        int int47 = property3.getMaximumShortTextLength(locale34);
        org.joda.time.DurationField durationField48 = property3.getRangeDurationField();
        org.joda.time.YearMonth yearMonth50 = property3.addToCopy(32770);
        java.util.Locale locale52 = java.util.Locale.PRC;
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale52.getScript();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth55 = property3.setCopy("2022-02-22T07:12:51.339Z", locale52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:12:51.339Z\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonth0);
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-292275054) + "'", int31 == (-292275054));
        org.junit.Assert.assertEquals(locale34.toString(), "hours_ISOCHRONOLOGY[UTC]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertNotNull(yearMonth36);
        org.junit.Assert.assertNotNull(yearMonth38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonth41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 7 + "'", int42 == 7);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hours (ISOCHRONOLOGY[UTC])" + "'", str46, "hours (ISOCHRONOLOGY[UTC])");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNull(durationField48);
        org.junit.Assert.assertNotNull(yearMonth50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test5073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5073");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(dateTimeZone1);
        long long5 = dateTimeZone1.convertLocalToUTC((long) 999, true);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone1);
        java.lang.String str8 = dateTimeZone1.getShortName((long) 52);
        int int10 = dateTimeZone1.getOffset(4017600324L);
        int int12 = dateTimeZone1.getOffsetFromLocal(911L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 999L + "'", long5 == 999L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test5074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5074");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Period period7 = period5.withSeconds(0);
        org.joda.time.Period period9 = period7.plusHours(59000);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(292281961L, 100L, periodType12);
        org.joda.time.Period period14 = period7.normalizedStandard(periodType12);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period14);
    }

    @Test
    public void test5075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5075");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        int int5 = property2.getMaximumValue();
        org.joda.time.LocalTime localTime6 = property2.withMaximumValue();
        org.joda.time.LocalTime localTime8 = localTime6.minusHours((int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11, periodType12);
        org.joda.time.Period period16 = period14.withSeconds(0);
        org.joda.time.Period period18 = period16.plusMinutes((int) (byte) 1);
        org.joda.time.Period period20 = period16.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period23 = period16.withField(durationFieldType21, 7);
        org.joda.time.Period period25 = period16.minusDays(0);
        org.joda.time.Period period27 = period25.minusSeconds(99);
        org.joda.time.Period period29 = period27.withDays(93);
        org.joda.time.LocalTime localTime31 = localTime6.withPeriodAdded((org.joda.time.ReadablePeriod) period29, 6000000);
        org.joda.time.LocalTime localTime33 = localTime6.plusSeconds(2968);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399999 + "'", int5 == 86399999);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
    }

    @Test
    public void test5076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5076");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.standard();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTime();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.plusHours((-1));
        org.joda.time.Chronology chronology17 = timeOfDay16.getChronology();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withChronologyRetainFields(chronology21);
        long long24 = chronology17.set((org.joda.time.ReadablePartial) timeOfDay20, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.DateTime dateTime26 = dateTime7.toDateTime(chronology17);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 'x', periodType1, chronology17);
        org.joda.time.DateTimeField dateTimeField28 = chronology17.monthOfYear();
        long long30 = dateTimeField28.roundFloor((long) 12);
        long long32 = dateTimeField28.remainder((long) (byte) 100);
        long long34 = dateTimeField28.roundFloor(0L);
        boolean boolean36 = dateTimeField28.isLeap((long) 1);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate40 = localDate38.plusWeeks(9);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.weeks();
        boolean boolean42 = localDate40.isSupported(durationFieldType41);
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate45 = localDate40.plusWeeks(10);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(70, 5, 2, 0, 71, 70, 4, 27);
        int int55 = mutablePeriod54.getMinutes();
        int int56 = mutablePeriod54.getMinutes();
        org.joda.time.LocalDate localDate57 = localDate45.minus((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.LocalDate localDate59 = localDate57.plusYears(59052);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(chronology61);
        org.joda.time.DateMidnight.Property property63 = dateMidnight62.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight62.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.plusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property68 = dateMidnight67.weekOfWeekyear();
        java.util.Locale locale70 = java.util.Locale.GERMANY;
        java.lang.String str71 = dateMidnight67.toString("0", locale70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str72 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localDate59, 502, locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 502");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Standard" + "'", str2, "Standard");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-86399999L) + "'", long24 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L + "'", long32 == 100L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 70 + "'", int55 == 70);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 70 + "'", int56 == 70);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
    }

    @Test
    public void test5077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5077");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = chronology14.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight1.withChronology(chronology14);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.year();
        boolean boolean31 = dateMidnight23.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        int int32 = mutableDateTime29.getCenturyOfEra();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime29.secondOfDay();
        int int34 = property33.getMaximumValueOverall();
        org.joda.time.Interval interval35 = property33.toInterval();
        org.joda.time.MutableInterval mutableInterval36 = interval35.toMutableInterval();
        boolean boolean37 = interval35.isAfterNow();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 19 + "'", int32 == 19);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 86399 + "'", int34 == 86399);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test5078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5078");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        boolean boolean7 = interval2.contains((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval10 = localDate9.toInterval();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval13 = localDate12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        boolean boolean15 = interval10.contains((org.joda.time.ReadableInterval) mutableInterval14);
        org.joda.time.Instant instant16 = org.joda.time.Instant.now();
        boolean boolean17 = interval10.contains((org.joda.time.ReadableInstant) instant16);
        org.joda.time.MutableInterval mutableInterval18 = interval10.toMutableInterval();
        boolean boolean19 = interval2.overlaps((org.joda.time.ReadableInterval) interval10);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval22 = localDate21.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = interval22.toMutableInterval();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval26 = localDate25.toInterval();
        boolean boolean27 = interval22.isBefore((org.joda.time.ReadableInterval) interval26);
        org.joda.time.MutableInterval mutableInterval28 = interval26.toMutableInterval();
        boolean boolean29 = interval10.contains((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod32.copy();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.yearOfCentury();
        org.joda.time.Duration duration37 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod40.copy();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.yearOfCentury();
        org.joda.time.Duration duration45 = mutablePeriod41.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight43);
        boolean boolean46 = duration37.isEqual((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Interval interval47 = interval10.withDurationAfterStart((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Interval interval49 = interval10.withEndMillis((long) (byte) 1);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        mutableDateTime51.setDate(491535L);
        org.joda.time.Interval interval54 = interval10.withEnd((org.joda.time.ReadableInstant) mutableDateTime51);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval54);
    }

    @Test
    public void test5079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5079");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.plusHours((-1));
        org.joda.time.Chronology chronology20 = timeOfDay19.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withChronologyRetainFields(chronology24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) timeOfDay23, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(chronology20);
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime(chronology20);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 100, chronology20);
        java.lang.Object obj33 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.withChronologyRetainFields(chronology37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = timeOfDay38.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay38.plusHours((-1));
        org.joda.time.Chronology chronology42 = timeOfDay41.getChronology();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.TimeOfDay timeOfDay45 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay45.withChronologyRetainFields(chronology46);
        long long49 = chronology42.set((org.joda.time.ReadablePartial) timeOfDay45, (long) (byte) -1);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType53 = null;
        boolean boolean54 = periodType52.isSupported(durationFieldType53);
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 1, 0L, periodType52);
        int[] intArray58 = chronology42.get((org.joda.time.ReadablePeriod) period55, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(obj33, chronology42);
        org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay(0, 0, chronology42);
        org.joda.time.DateTimeZone dateTimeZone61 = chronology42.getZone();
        mutableDateTime30.setChronology(chronology42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(32770, (-292275054), 70005, 1969, 2191, chronology42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-86399999L) + "'", long27 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-86399999L) + "'", long49 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeZone61);
    }

    @Test
    public void test5080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5080");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate localDate5 = localDate2.plusDays((int) (byte) 0);
        org.joda.time.LocalDate.Property property6 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfCeilingCopy();
        java.lang.String str8 = property6.getAsShortText();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
    }

    @Test
    public void test5081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5081");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval4 = localDate3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval8 = localDate7.toInterval();
        boolean boolean9 = interval4.isBefore((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Chronology chronology10 = interval8.getChronology();
        long long11 = interval8.toDurationMillis();
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) interval8);
        long long13 = interval8.getStartMillis();
        org.joda.time.DateTime dateTime14 = interval8.getStart();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test5082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5082");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval6 = localDate5.toInterval();
        boolean boolean7 = interval2.isBefore((org.joda.time.ReadableInterval) interval6);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        int int9 = mutableDateTime8.getDayOfMonth();
        org.joda.time.Instant instant10 = mutableDateTime8.toInstant();
        org.joda.time.Instant instant12 = instant10.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        int int14 = mutableDateTime13.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType21 = periodType20.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime18, periodType21);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod25.copy();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.yearOfCentury();
        org.joda.time.Duration duration30 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval33 = interval6.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        long long34 = interval33.toDurationMillis();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight36.plusYears(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.withField(dateTimeFieldType42, 0);
        org.joda.time.Interval interval45 = dateMidnight44.toInterval();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval48 = localDate47.toInterval();
        java.lang.String str49 = interval48.toString();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone52);
        org.joda.time.DateTime dateTime54 = dateTime53.withTimeAtStartOfDay();
        boolean boolean55 = interval48.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableInterval mutableInterval56 = interval48.toMutableInterval();
        org.joda.time.Interval interval57 = interval48.toInterval();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval60 = localDate59.toInterval();
        org.joda.time.MutableInterval mutableInterval61 = interval60.toMutableInterval();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval64 = localDate63.toInterval();
        boolean boolean65 = interval60.isBefore((org.joda.time.ReadableInterval) interval64);
        long long66 = interval64.getStartMillis();
        org.joda.time.Period period67 = interval64.toPeriod();
        org.joda.time.Interval interval68 = interval64.toInterval();
        boolean boolean69 = interval48.isBefore((org.joda.time.ReadableInterval) interval68);
        org.joda.time.Interval interval71 = interval68.withEndMillis((long) 1439);
        org.joda.time.Interval interval72 = interval45.overlap((org.joda.time.ReadableInterval) interval71);
        boolean boolean73 = interval33.overlaps((org.joda.time.ReadableInterval) interval72);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 99L + "'", long34 == 99L);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str49, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(mutableInterval61);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test5083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5083");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime5 = property3.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime6 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime11 = property9.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime12 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property13 = localTime12.minuteOfHour();
        org.joda.time.Period period14 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime6, (org.joda.time.ReadablePartial) localTime12);
        org.joda.time.LocalTime localTime16 = localTime6.plusHours((int) '#');
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("fr");
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromCalendarFields(calendar19);
        org.joda.time.LocalTime localTime21 = localTime16.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType25 = null;
        boolean boolean26 = periodType24.isSupported(durationFieldType25);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 1, 0L, periodType24);
        org.joda.time.Period period28 = period27.normalizedStandard();
        org.joda.time.LocalTime localTime30 = localTime16.withPeriodAdded((org.joda.time.ReadablePeriod) period27, (int) 'a');
        int int31 = period27.getHours();
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType33 = periodType32.withDaysRemoved();
        org.joda.time.Period period34 = period27.normalizedStandard(periodType33);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone39);
        org.joda.time.DateTime dateTime41 = dateTime40.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime41.toMutableDateTime();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.TimeOfDay timeOfDay45 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = timeOfDay47.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay47.plusHours((-1));
        org.joda.time.Chronology chronology51 = timeOfDay50.getChronology();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.TimeOfDay timeOfDay54 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay54.withChronologyRetainFields(chronology55);
        long long58 = chronology51.set((org.joda.time.ReadablePartial) timeOfDay54, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(chronology51);
        org.joda.time.DateTime dateTime60 = dateTime41.toDateTime(chronology51);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone63);
        org.joda.time.Chronology chronology65 = chronology51.withZone(dateTimeZone63);
        org.joda.time.DurationField durationField66 = chronology51.minutes();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 58, (long) (short) 0, chronology51);
        org.joda.time.Period period68 = new org.joda.time.Period((long) 157, periodType33, chronology51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period70 = period68.minusMonths((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514187285,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=27,MILLISECOND=285,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-86399999L) + "'", long58 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test5084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5084");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        int int2 = charSet1.size();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.standard();
        java.lang.String str5 = periodType4.getName();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.plusHours((-1));
        org.joda.time.Chronology chronology20 = timeOfDay19.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withChronologyRetainFields(chronology24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) timeOfDay23, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(chronology20);
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime(chronology20);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 'x', periodType4, chronology20);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology20);
        boolean boolean32 = charSet1.equals((java.lang.Object) mutableDateTime31);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfDay();
        org.joda.time.LocalTime localTime37 = property35.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime38 = property35.roundHalfFloorCopy();
        int int39 = localTime38.size();
        org.joda.time.LocalTime localTime41 = localTime38.minusSeconds(100);
        org.joda.time.LocalTime localTime43 = localTime41.minusMillis(11);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        boolean boolean45 = localTime41.isSupported(durationFieldType44);
        boolean boolean46 = charSet1.contains((java.lang.Object) localTime41);
        int int47 = charSet1.size();
        java.util.Iterator<java.lang.Character> charItor48 = charSet1.iterator();
        java.util.Spliterator<java.lang.Character> charSpliterator49 = charSet1.spliterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Standard" + "'", str5, "Standard");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-86399999L) + "'", long27 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(charItor48);
        org.junit.Assert.assertNotNull(charSpliterator49);
    }

    @Test
    public void test5085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5085");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        int int6 = localTime5.size();
        org.joda.time.LocalTime localTime8 = localTime5.minusSeconds(100);
        org.joda.time.LocalTime localTime10 = localTime8.minusMillis(11);
        int int11 = localTime8.getMinuteOfHour();
        org.joda.time.LocalTime localTime13 = localTime8.plusSeconds(4);
        org.joda.time.LocalTime localTime15 = localTime13.minusMinutes((int) (short) 1);
        java.lang.String str16 = localTime15.toString();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int21 = dateTimeZone19.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime26.toMutableDateTime();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.TimeOfDay timeOfDay30 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.withChronologyRetainFields(chronology31);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = timeOfDay32.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay32.plusHours((-1));
        org.joda.time.Chronology chronology36 = timeOfDay35.getChronology();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.TimeOfDay timeOfDay39 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.withChronologyRetainFields(chronology40);
        long long43 = chronology36.set((org.joda.time.ReadablePartial) timeOfDay39, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(chronology36);
        org.joda.time.DateTime dateTime45 = dateTime26.toDateTime(chronology36);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone48);
        org.joda.time.Chronology chronology50 = chronology36.withZone(dateTimeZone48);
        boolean boolean51 = dateTimeZone19.equals((java.lang.Object) chronology36);
        org.joda.time.DateMidnight dateMidnight52 = org.joda.time.DateMidnight.now(dateTimeZone19);
        long long54 = dateTimeZone19.convertUTCToLocal((-61764076799990L));
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(5L, dateTimeZone19);
        org.joda.time.DateTime dateTime56 = localTime15.toDateTimeToday(dateTimeZone19);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 58 + "'", int11 == 58);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "23:57:24.001" + "'", str16, "23:57:24.001");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-86399999L) + "'", long43 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-61764076799990L) + "'", long54 == (-61764076799990L));
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test5086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5086");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType19 = null;
        boolean boolean20 = periodType18.isSupported(durationFieldType19);
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 1, 0L, periodType18);
        int[] intArray24 = chronology8.get((org.joda.time.ReadablePeriod) period21, (long) 2022, (long) ' ');
        org.joda.time.DurationField durationField25 = chronology8.months();
        org.joda.time.DurationField durationField26 = chronology8.hours();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime.Property property28 = dateTime27.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime27.withTime(292278994, 23, 16, 300001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test5087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5087");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 'u');
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.LocalTime localTime6 = localTime4.withMinuteOfHour(59);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.plusHours((-1));
        org.joda.time.Chronology chronology16 = timeOfDay15.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.withChronologyRetainFields(chronology20);
        long long23 = chronology16.set((org.joda.time.ReadablePartial) timeOfDay19, (long) (byte) -1);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType27 = null;
        boolean boolean28 = periodType26.isSupported(durationFieldType27);
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 1, 0L, periodType26);
        int[] intArray32 = chronology16.get((org.joda.time.ReadablePeriod) period29, (long) 2022, (long) ' ');
        org.joda.time.DateTimeField dateTimeField33 = chronology16.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1645488000000L, chronology16);
        org.joda.time.LocalTime localTime36 = localTime4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod34, 146);
        mutablePeriod34.addYears((-52));
        mutablePeriod34.addDays(429);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-86399999L) + "'", long23 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test5088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5088");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear(6000000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.parse("PT32.776S", dateTimeFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test5089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5089");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate5 = property4.roundFloorCopy();
        org.joda.time.LocalDate localDate6 = property4.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = property4.setCopy(300001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 300001 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test5090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5090");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField6 = property4.getDurationField();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) -1, chronology8);
        org.joda.time.LocalDate localDate11 = localDate9.minusYears(1);
        org.joda.time.LocalDate.Property property12 = localDate9.year();
        int int13 = localDate9.getYearOfEra();
        org.joda.time.LocalDate localDate15 = localDate9.plusMonths((int) '4');
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime18 = dateTime16.plus((long) 157);
        org.joda.time.DateTime.Property property19 = dateTime16.monthOfYear();
        long long20 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime16.withMillisOfSecond(730485);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 730485 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1969 + "'", int13 == 1969);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1580L) + "'", long20 == (-1580L));
    }

    @Test
    public void test5091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5091");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        java.lang.String str4 = localTime1.toString("22");
        org.joda.time.LocalTime localTime6 = localTime1.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalTime.Property property7 = localTime6.secondOfMinute();
        org.joda.time.LocalTime localTime8 = property7.withMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay14.plusHours((-1));
        org.joda.time.Chronology chronology18 = timeOfDay17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.years();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfCentury();
        mutableDateTime9.setRounding(dateTimeField20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime9.secondOfDay();
        boolean boolean23 = localTime8.equals((java.lang.Object) mutableDateTime9);
        int int24 = mutableDateTime9.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "22" + "'", str4, "22");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
    }

    @Test
    public void test5092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5092");
        java.util.Date date1 = new java.util.Date((long) 6);
        date1.setMinutes(1);
        java.lang.String str4 = date1.toLocaleString();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.year();
        int int7 = property6.get();
        org.joda.time.YearMonthDay yearMonthDay9 = property6.setCopy(69);
        org.joda.time.YearMonthDay yearMonthDay11 = property6.setCopy(429);
        org.joda.time.YearMonthDay yearMonthDay12 = property6.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay14 = property6.addToCopy(0);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval17 = localDate16.toInterval();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval20 = localDate19.toInterval();
        org.joda.time.MutableInterval mutableInterval21 = interval20.toMutableInterval();
        boolean boolean22 = interval17.contains((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.Interval interval24 = interval17.withStartMillis((long) 3);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval27 = localDate26.toInterval();
        org.joda.time.MutableInterval mutableInterval28 = interval27.toMutableInterval();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval31 = localDate30.toInterval();
        boolean boolean32 = interval27.isBefore((org.joda.time.ReadableInterval) interval31);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        int int34 = mutableDateTime33.getDayOfMonth();
        org.joda.time.Instant instant35 = mutableDateTime33.toInstant();
        org.joda.time.Instant instant37 = instant35.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime();
        int int39 = mutableDateTime38.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone42);
        org.joda.time.DateTime dateTime44 = dateTime43.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType46 = periodType45.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime38, (org.joda.time.ReadableInstant) dateTime43, periodType46);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod50.copy();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight.Property property54 = dateMidnight53.yearOfCentury();
        org.joda.time.Duration duration55 = mutablePeriod51.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight53);
        mutablePeriod47.setPeriod((org.joda.time.ReadableDuration) duration55);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant35, (org.joda.time.ReadableDuration) duration55);
        org.joda.time.Interval interval58 = interval31.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        org.joda.time.ReadableInterval readableInterval59 = null;
        boolean boolean60 = interval58.isAfter(readableInterval59);
        org.joda.time.DateTime dateTime61 = interval58.getStart();
        org.joda.time.Period period62 = interval58.toPeriod();
        org.joda.time.Interval interval63 = interval24.gap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Period period64 = interval24.toPeriod();
        org.joda.time.Period period66 = period64.plusYears(7);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(readableDuration67, (org.joda.time.ReadableInstant) mutableDateTime68);
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime();
        int int71 = mutableDateTime70.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.hours();
        mutableDateTime70.add(durationFieldType72, (int) (short) 100);
        mutablePeriod69.add(durationFieldType72, (int) (byte) 0);
        org.joda.time.Period period78 = period64.withFieldAdded(durationFieldType72, 7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay14.withFieldAdded(durationFieldType72, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:01:00 GMT 1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Jan 1, 1970 12:01:00 AM" + "'", str4, "Jan 1, 1970 12:01:00 AM");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(mutableInterval28);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNull(interval63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 22 + "'", int71 == 22);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertNotNull(period78);
    }

    @Test
    public void test5093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5093");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime5, periodType8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime0.toMutableDateTime();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfDay();
        org.joda.time.LocalTime localTime15 = property13.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime16 = property13.roundHalfFloorCopy();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType21 = periodType20.withWeeksRemoved();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19, periodType20);
        org.joda.time.Period period24 = period22.withSeconds(0);
        org.joda.time.Period period26 = period24.plusMinutes((int) (byte) 1);
        org.joda.time.Period period28 = period24.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period31 = period24.withField(durationFieldType29, 7);
        org.joda.time.LocalTime localTime33 = localTime16.withPeriodAdded((org.joda.time.ReadablePeriod) period24, (int) (short) 1);
        org.joda.time.format.PeriodFormatter periodFormatter34 = null;
        java.lang.String str35 = period24.toString(periodFormatter34);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod38.copy();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.yearOfCentury();
        org.joda.time.Duration duration43 = mutablePeriod39.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Period period44 = period24.withFields((org.joda.time.ReadablePeriod) mutablePeriod39);
        mutablePeriod39.addYears((int) (byte) -1);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) mutablePeriod39, 3);
        mutablePeriod39.addYears(15);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean54 = dateTimeZone52.isStandardOffset((long) 'u');
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(dateTimeZone52);
        int int56 = dateMidnight55.getWeekOfWeekyear();
        org.joda.time.Interval interval57 = dateMidnight55.toInterval();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType59 = periodType58.withDaysRemoved();
        org.joda.time.Period period60 = interval57.toPeriod(periodType59);
        mutablePeriod39.add((org.joda.time.ReadableInterval) interval57);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0S" + "'", str35, "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(period60);
    }

    @Test
    public void test5094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5094");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.standard();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTime();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.plusHours((-1));
        org.joda.time.Chronology chronology17 = timeOfDay16.getChronology();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withChronologyRetainFields(chronology21);
        long long24 = chronology17.set((org.joda.time.ReadablePartial) timeOfDay20, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.DateTime dateTime26 = dateTime7.toDateTime(chronology17);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 'x', periodType1, chronology17);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusWeeks(10);
        java.lang.String str32 = dateMidnight31.toString();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType36 = null;
        boolean boolean37 = periodType35.isSupported(durationFieldType36);
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 1, 0L, periodType35);
        java.lang.String str39 = period38.toString();
        org.joda.time.Period period41 = period38.minusMonths(9);
        org.joda.time.Period period43 = period41.withSeconds(0);
        org.joda.time.Period period45 = period41.plusDays(1);
        org.joda.time.Period period47 = period45.minusYears((int) (short) -1);
        org.joda.time.Period period49 = period45.withYears(0);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight31.plus((org.joda.time.ReadablePeriod) period49);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Standard" + "'", str2, "Standard");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-86399999L) + "'", long24 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2021-12-14T00:00:00.000Z" + "'", str32, "2021-12-14T00:00:00.000Z");
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0.001S" + "'", str39, "PT0.001S");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateMidnight50);
    }

    @Test
    public void test5095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5095");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) 'a');
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test5096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5096");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(dateTimeZone1);
        org.joda.time.Interval interval3 = yearMonth2.toInterval();
        boolean boolean5 = interval3.isAfter((long) 6);
        long long6 = interval3.getStartMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1643673600000L + "'", long6 == 1643673600000L);
    }

    @Test
    public void test5097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5097");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        mutableDateTime0.setMillisOfDay((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean15 = dateTimeZone13.isStandardOffset((long) 'u');
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone13);
        mutableDateTime0.setZone(dateTimeZone13);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime0.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) 'u');
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        mutableDateTime0.setZone(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.year();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.MutableDateTime mutableDateTime34 = property31.set(5);
        org.joda.time.MutableDateTime mutableDateTime35 = property31.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        int int37 = mutableDateTime36.getDayOfMonth();
        org.joda.time.Instant instant38 = mutableDateTime36.toInstant();
        boolean boolean40 = mutableDateTime36.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int44 = dateTimeZone42.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime36.setZone(dateTimeZone42);
        mutableDateTime36.setDate((long) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod51 = mutablePeriod50.copy();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight.Property property54 = dateMidnight53.yearOfCentury();
        org.joda.time.Duration duration55 = mutablePeriod51.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod59 = mutablePeriod58.copy();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(chronology60);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.yearOfCentury();
        org.joda.time.Duration duration63 = mutablePeriod59.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight61);
        boolean boolean64 = duration55.isEqual((org.joda.time.ReadableDuration) duration63);
        mutableDateTime36.add((org.joda.time.ReadableDuration) duration63, 2968);
        mutableDateTime35.add((org.joda.time.ReadableDuration) duration63);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration63, 10);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.standard();
        java.lang.String str71 = periodType70.getName();
        int int72 = periodType70.size();
        org.joda.time.Period period75 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period77 = period75.withPeriodType(periodType76);
        org.joda.time.DurationFieldType durationFieldType78 = org.joda.time.DurationFieldType.minutes();
        boolean boolean79 = periodType76.isSupported(durationFieldType78);
        int int80 = periodType70.indexOf(durationFieldType78);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.TimeOfDay timeOfDay83 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology82);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.TimeOfDay timeOfDay85 = timeOfDay83.withChronologyRetainFields(chronology84);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray86 = timeOfDay85.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay88 = timeOfDay85.plusHours((-1));
        org.joda.time.Chronology chronology89 = timeOfDay88.getChronology();
        org.joda.time.DurationField durationField90 = chronology89.years();
        org.joda.time.DurationField durationField91 = durationFieldType78.getField(chronology89);
        boolean boolean92 = mutableDateTime0.equals((java.lang.Object) durationField91);
        long long95 = durationField91.add((long) 157, 32);
        long long97 = durationField91.getMillis(91);
        boolean boolean98 = durationField91.isPrecise();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Standard" + "'", str71, "Standard");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 8 + "'", int72 == 8);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 5 + "'", int80 == 5);
        org.junit.Assert.assertNotNull(timeOfDay83);
        org.junit.Assert.assertNotNull(timeOfDay85);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray86);
        org.junit.Assert.assertNotNull(timeOfDay88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1920157L + "'", long95 == 1920157L);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 5460000L + "'", long97 == 5460000L);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test5098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5098");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) 8);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.plusDays(32769);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.minusDays(52);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.withDayOfMonth(19);
        org.joda.time.YearMonthDay.Property property10 = yearMonthDay7.dayOfMonth();
        boolean boolean11 = localDate1.equals((java.lang.Object) yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test5099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5099");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMinutes(1969);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.year();
        org.joda.time.Chronology chronology16 = mutableDateTime14.getChronology();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 17, chronology16);
        org.joda.time.Chronology chronology18 = chronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.millisOfDay();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((-1590470380799999170L), chronology18);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localDateTime0.compareTo((org.joda.time.ReadablePartial) yearMonthDay20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test5100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5100");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate6 = property5.roundHalfFloorCopy();
        int int7 = localDate6.getYearOfEra();
        org.joda.time.LocalDate localDate9 = localDate6.withDayOfMonth(31);
        org.joda.time.Interval interval10 = localDate6.toInterval();
        org.joda.time.LocalDate localDate12 = localDate6.plusYears(30);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test5101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5101");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear(6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter7.withOffsetParsed();
        org.joda.time.Chronology chronology9 = dateTimeFormatter8.getChronolgy();
        java.io.Writer writer10 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval13 = localDate12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = interval13.toMutableInterval();
        boolean boolean16 = mutableInterval14.isAfter((long) 999);
        org.joda.time.Interval interval17 = mutableInterval14.toInterval();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval20 = localDate19.toInterval();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval23 = localDate22.toInterval();
        org.joda.time.MutableInterval mutableInterval24 = interval23.toMutableInterval();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval27 = localDate26.toInterval();
        boolean boolean28 = interval23.isBefore((org.joda.time.ReadableInterval) interval27);
        org.joda.time.MutableInterval mutableInterval29 = interval27.toMutableInterval();
        boolean boolean30 = interval20.isBefore((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.DateTime dateTime31 = mutableInterval29.getStart();
        boolean boolean32 = interval17.isBefore((org.joda.time.ReadableInterval) mutableInterval29);
        org.joda.time.DateTime dateTime33 = mutableInterval29.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(writer10, (org.joda.time.ReadableInstant) dateTime33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(mutableInterval24);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test5102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5102");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        calendar0.setTimeZone(timeZone1);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        org.joda.time.LocalDate localDate5 = yearMonthDay4.toLocalDate();
        int int6 = localDate5.getDayOfMonth();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514188077,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=28,MILLISECOND=77,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514188077,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=28,MILLISECOND=77,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
    }

    @Test
    public void test5103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5103");
        java.util.Date date1 = new java.util.Date((long) 6);
        date1.setMinutes(1);
        java.lang.String str4 = date1.toLocaleString();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.year();
        org.joda.time.YearMonthDay yearMonthDay8 = property6.setCopy(0);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusDays((-292275054));
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusMonths(100);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:01:00 GMT 1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Jan 1, 1970 12:01:00 AM" + "'", str4, "Jan 1, 1970 12:01:00 AM");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test5104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5104");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.ReadableInterval readableInterval3 = null;
        mutablePeriod2.add(readableInterval3);
        mutablePeriod2.addSeconds((int) (short) -1);
        int int7 = mutablePeriod2.getWeeks();
        int int8 = mutablePeriod2.getDays();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test5105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5105");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronology();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str10 = yearMonthDay9.toString();
        java.lang.String str11 = yearMonthDay9.toString();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.plusDays(4);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.plusYears(22);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        long long20 = dateTimeZone18.convertUTCToLocal((long) (-1));
        org.joda.time.DateMidnight dateMidnight21 = yearMonthDay13.toDateMidnight(dateTimeZone18);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay13.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay24 = property22.addToCopy(12);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int28 = dateTimeZone26.getOffset(0L);
        long long31 = dateTimeZone26.convertLocalToUTC((long) (short) 0, true);
        org.joda.time.DateTime dateTime32 = yearMonthDay24.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) 8);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusDays(32769);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay34.minusDays((int) '4');
        org.joda.time.DateMidnight dateMidnight39 = yearMonthDay34.toDateMidnight();
        boolean boolean40 = dateTimeZone26.equals((java.lang.Object) dateMidnight39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter5.withZone(dateTimeZone26);
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter5.withOffsetParsed();
        java.util.Locale locale44 = dateTimeFormatter43.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01" + "'", str10, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNull(dateTimePrinter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(locale44);
    }

    @Test
    public void test5106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5106");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfDay();
        org.joda.time.LocalTime localTime20 = property18.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime21 = property18.roundHalfFloorCopy();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType26 = periodType25.withWeeksRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24, periodType25);
        org.joda.time.Period period29 = period27.withSeconds(0);
        org.joda.time.Period period31 = period29.plusMinutes((int) (byte) 1);
        org.joda.time.Period period33 = period29.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period36 = period29.withField(durationFieldType34, 7);
        org.joda.time.LocalTime localTime38 = localTime21.withPeriodAdded((org.joda.time.ReadablePeriod) period29, (int) (short) 1);
        org.joda.time.Period period40 = period29.withMillis((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay11.minus((org.joda.time.ReadablePeriod) period29);
        int int42 = timeOfDay11.size();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone45);
        org.joda.time.DateTime dateTime47 = dateTime46.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime48 = dateTime46.withLaterOffsetAtOverlap();
        org.joda.time.TimeOfDay timeOfDay49 = dateTime48.toTimeOfDay();
        org.joda.time.DateTime dateTime50 = dateTime48.withTimeAtStartOfDay();
        int int51 = dateTime48.getDayOfYear();
        org.joda.time.DateTime.Property property52 = dateTime48.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property54 = dateTime48.property(dateTimeFieldType53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property55 = timeOfDay11.property(dateTimeFieldType53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test5107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5107");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withCenturyOfEra((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod9.copy();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.yearOfCentury();
        org.joda.time.Duration duration14 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod17.copy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfCentury();
        org.joda.time.Duration duration22 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        boolean boolean23 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration24 = duration22.toDuration();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight6, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Chronology chronology27 = interval25.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.dayOfMonth();
        org.joda.time.YearMonth yearMonth30 = org.joda.time.YearMonth.now(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(yearMonth30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test5108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5108");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        int int6 = localDate2.getYearOfEra();
        org.joda.time.LocalDate localDate8 = localDate2.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) 157);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval14 = localDate13.toInterval();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval17 = localDate16.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = interval17.toMutableInterval();
        boolean boolean19 = interval14.contains((org.joda.time.ReadableInterval) mutableInterval18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval22 = localDate21.toInterval();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval25 = localDate24.toInterval();
        org.joda.time.MutableInterval mutableInterval26 = interval25.toMutableInterval();
        boolean boolean27 = interval22.contains((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.Instant instant28 = org.joda.time.Instant.now();
        boolean boolean29 = interval22.contains((org.joda.time.ReadableInstant) instant28);
        org.joda.time.MutableInterval mutableInterval30 = interval22.toMutableInterval();
        boolean boolean31 = interval14.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval34 = localDate33.toInterval();
        org.joda.time.MutableInterval mutableInterval35 = interval34.toMutableInterval();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval38 = localDate37.toInterval();
        boolean boolean39 = interval34.isBefore((org.joda.time.ReadableInterval) interval38);
        org.joda.time.MutableInterval mutableInterval40 = interval38.toMutableInterval();
        boolean boolean41 = interval22.contains((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod44.copy();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.yearOfCentury();
        org.joda.time.Duration duration49 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod53 = mutablePeriod52.copy();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.yearOfCentury();
        org.joda.time.Duration duration57 = mutablePeriod53.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight55);
        boolean boolean58 = duration49.isEqual((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Interval interval59 = interval22.withDurationAfterStart((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTime dateTime61 = interval60.getStart();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(mutableInterval35);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test5109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5109");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime dateTime7 = dateTime4.minusYears(100);
        org.joda.time.DateTime.Property property8 = dateTime4.secondOfDay();
        org.joda.time.DateTime.Property property9 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.Interval interval11 = property9.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test5110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5110");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate7 = localDate2.minusDays(7);
        org.joda.time.LocalDate localDate9 = localDate2.minusDays(2);
        org.joda.time.DateTime dateTime10 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        int int14 = dateTimeField12.get(172800000000L);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 175 + "'", int14 == 175);
    }

    @Test
    public void test5111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5111");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight3 = property2.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime9 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear(2);
        int int12 = property2.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateMidnight dateMidnight13 = property2.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withYear((int) ' ');
        int int16 = dateMidnight15.getEra();
        int int17 = dateMidnight15.getMonthOfYear();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.minusWeeks(65649);
        boolean boolean21 = dateMidnight15.isAfter((long) 292278994);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test5112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5112");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withCenturyOfEra((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod9.copy();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.yearOfCentury();
        org.joda.time.Duration duration14 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod17.copy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfCentury();
        org.joda.time.Duration duration22 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        boolean boolean23 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration24 = duration22.toDuration();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight6, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateMidnight.Property property26 = dateMidnight6.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight6.withDayOfMonth(19);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight6.minusDays((int) (byte) 0);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.era();
        org.joda.time.DateMidnight dateMidnight32 = property31.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight32);
    }

    @Test
    public void test5113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5113");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(36000001, 35, (-10), 429, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 429 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5114");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.yearOfCentury();
        org.joda.time.Duration duration7 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.copy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfCentury();
        org.joda.time.Duration duration15 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight13);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight18.plusYears(1969);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withDayOfYear(54);
        org.joda.time.LocalDate localDate26 = dateMidnight23.toLocalDate();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateMidnight23, periodType27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (short) -1, chronology33);
        org.joda.time.LocalDate localDate36 = localDate34.minusYears(1);
        org.joda.time.LocalDate.Property property37 = localDate34.year();
        org.joda.time.LocalDate localDate39 = localDate34.minusDays(7);
        org.joda.time.LocalDate localDate41 = localDate34.minusDays(2);
        org.joda.time.LocalDate localDate43 = localDate34.plusDays(32769);
        org.joda.time.DateTime dateTime44 = localDate43.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = duration15.equals((java.lang.Object) dateTime44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime48 = dateTime44.withDayOfWeek(86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test5115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5115");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth1 = org.joda.time.YearMonth.parse("2022-02-22T07:11:35.875Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:11:35.875Z\" is malformed at \"T07:11:35.875Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5116");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear(2);
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime10 = dateTime7.plusHours(10);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        int int12 = mutableDateTime11.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime11, (org.joda.time.ReadableInstant) dateTime16, periodType19);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod23.copy();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.yearOfCentury();
        org.joda.time.Duration duration28 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod32.copy();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.yearOfCentury();
        org.joda.time.Duration duration37 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod40.copy();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.yearOfCentury();
        org.joda.time.Duration duration45 = mutablePeriod41.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight43);
        boolean boolean46 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period47 = duration45.toPeriod();
        boolean boolean48 = duration28.isEqual((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period49 = duration28.toPeriod();
        org.joda.time.Period period51 = period49.minusMinutes(6);
        org.joda.time.DateTime dateTime53 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) period49, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(7, 17);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((java.lang.Object) dateTime10, dateTimeZone56);
        org.joda.time.DateTime dateTime58 = dateTime10.toDateTime();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(chronology59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType63 = periodType62.withWeeksRemoved();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight60, readableDuration61, periodType62);
        org.joda.time.Period period66 = period64.withSeconds(0);
        org.joda.time.Period period68 = period66.plusMinutes((int) (byte) 1);
        org.joda.time.Period period70 = period66.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period73 = period66.withField(durationFieldType71, 7);
        org.joda.time.Period period75 = period66.minusDays(0);
        org.joda.time.format.PeriodFormatter periodFormatter76 = null;
        java.lang.String str77 = period66.toString(periodFormatter76);
        org.joda.time.Period period78 = period66.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod79 = period66.toMutablePeriod();
        org.joda.time.DateTime dateTime80 = dateTime10.minus((org.joda.time.ReadablePeriod) period66);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PT0S" + "'", str77, "PT0S");
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(mutablePeriod79);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test5117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5117");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str2 = yearMonthDay1.toString();
        java.lang.String str3 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusYears(85);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.minusYears(0);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.minusMonths(59000);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
    }

    @Test
    public void test5118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5118");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str5 = localTime2.toString("22");
        org.joda.time.LocalTime localTime7 = localTime2.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localTime2.isSupported(dateTimeFieldType8);
        org.joda.time.Period period12 = new org.joda.time.Period((long) 1, (long) (short) 0);
        org.joda.time.LocalTime localTime13 = localTime2.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalTime localTime15 = localTime2.withMillisOfDay((int) 'a');
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromMillisOfDay(25252904995200000L, chronology16);
        org.joda.time.Chronology chronology18 = chronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.millisOfSecond();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "22" + "'", str5, "22");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test5119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5119");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime8 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear(2);
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        org.joda.time.Instant instant13 = instant11.withMillis((long) 5);
        org.joda.time.MutableDateTime mutableDateTime14 = instant13.toMutableDateTimeISO();
        org.joda.time.Instant instant17 = instant13.withDurationAdded((long) (-292275054), 32);
        long long18 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) instant13);
        org.joda.time.DateMidnight dateMidnight19 = property2.roundHalfEvenCopy();
        java.lang.Object obj20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(obj20, dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears((int) (short) 0);
        int int26 = localDateTime22.getValue(2);
        int int27 = localDateTime22.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime22.withField(dateTimeFieldType28, 32);
        org.joda.time.DateMidnight.Property property31 = dateMidnight19.property(dateTimeFieldType28);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType28.getDurationType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 19044L + "'", long18 == 19044L);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 7 + "'", int27 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(durationFieldType32);
    }

    @Test
    public void test5120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5120");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withDayOfYear((int) '#');
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withCenturyOfEra((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod15.copy();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfCentury();
        org.joda.time.Duration duration20 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod23.copy();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.yearOfCentury();
        org.joda.time.Duration duration28 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        boolean boolean29 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration30 = duration28.toDuration();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight12, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateMidnight.Property property32 = dateMidnight12.weekOfWeekyear();
        int int33 = property5.compareTo((org.joda.time.ReadableInstant) dateMidnight12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight35 = dateMidnight12.withYearOfCentury(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test5121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5121");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.year();
        org.joda.time.LocalDate localDate4 = localDate1.withCenturyOfEra(10);
        int int5 = localDate4.getWeekOfWeekyear();
        int int7 = localDate4.getValue(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1070 + "'", int7 == 1070);
    }

    @Test
    public void test5122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5122");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Period period7 = period5.withSeconds(0);
        org.joda.time.Period period9 = period7.plusMinutes((int) (byte) 1);
        org.joda.time.Period period11 = period7.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period14 = period7.withField(durationFieldType12, 7);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.standard();
        java.lang.String str18 = periodType17.getName();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = timeOfDay29.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay29.plusHours((-1));
        org.joda.time.Chronology chronology33 = timeOfDay32.getChronology();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.withChronologyRetainFields(chronology37);
        long long40 = chronology33.set((org.joda.time.ReadablePartial) timeOfDay36, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(chronology33);
        org.joda.time.DateTime dateTime42 = dateTime23.toDateTime(chronology33);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 'x', periodType17, chronology33);
        org.joda.time.DateTimeField dateTimeField44 = chronology33.hourOfHalfday();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime(867L, chronology33);
        org.joda.time.DurationField durationField46 = durationFieldType12.getField(chronology33);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone49);
        org.joda.time.DateTime dateTime51 = dateTime50.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime51.toMutableDateTime();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = timeOfDay57.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay57.plusHours((-1));
        org.joda.time.Chronology chronology61 = timeOfDay60.getChronology();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.TimeOfDay timeOfDay64 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay64.withChronologyRetainFields(chronology65);
        long long68 = chronology61.set((org.joda.time.ReadablePartial) timeOfDay64, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay69 = new org.joda.time.TimeOfDay(chronology61);
        org.joda.time.DateTime dateTime70 = dateTime51.toDateTime(chronology61);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone73);
        org.joda.time.Chronology chronology75 = chronology61.withZone(dateTimeZone73);
        org.joda.time.DurationField durationField76 = chronology61.minutes();
        int int77 = durationField46.compareTo(durationField76);
        org.joda.time.DurationFieldType durationFieldType78 = durationField76.getType();
        org.joda.time.DurationFieldType durationFieldType79 = durationField76.getType();
        long long81 = durationField76.getValueAsLong(555L);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Standard" + "'", str18, "Standard");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-86399999L) + "'", long40 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-86399999L) + "'", long68 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
    }

    @Test
    public void test5123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5123");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withYear((int) 'u');
        org.joda.time.DateTime dateTime4 = dateTime0.minus(52550279L);
        int int5 = dateTime4.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 60044646 + "'", int5 == 60044646);
    }

    @Test
    public void test5124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5124");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property9 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime10 = property9.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime10.withTime(430, (int) 'x', 6000000, 117);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 430 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test5125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5125");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str3 = dateTimeFieldType2.getName();
        boolean boolean4 = localDateTime1.isSupported(dateTimeFieldType2);
        int int5 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.minusMinutes((int) (short) 0);
        int int8 = localDateTime7.getEra();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514194974,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=34,MILLISECOND=974,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "dayOfMonth" + "'", str3, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test5126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5126");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withYear((int) 'u');
        org.joda.time.DateTime dateTime4 = dateTime0.minus(52550279L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.year();
        org.joda.time.Chronology chronology13 = mutableDateTime11.getChronology();
        int int14 = mutableDateTime11.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.era();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.monthOfYear();
        org.joda.time.Chronology chronology18 = mutableDateTime16.getChronology();
        mutableDateTime16.setWeekyear(4);
        org.joda.time.Chronology chronology21 = mutableDateTime16.getChronology();
        mutableDateTime11.setChronology(chronology21);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(172800000000L, chronology21);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime4.toMutableDateTime(chronology21);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.addWrapField(60);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test5127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5127");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("1969-12-24");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("Tue");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test5128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5128");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) -1);
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType11 = periodType10.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableInstant) dateTime8, periodType11);
        mutableDateTime3.addMinutes((int) (byte) 0);
        boolean boolean15 = dateTime2.isBefore((org.joda.time.ReadableInstant) mutableDateTime3);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setWeekOfWeekyear(1094);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1094 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test5129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5129");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int11 = dateTimeZone9.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        long long13 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime12.copy();
        java.lang.Object obj15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(obj15, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusYears((int) (short) 0);
        int int21 = localDateTime17.getValue(2);
        int int22 = localDateTime17.getHourOfDay();
        org.joda.time.Chronology chronology23 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.millisOfSecond();
        mutableDateTime12.setChronology(chronology23);
        mutableDateTime12.setDate((-62167219199948L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-52L) + "'", long13 == (-52L));
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7 + "'", int22 == 7);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test5130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5130");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-22T07:13:18.380Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-22t07:13:18.380z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5131");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("-0001-02-23T07:13:41.626");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"-0001-02-23T07:13:41.626\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5132");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = property4.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime7 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = property4.setCopy(1091);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1091 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test5133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5133");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("PT-68S", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test5134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5134");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        int int6 = dateTime5.getDayOfYear();
        org.joda.time.DateTime.Property property7 = dateTime5.dayOfMonth();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test5135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5135");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter5.getZone();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter5.getZone();
        org.joda.time.Chronology chronology8 = dateTimeFormatter5.getChronology();
        boolean boolean9 = dateTimeFormatter5.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter5.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = dateTimeFormatter11.parseLocalTime("2022-02-22T07:09:46.825Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(dateTimePrinter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test5136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5136");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property9 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime11 = property9.setCopy(2);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        boolean boolean16 = periodType14.isSupported(durationFieldType15);
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 1, 0L, periodType14);
        java.lang.String str18 = period17.toString();
        org.joda.time.Period period20 = period17.minusMonths(9);
        org.joda.time.Period period22 = period20.plusMinutes((int) (byte) 0);
        org.joda.time.Period period24 = period20.withDays(8);
        org.joda.time.DateTime dateTime25 = dateTime11.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int29 = dateTimeZone27.getOffset(0L);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime34 = dateTime25.withHourOfDay(0);
        org.joda.time.DateTime dateTime36 = dateTime34.plus((long) 43);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.001S" + "'", str18, "PT0.001S");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test5137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5137");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        int int7 = localDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withField(dateTimeFieldType8, 32);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMonths(32);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = property13.addToCopy((-1));
        int int16 = localDateTime15.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusHours(29);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType27 = periodType26.withWeeksRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25, periodType26);
        java.lang.Object obj29 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = timeOfDay34.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay34.plusHours((-1));
        org.joda.time.Chronology chronology38 = timeOfDay37.getChronology();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.TimeOfDay timeOfDay41 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.withChronologyRetainFields(chronology42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) timeOfDay41, (long) (byte) -1);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType49 = null;
        boolean boolean50 = periodType48.isSupported(durationFieldType49);
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 1, 0L, periodType48);
        int[] intArray54 = chronology38.get((org.joda.time.ReadablePeriod) period51, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(obj29, chronology38);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 17, (long) (byte) -1, periodType26, chronology38);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        long long62 = dateTimeZone58.convertLocalToUTC((-1L), false, 10L);
        org.joda.time.Chronology chronology63 = chronology38.withZone(dateTimeZone58);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(100L, (-86399999L), chronology63);
        org.joda.time.DateTimeField dateTimeField65 = chronology63.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period66 = new org.joda.time.Period((java.lang.Object) localDateTime18, chronology63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-86399999L) + "'", long45 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test5138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5138");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        java.lang.Object obj2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(obj2, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusYears((int) (short) 0);
        int int8 = localDateTime4.getValue(2);
        int int9 = localDateTime4.getHourOfDay();
        boolean boolean10 = calendar0.after((java.lang.Object) localDateTime4);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        calendar0.add((int) (short) 10, 53);
        calendar0.set((int) (byte) 1, (int) (short) 1, 0);
        int int20 = calendar0.getMaximum((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.add((-694336399), 2004);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=0,DAY_OF_YEAR=3,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278994 + "'", int20 == 292278994);
    }

    @Test
    public void test5139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5139");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        int int6 = localTime5.size();
        org.joda.time.LocalTime localTime8 = localTime5.minusSeconds(100);
        org.joda.time.LocalTime localTime10 = localTime8.minusMillis(11);
        int int11 = localTime8.getMinuteOfHour();
        org.joda.time.LocalTime.Property property12 = localTime8.hourOfDay();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime15 = property12.setCopy(9);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 58 + "'", int11 == 58);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test5140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5140");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime5.toMutableDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusHours((-1));
        org.joda.time.Chronology chronology15 = timeOfDay14.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.withChronologyRetainFields(chronology19);
        long long22 = chronology15.set((org.joda.time.ReadablePartial) timeOfDay18, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.DateTime dateTime24 = dateTime5.toDateTime(chronology15);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 100, chronology15);
        org.joda.time.DateTimeField dateTimeField26 = chronology15.secondOfDay();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType34 = periodType33.withWeeksRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, readableDuration32, periodType33);
        java.lang.Object obj36 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.TimeOfDay timeOfDay39 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.withChronologyRetainFields(chronology40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = timeOfDay41.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay41.plusHours((-1));
        org.joda.time.Chronology chronology45 = timeOfDay44.getChronology();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.TimeOfDay timeOfDay48 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.withChronologyRetainFields(chronology49);
        long long52 = chronology45.set((org.joda.time.ReadablePartial) timeOfDay48, (long) (byte) -1);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType56 = null;
        boolean boolean57 = periodType55.isSupported(durationFieldType56);
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 1, 0L, periodType55);
        int[] intArray61 = chronology45.get((org.joda.time.ReadablePeriod) period58, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime(obj36, chronology45);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 17, (long) (byte) -1, periodType33, chronology45);
        org.joda.time.DateTimeField dateTimeField64 = chronology45.monthOfYear();
        org.joda.time.DateTimeField dateTimeField65 = chronology45.clockhourOfDay();
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.now(chronology45);
        org.joda.time.DateTime dateTime67 = dateTime27.toDateTime(chronology45);
        boolean boolean69 = dateTime67.isEqual((long) 2387);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-86399999L) + "'", long22 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-86399999L) + "'", long52 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test5141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5141");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.weekyearOfCentury();
        int int21 = dateTimeField19.getMinimumValue(0L);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test5142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5142");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime5.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = timeOfDay19.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.plusHours((-1));
        org.joda.time.Chronology chronology23 = timeOfDay22.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) timeOfDay26, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology23);
        org.joda.time.DateTime dateTime32 = dateTime13.toDateTime(chronology23);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType38 = periodType37.withWeeksRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight35, readableDuration36, periodType37);
        org.joda.time.Period period41 = period39.withSeconds(0);
        org.joda.time.Period period43 = period41.plusMinutes((int) (byte) 1);
        org.joda.time.Period period44 = period41.negated();
        org.joda.time.DateTime dateTime46 = dateTime13.withPeriodAdded((org.joda.time.ReadablePeriod) period44, 86040000);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone49);
        org.joda.time.DateTime dateTime51 = dateTime50.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime51.toMutableDateTime();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay55.withChronologyRetainFields(chronology56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = timeOfDay57.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay57.plusHours((-1));
        org.joda.time.Chronology chronology61 = timeOfDay60.getChronology();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.TimeOfDay timeOfDay64 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology63);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay64.withChronologyRetainFields(chronology65);
        long long68 = chronology61.set((org.joda.time.ReadablePartial) timeOfDay64, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay69 = new org.joda.time.TimeOfDay(chronology61);
        org.joda.time.DateTime dateTime70 = dateTime51.toDateTime(chronology61);
        org.joda.time.DateTimeField dateTimeField71 = chronology61.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField72 = chronology61.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField73 = chronology61.year();
        org.joda.time.DateTimeField dateTimeField74 = chronology61.monthOfYear();
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(chronology61);
        org.joda.time.Period period76 = new org.joda.time.Period((java.lang.Object) period44, chronology61);
        org.joda.time.Period period77 = new org.joda.time.Period((long) 1070, chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-86399999L) + "'", long30 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-86399999L) + "'", long68 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test5143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5143");
        org.joda.time.Period period1 = org.joda.time.Period.years(58);
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay15.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay15.plusHours((-1));
        org.joda.time.Chronology chronology19 = timeOfDay18.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.withChronologyRetainFields(chronology23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) timeOfDay22, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(chronology19);
        org.joda.time.DateTime dateTime28 = dateTime9.toDateTime(chronology19);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType34 = periodType33.withWeeksRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, readableDuration32, periodType33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = timeOfDay40.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay40.plusHours((-1));
        org.joda.time.Chronology chronology44 = timeOfDay43.getChronology();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.TimeOfDay timeOfDay47 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay47.withChronologyRetainFields(chronology48);
        long long51 = chronology44.set((org.joda.time.ReadablePartial) timeOfDay47, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay(chronology44);
        org.joda.time.Chronology chronology53 = chronology44.withUTC();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 70, periodType33, chronology44);
        org.joda.time.DateTime dateTime55 = dateTime9.withChronology(chronology44);
        mutablePeriod2.setPeriod(995L, (long) 86399, chronology44);
        mutablePeriod2.add((long) 430);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-86399999L) + "'", long26 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-86399999L) + "'", long51 == (-86399999L));
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test5144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5144");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setWeekDate(99, (int) (byte) 0, 91);
        java.util.Calendar.Builder builder8 = builder0.setWeekDate(432, 958, (int) ' ');
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.Calendar.Builder builder16 = builder12.setDate((-694336399), 929, 802);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u53f0\u6e7e\u5730\u533a" + "'", str11, "\u53f0\u6e7e\u5730\u533a");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test5145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5145");
        org.joda.time.Period period1 = org.joda.time.Period.years(58);
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay15.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay15.plusHours((-1));
        org.joda.time.Chronology chronology19 = timeOfDay18.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.withChronologyRetainFields(chronology23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) timeOfDay22, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(chronology19);
        org.joda.time.DateTime dateTime28 = dateTime9.toDateTime(chronology19);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType34 = periodType33.withWeeksRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight31, readableDuration32, periodType33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.withChronologyRetainFields(chronology39);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = timeOfDay40.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay40.plusHours((-1));
        org.joda.time.Chronology chronology44 = timeOfDay43.getChronology();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.TimeOfDay timeOfDay47 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay47.withChronologyRetainFields(chronology48);
        long long51 = chronology44.set((org.joda.time.ReadablePartial) timeOfDay47, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay(chronology44);
        org.joda.time.Chronology chronology53 = chronology44.withUTC();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 70, periodType33, chronology44);
        org.joda.time.DateTime dateTime55 = dateTime9.withChronology(chronology44);
        mutablePeriod2.setPeriod(995L, (long) 86399, chronology44);
        int int57 = mutablePeriod2.getMinutes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-86399999L) + "'", long26 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-86399999L) + "'", long51 == (-86399999L));
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test5146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5146");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        int int5 = property2.getMaximumValue();
        org.joda.time.LocalTime localTime6 = property2.withMaximumValue();
        org.joda.time.LocalTime localTime8 = localTime6.minusHours((int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11, periodType12);
        org.joda.time.Period period16 = period14.withSeconds(0);
        org.joda.time.Period period18 = period16.plusMinutes((int) (byte) 1);
        org.joda.time.Period period20 = period16.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period23 = period16.withField(durationFieldType21, 7);
        org.joda.time.Period period25 = period16.minusDays(0);
        org.joda.time.Period period27 = period25.minusSeconds(99);
        org.joda.time.Period period29 = period27.withDays(93);
        org.joda.time.LocalTime localTime31 = localTime6.withPeriodAdded((org.joda.time.ReadablePeriod) period29, 6000000);
        org.joda.time.Days days32 = period29.toStandardDays();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399999 + "'", int5 == 86399999);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(days32);
    }

    @Test
    public void test5147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5147");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weeks();
        boolean boolean5 = localDate3.isSupported(durationFieldType4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8, periodType9);
        org.joda.time.Period period13 = period11.withSeconds(0);
        org.joda.time.LocalDate localDate14 = localDate3.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.Period period17 = period15.multipliedBy((int) (byte) 100);
        org.joda.time.Seconds seconds18 = period17.toStandardSeconds();
        org.joda.time.Period period20 = period17.plusSeconds(0);
        org.joda.time.Period period22 = period17.withMonths(6000000);
        org.joda.time.Period period24 = period22.withMinutes(6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType26 = period22.getFieldType((-785));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test5148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5148");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        int int6 = localTime5.size();
        org.joda.time.LocalTime localTime8 = localTime5.minusSeconds(100);
        org.joda.time.LocalTime localTime10 = localTime8.minusMillis(11);
        int int11 = localTime8.getMinuteOfHour();
        org.joda.time.LocalTime.Property property12 = localTime8.hourOfDay();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime14 = property12.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property12.withMaximumValue();
        java.util.Locale locale17 = java.util.Locale.CHINA;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = property12.setCopy("en_CA", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"en_CA\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 58 + "'", int11 == 58);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
    }

    @Test
    public void test5149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5149");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property9 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime11 = property9.setCopy(2);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        boolean boolean16 = periodType14.isSupported(durationFieldType15);
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 1, 0L, periodType14);
        java.lang.String str18 = period17.toString();
        org.joda.time.Period period20 = period17.minusMonths(9);
        org.joda.time.Period period22 = period20.plusMinutes((int) (byte) 0);
        org.joda.time.Period period24 = period20.withDays(8);
        org.joda.time.DateTime dateTime25 = dateTime11.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property27 = dateTime26.secondOfMinute();
        int int28 = dateTime26.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.001S" + "'", str18, "PT0.001S");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test5150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5150");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.LocalTime localTime6 = dateTime4.toLocalTime();
        org.joda.time.DateTime dateTime8 = dateTime4.withDayOfWeek(2);
        org.joda.time.DateTime dateTime10 = dateTime4.minusMonths((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime4.yearOfEra();
        org.joda.time.DateTime.Property property12 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime14 = property12.setCopy(16);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths(71);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test5151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5151");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.DateTimeField dateTimeField17 = chronology8.era();
        long long19 = dateTimeField17.roundHalfEven((long) 50);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62135596800000L) + "'", long19 == (-62135596800000L));
    }

    @Test
    public void test5152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5152");
        java.util.Date date1 = new java.util.Date(100L);
        long long2 = date1.getTime();
        int int3 = date1.getSeconds();
        int int4 = date1.getMinutes();
        int int5 = date1.getHours();
        java.util.Date date7 = new java.util.Date((long) 8);
        org.joda.time.YearMonth yearMonth8 = org.joda.time.YearMonth.fromDateFields(date7);
        int int9 = date7.getHours();
        long long10 = date7.getTime();
        int int11 = date7.getTimezoneOffset();
        boolean boolean12 = date1.after(date7);
        date7.setYear(36000001);
        date7.setTime((long) 15);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 8L + "'", long10 == 8L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test5153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5153");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay11.plusHours(2022);
        java.lang.String str18 = timeOfDay11.toString();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "T00:00:00.001" + "'", str18, "T00:00:00.001");
    }

    @Test
    public void test5154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5154");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear(2);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.DateMidnight dateMidnight9 = dateTime7.toDateMidnight();
        int int10 = dateTime7.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test5155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5155");
        java.util.Date date1 = new java.util.Date((long) 6);
        date1.setMinutes(1);
        java.lang.String str4 = date1.toLocaleString();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.year();
        org.joda.time.YearMonthDay yearMonthDay8 = property6.setCopy(0);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusDays((-292275054));
        int int11 = yearMonthDay8.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay8.plusDays((-785));
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod17.copy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfCentury();
        org.joda.time.Duration duration22 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod25.copy();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.yearOfCentury();
        org.joda.time.Duration duration30 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        boolean boolean31 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration32 = duration30.toDuration();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime36.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime37.toMutableDateTime();
        org.joda.time.DateTime dateTime40 = dateTime37.minusYears(100);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.PeriodType periodType42 = mutablePeriod41.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(2419200000L, periodType42);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay8.plus((org.joda.time.ReadablePeriod) mutablePeriod43);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:01:00 GMT 1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Jan 1, 1970 12:01:00 AM" + "'", str4, "Jan 1, 1970 12:01:00 AM");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
    }

    @Test
    public void test5156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5156");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(timeZone0);
        timeZone0.setRawOffset(4);
        int int4 = timeZone0.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth7 = new org.joda.time.YearMonth(dateTimeZone6);
        int int8 = yearMonth7.getYear();
        org.joda.time.YearMonth yearMonth10 = yearMonth7.plusYears(365);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = yearMonth7.toString("+00:00", locale12);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone0, locale12);
        int int17 = timeZone0.getOffset((-52L));
        boolean boolean18 = timeZone0.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514199287,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=4,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=39,MILLISECOND=287,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(yearMonth10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645514199287,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=4,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=39,MILLISECOND=291,ZONE_OFFSET=4,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test5157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5157");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = localTime1.toDateTimeToday();
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfCentury(0);
        org.joda.time.DateTime dateTime9 = dateTime6.toDateTimeISO();
        java.util.Date date10 = dateTime6.toDate();
        int int11 = date10.getMonth();
        java.lang.String str12 = date10.toString();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Tue Feb 22 00:00:00 GMT 2022" + "'", str12, "Tue Feb 22 00:00:00 GMT 2022");
    }

    @Test
    public void test5158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5158");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        int int7 = localDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withField(dateTimeFieldType8, 32);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMillis((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime11.minusWeeks(317);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test5159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5159");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        calendar0.setFirstDayOfWeek((int) (byte) 0);
        calendar0.set(4, 0);
        java.lang.String str7 = calendar0.toString();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=0,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=0,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]" + "'", str7, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=0,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test5160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5160");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval4 = localDate3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = interval4.toMutableInterval();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval8 = localDate7.toInterval();
        boolean boolean9 = interval4.isBefore((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Chronology chronology10 = interval8.getChronology();
        long long11 = interval8.toDurationMillis();
        mutablePeriod1.setPeriod((org.joda.time.ReadableInterval) interval8);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval15 = localDate14.toInterval();
        boolean boolean16 = interval8.isAfter((org.joda.time.ReadableInterval) interval15);
        org.joda.time.DateTime dateTime17 = interval15.getEnd();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test5161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5161");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusSeconds(0);
        int int10 = timeOfDay7.size();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay7.plusHours(9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.year();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime22 = property19.getMutableDateTime();
        int int23 = mutableDateTime22.getMillisOfSecond();
        java.lang.Object obj24 = mutableDateTime22.clone();
        int int25 = mutableDateTime22.getDayOfMonth();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime29 = localTime27.plusHours((int) (short) 10);
        org.joda.time.LocalTime localTime31 = localTime29.plusHours(32772);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property35 = localTime34.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        long long38 = dateTimeField36.roundHalfEven((long) 6);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = dateTimeField36.getType();
        org.joda.time.LocalTime.Property property40 = localTime32.property(dateTimeFieldType39);
        int int41 = localTime29.get(dateTimeFieldType39);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime22.property(dateTimeFieldType39);
        // The following exception was thrown during execution in test generation
        try {
            int int43 = timeOfDay7.get(dateTimeFieldType39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1976-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1976-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1976-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 6L + "'", long38 == 6L);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 36000001 + "'", int41 == 36000001);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test5162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5162");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = chronology14.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight1.withChronology(chronology14);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.year();
        boolean boolean31 = dateMidnight23.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        java.lang.Object obj32 = mutableDateTime29.clone();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime29.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime34 = property33.getMutableDateTime();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay37.withChronologyRetainFields(chronology38);
        org.joda.time.DateTime dateTime40 = timeOfDay39.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay39.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime43 = timeOfDay42.toDateTimeToday();
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.util.Calendar calendar45 = dateTime43.toCalendar(locale44);
        calendar45.set(7, (int) (short) 0, 2022);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        int int51 = mutableDateTime50.getDayOfMonth();
        org.joda.time.Instant instant52 = mutableDateTime50.toInstant();
        boolean boolean54 = mutableDateTime50.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int58 = dateTimeZone56.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime50.setZone(dateTimeZone56);
        java.util.TimeZone timeZone60 = dateTimeZone56.toTimeZone();
        calendar45.setTimeZone(timeZone60);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        mutableDateTime34.setZoneRetainFields(dateTimeZone62);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=7,MONTH=0,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=2022,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone62);
    }

    @Test
    public void test5163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5163");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.MutablePeriod mutablePeriod2 = mutablePeriod1.copy();
        int int3 = mutablePeriod1.getYears();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test5164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5164");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.ReadableInterval readableInterval4 = null;
        mutablePeriod3.add(readableInterval4);
        org.joda.time.format.PeriodFormatter periodFormatter6 = null;
        java.lang.String str7 = mutablePeriod3.toString(periodFormatter6);
        int int9 = mutablePeriod3.getValue(6);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod3.copy();
        mutablePeriod3.addMillis(32769);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = timeOfDay19.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.plusHours((-1));
        org.joda.time.Chronology chronology23 = timeOfDay22.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) timeOfDay26, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology23);
        mutablePeriod3.setPeriod((-61764076799990L), 1645488000000L, chronology23);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology23.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(763L, chronology23);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0.099S" + "'", str7, "PT0.099S");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-86399999L) + "'", long30 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test5165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5165");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        org.joda.time.Instant instant4 = instant2.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        int int6 = mutableDateTime5.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableInstant) dateTime10, periodType13);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod17.copy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfCentury();
        org.joda.time.Duration duration22 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant2, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Instant instant27 = instant2.withDurationAdded((long) 4, 12);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.yearOfCentury();
        org.joda.time.DateMidnight.Property property31 = dateMidnight29.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        int int33 = mutableDateTime32.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType40 = periodType39.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime32, (org.joda.time.ReadableInstant) dateTime37, periodType40);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod44.copy();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.yearOfCentury();
        org.joda.time.Duration duration49 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        mutablePeriod41.setPeriod((org.joda.time.ReadableDuration) duration49);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod54 = mutablePeriod53.copy();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.yearOfCentury();
        org.joda.time.Duration duration58 = mutablePeriod54.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod62 = mutablePeriod61.copy();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(chronology63);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.yearOfCentury();
        org.joda.time.Duration duration66 = mutablePeriod62.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight64);
        boolean boolean67 = duration58.isShorterThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Period period68 = duration66.toPeriod();
        boolean boolean69 = duration49.isEqual((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Period period70 = duration49.toPeriod();
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight29.withDurationAdded((org.joda.time.ReadableDuration) duration49, 0);
        org.joda.time.Instant instant73 = instant2.plus((org.joda.time.ReadableDuration) duration49);
        long long74 = duration49.getMillis();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 99L + "'", long74 == 99L);
    }

    @Test
    public void test5166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5166");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property6 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property6.getLocalTime();
        org.joda.time.LocalTime localTime9 = property6.addCopy(1);
        java.lang.String str10 = property6.getAsText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
    }

    @Test
    public void test5167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5167");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        int int5 = dateTime4.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(obj0, dateTimeZone7);
        int int11 = mutableDateTime10.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test5168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5168");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.LocalTime localTime5 = property2.addCopy(69);
        org.joda.time.LocalTime localTime7 = localTime5.withMillisOfDay(2968);
        org.joda.time.YearMonth yearMonth8 = org.joda.time.YearMonth.now();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.lang.String str12 = yearMonth8.toString("07:09:28.341", locale10);
        org.joda.time.Interval interval13 = yearMonth8.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime7, (org.joda.time.ReadablePartial) yearMonth8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645514199665,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=39,MILLISECOND=665,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "07:09:28.341" + "'", str12, "07:09:28.341");
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test5169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5169");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime dateTime7 = dateTime4.minusYears(100);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval10 = localDate9.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = interval10.toMutableInterval();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval14 = localDate13.toInterval();
        boolean boolean15 = interval10.isBefore((org.joda.time.ReadableInterval) interval14);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int17 = mutableDateTime16.getDayOfMonth();
        org.joda.time.Instant instant18 = mutableDateTime16.toInstant();
        org.joda.time.Instant instant20 = instant18.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        int int22 = mutableDateTime21.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType29 = periodType28.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime21, (org.joda.time.ReadableInstant) dateTime26, periodType29);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod33.copy();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.yearOfCentury();
        org.joda.time.Duration duration38 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant18, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Interval interval41 = interval14.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTime dateTime42 = dateTime4.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(62135596800006L);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.withWeekyear(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateMidnight.Property property48 = dateMidnight46.property(dateTimeFieldType47);
        boolean boolean49 = dateTime4.isSupported(dateTimeFieldType47);
        java.util.Date date50 = dateTime4.toDate();
        int int51 = date50.getMonth();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(date50);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test5170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5170");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime dateTime7 = dateTime4.minusYears(100);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval10 = localDate9.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = interval10.toMutableInterval();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval14 = localDate13.toInterval();
        boolean boolean15 = interval10.isBefore((org.joda.time.ReadableInterval) interval14);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int17 = mutableDateTime16.getDayOfMonth();
        org.joda.time.Instant instant18 = mutableDateTime16.toInstant();
        org.joda.time.Instant instant20 = instant18.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        int int22 = mutableDateTime21.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType29 = periodType28.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime21, (org.joda.time.ReadableInstant) dateTime26, periodType29);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod33.copy();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.yearOfCentury();
        org.joda.time.Duration duration38 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant18, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Interval interval41 = interval14.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTime dateTime43 = dateTime4.withDurationAdded((org.joda.time.ReadableDuration) duration38, 2022);
        org.joda.time.DateTime dateTime45 = dateTime4.withMillis((long) 'u');
        org.joda.time.DateTime dateTime47 = dateTime45.withSecondOfMinute(6);
        org.joda.time.DateTime.Property property48 = dateTime47.minuteOfHour();
        int int49 = property48.getLeapAmount();
        org.joda.time.DateTime dateTime51 = property48.addWrapFieldToCopy(37);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMinutes(1863);
        org.joda.time.DateTime.Property property54 = dateTime53.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test5171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5171");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.MutableDateTime mutableDateTime9 = property6.set(5);
        org.joda.time.MutableDateTime mutableDateTime10 = property6.roundHalfFloor();
        org.joda.time.DurationField durationField11 = property6.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test5172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5172");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime dateTime7 = dateTime4.minusYears(100);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval10 = localDate9.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = interval10.toMutableInterval();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval14 = localDate13.toInterval();
        boolean boolean15 = interval10.isBefore((org.joda.time.ReadableInterval) interval14);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int17 = mutableDateTime16.getDayOfMonth();
        org.joda.time.Instant instant18 = mutableDateTime16.toInstant();
        org.joda.time.Instant instant20 = instant18.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        int int22 = mutableDateTime21.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType29 = periodType28.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime21, (org.joda.time.ReadableInstant) dateTime26, periodType29);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod33.copy();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.yearOfCentury();
        org.joda.time.Duration duration38 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant18, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Interval interval41 = interval14.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTime dateTime42 = dateTime4.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Chronology chronology43 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test5173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5173");
        java.util.Date date1 = new java.util.Date((long) 6);
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.fromDateFields(date1);
        date1.setMinutes(20);
        int int5 = date1.getDay();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:20:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test5174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5174");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        int int6 = localTime5.size();
        org.joda.time.LocalTime localTime8 = localTime5.minusSeconds(100);
        org.joda.time.LocalTime localTime10 = localTime8.minusMillis(11);
        int int11 = localTime8.getMinuteOfHour();
        org.joda.time.LocalTime.Property property12 = localTime8.hourOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType17 = periodType16.withWeeksRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, readableDuration15, periodType16);
        org.joda.time.Period period20 = period18.withSeconds(0);
        org.joda.time.Period period22 = period20.plusMinutes((int) (byte) 1);
        org.joda.time.Period period24 = period20.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period27 = period20.withField(durationFieldType25, 7);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.standard();
        java.lang.String str31 = periodType30.getName();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone34);
        org.joda.time.DateTime dateTime36 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime36.toMutableDateTime();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay40.withChronologyRetainFields(chronology41);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = timeOfDay42.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay42.plusHours((-1));
        org.joda.time.Chronology chronology46 = timeOfDay45.getChronology();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.TimeOfDay timeOfDay49 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay49.withChronologyRetainFields(chronology50);
        long long53 = chronology46.set((org.joda.time.ReadablePartial) timeOfDay49, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay(chronology46);
        org.joda.time.DateTime dateTime55 = dateTime36.toDateTime(chronology46);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((long) 'x', periodType30, chronology46);
        org.joda.time.DateTimeField dateTimeField57 = chronology46.hourOfHalfday();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(867L, chronology46);
        org.joda.time.DurationField durationField59 = durationFieldType25.getField(chronology46);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone62);
        org.joda.time.DateTime dateTime64 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime64.toMutableDateTime();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.TimeOfDay timeOfDay68 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = timeOfDay70.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay73 = timeOfDay70.plusHours((-1));
        org.joda.time.Chronology chronology74 = timeOfDay73.getChronology();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.TimeOfDay timeOfDay77 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.TimeOfDay timeOfDay79 = timeOfDay77.withChronologyRetainFields(chronology78);
        long long81 = chronology74.set((org.joda.time.ReadablePartial) timeOfDay77, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay82 = new org.joda.time.TimeOfDay(chronology74);
        org.joda.time.DateTime dateTime83 = dateTime64.toDateTime(chronology74);
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone86);
        org.joda.time.Chronology chronology88 = chronology74.withZone(dateTimeZone86);
        org.joda.time.DurationField durationField89 = chronology74.minutes();
        int int90 = durationField59.compareTo(durationField89);
        org.joda.time.DurationFieldType durationFieldType91 = durationField89.getType();
        org.joda.time.DurationFieldType durationFieldType92 = durationField89.getType();
        boolean boolean93 = localTime8.isSupported(durationFieldType92);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 58 + "'", int11 == 58);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Standard" + "'", str31, "Standard");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-86399999L) + "'", long53 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(timeOfDay79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-86399999L) + "'", long81 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test5175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5175");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) mutableDateTime1);
        mutableDateTime1.addWeekyears(22);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime10 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear(2);
        org.joda.time.Instant instant13 = dateTime12.toInstant();
        org.joda.time.Instant instant15 = instant13.withMillis((long) 5);
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTimeISO();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.era();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        int int21 = mutableDateTime20.getDayOfMonth();
        boolean boolean22 = dateMidnight18.isEqual((org.joda.time.ReadableInstant) mutableDateTime20);
        int int23 = mutableDateTime20.getWeekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod26.copy();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.yearOfCentury();
        org.joda.time.Duration duration31 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod34.copy();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.yearOfCentury();
        org.joda.time.Duration duration39 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        boolean boolean40 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime20, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod44.copy();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.yearOfCentury();
        org.joda.time.Duration duration49 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod53 = mutablePeriod52.copy();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.yearOfCentury();
        org.joda.time.Duration duration57 = mutablePeriod53.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight55);
        boolean boolean58 = duration49.isEqual((org.joda.time.ReadableDuration) duration57);
        int int59 = duration39.compareTo((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Instant instant60 = instant15.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime();
        int int64 = mutableDateTime63.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone67);
        org.joda.time.DateTime dateTime69 = dateTime68.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType71 = periodType70.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime63, (org.joda.time.ReadableInstant) dateTime68, periodType71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period(208L, (long) 100, periodType71, chronology73);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableDuration) duration39, periodType71);
        org.joda.time.PeriodType periodType76 = periodType71.withWeeksRemoved();
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 22 + "'", int64 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType76);
    }

    @Test
    public void test5176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5176");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.minusYears((int) ' ');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType25 = null;
        boolean boolean26 = periodType24.isSupported(durationFieldType25);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 1, 0L, periodType24);
        int[] intArray30 = chronology14.get((org.joda.time.ReadablePeriod) period27, (long) 2022, (long) ' ');
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((java.lang.Object) dateTime3, chronology14);
        org.joda.time.DateTimeField dateTimeField32 = chronology14.weekyear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType37 = periodType36.withWeeksRemoved();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35, periodType36);
        org.joda.time.Period period40 = period38.withSeconds(0);
        org.joda.time.Period period42 = period40.plusMinutes((int) (byte) 1);
        org.joda.time.Period period44 = period40.plusSeconds(8);
        int int45 = period44.getMonths();
        int[] intArray47 = chronology14.get((org.joda.time.ReadablePeriod) period44, (long) (short) 10);
        org.joda.time.DateTimeField dateTimeField48 = chronology14.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(6070, 516, 117, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 6070 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test5177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5177");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusYears(54);
        java.util.Date date10 = localDateTime6.toDate();
        java.lang.Object obj11 = null;
        boolean boolean12 = date10.equals(obj11);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test5178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5178");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime6 = property4.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime7 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime13 = property10.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        org.joda.time.Period period15 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime7, (org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime localTime17 = localTime7.plusHours((int) '#');
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("fr");
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone19);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromCalendarFields(calendar20);
        org.joda.time.LocalTime localTime22 = localTime17.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType26 = null;
        boolean boolean27 = periodType25.isSupported(durationFieldType26);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 1, 0L, periodType25);
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.LocalTime localTime31 = localTime17.withPeriodAdded((org.joda.time.ReadablePeriod) period28, (int) 'a');
        org.joda.time.PeriodType periodType32 = period28.getPeriodType();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = timeOfDay37.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay37.plusHours((-1));
        org.joda.time.Chronology chronology41 = timeOfDay40.getChronology();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.withChronologyRetainFields(chronology45);
        long long48 = chronology41.set((org.joda.time.ReadablePartial) timeOfDay44, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(chronology41);
        org.joda.time.Chronology chronology50 = chronology41.withUTC();
        org.joda.time.DateMidnight dateMidnight51 = org.joda.time.DateMidnight.now(chronology41);
        long long55 = chronology41.add((long) 802, 1966140000L, 58);
        org.joda.time.Period period56 = new org.joda.time.Period(481L, (-61764076799990L), periodType32, chronology41);
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now(chronology41);
        org.joda.time.DateTimeZone dateTimeZone58 = chronology41.getZone();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645514200064,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=40,MILLISECOND=64,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-86399999L) + "'", long48 == (-86399999L));
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 114036120802L + "'", long55 == 114036120802L);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
    }

    @Test
    public void test5179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5179");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime5, periodType8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime0.minuteOfHour();
        int int12 = mutableDateTime0.getDayOfMonth();
        mutableDateTime0.add(0L);
        int int15 = mutableDateTime0.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 26200108 + "'", int15 == 26200108);
    }

    @Test
    public void test5180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5180");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = timeOfDay7.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.plusHours((-1));
        org.joda.time.Chronology chronology11 = timeOfDay10.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        long long18 = chronology11.set((org.joda.time.ReadablePartial) timeOfDay14, (long) (byte) -1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType22 = null;
        boolean boolean23 = periodType21.isSupported(durationFieldType22);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 1, 0L, periodType21);
        int[] intArray27 = chronology11.get((org.joda.time.ReadablePeriod) period24, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(obj2, chronology11);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, 0, chronology11);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.hourOfDay();
        java.util.Locale locale32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = property30.setCopy("22", locale32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int37 = dateTimeZone35.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = timeOfDay33.toDateTimeToday(dateTimeZone35);
        int int41 = dateTimeZone35.getOffset(53L);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-86399999L) + "'", long18 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test5181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5181");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfCentury();
        int int8 = property7.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy(1070);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 99 + "'", int8 == 99);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test5182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5182");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronology();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.Chronology chronology8 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 24);
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter10.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = dateTimeFormatter10.parseLocalDateTime("2022-02-22T07:10:45.798Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(dateTimePrinter11);
    }

    @Test
    public void test5183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5183");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfYear((int) '#');
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfDay();
        org.joda.time.Chronology chronology11 = localDateTime8.getChronology();
        org.joda.time.Period period16 = new org.joda.time.Period((int) (short) 10, 12, 17, (int) (byte) 100);
        org.joda.time.Period period18 = period16.plusHours(5);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime8.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime8.minusHours(958);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withWeekOfWeekyear(2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(70005);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70005 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test5184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5184");
        org.joda.time.YearMonth yearMonth0 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.withYear(7);
        org.joda.time.YearMonth.Property property3 = yearMonth2.year();
        org.joda.time.YearMonth yearMonth5 = yearMonth2.withYear(0);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int9 = dateTimeZone7.getOffset(0L);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone7);
        long long13 = dateTimeZone7.convertLocalToUTC((long) 1969, false);
        org.joda.time.Interval interval14 = yearMonth5.toInterval(dateTimeZone7);
        boolean boolean16 = interval14.contains((-50399999L));
        org.junit.Assert.assertNotNull(yearMonth0);
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1969L + "'", long13 == 1969L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test5185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5185");
        java.util.Date date6 = new java.util.Date(14, 2922789, 6, 51, 1969, 23);
        int int7 = date6.getMinutes();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromDateFields(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Oct 09 11:49:23 GMT 245479");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 49 + "'", int7 == 49);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test5186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5186");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.minuteOfHour();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfDay();
        org.joda.time.LocalTime localTime22 = property20.addCopy(26011645);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '4');
        int int25 = period24.getYears();
        org.joda.time.Period period27 = period24.withYears((int) (byte) 100);
        org.joda.time.LocalTime localTime28 = localTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period30 = period27.withWeeks(1976);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test5187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5187");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        int int2 = charSet1.size();
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("UTC");
        java.lang.String str5 = languageRange4.getRange();
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("UTC");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange4, languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale18 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale18, locale19, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale.FilteringMode filteringMode26 = null;
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList24, filteringMode26);
        boolean boolean28 = charSet12.removeAll((java.util.Collection<java.util.Locale>) localeList27);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList27);
        boolean boolean30 = charSet1.containsAll((java.util.Collection<java.util.Locale>) localeList29);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfDay();
        org.joda.time.LocalTime localTime35 = property33.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime36 = property33.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property39 = localTime38.millisOfDay();
        org.joda.time.LocalTime localTime41 = property39.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime42 = property39.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property43 = localTime42.minuteOfHour();
        org.joda.time.Period period44 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime36, (org.joda.time.ReadablePartial) localTime42);
        org.joda.time.LocalTime localTime46 = localTime36.plusHours((int) '#');
        java.util.TimeZone timeZone48 = java.util.TimeZone.getTimeZone("fr");
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone48);
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.fromCalendarFields(calendar49);
        org.joda.time.LocalTime localTime51 = localTime46.withFields((org.joda.time.ReadablePartial) localTime50);
        boolean boolean52 = charSet1.remove((java.lang.Object) localTime51);
        java.util.Locale.LanguageRange languageRange54 = new java.util.Locale.LanguageRange("UTC");
        java.lang.String str55 = languageRange54.getRange();
        java.util.Locale.LanguageRange languageRange57 = new java.util.Locale.LanguageRange("UTC");
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] { languageRange54, languageRange57 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet62 = locale61.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale locale68 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.util.Locale locale72 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray73 = new java.util.Locale[] { locale68, locale69, locale72 };
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.Locale.FilteringMode filteringMode76 = null;
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList74, filteringMode76);
        boolean boolean78 = charSet62.removeAll((java.util.Collection<java.util.Locale>) localeList77);
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList77);
        boolean boolean80 = charSet1.removeAll((java.util.Collection<java.util.Locale>) localeList77);
        charSet1.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "utc" + "'", str5, "utc");
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645514200437,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=40,MILLISECOND=437,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "utc" + "'", str55, "utc");
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals(locale68.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale72.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test5188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5188");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = localTime1.toDateTimeToday();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime.Property property8 = dateTime6.year();
        int int9 = dateTime6.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test5189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5189");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        int int11 = mutableDateTime10.getDayOfMonth();
        org.joda.time.Instant instant12 = mutableDateTime10.toInstant();
        boolean boolean14 = mutableDateTime10.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int18 = dateTimeZone16.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime10.setZone(dateTimeZone16);
        long long21 = dateTimeZone16.previousTransition((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime0.toMutableDateTime(dateTimeZone16);
        mutableDateTime22.setMillisOfSecond(11);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateTime dateTime31 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime31.toMutableDateTime();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = timeOfDay37.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay37.plusHours((-1));
        org.joda.time.Chronology chronology41 = timeOfDay40.getChronology();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.withChronologyRetainFields(chronology45);
        long long48 = chronology41.set((org.joda.time.ReadablePartial) timeOfDay44, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(chronology41);
        org.joda.time.DateTime dateTime50 = dateTime31.toDateTime(chronology41);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) 100, chronology41);
        org.joda.time.DateTimeField dateTimeField52 = chronology41.secondOfDay();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(chronology56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType60 = periodType59.withWeeksRemoved();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight57, readableDuration58, periodType59);
        java.lang.Object obj62 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.TimeOfDay timeOfDay65 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay65.withChronologyRetainFields(chronology66);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray68 = timeOfDay67.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay67.plusHours((-1));
        org.joda.time.Chronology chronology71 = timeOfDay70.getChronology();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.TimeOfDay timeOfDay74 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.TimeOfDay timeOfDay76 = timeOfDay74.withChronologyRetainFields(chronology75);
        long long78 = chronology71.set((org.joda.time.ReadablePartial) timeOfDay74, (long) (byte) -1);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType82 = null;
        boolean boolean83 = periodType81.isSupported(durationFieldType82);
        org.joda.time.Period period84 = new org.joda.time.Period((long) (byte) 1, 0L, periodType81);
        int[] intArray87 = chronology71.get((org.joda.time.ReadablePeriod) period84, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime88 = new org.joda.time.LocalTime(obj62, chronology71);
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((long) 17, (long) (byte) -1, periodType59, chronology71);
        org.joda.time.DateTimeField dateTimeField90 = chronology71.monthOfYear();
        org.joda.time.DateTimeField dateTimeField91 = chronology71.clockhourOfDay();
        org.joda.time.LocalTime localTime92 = org.joda.time.LocalTime.now(chronology71);
        org.joda.time.DateTime dateTime93 = dateTime53.toDateTime(chronology71);
        boolean boolean94 = mutableDateTime22.isBefore((org.joda.time.ReadableInstant) dateTime93);
        org.joda.time.MutableDateTime.Property property95 = mutableDateTime22.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-86399999L) + "'", long48 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray68);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-86399999L) + "'", long78 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(localTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(property95);
    }

    @Test
    public void test5190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5190");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronology();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        java.lang.Integer int8 = dateTimeFormatter5.getPivotYear();
        boolean boolean9 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter5.withPivotYear(365);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = locale12.getISO3Language();
        java.lang.String str14 = locale12.toLanguageTag();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter11.withLocale(locale12);
        org.joda.time.format.DateTimeParser dateTimeParser16 = dateTimeFormatter15.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zho" + "'", str13, "zho");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-CN" + "'", str14, "zh-CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(dateTimeParser16);
    }

    @Test
    public void test5191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5191");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withYear((int) 'u');
        org.joda.time.DateTime.Property property3 = dateTime0.era();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekyear(13);
        org.joda.time.YearMonth yearMonth7 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth9 = yearMonth7.withYear(7);
        org.joda.time.YearMonth.Property property10 = yearMonth9.year();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        java.lang.String str12 = property10.getAsShortText();
        int int13 = property10.get();
        org.joda.time.DateTimeField dateTimeField14 = property10.getField();
        long long16 = dateTimeField14.roundFloor((long) 19);
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        int int18 = dateTimeField14.getMaximumShortTextLength(locale17);
        boolean boolean20 = dateTimeField14.isLeap((-50399999L));
        int int21 = dateTime4.get(dateTimeField14);
        java.util.GregorianCalendar gregorianCalendar22 = dateTime4.toGregorianCalendar();
        java.lang.Object obj23 = gregorianCalendar22.clone();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "7" + "'", str12, "7");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "java.util.GregorianCalendar[time=-62135596800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "java.util.GregorianCalendar[time=-62135596800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "java.util.GregorianCalendar[time=-62135596800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test5192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5192");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 'u');
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        int int5 = dateMidnight4.getWeekOfWeekyear();
        org.joda.time.Period period7 = new org.joda.time.Period((long) '4');
        int int8 = period7.getYears();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime16 = dateTime14.toLocalDateTime();
        java.lang.Object obj17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(obj17, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.minus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withWeekyear((-1));
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime16, (org.joda.time.ReadablePartial) localDateTime27);
        int int29 = localDateTime27.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight4.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight4.plusDays((int) 'x');
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
    }

    @Test
    public void test5193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5193");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder1.setRegion("Property[yearOfEra]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Property[yearOfEra] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test5194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5194");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str2 = yearMonthDay1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) -1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears(1);
        org.joda.time.LocalDate.Property property8 = localDate5.year();
        org.joda.time.LocalDate.Property property9 = localDate5.dayOfYear();
        int int10 = localDate5.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int12 = localDate5.get(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay1.withField(dateTimeFieldType11, 2);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17, periodType18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period24 = period22.plusHours((int) (short) 10);
        org.joda.time.Period period25 = period20.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay1.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay1.dayOfMonth();
        org.joda.time.DurationField durationField28 = property27.getDurationField();
        long long31 = durationField28.getMillis(37, 2678400000L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3196800000L + "'", long31 == 3196800000L);
    }

    @Test
    public void test5195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5195");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        int int6 = localDate2.getYearOfEra();
        org.joda.time.LocalDate localDate8 = localDate2.minusWeeks(32);
        org.joda.time.LocalDate localDate10 = localDate8.plusYears(999);
        org.joda.time.LocalDate localDate12 = localDate10.withYear(32772);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.LocalDate.Property property14 = localDate12.dayOfYear();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test5196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5196");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime5, periodType8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime0.minuteOfHour();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime16 = property14.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime17 = property14.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        int int21 = mutableDateTime20.getDayOfMonth();
        org.joda.time.Instant instant22 = mutableDateTime20.toInstant();
        int int23 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) instant22);
        org.joda.time.DateTime dateTime24 = localTime17.toDateTimeToday(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.year();
        org.joda.time.MutableDateTime mutableDateTime33 = property31.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime34 = property31.getMutableDateTime();
        int int35 = mutableDateTime34.getMillisOfSecond();
        int int36 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.millisOfSecond();
        boolean boolean38 = mutableDateTime0.isEqual((org.joda.time.ReadableInstant) mutableDateTime34);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test5197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5197");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusHours((int) (byte) 1);
        org.joda.time.LocalTime localTime8 = timeOfDay7.toLocalTime();
        org.joda.time.TimeOfDay.Property property9 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property9.getTimeOfDay();
        int int11 = property9.get();
        org.joda.time.TimeOfDay timeOfDay13 = property9.addToCopy(53);
        int int14 = property9.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField15 = property9.getField();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test5198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5198");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate7 = localDate2.minusDays(7);
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks(429);
        org.joda.time.LocalDate localDate11 = localDate7.plusWeeks(8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime16.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.year();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.getMutableDateTime();
        int int21 = property18.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime22 = property18.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime23 = property18.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forID("UTC");
        mutableDateTime23.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate7.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.LocalDate.Property property28 = localDate7.centuryOfEra();
        org.joda.time.LocalDate localDate30 = property28.addWrapFieldToCopy((int) 'u');
        org.joda.time.LocalDate localDate31 = property28.roundHalfCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        int int33 = mutableDateTime32.getDayOfMonth();
        org.joda.time.Instant instant34 = mutableDateTime32.toInstant();
        boolean boolean36 = mutableDateTime32.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int40 = dateTimeZone38.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime32.setZone(dateTimeZone38);
        long long43 = dateTimeZone38.previousTransition((long) (short) -1);
        java.lang.String str44 = dateTimeZone38.toString();
        org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.now(dateTimeZone38);
        int int47 = dateTimeZone38.getStandardOffset(492L);
        org.joda.time.DateMidnight dateMidnight48 = localDate31.toDateMidnight(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateMidnight48);
    }

    @Test
    public void test5199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5199");
        java.util.Date date6 = new java.util.Date(17, (int) (short) 100, 58, 2968, 1969, 3);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromDateFields(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Oct 30 00:49:03 GMT 1925");
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test5200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5200");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        mutableDateTime0.setDate((long) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod15 = mutablePeriod14.copy();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.yearOfCentury();
        org.joda.time.Duration duration19 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod22.copy();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.yearOfCentury();
        org.joda.time.Duration duration27 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        boolean boolean28 = duration19.isEqual((org.joda.time.ReadableDuration) duration27);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration27, 2968);
        mutableDateTime0.setSecondOfDay(44);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone35 = dateTime34.getZone();
        long long37 = dateTimeZone35.convertUTCToLocal((long) (-1));
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(dateTimeZone35);
        long long40 = dateTimeZone35.convertUTCToLocal(82771200000L);
        mutableDateTime0.setZoneRetainFields(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 82771200000L + "'", long40 == 82771200000L);
    }

    @Test
    public void test5201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5201");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval6 = localDate5.toInterval();
        boolean boolean7 = interval2.isBefore((org.joda.time.ReadableInterval) interval6);
        org.joda.time.DateTime dateTime8 = interval6.getEnd();
        boolean boolean10 = interval6.contains((long) 35);
        org.joda.time.Interval interval12 = interval6.withEndMillis(535L);
        long long13 = interval12.toDurationMillis();
        org.joda.time.Chronology chronology14 = interval12.getChronology();
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 535L + "'", long13 == 535L);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test5202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5202");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear(2);
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime7.minusSeconds((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight14 = property13.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime20 = dateTime18.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear(2);
        int int23 = property13.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime20.withMillisOfSecond(999);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks(85);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime28, periodType29);
        org.joda.time.DateTime dateTime31 = dateTime28.withLaterOffsetAtOverlap();
        long long32 = dateTime31.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-51407999001L) + "'", long32 == (-51407999001L));
    }

    @Test
    public void test5203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5203");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((int) '4');
        org.joda.time.DateTime dateTime11 = localDateTime8.toDateTime();
        org.joda.time.ReadablePartial readablePartial12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = localDateTime8.compareTo(readablePartial12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test5204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5204");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.Chronology chronology17 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.minuteOfHour();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfDay();
        org.joda.time.LocalTime localTime22 = property20.addCopy(26011645);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '4');
        int int25 = period24.getYears();
        org.joda.time.Period period27 = period24.withYears((int) (byte) 100);
        org.joda.time.LocalTime localTime28 = localTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType32 = periodType31.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod36 = mutablePeriod35.copy();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.TimeOfDay timeOfDay41 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.withChronologyRetainFields(chronology42);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = timeOfDay43.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay43.plusHours((-1));
        org.joda.time.Chronology chronology47 = timeOfDay46.getChronology();
        mutablePeriod35.setPeriod((long) (byte) 1, 208L, chronology47);
        org.joda.time.Period period49 = new org.joda.time.Period(86400000L, 1L, periodType32, chronology47);
        int int50 = periodType32.size();
        org.joda.time.PeriodType periodType51 = periodType32.withSecondsRemoved();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableDuration52, (org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        int int56 = mutableDateTime55.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        mutableDateTime55.add(durationFieldType57, (int) (short) 100);
        mutablePeriod54.add(durationFieldType57, (int) (byte) 0);
        int int62 = periodType32.indexOf(durationFieldType57);
        org.joda.time.LocalTime localTime64 = localTime22.withFieldAdded(durationFieldType57, (int) 'x');
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(localTime64);
    }

    @Test
    public void test5205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5205");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        int int4 = localDate2.getYear();
        org.joda.time.LocalDate.Property property5 = localDate2.weekyear();
        org.joda.time.LocalDate.Property property6 = localDate2.dayOfYear();
        org.joda.time.LocalDate.Property property7 = localDate2.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test5206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5206");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        boolean boolean7 = interval2.contains((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.Interval interval9 = interval2.withStartMillis((long) 3);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval12 = localDate11.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        boolean boolean17 = interval12.isBefore((org.joda.time.ReadableInterval) interval16);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        int int19 = mutableDateTime18.getDayOfMonth();
        org.joda.time.Instant instant20 = mutableDateTime18.toInstant();
        org.joda.time.Instant instant22 = instant20.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        int int24 = mutableDateTime23.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableInstant) dateTime28, periodType31);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod36 = mutablePeriod35.copy();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.yearOfCentury();
        org.joda.time.Duration duration40 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight38);
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant20, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Interval interval43 = interval16.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = interval43.isAfter(readableInterval44);
        org.joda.time.DateTime dateTime46 = interval43.getStart();
        org.joda.time.Period period47 = interval43.toPeriod();
        org.joda.time.Interval interval48 = interval9.gap((org.joda.time.ReadableInterval) interval43);
        org.joda.time.Period period49 = interval9.toPeriod();
        org.joda.time.Period period51 = period49.plusYears(7);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableDuration52, (org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        int int56 = mutableDateTime55.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        mutableDateTime55.add(durationFieldType57, (int) (short) 100);
        mutablePeriod54.add(durationFieldType57, (int) (byte) 0);
        org.joda.time.Period period63 = period49.withFieldAdded(durationFieldType57, 7);
        org.joda.time.Period period65 = period63.minusMillis(1095);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNull(interval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test5207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5207");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = localTime1.toDateTimeToday();
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfCentury(0);
        org.joda.time.DateTime dateTime10 = dateTime6.withMillis(117L);
        org.joda.time.DateTime.Property property11 = dateTime6.hourOfDay();
        int int12 = dateTime6.getDayOfMonth();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
    }

    @Test
    public void test5208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5208");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime9 = property6.getMutableDateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.minusYears((int) ' ');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = timeOfDay17.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours((-1));
        org.joda.time.Chronology chronology21 = timeOfDay20.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.withChronologyRetainFields(chronology25);
        long long28 = chronology21.set((org.joda.time.ReadablePartial) timeOfDay24, (long) (byte) -1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType32 = null;
        boolean boolean33 = periodType31.isSupported(durationFieldType32);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 1, 0L, periodType31);
        int[] intArray37 = chronology21.get((org.joda.time.ReadablePeriod) period34, (long) 2022, (long) ' ');
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, chronology21);
        mutableDateTime9.setChronology(chronology21);
        mutableDateTime9.addMinutes(100);
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period46 = period44.withPeriodType(periodType45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.minutes();
        boolean boolean48 = periodType45.isSupported(durationFieldType47);
        mutableDateTime9.add(durationFieldType47, (int) (byte) -1);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod54 = mutablePeriod53.copy();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(chronology55);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.yearOfCentury();
        org.joda.time.Duration duration58 = mutablePeriod54.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight56);
        mutablePeriod54.setSeconds((int) (short) 10);
        int int61 = mutablePeriod54.getMinutes();
        mutableDateTime9.add((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod65.copy();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(chronology67);
        org.joda.time.DateMidnight.Property property69 = dateMidnight68.yearOfCentury();
        org.joda.time.Duration duration70 = mutablePeriod66.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod74 = mutablePeriod73.copy();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(chronology75);
        org.joda.time.DateMidnight.Property property77 = dateMidnight76.yearOfCentury();
        org.joda.time.Duration duration78 = mutablePeriod74.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight76);
        boolean boolean79 = duration70.isShorterThan((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Period period80 = duration78.toPeriod();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight(chronology81);
        org.joda.time.DateMidnight.Property property83 = dateMidnight82.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight82.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight85.plusWeeks((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration78, (org.joda.time.ReadableInstant) dateMidnight85);
        mutableDateTime9.setMillis((org.joda.time.ReadableInstant) dateMidnight85);
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight85.withPeriodAdded(readablePeriod90, 25972506);
        boolean boolean93 = dateMidnight92.isEqualNow();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-86399999L) + "'", long28 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(mutablePeriod74);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test5209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5209");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        java.lang.String str4 = localTime1.toString("22");
        org.joda.time.LocalTime localTime6 = localTime1.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localTime1.isSupported(dateTimeFieldType7);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) (short) 0);
        org.joda.time.LocalTime localTime12 = localTime1.minus((org.joda.time.ReadablePeriod) period11);
        int int13 = period11.size();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "22" + "'", str4, "22");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test5210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5210");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        long long11 = dateTimeZone7.convertLocalToUTC((-1L), false, 10L);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(dateTimeZone7);
        long long15 = dateTimeZone7.convertLocalToUTC((long) ' ', false);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1863, dateTimeZone7);
        long long18 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) 465);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 465L + "'", long18 == 465L);
    }

    @Test
    public void test5211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5211");
        java.util.Date date6 = new java.util.Date(17, (int) (short) 100, 58, 2968, 1969, 3);
        java.util.Date date8 = new java.util.Date((long) 6);
        int int9 = date8.getSeconds();
        boolean boolean10 = date6.before(date8);
        int int11 = date6.getYear();
        java.lang.Object obj12 = date6.clone();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Oct 30 00:49:03 GMT 1925");
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 25 + "'", int11 == 25);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "Fri Oct 30 00:49:03 GMT 1925");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Fri Oct 30 00:49:03 GMT 1925");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Fri Oct 30 00:49:03 GMT 1925");
    }

    @Test
    public void test5212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5212");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        long long5 = dateTimeZone1.convertLocalToUTC((-1L), false, 10L);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod9.copy();
        org.joda.time.format.PeriodFormatter periodFormatter11 = null;
        java.lang.String str12 = mutablePeriod10.toString(periodFormatter11);
        org.joda.time.LocalTime localTime14 = localTime6.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod10, 93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = localTime6.withMinuteOfHour((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.099S" + "'", str12, "PT0.099S");
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test5213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5213");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        int int7 = localDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withField(dateTimeFieldType8, 32);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMonths(32);
        int int13 = localDateTime10.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime.Property property15 = localDateTime10.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test5214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5214");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = chronology14.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight1.withChronology(chronology14);
        org.joda.time.DateMidnight.Property property24 = dateMidnight1.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = timeOfDay29.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay29.plusHours((-1));
        org.joda.time.Chronology chronology33 = timeOfDay32.getChronology();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.withChronologyRetainFields(chronology37);
        long long40 = chronology33.set((org.joda.time.ReadablePartial) timeOfDay36, (long) (byte) -1);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType44 = null;
        boolean boolean45 = periodType43.isSupported(durationFieldType44);
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 1, 0L, periodType43);
        int[] intArray49 = chronology33.get((org.joda.time.ReadablePeriod) period46, (long) 2022, (long) ' ');
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight1.plus((org.joda.time.ReadablePeriod) period46);
        java.lang.String str51 = dateMidnight1.toString();
        org.joda.time.DateMidnight.Property property52 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight.Property property53 = dateMidnight1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone57);
        org.joda.time.DateTime dateTime59 = dateTime58.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime60 = dateTime58.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfYear(2);
        org.joda.time.Instant instant63 = dateTime62.toInstant();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((java.lang.Object) instant63);
        org.joda.time.DateTime.Property property65 = dateTime64.dayOfWeek();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.TimeOfDay timeOfDay68 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTime dateTime71 = timeOfDay70.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay73 = timeOfDay70.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime74 = timeOfDay73.toDateTimeToday();
        java.util.Locale locale75 = java.util.Locale.ITALY;
        java.util.Calendar calendar76 = dateTime74.toCalendar(locale75);
        java.lang.String str77 = property65.getAsShortText(locale75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight78 = property53.setCopy("2022-02-22T07:10:34.447Z", locale75);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:10:34.447Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-86399999L) + "'", long40 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str51, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it_IT");
        org.junit.Assert.assertNotNull(calendar76);
// flaky:         org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=1645570800001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ven" + "'", str77, "ven");
    }

    @Test
    public void test5215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5215");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = localDateTime10.toString(dateTimeFormatter11);
        int int13 = localDateTime10.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.weekOfWeekyear();
        int int15 = property14.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = property14.withMaximumValue();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusDays(53);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-0001-02-23T07:16:41.332" + "'", str12, "-0001-02-23T07:16:41.332");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test5216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5216");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8, periodType9);
        org.joda.time.Period period13 = period11.withSeconds(0);
        org.joda.time.Period period15 = period13.plusMinutes((int) (byte) 1);
        org.joda.time.Period period17 = period13.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period20 = period13.withField(durationFieldType18, 7);
        org.joda.time.LocalTime localTime22 = localTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period13, (int) (short) 1);
        org.joda.time.Period period24 = period13.withMillis((int) (short) -1);
        java.lang.String str25 = period24.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28, periodType29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = timeOfDay36.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay36.plusHours((-1));
        org.joda.time.Chronology chronology40 = timeOfDay39.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.TimeOfDay timeOfDay43 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.withChronologyRetainFields(chronology44);
        long long47 = chronology40.set((org.joda.time.ReadablePartial) timeOfDay43, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField48 = chronology40.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight27.withChronology(chronology40);
        org.joda.time.DateMidnight.Property property50 = dateMidnight27.weekOfWeekyear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.TimeOfDay timeOfDay53 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = timeOfDay55.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay55.plusHours((-1));
        org.joda.time.Chronology chronology59 = timeOfDay58.getChronology();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.TimeOfDay timeOfDay62 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay62.withChronologyRetainFields(chronology63);
        long long66 = chronology59.set((org.joda.time.ReadablePartial) timeOfDay62, (long) (byte) -1);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType70 = null;
        boolean boolean71 = periodType69.isSupported(durationFieldType70);
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 1, 0L, periodType69);
        int[] intArray75 = chronology59.get((org.joda.time.ReadablePeriod) period72, (long) 2022, (long) ' ');
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight27.plus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.Period period78 = period72.minusYears(292278993);
        org.joda.time.Period period79 = period24.withFields((org.joda.time.ReadablePeriod) period72);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(chronology80);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType84 = periodType83.withWeeksRemoved();
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight81, readableDuration82, periodType83);
        org.joda.time.Period period87 = period85.withSeconds(0);
        int int88 = period87.getDays();
        org.joda.time.MutableDateTime mutableDateTime89 = new org.joda.time.MutableDateTime();
        int int90 = mutableDateTime89.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType91 = org.joda.time.DurationFieldType.hours();
        mutableDateTime89.add(durationFieldType91, (int) (short) 100);
        int int94 = period87.get(durationFieldType91);
        org.joda.time.Period period96 = period72.withField(durationFieldType91, 69);
        org.joda.time.Period period98 = period96.minusSeconds(730485);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0.001S" + "'", str25, "PT0.001S");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-86399999L) + "'", long47 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-86399999L) + "'", long66 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 22 + "'", int90 == 22);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test5217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5217");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        int int6 = localDate2.getYearOfEra();
        org.joda.time.LocalDate localDate8 = localDate2.plusMonths((int) '4');
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfEra();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test5218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5218");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = periodType2.isSupported(durationFieldType3);
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 1, 0L, periodType2);
        java.lang.String str6 = period5.toString();
        org.joda.time.Period period8 = period5.withSeconds(8);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.001S" + "'", str6, "PT0.001S");
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test5219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5219");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        boolean boolean7 = interval2.contains((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.Interval interval9 = interval2.withStartMillis((long) 3);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval12 = localDate11.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        boolean boolean17 = interval12.isBefore((org.joda.time.ReadableInterval) interval16);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        int int19 = mutableDateTime18.getDayOfMonth();
        org.joda.time.Instant instant20 = mutableDateTime18.toInstant();
        org.joda.time.Instant instant22 = instant20.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        int int24 = mutableDateTime23.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableInstant) dateTime28, periodType31);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod36 = mutablePeriod35.copy();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.yearOfCentury();
        org.joda.time.Duration duration40 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight38);
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant20, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Interval interval43 = interval16.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = interval43.isAfter(readableInterval44);
        org.joda.time.DateTime dateTime46 = interval43.getStart();
        org.joda.time.Period period47 = interval43.toPeriod();
        org.joda.time.Interval interval48 = interval9.gap((org.joda.time.ReadableInterval) interval43);
        boolean boolean50 = interval9.contains((long) 100);
        org.joda.time.ReadableInstant readableInstant51 = null;
        boolean boolean52 = interval9.isBefore(readableInstant51);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test5220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5220");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        int int5 = property2.getMaximumValue();
        org.joda.time.DurationField durationField6 = property2.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = property2.setCopy("17 Dec 4640 21:19:00 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"17 Dec 4640 21:19:00 GMT\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399999 + "'", int5 == 86399999);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test5221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5221");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType6 = periodType5.withWeeksRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4, periodType5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.plusHours((-1));
        org.joda.time.Chronology chronology16 = timeOfDay15.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.withChronologyRetainFields(chronology20);
        long long23 = chronology16.set((org.joda.time.ReadablePartial) timeOfDay19, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(chronology16);
        org.joda.time.Chronology chronology25 = chronology16.withUTC();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 70, periodType5, chronology16);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0L, chronology16);
        org.joda.time.DurationField durationField28 = chronology16.millis();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.withChronologyRetainFields(chronology34);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray36 = timeOfDay35.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay35.plusHours((-1));
        org.joda.time.Chronology chronology39 = timeOfDay38.getChronology();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay42.withChronologyRetainFields(chronology43);
        long long46 = chronology39.set((org.joda.time.ReadablePartial) timeOfDay42, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(chronology39);
        org.joda.time.DurationField durationField48 = chronology39.days();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType52 = null;
        boolean boolean53 = periodType51.isSupported(durationFieldType52);
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 1, 0L, periodType51);
        org.joda.time.Period period56 = period54.withMillis(2968);
        int[] intArray59 = chronology39.get((org.joda.time.ReadablePeriod) period56, (long) 59000, (long) (short) 1);
        org.joda.time.Period period60 = new org.joda.time.Period(0L, chronology39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((java.lang.Object) durationField28, periodType29, chronology39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.field.MillisDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-86399999L) + "'", long23 == (-86399999L));
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-86399999L) + "'", long46 == (-86399999L));
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, -58, -999]");
    }

    @Test
    public void test5222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5222");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth3 = new org.joda.time.YearMonth(dateTimeZone2);
        long long6 = dateTimeZone2.convertLocalToUTC((long) 999, true);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone2);
        java.lang.String str9 = dateTimeZone2.getShortName((long) 52);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 495, dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 999L + "'", long6 == 999L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
    }

    @Test
    public void test5223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5223");
        org.joda.time.YearMonth yearMonth0 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.withYear(7);
        org.joda.time.YearMonth.Property property3 = yearMonth2.year();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        java.lang.String str5 = property3.getAsShortText();
        org.joda.time.DurationField durationField6 = property3.getRangeDurationField();
        java.lang.String str7 = property3.toString();
        int int8 = property3.getMaximumValue();
        org.junit.Assert.assertNotNull(yearMonth0);
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "7" + "'", str5, "7");
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[year]" + "'", str7, "Property[year]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
    }

    @Test
    public void test5224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5224");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.plusYears(1969);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withDayOfYear(54);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.weekyear();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.plusDays(36000001);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test5225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5225");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.withCenturyOfEra((int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod8.copy();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.yearOfCentury();
        org.joda.time.Duration duration13 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod17 = mutablePeriod16.copy();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.yearOfCentury();
        org.joda.time.Duration duration21 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        boolean boolean22 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration23 = duration21.toDuration();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTime();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.withChronologyRetainFields(chronology33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = timeOfDay34.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay34.plusHours((-1));
        org.joda.time.Chronology chronology38 = timeOfDay37.getChronology();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.TimeOfDay timeOfDay41 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.withChronologyRetainFields(chronology42);
        long long45 = chronology38.set((org.joda.time.ReadablePartial) timeOfDay41, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay(chronology38);
        org.joda.time.DateTime dateTime47 = dateTime28.toDateTime(chronology38);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = dateTime28.toDateTime(chronology48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight5.withPeriodAdded((org.joda.time.ReadablePeriod) period50, 0);
        org.joda.time.Period period53 = period50.negated();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-86399999L) + "'", long45 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(period53);
    }

    @Test
    public void test5226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5226");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears((int) 'u');
        org.joda.time.DateTime dateTime9 = dateTime5.minusDays(22);
        org.joda.time.DateTime dateTime11 = dateTime5.minusMinutes(430);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test5227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5227");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        int int2 = charSet1.size();
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("UTC");
        java.lang.String str5 = languageRange4.getRange();
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("UTC");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange4, languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale18 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale18, locale19, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale.FilteringMode filteringMode26 = null;
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList24, filteringMode26);
        boolean boolean28 = charSet12.removeAll((java.util.Collection<java.util.Locale>) localeList27);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList27);
        boolean boolean30 = charSet1.containsAll((java.util.Collection<java.util.Locale>) localeList29);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfDay();
        org.joda.time.LocalTime localTime35 = property33.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime36 = property33.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property39 = localTime38.millisOfDay();
        org.joda.time.LocalTime localTime41 = property39.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime42 = property39.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property43 = localTime42.minuteOfHour();
        org.joda.time.Period period44 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime36, (org.joda.time.ReadablePartial) localTime42);
        org.joda.time.LocalTime localTime46 = localTime36.plusHours((int) '#');
        java.util.TimeZone timeZone48 = java.util.TimeZone.getTimeZone("fr");
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone48);
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.fromCalendarFields(calendar49);
        org.joda.time.LocalTime localTime51 = localTime46.withFields((org.joda.time.ReadablePartial) localTime50);
        boolean boolean52 = charSet1.remove((java.lang.Object) localTime51);
        java.util.Locale.LanguageRange languageRange54 = new java.util.Locale.LanguageRange("UTC");
        java.lang.String str55 = languageRange54.getRange();
        java.util.Locale.LanguageRange languageRange57 = new java.util.Locale.LanguageRange("UTC");
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] { languageRange54, languageRange57 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet62 = locale61.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale locale68 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.util.Locale locale72 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray73 = new java.util.Locale[] { locale68, locale69, locale72 };
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.Locale.FilteringMode filteringMode76 = null;
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList74, filteringMode76);
        boolean boolean78 = charSet62.removeAll((java.util.Collection<java.util.Locale>) localeList77);
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList77);
        boolean boolean80 = charSet1.removeAll((java.util.Collection<java.util.Locale>) localeList77);
        java.util.stream.Stream<java.util.Locale> localeStream81 = localeList77.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "utc" + "'", str5, "utc");
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645514201824,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=41,MILLISECOND=824,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "utc" + "'", str55, "utc");
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals(locale68.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale72.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localeStream81);
    }

    @Test
    public void test5228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5228");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.fromCalendarFields(calendar0);
        java.util.Date date4 = new java.util.Date(100L);
        calendar0.setTime(date4);
        date4.setMinutes(12);
        int int8 = date4.getSeconds();
        java.lang.String str9 = date4.toString();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonth2);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:12:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Thu Jan 01 00:12:00 GMT 1970" + "'", str9, "Thu Jan 01 00:12:00 GMT 1970");
    }

    @Test
    public void test5229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5229");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod4 = mutablePeriod3.copy();
        org.joda.time.format.PeriodFormatter periodFormatter5 = null;
        java.lang.String str6 = mutablePeriod4.toString(periodFormatter5);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.Period period9 = new org.joda.time.Period((java.lang.Object) periodFormatter5, periodType7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.withChronologyRetainFields(chronology19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = timeOfDay20.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay20.plusHours((-1));
        org.joda.time.Chronology chronology24 = timeOfDay23.getChronology();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.withChronologyRetainFields(chronology28);
        long long31 = chronology24.set((org.joda.time.ReadablePartial) timeOfDay27, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(chronology24);
        org.joda.time.DateTime dateTime33 = dateTime14.toDateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField34 = chronology24.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = chronology24.yearOfCentury();
        org.joda.time.Period period36 = new org.joda.time.Period(100L, periodType7, chronology24);
        org.joda.time.MutablePeriod mutablePeriod37 = period36.toMutablePeriod();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) 13, (long) 157);
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod44.copy();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.yearOfCentury();
        org.joda.time.Duration duration49 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod53 = mutablePeriod52.copy();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight(chronology54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.yearOfCentury();
        org.joda.time.Duration duration57 = mutablePeriod53.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight55);
        boolean boolean58 = duration49.isShorterThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration59 = duration57.toDuration();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone62);
        org.joda.time.DateTime dateTime64 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime64.toMutableDateTime();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.TimeOfDay timeOfDay68 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = timeOfDay70.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay73 = timeOfDay70.plusHours((-1));
        org.joda.time.Chronology chronology74 = timeOfDay73.getChronology();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.TimeOfDay timeOfDay77 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.TimeOfDay timeOfDay79 = timeOfDay77.withChronologyRetainFields(chronology78);
        long long81 = chronology74.set((org.joda.time.ReadablePartial) timeOfDay77, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay82 = new org.joda.time.TimeOfDay(chronology74);
        org.joda.time.DateTime dateTime83 = dateTime64.toDateTime(chronology74);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTime dateTime85 = dateTime64.toDateTime(chronology84);
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Interval interval87 = interval41.withDurationAfterStart((org.joda.time.ReadableDuration) duration59);
        mutablePeriod37.setPeriod((org.joda.time.ReadableDuration) duration59);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.099S" + "'", str6, "PT0.099S");
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-86399999L) + "'", long31 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(timeOfDay79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-86399999L) + "'", long81 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(interval87);
    }

    @Test
    public void test5230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5230");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond((int) (short) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test5231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5231");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0, (-4), 1, 5);
    }

    @Test
    public void test5232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5232");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 22);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.withChronologyRetainFields(chronology5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = timeOfDay6.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.plusHours((-1));
        org.joda.time.Chronology chronology10 = timeOfDay9.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withChronologyRetainFields(chronology14);
        long long17 = chronology10.set((org.joda.time.ReadablePartial) timeOfDay13, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay1.withChronologyRetainFields(chronology10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType23 = periodType22.withWeeksRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, readableDuration21, periodType22);
        org.joda.time.Period period26 = period24.withSeconds(0);
        org.joda.time.Period period28 = period26.plusMinutes((int) (byte) 1);
        org.joda.time.Period period30 = period26.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period33 = period26.withField(durationFieldType31, 7);
        org.joda.time.Period period35 = period26.minusDays(0);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay18.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 365);
        org.joda.time.Days days38 = period26.toStandardDays();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-86399999L) + "'", long17 == (-86399999L));
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(days38);
    }

    @Test
    public void test5233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5233");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        java.lang.Object obj2 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        int int7 = dateTime6.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(obj2, dateTimeZone9);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.year();
        boolean boolean14 = calendar0.after((java.lang.Object) property13);
        calendar0.set(69019, 20, (int) (short) 1);
        java.lang.Object obj21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(obj21, dateTimeZone22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.secondOfMinute();
        long long25 = property24.remainder();
        org.joda.time.LocalDateTime localDateTime26 = property24.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundHalfEvenCopy();
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getScript();
        java.lang.String str31 = localDateTime27.toString("07:09:28.341", locale29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap32 = calendar0.getDisplayNames(432, 86040000, locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=69019,MONTH=20,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=42,MILLISECOND=48,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 48L + "'", long25 == 48L);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "07:09:28.341" + "'", str31, "07:09:28.341");
    }

    @Test
    public void test5234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5234");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        int int11 = mutableDateTime10.getDayOfMonth();
        org.joda.time.Instant instant12 = mutableDateTime10.toInstant();
        boolean boolean14 = mutableDateTime10.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int18 = dateTimeZone16.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime10.setZone(dateTimeZone16);
        long long21 = dateTimeZone16.previousTransition((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime0.toMutableDateTime(dateTimeZone16);
        boolean boolean24 = mutableDateTime22.equals((java.lang.Object) (short) 1);
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period31 = period29.withPeriodType(periodType30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.minutes();
        boolean boolean33 = periodType30.isSupported(durationFieldType32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(periodType30);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property37 = localTime36.millisOfDay();
        java.lang.String str39 = localTime36.toString("22");
        org.joda.time.LocalTime localTime41 = localTime36.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        org.joda.time.Period period43 = new org.joda.time.Period(0L, 100L, periodType30, chronology42);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period43, 0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setMillisOfSecond(1091);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1091 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "22" + "'", str39, "22");
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test5235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5235");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfYear();
        org.joda.time.LocalDate localDate6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType7.getRangeDurationType();
        boolean boolean10 = localDate6.isSupported(durationFieldType9);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test5236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5236");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = localTime1.toDateTimeToday();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        int int9 = mutableDateTime8.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType16 = periodType15.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableInstant) dateTime13, periodType16);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod20.copy();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.yearOfCentury();
        org.joda.time.Duration duration25 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight23);
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration25);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod29.copy();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.yearOfCentury();
        org.joda.time.Duration duration34 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod37.copy();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.yearOfCentury();
        org.joda.time.Duration duration42 = mutablePeriod38.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight40);
        boolean boolean43 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period44 = duration42.toPeriod();
        boolean boolean45 = duration25.isEqual((org.joda.time.ReadableDuration) duration42);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        int int47 = mutableDateTime46.getDayOfMonth();
        org.joda.time.Instant instant48 = mutableDateTime46.toInstant();
        boolean boolean50 = mutableDateTime46.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int54 = dateTimeZone52.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime46.setZone(dateTimeZone52);
        mutableDateTime46.setMillisOfDay((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.DateTime dateTime59 = dateTime6.plus((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.DateTime.Property property60 = dateTime59.millisOfDay();
        org.joda.time.DateTime dateTime62 = property60.addToCopy((long) (short) 10);
        org.joda.time.DateTime dateTime64 = property60.addToCopy(292281961L);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test5237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5237");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.Interval interval6 = property4.toInterval();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        boolean boolean11 = periodType9.isSupported(durationFieldType10);
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 1, 0L, periodType9);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period15 = period12.minusMonths(9);
        org.joda.time.Period period17 = period15.plusMinutes((int) (byte) 0);
        org.joda.time.Period period19 = period15.plusDays(69);
        org.joda.time.Period period21 = period19.withYears(292278993);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval22 = interval6.withPeriodAfterStart((org.joda.time.ReadablePeriod) period21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292281015 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0.001S" + "'", str13, "PT0.001S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test5238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5238");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        calendar0.setFirstDayOfWeek((int) (byte) 0);
        calendar0.setTimeInMillis((long) (short) 100);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        int int9 = calendar0.getMinimum(15);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-46800000) + "'", int9 == (-46800000));
    }

    @Test
    public void test5239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5239");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = localTime1.toDateTimeToday();
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfCentury(0);
        org.joda.time.DateTime dateTime10 = dateTime6.withMillis(117L);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime13 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime16 = dateTime13.plus(3155695200000L);
        java.lang.String str17 = dateTime13.toString();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.117Z" + "'", str17, "1970-01-01T00:00:00.117Z");
    }

    @Test
    public void test5240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5240");
        java.util.Date date1 = new java.util.Date(3786912000000L);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Sun Jan 01 00:00:00 GMT 2090");
    }

    @Test
    public void test5241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5241");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        int int9 = mutableDateTime8.getDayOfMonth();
        org.joda.time.Instant instant10 = mutableDateTime8.toInstant();
        int int11 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) instant10);
        org.joda.time.DateTime dateTime12 = localTime5.toDateTimeToday(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone16);
        org.joda.time.DateTime dateTime18 = dateTime17.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime19 = dateTime17.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear(2);
        org.joda.time.Instant instant22 = dateTime21.toInstant();
        org.joda.time.Instant instant24 = instant22.withMillis((long) 5);
        org.joda.time.MutableDateTime mutableDateTime25 = instant24.toMutableDateTimeISO();
        org.joda.time.Instant instant28 = instant24.withDurationAdded((long) (-292275054), 32);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withCenturyOfEra((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod38.copy();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.yearOfCentury();
        org.joda.time.Duration duration43 = mutablePeriod39.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod47 = mutablePeriod46.copy();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.yearOfCentury();
        org.joda.time.Duration duration51 = mutablePeriod47.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight49);
        boolean boolean52 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration53 = duration51.toDuration();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight35, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration55 = duration51.toDuration();
        org.joda.time.Instant instant56 = instant28.plus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.time();
        java.lang.String str59 = periodType58.getName();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) (short) -1, periodType58);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableDuration) duration55, periodType58);
        int int62 = period61.getMonths();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Time" + "'", str59, "Time");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test5242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5242");
        java.util.Date date1 = new java.util.Date(100L);
        long long2 = date1.getTime();
        int int3 = date1.getSeconds();
        int int4 = date1.getMonth();
        int int5 = date1.getMonth();
        java.lang.String str6 = date1.toGMTString();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 1, 0L, periodType10);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period16 = period13.minusMonths(9);
        org.joda.time.Period period18 = period16.withSeconds(0);
        org.joda.time.Period period20 = period16.plusDays(1);
        org.joda.time.Period period22 = period16.withMonths(365);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay7.withPeriodAdded((org.joda.time.ReadablePeriod) period22, 31);
        java.lang.String str25 = period22.toString();
        org.joda.time.Period period27 = period22.minusYears(1095);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str6, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.001S" + "'", str14, "PT0.001S");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "P365MT0.001S" + "'", str25, "P365MT0.001S");
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test5243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5243");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.PeriodType periodType2 = periodType0.withDaysRemoved();
        java.lang.String str3 = periodType2.getName();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Time" + "'", str3, "Time");
    }

    @Test
    public void test5244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5244");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getFirstDayOfWeek();
        int int3 = calendar1.getWeekYear();
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar1);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusMonths((int) 'x');
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.withYear(11);
        int int9 = yearMonthDay8.getYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514202391,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=42,MILLISECOND=391,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
    }

    @Test
    public void test5245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5245");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 1);
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone5 = null;
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test5246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5246");
        org.joda.time.YearMonth yearMonth0 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.withYear(7);
        org.joda.time.YearMonth.Property property3 = yearMonth2.year();
        org.joda.time.YearMonth yearMonth5 = property3.setCopy(2);
        org.joda.time.YearMonth yearMonth7 = property3.setCopy(8);
        org.joda.time.YearMonth.Property property8 = yearMonth7.year();
        int int9 = yearMonth7.size();
        org.junit.Assert.assertNotNull(yearMonth0);
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
    }

    @Test
    public void test5247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5247");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTime dateTime23 = timeOfDay22.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay22.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime26 = timeOfDay25.toDateTimeToday();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, readableDuration29, periodType30);
        org.joda.time.Period period34 = period32.withSeconds(0);
        org.joda.time.Period period36 = period34.plusMinutes((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay25.minus((org.joda.time.ReadablePeriod) period34);
        boolean boolean38 = timeOfDay16.isBefore((org.joda.time.ReadablePartial) timeOfDay37);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = timeOfDay16.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay16.plusSeconds(59);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.plusHours(5);
        org.joda.time.Chronology chronology44 = timeOfDay43.getChronology();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test5248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5248");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        mutableDateTime0.setMillisOfDay((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean15 = dateTimeZone13.isStandardOffset((long) 'u');
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone13);
        mutableDateTime0.setZone(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime0.getZone();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        long long22 = dateTimeZone18.convertLocalToUTC((long) 18, true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 18L + "'", long22 == 18L);
    }

    @Test
    public void test5249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5249");
        java.util.Date date1 = new java.util.Date((long) 6);
        date1.setMinutes(1);
        java.lang.String str4 = date1.toLocaleString();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.year();
        int int7 = property6.get();
        org.joda.time.YearMonthDay yearMonthDay8 = property6.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay9 = property6.getYearMonthDay();
        org.joda.time.DateTimeField dateTimeField10 = property6.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay12 = property6.setCopy("-0001-02-23T07:12:52.597");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-0001-02-23T07:12:52.597\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:01:00 GMT 1970");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-1-1 0:01:00" + "'", str4, "1970-1-1 0:01:00");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test5250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5250");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime7.withTimeAtStartOfDay();
        boolean boolean9 = interval2.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutableInterval mutableInterval10 = interval2.toMutableInterval();
        org.joda.time.Chronology chronology11 = mutableInterval10.getChronology();
        org.joda.time.Chronology chronology12 = mutableInterval10.getChronology();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType21 = periodType20.withWeeksRemoved();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, readableDuration19, periodType20);
        java.lang.Object obj23 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = timeOfDay28.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay28.plusHours((-1));
        org.joda.time.Chronology chronology32 = timeOfDay31.getChronology();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.withChronologyRetainFields(chronology36);
        long long39 = chronology32.set((org.joda.time.ReadablePartial) timeOfDay35, (long) (byte) -1);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType43 = null;
        boolean boolean44 = periodType42.isSupported(durationFieldType43);
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 1, 0L, periodType42);
        int[] intArray48 = chronology32.get((org.joda.time.ReadablePeriod) period45, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime(obj23, chronology32);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 17, (long) (byte) -1, periodType20, chronology32);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.millis();
        int int52 = periodType20.indexOf(durationFieldType51);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval55 = localDate54.toInterval();
        org.joda.time.MutableInterval mutableInterval56 = interval55.toMutableInterval();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval59 = localDate58.toInterval();
        boolean boolean60 = interval55.isBefore((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Chronology chronology61 = interval59.getChronology();
        org.joda.time.Chronology chronology62 = interval59.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period63 = new org.joda.time.Period((java.lang.Object) dateTimeField14, periodType20, chronology62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.BasicDayOfMonthDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str3, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-86399999L) + "'", long39 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology62);
    }

    @Test
    public void test5251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5251");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = localDateTime10.toString(dateTimeFormatter11);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        int int14 = mutableDateTime13.getDayOfMonth();
        org.joda.time.Instant instant15 = mutableDateTime13.toInstant();
        boolean boolean17 = mutableDateTime13.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int21 = dateTimeZone19.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime13.setZone(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        int int24 = mutableDateTime23.getDayOfMonth();
        org.joda.time.Instant instant25 = mutableDateTime23.toInstant();
        boolean boolean27 = mutableDateTime23.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int31 = dateTimeZone29.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime23.setZone(dateTimeZone29);
        long long34 = dateTimeZone29.previousTransition((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime13.toMutableDateTime(dateTimeZone29);
        mutableDateTime35.setMillisOfSecond(11);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime35.centuryOfEra();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime35.monthOfYear();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = dateTime40.withYear((int) 'u');
        org.joda.time.DateTime.Property property43 = dateTime40.era();
        org.joda.time.DateTime dateTime44 = property43.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property43.getFieldType();
        int int46 = mutableDateTime35.get(dateTimeFieldType45);
        boolean boolean47 = localDateTime10.isSupported(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-0001-02-23T07:16:42.557" + "'", str12, "-0001-02-23T07:16:42.557");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test5252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5252");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundHalfEvenCopy();
        int int7 = localDateTime6.getWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusDays(2023);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(4);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 10, dateTimeZone15);
        org.joda.time.DateTime dateTime18 = localDateTime9.toDateTime(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plusDays((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight23 = dateMidnight19.withDayOfWeek(12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 12 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 694L + "'", long4 == 694L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test5253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5253");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime5, periodType8);
        org.joda.time.LocalDateTime localDateTime10 = dateTime5.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfYear(3);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths(2);
        int int19 = localDateTime16.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test5254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5254");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        long long4 = dateTimeZone1.convertLocalToUTC((long) 'u', true);
        org.joda.time.YearMonth yearMonth5 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth7 = yearMonth5.minusMonths(6);
        org.joda.time.YearMonth yearMonth9 = yearMonth7.minusMonths(5);
        boolean boolean10 = dateTimeZone1.equals((java.lang.Object) 5);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 117L + "'", long4 == 117L);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertNotNull(yearMonth7);
        org.junit.Assert.assertNotNull(yearMonth9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test5255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5255");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = periodType2.isSupported(durationFieldType3);
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 1, 0L, periodType2);
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period7 = period6.toPeriod();
        org.joda.time.Period period9 = period6.minusSeconds(999);
        int int10 = period9.getMinutes();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test5256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5256");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay7.toDateTimeToday();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11, periodType12);
        org.joda.time.Period period16 = period14.withSeconds(0);
        org.joda.time.Period period18 = period16.plusMinutes((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay7.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.joda.time.TimeOfDay timeOfDay23 = property20.addToCopy(292278993);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod26.copy();
        mutablePeriod27.setDays(2968);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay23.minus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.plusHours(118);
        org.joda.time.Period period34 = org.joda.time.Period.millis(10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight36.plusYears(1969);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.withDayOfYear(54);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.withMonthOfYear(10);
        boolean boolean46 = period34.equals((java.lang.Object) dateMidnight43);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property49 = localTime48.millisOfDay();
        org.joda.time.LocalTime localTime51 = property49.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime52 = property49.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime53 = property49.withMaximumValue();
        org.joda.time.DurationField durationField54 = property49.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType55 = durationField54.getType();
        int int56 = period34.get(durationFieldType55);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay30.plus((org.joda.time.ReadablePeriod) period34);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(timeOfDay57);
    }

    @Test
    public void test5257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5257");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval9 = localDate8.toInterval();
        boolean boolean10 = interval5.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.MutableInterval mutableInterval11 = interval9.toMutableInterval();
        boolean boolean12 = interval2.isBefore((org.joda.time.ReadableInterval) mutableInterval11);
        org.joda.time.DateTime dateTime13 = mutableInterval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(6000000);
        long long18 = dateTimeZone15.adjustOffset(1645513794426L, true);
        org.joda.time.DateTime dateTime19 = dateTime13.withZoneRetainFields(dateTimeZone15);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513794426L + "'", long18 == 1645513794426L);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test5258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5258");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfYear();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = localDate7.withCenturyOfEra(13);
        org.joda.time.LocalDate localDate12 = localDate7.minusYears(59052);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test5259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5259");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMinutes(6);
        int int9 = localDateTime8.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(32772);
        int int15 = dateTimeZone13.getStandardOffset((-82800000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) localDateTime8, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 32772 + "'", int15 == 32772);
    }

    @Test
    public void test5260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5260");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology8.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.year();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test5261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5261");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronology();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        java.lang.Integer int8 = dateTimeFormatter5.getPivotYear();
        java.util.Locale locale9 = dateTimeFormatter5.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(locale9);
    }

    @Test
    public void test5262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5262");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = timeOfDay5.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.plusHours((-1));
        org.joda.time.Chronology chronology9 = timeOfDay8.getChronology();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withChronologyRetainFields(chronology13);
        long long16 = chronology9.set((org.joda.time.ReadablePartial) timeOfDay12, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.Chronology chronology18 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.minuteOfHour();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DurationField durationField21 = chronology9.seconds();
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 60044646, chronology9);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType27 = periodType26.withWeeksRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight24, readableDuration25, periodType26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.withChronologyRetainFields(chronology32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = timeOfDay33.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay33.plusHours((-1));
        org.joda.time.Chronology chronology37 = timeOfDay36.getChronology();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay40.withChronologyRetainFields(chronology41);
        long long44 = chronology37.set((org.joda.time.ReadablePartial) timeOfDay40, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField45 = chronology37.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight24.withChronology(chronology37);
        org.joda.time.DateMidnight.Property property47 = dateMidnight24.weekOfWeekyear();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.TimeOfDay timeOfDay50 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay50.withChronologyRetainFields(chronology51);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = timeOfDay52.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay52.plusHours((-1));
        org.joda.time.Chronology chronology56 = timeOfDay55.getChronology();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.TimeOfDay timeOfDay59 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay59.withChronologyRetainFields(chronology60);
        long long63 = chronology56.set((org.joda.time.ReadablePartial) timeOfDay59, (long) (byte) -1);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType67 = null;
        boolean boolean68 = periodType66.isSupported(durationFieldType67);
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 1, 0L, periodType66);
        int[] intArray72 = chronology56.get((org.joda.time.ReadablePeriod) period69, (long) 2022, (long) ' ');
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight24.plus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Period period75 = period69.minusYears(292278993);
        long long78 = chronology9.add((org.joda.time.ReadablePeriod) period69, 196L, 5);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-86399999L) + "'", long16 == (-86399999L));
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-86399999L) + "'", long44 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-86399999L) + "'", long63 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 191L + "'", long78 == 191L);
    }

    @Test
    public void test5263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5263");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime5.toMutableDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusHours((-1));
        org.joda.time.Chronology chronology15 = timeOfDay14.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.withChronologyRetainFields(chronology19);
        long long22 = chronology15.set((org.joda.time.ReadablePartial) timeOfDay18, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.DateTime dateTime24 = dateTime5.toDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone27);
        org.joda.time.Chronology chronology29 = chronology15.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) 2023, dateTimeZone27);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        int int34 = mutableDateTime33.getDayOfMonth();
        org.joda.time.Instant instant35 = mutableDateTime33.toInstant();
        mutableDateTime33.setDateTime(11, 8, 10, 19, (int) (short) 10, 19, 1);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime33.weekOfWeekyear();
        int int45 = property32.compareTo((org.joda.time.ReadableInstant) mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-86399999L) + "'", long22 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test5264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5264");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970");
        org.joda.time.DateTime dateTime2 = dateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.withMillisOfDay((int) 'x');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType25 = null;
        boolean boolean26 = periodType24.isSupported(durationFieldType25);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 1, 0L, periodType24);
        int[] intArray30 = chronology14.get((org.joda.time.ReadablePeriod) period27, (long) 2022, (long) ' ');
        org.joda.time.DateTimeField dateTimeField31 = chronology14.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1645488000000L, chronology14);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTime dateTime34 = dateTime4.withChronology(chronology14);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test5265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5265");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str2 = yearMonthDay1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) -1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears(1);
        org.joda.time.LocalDate.Property property8 = localDate5.year();
        org.joda.time.LocalDate.Property property9 = localDate5.dayOfYear();
        int int10 = localDate5.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int12 = localDate5.get(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay1.withField(dateTimeFieldType11, 2);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17, periodType18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period24 = period22.plusHours((int) (short) 10);
        org.joda.time.Period period25 = period20.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay1.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay29 = property27.setCopy(9);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
    }

    @Test
    public void test5266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5266");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[monthOfYear]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5267");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        boolean boolean5 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) mutableDateTime4);
        mutableDateTime4.addMinutes(69);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.minuteOfDay();
        mutableDateTime4.addSeconds(465);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfDay();
        org.joda.time.LocalTime localTime18 = property16.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime19 = property16.roundHalfFloorCopy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22, periodType23);
        org.joda.time.Period period27 = period25.withSeconds(0);
        org.joda.time.Period period29 = period27.plusMinutes((int) (byte) 1);
        org.joda.time.Period period31 = period27.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period34 = period27.withField(durationFieldType32, 7);
        org.joda.time.LocalTime localTime36 = localTime19.withPeriodAdded((org.joda.time.ReadablePeriod) period27, (int) (short) 1);
        org.joda.time.Period period38 = period27.withMillis((int) (short) -1);
        mutablePeriod13.add((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.TimeOfDay timeOfDay43 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.withChronologyRetainFields(chronology44);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = timeOfDay45.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay45.plusHours((-1));
        org.joda.time.Chronology chronology49 = timeOfDay48.getChronology();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.TimeOfDay timeOfDay52 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.withChronologyRetainFields(chronology53);
        long long56 = chronology49.set((org.joda.time.ReadablePartial) timeOfDay52, (long) (byte) -1);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType60 = null;
        boolean boolean61 = periodType59.isSupported(durationFieldType60);
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 1, 0L, periodType59);
        int[] intArray65 = chronology49.get((org.joda.time.ReadablePeriod) period62, (long) 2022, (long) ' ');
        org.joda.time.DateTimeField dateTimeField66 = chronology49.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField67 = chronology49.era();
        mutablePeriod13.add(0L, chronology49);
        org.joda.time.DateTime dateTime69 = mutableDateTime4.toDateTime(chronology49);
        mutableDateTime4.addMonths(1093);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-86399999L) + "'", long56 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test5268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5268");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("UTC");
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime8 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear(2);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.minusSeconds((int) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(chronology14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight17 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime23 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfYear(2);
        int int26 = property16.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime28 = dateTime23.withMillisOfSecond(999);
        org.joda.time.DateTime dateTime29 = dateTime28.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime31 = dateTime29.minusWeeks(85);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime31, periodType32);
        org.joda.time.Period period35 = period33.plusMonths(69);
        boolean boolean36 = dateTimeZone1.equals((java.lang.Object) period33);
        org.joda.time.Period period37 = period33.normalizedStandard();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test5269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5269");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusMinutes((int) '4');
        org.joda.time.DateTime dateTime6 = localTime1.toDateTimeToday();
        org.joda.time.DateTime dateTime8 = dateTime6.withYearOfCentury(0);
        org.joda.time.DateTime dateTime9 = dateTime6.toDateTimeISO();
        java.util.Date date10 = dateTime6.toDate();
        org.joda.time.DateTime dateTime12 = dateTime6.minusDays(50);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test5270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5270");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6, periodType7);
        org.joda.time.Period period11 = period9.withSeconds(0);
        org.joda.time.Period period13 = period11.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period11, (int) (byte) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime2.yearOfCentury();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test5271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5271");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = mutableDateTime0.getChronology();
        mutableDateTime0.setWeekyear(4);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        boolean boolean11 = periodType9.isSupported(durationFieldType10);
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 1, 0L, periodType9);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod15.copy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = timeOfDay23.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay23.plusHours((-1));
        org.joda.time.Chronology chronology27 = timeOfDay26.getChronology();
        mutablePeriod15.setPeriod((long) (byte) 1, 208L, chronology27);
        boolean boolean29 = periodType9.equals((java.lang.Object) chronology27);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, (long) 58, periodType9);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getDurationType();
        boolean boolean33 = periodType9.isSupported(durationFieldType32);
        mutableDateTime0.add(durationFieldType32, 4);
        mutableDateTime0.add((long) 53);
        org.joda.time.Chronology chronology38 = mutableDateTime0.getChronology();
        mutableDateTime0.setDayOfYear(22);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setSecondOfMinute((-785));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -785 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    public void test5272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5272");
        org.joda.time.YearMonth yearMonth0 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.withYear(7);
        org.joda.time.YearMonth.Property property3 = yearMonth2.year();
        org.joda.time.YearMonth yearMonth5 = property3.addToCopy((int) (byte) 100);
        java.lang.String str6 = property3.getAsText();
        org.joda.time.DurationField durationField7 = property3.getDurationField();
        long long10 = durationField7.getDifferenceAsLong(959L, 347155199999L);
        long long13 = durationField7.subtract(504L, 2023);
        org.junit.Assert.assertNotNull(yearMonth0);
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "7" + "'", str6, "7");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-10L) + "'", long10 == (-10L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-63839750399496L) + "'", long13 == (-63839750399496L));
    }

    @Test
    public void test5273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5273");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(86400000L, dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillis(20L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test5274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5274");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfMonth();
        boolean boolean5 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateMidnight.Property property6 = dateMidnight1.era();
        org.joda.time.DateMidnight dateMidnight7 = property6.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight8 = property6.getDateMidnight();
        boolean boolean9 = dateMidnight8.isEqualNow();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test5275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5275");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
    }

    @Test
    public void test5276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5276");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        boolean boolean7 = interval2.contains((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        boolean boolean9 = interval2.contains((org.joda.time.ReadableInstant) instant8);
        boolean boolean10 = interval2.containsNow();
        org.joda.time.Interval interval11 = interval2.toInterval();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        int int15 = mutableDateTime14.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateTime19, periodType22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(208L, (long) 100, periodType22, chronology24);
        org.joda.time.Period period26 = interval11.toPeriod(periodType22);
        int int27 = period26.getHours();
        org.joda.time.Period period29 = period26.plusMinutes((-694336399));
        org.joda.time.Period period31 = period26.withMinutes(292278994);
        org.joda.time.Period period33 = period31.withMonths(92);
        int int34 = period33.getWeeks();
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test5277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5277");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        int int6 = localDate2.getYearOfEra();
        org.joda.time.LocalDate localDate8 = localDate2.minusWeeks(32);
        org.joda.time.LocalDate localDate10 = localDate8.plusYears(999);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDate10.getFieldTypes();
        org.joda.time.LocalDate.Property property12 = localDate10.yearOfEra();
        org.joda.time.LocalDate.Property property13 = localDate10.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test5278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5278");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.hourOfDay();
        int int3 = localDateTime0.getMonthOfYear();
        int int4 = localDateTime0.getCenturyOfEra();
        java.util.Date date5 = localDateTime0.toDate();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:16:43 GMT 2022");
    }

    @Test
    public void test5279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5279");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(dateTimeZone1);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod5.copy();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfCentury();
        org.joda.time.Duration duration10 = mutablePeriod6.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.YearMonth yearMonth11 = yearMonth2.minus((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType15 = null;
        boolean boolean16 = periodType14.isSupported(durationFieldType15);
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 1, 0L, periodType14);
        java.lang.String str18 = period17.toString();
        org.joda.time.YearMonth yearMonth19 = yearMonth11.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period22 = new org.joda.time.Period((long) 1, (long) (short) 0);
        org.joda.time.YearMonth yearMonth23 = yearMonth11.plus((org.joda.time.ReadablePeriod) period22);
        int int24 = period22.getHours();
        org.joda.time.Period period26 = period22.plusWeeks(22);
        org.joda.time.Period period28 = period22.withWeeks(7);
        org.joda.time.Period period30 = period22.plusSeconds(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.001S" + "'", str18, "PT0.001S");
        org.junit.Assert.assertNotNull(yearMonth19);
        org.junit.Assert.assertNotNull(yearMonth23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test5280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5280");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        calendar0.setFirstDayOfWeek((int) (byte) 0);
        calendar0.setTimeInMillis((long) (short) 100);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        calendar0.setTimeInMillis(3786912000000L);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        java.time.Instant instant10 = calendar0.toInstant();
        int int11 = calendar0.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=3786912000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=2090,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test5281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5281");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.standard();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTime();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.plusHours((-1));
        org.joda.time.Chronology chronology17 = timeOfDay16.getChronology();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withChronologyRetainFields(chronology21);
        long long24 = chronology17.set((org.joda.time.ReadablePartial) timeOfDay20, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.DateTime dateTime26 = dateTime7.toDateTime(chronology17);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 'x', periodType1, chronology17);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.Interval interval30 = dateMidnight29.toInterval();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        int int32 = mutableDateTime31.getDayOfMonth();
        org.joda.time.Instant instant33 = mutableDateTime31.toInstant();
        boolean boolean35 = mutableDateTime31.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int39 = dateTimeZone37.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime31.setZone(dateTimeZone37);
        mutableDateTime31.setMillisOfDay((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean46 = dateTimeZone44.isStandardOffset((long) 'u');
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime(dateTimeZone44);
        mutableDateTime31.setZone(dateTimeZone44);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime31.yearOfCentury();
        mutableDateTime31.add((-10L));
        boolean boolean52 = interval30.contains((org.joda.time.ReadableInstant) mutableDateTime31);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Standard" + "'", str2, "Standard");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-86399999L) + "'", long24 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test5282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5282");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        boolean boolean5 = dateTimeZone1.isFixed();
        java.lang.String str6 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
    }

    @Test
    public void test5283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5283");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.joda.time.MutableInterval mutableInterval6 = interval5.toMutableInterval();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval9 = localDate8.toInterval();
        boolean boolean10 = interval5.isBefore((org.joda.time.ReadableInterval) interval9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        int int12 = mutableDateTime11.getDayOfMonth();
        org.joda.time.Instant instant13 = mutableDateTime11.toInstant();
        org.joda.time.Instant instant15 = instant13.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int17 = mutableDateTime16.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableInstant) dateTime21, periodType24);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod29 = mutablePeriod28.copy();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.yearOfCentury();
        org.joda.time.Duration duration33 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant13, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Interval interval36 = interval9.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval39 = localDate38.toInterval();
        java.lang.String str40 = interval39.toString();
        boolean boolean42 = interval39.isAfter(86400000L);
        org.joda.time.ReadableInterval readableInterval43 = null;
        boolean boolean44 = interval39.abuts(readableInterval43);
        boolean boolean45 = interval36.contains((org.joda.time.ReadableInterval) interval39);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        mutableDateTime46.addHours((int) (short) -1);
        boolean boolean49 = interval36.isAfter((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval52 = localDate51.toInterval();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(chronology53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.era();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime();
        int int57 = mutableDateTime56.getDayOfMonth();
        boolean boolean58 = dateMidnight54.isEqual((org.joda.time.ReadableInstant) mutableDateTime56);
        int int59 = mutableDateTime56.getWeekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod63 = mutablePeriod62.copy();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(chronology64);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.yearOfCentury();
        org.joda.time.Duration duration67 = mutablePeriod63.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod71 = mutablePeriod70.copy();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(chronology72);
        org.joda.time.DateMidnight.Property property74 = dateMidnight73.yearOfCentury();
        org.joda.time.Duration duration75 = mutablePeriod71.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight73);
        boolean boolean76 = duration67.isEqual((org.joda.time.ReadableDuration) duration75);
        mutableDateTime56.add((org.joda.time.ReadableDuration) duration75, 0);
        org.joda.time.Interval interval79 = interval52.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Interval interval80 = interval36.withDurationAfterStart((org.joda.time.ReadableDuration) duration75);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone83);
        org.joda.time.DateTime dateTime85 = dateTime84.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime86 = dateTime85.toMutableDateTime();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration75, (org.joda.time.ReadableInstant) mutableDateTime86);
        boolean boolean88 = interval2.contains((org.joda.time.ReadableInstant) mutableDateTime86);
        mutableDateTime86.addMillis(1439);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str40, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(mutablePeriod71);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test5284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5284");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8, periodType9);
        java.lang.Object obj12 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = timeOfDay17.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours((-1));
        org.joda.time.Chronology chronology21 = timeOfDay20.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.withChronologyRetainFields(chronology25);
        long long28 = chronology21.set((org.joda.time.ReadablePartial) timeOfDay24, (long) (byte) -1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType32 = null;
        boolean boolean33 = periodType31.isSupported(durationFieldType32);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 1, 0L, periodType31);
        int[] intArray37 = chronology21.get((org.joda.time.ReadablePeriod) period34, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(obj12, chronology21);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 17, (long) (byte) -1, periodType9, chronology21);
        org.joda.time.DateTimeField dateTimeField40 = chronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology21.clockhourOfDay();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.DurationField durationField43 = chronology21.eras();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 0, chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(6, (-3), 25993011, chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-86399999L) + "'", long28 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test5285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5285");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = chronology14.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight1.withChronology(chronology14);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime28.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.year();
        boolean boolean31 = dateMidnight23.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        long long37 = dateTimeZone33.convertLocalToUTC((-1L), false, 10L);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight23.withZoneRetainFields(dateTimeZone33);
        int int39 = dateMidnight23.getSecondOfMinute();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-1L) + "'", long37 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test5286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5286");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6, periodType7);
        org.joda.time.Period period11 = period9.withSeconds(0);
        org.joda.time.Period period13 = period11.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period11, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.withWeekyear(13);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.plusHours(15);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusDays(6);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test5287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5287");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(48L, (long) 495);
    }

    @Test
    public void test5288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5288");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 'u');
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.LocalTime localTime6 = localTime4.withMinuteOfHour(59);
        org.joda.time.LocalTime.Property property7 = localTime6.hourOfDay();
        org.joda.time.LocalTime localTime9 = localTime6.plusMinutes(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test5289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5289");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime3.withMillisOfDay(4);
        org.joda.time.LocalTime localTime7 = localTime5.plusMillis(429);
        org.joda.time.LocalTime localTime9 = localTime7.minusMinutes(430);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test5290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5290");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withYear((int) 'u');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test5291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5291");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(92041110000L, (long) 4);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTime();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.DateTime dateTime11 = dateTime7.withDayOfWeek(2);
        org.joda.time.DateTime dateTime13 = dateTime7.minusMonths((int) (byte) 1);
        org.joda.time.DateTime.Property property14 = dateTime7.yearOfEra();
        org.joda.time.DateTime.Property property15 = dateTime7.hourOfDay();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        org.joda.time.DateTime dateTime18 = property15.setCopy(1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone21);
        org.joda.time.DateTime dateTime23 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime24 = dateTime22.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear(2);
        org.joda.time.Instant instant27 = dateTime26.toInstant();
        org.joda.time.Instant instant29 = instant27.withMillis((long) 5);
        long long30 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Interval interval31 = property15.toInterval();
        mutablePeriod2.add((org.joda.time.ReadableInterval) interval31);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval31);
    }

    @Test
    public void test5292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5292");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval6 = localDate5.toInterval();
        boolean boolean7 = interval2.isBefore((org.joda.time.ReadableInterval) interval6);
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period10 = interval6.toPeriod(periodType9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval13 = localDate12.toInterval();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval20 = localDate19.toInterval();
        boolean boolean21 = interval16.isBefore((org.joda.time.ReadableInterval) interval20);
        boolean boolean22 = interval13.abuts((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Interval interval23 = interval6.overlap((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Interval interval24 = interval6.toInterval();
        org.joda.time.Duration duration25 = interval24.toDuration();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str28 = yearMonthDay27.toString();
        java.lang.String str29 = yearMonthDay27.toString();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay27.plusDays(4);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.plusYears(22);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        long long38 = dateTimeZone36.convertUTCToLocal((long) (-1));
        org.joda.time.DateMidnight dateMidnight39 = yearMonthDay31.toDateMidnight(dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.Interval interval41 = yearMonthDay31.toInterval(dateTimeZone40);
        boolean boolean42 = interval24.isBefore((org.joda.time.ReadableInterval) interval41);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01" + "'", str28, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01" + "'", str29, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test5293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5293");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.MutableDateTime mutableDateTime9 = property6.set(5);
        org.joda.time.MutableDateTime mutableDateTime10 = property6.roundHalfFloor();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale locale19 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale23 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale19, locale20, locale23 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.Locale.FilteringMode filteringMode27 = null;
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList25, filteringMode27);
        boolean boolean29 = charSet13.removeAll((java.util.Collection<java.util.Locale>) localeList28);
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category30, locale31);
        boolean boolean33 = charSet13.contains((java.lang.Object) category30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth36 = new org.joda.time.YearMonth(dateTimeZone35);
        int int37 = yearMonth36.getYear();
        org.joda.time.YearMonth.Property property38 = yearMonth36.year();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        int int40 = mutableDateTime39.getDayOfMonth();
        org.joda.time.Instant instant41 = mutableDateTime39.toInstant();
        boolean boolean43 = mutableDateTime39.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int47 = dateTimeZone45.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime39.setZone(dateTimeZone45);
        int int49 = property38.compareTo((org.joda.time.ReadableInstant) mutableDateTime39);
        int int50 = property38.get();
        java.util.Locale locale51 = java.util.Locale.PRC;
        java.lang.String str52 = locale51.getDisplayScript();
        int int53 = property38.getMaximumShortTextLength(locale51);
        java.util.Locale.setDefault(category30, locale51);
        java.util.Locale locale55 = java.util.Locale.getDefault(category30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime56 = property6.set("PeriodType[YearMonthDayTime]", locale55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PeriodType[YearMonthDayTime]\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale23.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
    }

    @Test
    public void test5294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5294");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Period period7 = period5.withSeconds(0);
        org.joda.time.Period period9 = period7.plusMinutes((int) (byte) 1);
        org.joda.time.Period period11 = period7.plusSeconds(8);
        org.joda.time.Period period13 = period7.withMinutes(58);
        org.joda.time.Period period15 = period13.plusMonths(292278993);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int17 = mutableDateTime16.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableInstant) dateTime21, periodType24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime16.toMutableDateTime();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property29 = localTime28.millisOfDay();
        org.joda.time.LocalTime localTime31 = property29.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime32 = property29.roundHalfFloorCopy();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(chronology33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType37 = periodType36.withWeeksRemoved();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, readableDuration35, periodType36);
        org.joda.time.Period period40 = period38.withSeconds(0);
        org.joda.time.Period period42 = period40.plusMinutes((int) (byte) 1);
        org.joda.time.Period period44 = period40.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period47 = period40.withField(durationFieldType45, 7);
        org.joda.time.LocalTime localTime49 = localTime32.withPeriodAdded((org.joda.time.ReadablePeriod) period40, (int) (short) 1);
        org.joda.time.format.PeriodFormatter periodFormatter50 = null;
        java.lang.String str51 = period40.toString(periodFormatter50);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod55 = mutablePeriod54.copy();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(chronology56);
        org.joda.time.DateMidnight.Property property58 = dateMidnight57.yearOfCentury();
        org.joda.time.Duration duration59 = mutablePeriod55.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight57);
        org.joda.time.Period period60 = period40.withFields((org.joda.time.ReadablePeriod) mutablePeriod55);
        mutablePeriod55.addYears((int) (byte) -1);
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod55, 3);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight66.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight66.plusYears(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight71.withField(dateTimeFieldType72, 0);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight74.withFieldAdded(durationFieldType75, 69);
        boolean boolean78 = mutablePeriod55.isSupported(durationFieldType75);
        org.joda.time.Period period80 = period13.withField(durationFieldType75, 99);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT0S" + "'", str51, "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test5295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5295");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusMinutes(10);
        org.joda.time.Chronology chronology7 = timeOfDay4.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) (short) 10);
        org.joda.time.LocalTime localTime14 = localTime12.withMillisOfDay(4);
        org.joda.time.LocalTime localTime16 = localTime14.plusMillis(429);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20, periodType21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = timeOfDay28.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay28.plusHours((-1));
        org.joda.time.Chronology chronology32 = timeOfDay31.getChronology();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.withChronologyRetainFields(chronology36);
        long long39 = chronology32.set((org.joda.time.ReadablePartial) timeOfDay35, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField40 = chronology32.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight19.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField42 = chronology32.millisOfSecond();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.TimeOfDay timeOfDay45 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay45.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = timeOfDay47.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay47.plusHours((-1));
        org.joda.time.Chronology chronology51 = timeOfDay50.getChronology();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.TimeOfDay timeOfDay54 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay54.withChronologyRetainFields(chronology55);
        long long58 = chronology51.set((org.joda.time.ReadablePartial) timeOfDay54, (long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime();
        int int60 = mutableDateTime59.getDayOfMonth();
        org.joda.time.Instant instant61 = mutableDateTime59.toInstant();
        boolean boolean63 = mutableDateTime59.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int67 = dateTimeZone65.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime59.setZone(dateTimeZone65);
        org.joda.time.DateTime dateTime69 = timeOfDay54.toDateTimeToday(dateTimeZone65);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight(chronology70);
        org.joda.time.DateMidnight.Property property72 = dateMidnight71.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight71.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime75 = timeOfDay54.toDateTime((org.joda.time.ReadableInstant) dateMidnight71);
        java.util.Locale locale77 = java.util.Locale.CANADA;
        java.lang.String str78 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) timeOfDay54, 17, locale77);
        java.util.Set<java.lang.String> strSet79 = locale77.getUnicodeLocaleKeys();
        java.lang.String str80 = locale77.getCountry();
        java.lang.String str81 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localTime16, 0, locale77);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-86399999L) + "'", long39 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-86399999L) + "'", long58 == (-86399999L));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 22 + "'", int60 == 22);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "17" + "'", str78, "17");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "CA" + "'", str80, "CA");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0" + "'", str81, "0");
    }

    @Test
    public void test5296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5296");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.fromCalendarFields(calendar0);
        java.util.Date date4 = new java.util.Date(100L);
        calendar0.setTime(date4);
        date4.setMinutes(12);
        org.joda.time.YearMonth yearMonth8 = org.joda.time.YearMonth.fromDateFields(date4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = yearMonth8.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        int int13 = mutableDateTime12.getDayOfMonth();
        org.joda.time.Instant instant14 = mutableDateTime12.toInstant();
        int int15 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) instant14);
        org.joda.time.Interval interval16 = yearMonth8.toInterval(dateTimeZone11);
        boolean boolean18 = interval16.isAfter(52550279L);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonth2);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:12:00 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonth8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test5297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5297");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        org.joda.time.format.PeriodFormatter periodFormatter4 = null;
        java.lang.String str5 = mutablePeriod3.toString(periodFormatter4);
        mutablePeriod3.setMonths(69);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT0.099S" + "'", str5, "PT0.099S");
    }

    @Test
    public void test5298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5298");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.ReadableInterval readableInterval3 = null;
        mutablePeriod2.add(readableInterval3);
        org.joda.time.format.PeriodFormatter periodFormatter5 = null;
        java.lang.String str6 = mutablePeriod2.toString(periodFormatter5);
        int int8 = mutablePeriod2.getValue(6);
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod2.copy();
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod2.getFieldTypes();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.099S" + "'", str6, "PT0.099S");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
    }

    @Test
    public void test5299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5299");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str2 = yearMonthDay1.toString();
        java.lang.String str3 = yearMonthDay1.toString();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate7 = localDate5.plusWeeks(9);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weeks();
        boolean boolean9 = localDate7.isSupported(durationFieldType8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType14 = periodType13.withWeeksRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, readableDuration12, periodType13);
        org.joda.time.Period period17 = period15.withSeconds(0);
        org.joda.time.LocalDate localDate18 = localDate7.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.Period period21 = period19.multipliedBy((int) (byte) 100);
        org.joda.time.PeriodType periodType22 = period21.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay1.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime24 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = yearMonthDay1.getFieldTypes();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
    }

    @Test
    public void test5300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5300");
        org.joda.time.Period period1 = org.joda.time.Period.hours(65649);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test5301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5301");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(1645513830174L);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours(2387);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.year();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.getMutableDateTime();
        int int13 = property10.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime14 = property10.roundFloor();
        mutableDateTime14.setMinuteOfDay((int) (byte) 0);
        mutableDateTime14.setMinuteOfHour(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime14.property(dateTimeFieldType19);
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localTime3.get(dateTimeFieldType19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 292278993 + "'", int13 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test5302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5302");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str2 = yearMonthDay1.toString();
        java.lang.String str3 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.plusDays(4);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.plusYears(22);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        long long12 = dateTimeZone10.convertUTCToLocal((long) (-1));
        org.joda.time.DateMidnight dateMidnight13 = yearMonthDay5.toDateMidnight(dateTimeZone10);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay5.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay5.withMonthOfYear(11);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test5303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5303");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfYear();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = localDate7.withCenturyOfEra(13);
        org.joda.time.LocalDate.Property property11 = localDate7.monthOfYear();
        org.joda.time.LocalDate localDate12 = property11.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(4, (int) (short) 10, (int) '#', chronology17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.weekOfWeekyear();
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = dateMidnight26.toString("0", locale29);
        boolean boolean31 = locale29.hasExtensions();
        java.lang.String str32 = timeOfDay18.toString("days", locale29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = property11.setCopy("-0001-02-23T07:09:31.675", locale29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-0001-02-23T07:09:31.675\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\ufffd\ufffd\ufffd35" + "'", str32, "\ufffd\ufffd\ufffd35");
    }

    @Test
    public void test5304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5304");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(92041110000L, (long) 4);
        mutablePeriod2.addSeconds(15);
        mutablePeriod2.setMonths((int) (byte) 1);
    }

    @Test
    public void test5305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5305");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusYears((int) ' ');
        org.joda.time.DateTime.Property property3 = dateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2);
        int int5 = localDateTime4.getEra();
        java.util.Date date6 = localDateTime4.toDate();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 22 07:16:44 GMT+00:00 1990");
    }

    @Test
    public void test5306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5306");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        java.lang.Object obj5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(obj5, dateTimeZone6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.secondOfMinute();
        org.joda.time.DateTime dateTime9 = dateTime3.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusMonths(7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusSeconds(14);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYear(1970);
        java.lang.Object obj17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(obj17, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusYears((int) (short) 0);
        int int23 = localDateTime19.getValue(2);
        int int24 = localDateTime19.getHourOfDay();
        org.joda.time.Chronology chronology25 = localDateTime19.getChronology();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight27.plusYears(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.withField(dateTimeFieldType33, 0);
        int int36 = localDateTime19.indexOf(dateTimeFieldType33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime13.property(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test5307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5307");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.MutableDateTime mutableDateTime9 = property6.set(5);
        mutableDateTime9.setWeekyear(10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime16.toMutableDateTime();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withChronologyRetainFields(chronology21);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = timeOfDay22.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay22.plusHours((-1));
        org.joda.time.Chronology chronology26 = timeOfDay25.getChronology();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.withChronologyRetainFields(chronology30);
        long long33 = chronology26.set((org.joda.time.ReadablePartial) timeOfDay29, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(chronology26);
        org.joda.time.DateTime dateTime35 = dateTime16.toDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField36 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField37 = chronology26.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology26.year();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTime dateTime45 = timeOfDay44.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay44.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime48 = timeOfDay47.toDateTimeToday();
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.util.Calendar calendar50 = dateTime48.toCalendar(locale49);
        java.lang.String str51 = dateTimeField38.getAsShortText(1970, locale49);
        mutableDateTime9.setRounding(dateTimeField38);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime9.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime55 = property53.add(32);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-86399999L) + "'", long33 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1645570800001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970" + "'", str51, "1970");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
    }

    @Test
    public void test5308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5308");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1863, 20, 60, 1, 46, 37, 2022, 141);
        mutablePeriod8.setYears(9);
    }

    @Test
    public void test5309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5309");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay7.toDateTimeToday();
        java.util.Locale locale9 = java.util.Locale.ITALY;
        java.util.Calendar calendar10 = dateTime8.toCalendar(locale9);
        calendar10.set(4, 99);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = calendar10.isSet(36000002);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36000002");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=99,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test5310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5310");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        boolean boolean10 = localDateTime8.equals((java.lang.Object) 7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.secondOfMinute();
        int int12 = localDateTime8.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test5311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5311");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        org.joda.time.Instant instant4 = instant2.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        int int6 = mutableDateTime5.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableInstant) dateTime10, periodType13);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod17.copy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfCentury();
        org.joda.time.Duration duration22 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant2, (org.joda.time.ReadableDuration) duration22);
        java.lang.Object obj25 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone28);
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(obj25, dateTimeZone32);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.year();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) mutableDateTime35, periodType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.era();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        int int43 = mutableDateTime42.getDayOfMonth();
        boolean boolean44 = dateMidnight40.isEqual((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType49 = periodType48.withWeeksRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, readableDuration47, periodType48);
        org.joda.time.Period period52 = period50.withSeconds(0);
        org.joda.time.Period period54 = period52.plusMinutes((int) (byte) 1);
        org.joda.time.Period period56 = period52.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period59 = period52.withField(durationFieldType57, 7);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime();
        int int63 = mutableDateTime62.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone66);
        org.joda.time.DateTime dateTime68 = dateTime67.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType70 = periodType69.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime62, (org.joda.time.ReadableInstant) dateTime67, periodType70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(208L, (long) 100, periodType70, chronology72);
        org.joda.time.Period period74 = period52.withPeriodType(periodType70);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateMidnight40, periodType70);
        org.joda.time.PeriodType periodType76 = periodType70.withHoursRemoved();
        java.lang.String str77 = periodType76.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 22 + "'", int63 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PeriodType[YearMonthDayTimeNoHours]" + "'", str77, "PeriodType[YearMonthDayTimeNoHours]");
    }

    @Test
    public void test5312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5312");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType19 = null;
        boolean boolean20 = periodType18.isSupported(durationFieldType19);
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 1, 0L, periodType18);
        int[] intArray24 = chronology8.get((org.joda.time.ReadablePeriod) period21, (long) 2022, (long) ' ');
        org.joda.time.DurationField durationField25 = chronology8.months();
        org.joda.time.DurationField durationField26 = chronology8.hours();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMillis(292278969);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime35.toMutableDateTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.TimeOfDay timeOfDay39 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.withChronologyRetainFields(chronology40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = timeOfDay41.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay41.plusHours((-1));
        org.joda.time.Chronology chronology45 = timeOfDay44.getChronology();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.TimeOfDay timeOfDay48 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.withChronologyRetainFields(chronology49);
        long long52 = chronology45.set((org.joda.time.ReadablePartial) timeOfDay48, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay(chronology45);
        org.joda.time.DateTime dateTime54 = dateTime35.toDateTime(chronology45);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) 100, chronology45);
        mutableDateTime55.addMonths(53);
        org.joda.time.ReadableInstant readableInstant58 = null;
        boolean boolean59 = mutableDateTime55.isAfter(readableInstant58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, readableInstant58);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-86399999L) + "'", long52 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test5313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5313");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        boolean boolean5 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) mutableDateTime4);
        mutableDateTime4.addMillis(146);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test5314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5314");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfMonth();
        boolean boolean5 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateMidnight.Property property6 = dateMidnight1.era();
        org.joda.time.DateMidnight dateMidnight7 = property6.withMaximumValue();
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.era();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withMillis((long) 53);
        java.lang.Object obj11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(obj11, dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod22.copy();
        mutablePeriod18.add((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType29 = periodType28.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight26, readableDuration27, periodType28);
        org.joda.time.Period period32 = period30.withSeconds(0);
        boolean boolean33 = mutablePeriod23.equals((java.lang.Object) period30);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadablePeriod) mutablePeriod23);
        int int35 = mutablePeriod23.size();
        int int36 = mutablePeriod23.getWeeks();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test5315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5315");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime10 = dateTime3.plusWeeks(12);
        int int11 = dateTime10.getDayOfYear();
        boolean boolean12 = dateTime10.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime10.minusSeconds(6);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 85 + "'", int11 == 85);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test5316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5316");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate6 = property4.addToCopy(15);
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfCentury(0);
        org.joda.time.DateMidnight dateMidnight9 = localDate6.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths(65618);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test5317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5317");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType6 = periodType5.withWeeksRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4, periodType5);
        java.lang.Object obj8 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.plusHours((-1));
        org.joda.time.Chronology chronology17 = timeOfDay16.getChronology();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withChronologyRetainFields(chronology21);
        long long24 = chronology17.set((org.joda.time.ReadablePartial) timeOfDay20, (long) (byte) -1);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType28 = null;
        boolean boolean29 = periodType27.isSupported(durationFieldType28);
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 1, 0L, periodType27);
        int[] intArray33 = chronology17.get((org.joda.time.ReadablePeriod) period30, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(obj8, chronology17);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 17, (long) (byte) -1, periodType5, chronology17);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        long long41 = dateTimeZone37.convertLocalToUTC((-1L), false, 10L);
        org.joda.time.Chronology chronology42 = chronology17.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField43 = chronology17.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight44 = org.joda.time.DateMidnight.now(chronology17);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfWeek();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-86399999L) + "'", long24 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test5318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5318");
        java.util.Date date1 = new java.util.Date((long) 6);
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.fromDateFields(date1);
        date1.setMinutes(20);
        date1.setTime((long) 15);
        java.time.Instant instant7 = date1.toInstant();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test5319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5319");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(0L);
    }

    @Test
    public void test5320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5320");
        java.lang.Object obj5 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100, chronology9);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(obj5, chronology9);
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) 999, chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(6, 600, 465, 29, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 600 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test5321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5321");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = localDateTime10.toString(dateTimeFormatter11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusHours((int) (short) 10);
        int[] intArray15 = localDateTime14.getValues();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMillis(32770);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime24 = dateTime22.toLocalDateTime();
        java.lang.Object obj25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(obj25, dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.minus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withWeekyear((-1));
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime24, (org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property38 = localDateTime14.yearOfEra();
        int int39 = localDateTime14.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-0001-02-23T07:16:45.204" + "'", str12, "-0001-02-23T07:16:45.204");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 2, 23, 62205204]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
    }

    @Test
    public void test5322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5322");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withYear((int) 'u');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        int int5 = localDateTime3.getDayOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withMillisOfSecond(18);
        java.lang.String str9 = localDateTime3.toString();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0117-02-22T07:16:45.343" + "'", str9, "0117-02-22T07:16:45.343");
    }

    @Test
    public void test5323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5323");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear(2);
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) instant8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTime dateTime16 = timeOfDay15.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay15.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = timeOfDay18.toDateTimeToday();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        java.lang.String str22 = property10.getAsShortText(locale20);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property25 = localTime24.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.monthOfYear();
        int int28 = property25.compareTo((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.LocalTime localTime30 = property25.setCopy(70);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = property25.getAsText(locale31);
        java.lang.String str33 = locale20.getDisplayLanguage(locale31);
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645570800001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ven" + "'", str22, "ven");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str33, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertNotNull(strSet34);
    }

    @Test
    public void test5324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5324");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = timeOfDay7.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.plusHours((-1));
        org.joda.time.Chronology chronology11 = timeOfDay10.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        long long18 = chronology11.set((org.joda.time.ReadablePartial) timeOfDay14, (long) (byte) -1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType22 = null;
        boolean boolean23 = periodType21.isSupported(durationFieldType22);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 1, 0L, periodType21);
        int[] intArray27 = chronology11.get((org.joda.time.ReadablePeriod) period24, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(obj2, chronology11);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, 0, chronology11);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.hourOfDay();
        java.util.Locale locale32 = null;
        org.joda.time.TimeOfDay timeOfDay33 = property30.setCopy("22", locale32);
        org.joda.time.TimeOfDay timeOfDay35 = property30.addToCopy(11);
        org.joda.time.TimeOfDay timeOfDay37 = property30.addToCopy(2);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone41);
        org.joda.time.DateTime dateTime43 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime43.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.year();
        org.joda.time.Chronology chronology46 = mutableDateTime44.getChronology();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 17, chronology46);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay37.withChronologyRetainFields(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.clockhourOfDay();
        java.lang.String str50 = dateTimeField49.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.TimeOfDay timeOfDay53 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTime dateTime56 = timeOfDay55.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay55.minusHours((int) (byte) 1);
        org.joda.time.LocalTime localTime59 = timeOfDay58.toLocalTime();
        org.joda.time.TimeOfDay.Property property60 = timeOfDay58.secondOfMinute();
        java.lang.String str61 = property60.getName();
        org.joda.time.DateTimeField dateTimeField62 = property60.getField();
        org.joda.time.TimeOfDay timeOfDay63 = property60.getTimeOfDay();
        java.util.Locale locale66 = new java.util.Locale("-0001-02-23T07:10:28.357");
        java.lang.String str67 = locale66.getISO3Country();
        java.lang.String str68 = dateTimeField49.getAsText((org.joda.time.ReadablePartial) timeOfDay63, 65618, locale66);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-86399999L) + "'", long18 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DateTimeField[clockhourOfDay]" + "'", str50, "DateTimeField[clockhourOfDay]");
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "secondOfMinute" + "'", str61, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertEquals(locale66.toString(), "-0001-02-23t07:10:28.357");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "65618" + "'", str68, "65618");
    }

    @Test
    public void test5325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5325");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        int int2 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Instant instant3 = mutableDateTime1.toInstant();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone4);
        boolean boolean6 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        java.lang.Object obj12 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = timeOfDay17.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours((-1));
        org.joda.time.Chronology chronology21 = timeOfDay20.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.withChronologyRetainFields(chronology25);
        long long28 = chronology21.set((org.joda.time.ReadablePartial) timeOfDay24, (long) (byte) -1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType32 = null;
        boolean boolean33 = periodType31.isSupported(durationFieldType32);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 1, 0L, periodType31);
        int[] intArray37 = chronology21.get((org.joda.time.ReadablePeriod) period34, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(obj12, chronology21);
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(0, 0, chronology21);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(43L, periodType9, chronology21);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        int int44 = mutableDateTime43.getDayOfMonth();
        org.joda.time.Instant instant45 = mutableDateTime43.toInstant();
        int int46 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) instant45);
        long long47 = instant45.getMillis();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod40, (org.joda.time.ReadableInstant) instant45);
        int int49 = mutablePeriod40.getMillis();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        int int51 = mutableDateTime50.getDayOfMonth();
        org.joda.time.Instant instant52 = mutableDateTime50.toInstant();
        org.joda.time.MutableDateTime mutableDateTime53 = instant52.toMutableDateTime();
        org.joda.time.Instant instant56 = instant52.withDurationAdded(43L, (-1));
        org.joda.time.Instant instant59 = instant56.withDurationAdded(1L, (int) 'a');
        org.joda.time.Instant instant61 = instant56.withMillis((long) 6);
        org.joda.time.Duration duration62 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) instant56);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration62);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) '#', periodType65, chronology66);
        org.joda.time.Period period68 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration62, periodType65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period70 = period68.withYears(2387);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-86399999L) + "'", long28 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645514205456L + "'", long47 == 1645514205456L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 43 + "'", int49 == 43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(periodType65);
    }

    @Test
    public void test5326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5326");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = property6.addWrapField(69);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test5327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5327");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.yearOfCentury();
        org.joda.time.Duration duration7 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateMidnight5.toString(dateTimeFormatter8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight5.monthOfYear();
        org.joda.time.DateMidnight dateMidnight11 = property10.withMinimumValue();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(4, (int) (short) 10, (int) '#', chronology16);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.minusHours(17);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay17.secondOfMinute();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale28 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale28, locale29, locale32 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale.FilteringMode filteringMode36 = null;
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList34, filteringMode36);
        boolean boolean38 = charSet22.removeAll((java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category39, locale40);
        boolean boolean42 = charSet22.contains((java.lang.Object) category39);
        java.util.Locale locale43 = java.util.Locale.getDefault(category39);
        int int44 = property20.getMaximumTextLength(locale43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight45 = property10.setCopy("weekyear", locale43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"weekyear\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str9, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale32.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.FORMAT + "'", category39.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
// flaky:         org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
    }

    @Test
    public void test5328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5328");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6, periodType7);
        java.lang.Object obj10 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withChronologyRetainFields(chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = timeOfDay15.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay15.plusHours((-1));
        org.joda.time.Chronology chronology19 = timeOfDay18.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.withChronologyRetainFields(chronology23);
        long long26 = chronology19.set((org.joda.time.ReadablePartial) timeOfDay22, (long) (byte) -1);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType30 = null;
        boolean boolean31 = periodType29.isSupported(durationFieldType30);
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 1, 0L, periodType29);
        int[] intArray35 = chronology19.get((org.joda.time.ReadablePeriod) period32, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(obj10, chronology19);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 17, (long) (byte) -1, periodType7, chronology19);
        org.joda.time.DateTimeField dateTimeField38 = chronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology19.clockhourOfDay();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField41 = chronology19.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonth yearMonth42 = new org.joda.time.YearMonth(65618, 37, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-86399999L) + "'", long26 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test5329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5329");
        java.lang.Object obj0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(obj0);
    }

    @Test
    public void test5330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5330");
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str10 = yearMonthDay9.toString();
        java.lang.String str11 = yearMonthDay9.toString();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate15 = localDate13.plusWeeks(9);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.weeks();
        boolean boolean17 = localDate15.isSupported(durationFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20, periodType21);
        org.joda.time.Period period25 = period23.withSeconds(0);
        org.joda.time.LocalDate localDate26 = localDate15.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period27 = period23.toPeriod();
        org.joda.time.Period period29 = period27.multipliedBy((int) (byte) 100);
        org.joda.time.PeriodType periodType30 = period29.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay9.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withYear(0);
        org.joda.time.Period period35 = new org.joda.time.Period((long) 'x');
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay31.withPeriodAdded((org.joda.time.ReadablePeriod) period35, 1970);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period39 = period35.normalizedStandard(periodType38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((-10), 285, 68, 100, 2922789, 991, 69019, 105249, periodType38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01" + "'", str10, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test5331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5331");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int11 = dateTimeZone9.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        long long13 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime12.copy();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17, periodType18);
        org.joda.time.Period period22 = period20.withSeconds(0);
        org.joda.time.Period period24 = period22.plusMinutes((int) (byte) 1);
        org.joda.time.Period period26 = period22.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period29 = period22.withField(durationFieldType27, 7);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        int int33 = mutableDateTime32.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType40 = periodType39.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime32, (org.joda.time.ReadableInstant) dateTime37, periodType40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(208L, (long) 100, periodType40, chronology42);
        org.joda.time.Period period44 = period22.withPeriodType(periodType40);
        org.joda.time.Duration duration45 = period22.toStandardDuration();
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableDuration) duration45, periodType46);
        mutableDateTime14.addMillis(31);
        org.joda.time.ReadableInstant readableInstant50 = null;
        mutableDateTime14.setTime(readableInstant50);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-52L) + "'", long13 == (-52L));
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(periodType46);
    }

    @Test
    public void test5332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5332");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTime dateTime23 = dateTime4.toDateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology14.days();
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(chronology14);
        org.joda.time.DurationField durationField28 = chronology14.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test5333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5333");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime7.withTimeAtStartOfDay();
        boolean boolean9 = interval2.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutableInterval mutableInterval10 = interval2.toMutableInterval();
        org.joda.time.Chronology chronology11 = mutableInterval10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.years();
        long long14 = durationField12.getValueAsLong(1800000L);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str3, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test5334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5334");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Period period7 = period5.withSeconds(0);
        int int8 = period7.getDays();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        int int10 = mutableDateTime9.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        mutableDateTime9.add(durationFieldType11, (int) (short) 100);
        int int14 = period7.get(durationFieldType11);
        org.joda.time.Minutes minutes15 = period7.toStandardMinutes();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(minutes15);
    }

    @Test
    public void test5335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5335");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime5.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 17, chronology8);
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((java.lang.Object) chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test5336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5336");
        java.lang.Object obj4 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withChronologyRetainFields(chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = timeOfDay9.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay9.plusHours((-1));
        org.joda.time.Chronology chronology13 = timeOfDay12.getChronology();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.withChronologyRetainFields(chronology17);
        long long20 = chronology13.set((org.joda.time.ReadablePartial) timeOfDay16, (long) (byte) -1);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType24 = null;
        boolean boolean25 = periodType23.isSupported(durationFieldType24);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 1, 0L, periodType23);
        int[] intArray29 = chronology13.get((org.joda.time.ReadablePeriod) period26, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(obj4, chronology13);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, 0, chronology13);
        org.joda.time.DurationField durationField32 = chronology13.halfdays();
        org.joda.time.DurationField durationField33 = chronology13.minutes();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(215L, 15778476000000000L, chronology13);
        boolean boolean35 = interval34.containsNow();
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-86399999L) + "'", long20 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test5337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5337");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        int int11 = mutableDateTime10.getDayOfMonth();
        org.joda.time.Instant instant12 = mutableDateTime10.toInstant();
        boolean boolean14 = mutableDateTime10.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int18 = dateTimeZone16.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime10.setZone(dateTimeZone16);
        long long21 = dateTimeZone16.previousTransition((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime0.toMutableDateTime(dateTimeZone16);
        mutableDateTime22.setMillisOfSecond(11);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.ReadableInterval readableInterval28 = null;
        mutablePeriod27.add(readableInterval28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.Duration duration35 = mutablePeriod27.toDurationTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateTime dateTime40 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime40.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.year();
        org.joda.time.Chronology chronology43 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateTime dateTime48 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime48.toMutableDateTime();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.TimeOfDay timeOfDay52 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = timeOfDay54.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay54.plusHours((-1));
        org.joda.time.Chronology chronology58 = timeOfDay57.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.TimeOfDay timeOfDay61 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay61.withChronologyRetainFields(chronology62);
        long long65 = chronology58.set((org.joda.time.ReadablePartial) timeOfDay61, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay66 = new org.joda.time.TimeOfDay(chronology58);
        org.joda.time.DateTime dateTime67 = dateTime48.toDateTime(chronology58);
        mutableDateTime41.setMillis((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) mutableDateTime41, periodType69);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType72 = periodType71.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableInstant) mutableDateTime41, periodType71);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int77 = dateTimeZone75.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime78 = org.joda.time.MutableDateTime.now(dateTimeZone75);
        org.joda.time.MutableDateTime mutableDateTime79 = mutableDateTime22.toMutableDateTime(dateTimeZone75);
        int int80 = mutableDateTime79.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime81 = mutableDateTime79.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone82 = mutableDateTime81.getZone();
        long long85 = dateTimeZone82.adjustOffset((long) 802, true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-86399999L) + "'", long65 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 22 + "'", int80 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 802L + "'", long85 == 802L);
    }

    @Test
    public void test5338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5338");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime8 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear(2);
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        org.joda.time.Instant instant13 = instant11.withMillis((long) 5);
        org.joda.time.MutableDateTime mutableDateTime14 = instant13.toMutableDateTimeISO();
        org.joda.time.Instant instant17 = instant13.withDurationAdded((long) (-292275054), 32);
        long long18 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) instant13);
        org.joda.time.DateMidnight dateMidnight19 = property2.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField20 = property2.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 19044L + "'", long18 == 19044L);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test5339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5339");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        int int5 = dateTime4.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime4.toDateTime(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(obj0, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.hourOfDay();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.era();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int16 = mutableDateTime15.getDayOfMonth();
        boolean boolean17 = dateMidnight13.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateMidnight.Property property18 = dateMidnight13.era();
        org.joda.time.DateMidnight dateMidnight19 = property18.withMaximumValue();
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.era();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withMillis((long) 53);
        java.lang.Object obj23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj23, dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.minus((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod34.copy();
        mutablePeriod30.add((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType41 = periodType40.withWeeksRemoved();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight38, readableDuration39, periodType40);
        org.joda.time.Period period44 = period42.withSeconds(0);
        boolean boolean45 = mutablePeriod35.equals((java.lang.Object) period42);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight22, (org.joda.time.ReadablePeriod) mutablePeriod35);
        mutableDateTime10.add((org.joda.time.ReadablePeriod) mutablePeriod35);
        mutablePeriod35.addSeconds(71);
        mutablePeriod35.add((-12), 99, 146, 59052, 0, 1070, 65618, 25);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test5340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5340");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 46);
    }

    @Test
    public void test5341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5341");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str2 = yearMonthDay1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) -1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears(1);
        org.joda.time.LocalDate.Property property8 = localDate5.year();
        org.joda.time.LocalDate.Property property9 = localDate5.dayOfYear();
        int int10 = localDate5.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int12 = localDate5.get(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay1.withField(dateTimeFieldType11, 2);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType19 = periodType18.withWeeksRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, readableDuration17, periodType18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period24 = period22.plusHours((int) (short) 10);
        org.joda.time.Period period25 = period20.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay1.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType30 = null;
        boolean boolean31 = periodType29.isSupported(durationFieldType30);
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 1, 0L, periodType29);
        java.lang.String str33 = period32.toString();
        org.joda.time.Period period35 = period32.minusMonths(9);
        org.joda.time.Period period37 = period35.plusMinutes((int) (byte) 0);
        org.joda.time.Period period39 = period35.withDays(8);
        org.joda.time.Period period41 = period39.withSeconds(32);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay1.withPeriodAdded((org.joda.time.ReadablePeriod) period39, (int) (byte) 1);
        int int44 = yearMonthDay43.getMonthOfYear();
        int int45 = yearMonthDay43.size();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.001S" + "'", str33, "PT0.001S");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
    }

    @Test
    public void test5342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5342");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.getMutableDateTime();
        int int9 = property6.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime10 = property6.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property6.roundFloor();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int16 = dateTimeZone14.getOffset(0L);
        long long19 = dateTimeZone14.convertLocalToUTC((long) (short) 0, true);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime11, dateTimeZone14);
        int int21 = mutableDateTime11.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test5343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5343");
        java.lang.Object obj2 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withChronologyRetainFields(chronology6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = timeOfDay7.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.plusHours((-1));
        org.joda.time.Chronology chronology11 = timeOfDay10.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        long long18 = chronology11.set((org.joda.time.ReadablePartial) timeOfDay14, (long) (byte) -1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType22 = null;
        boolean boolean23 = periodType21.isSupported(durationFieldType22);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 1, 0L, periodType21);
        int[] intArray27 = chronology11.get((org.joda.time.ReadablePeriod) period24, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(obj2, chronology11);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, 0, chronology11);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay29.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay31 = property30.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay32 = property30.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay34 = property30.addToCopy(65618);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("PT0.001S");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay38 = property30.setCopy("-0001-02-23T07:10:09.080", locale37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-0001-02-23T07:10:09.080\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-86399999L) + "'", long18 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
    }

    @Test
    public void test5344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5344");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth(dateTimeZone1);
        int int3 = yearMonth2.getYear();
        org.joda.time.YearMonth.Property property4 = yearMonth2.year();
        org.joda.time.YearMonth.Property property5 = yearMonth2.monthOfYear();
        int int6 = property5.getMinimumValue();
        int int7 = property5.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test5345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5345");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime9 = property6.getMutableDateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.minusYears((int) ' ');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = timeOfDay17.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours((-1));
        org.joda.time.Chronology chronology21 = timeOfDay20.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.withChronologyRetainFields(chronology25);
        long long28 = chronology21.set((org.joda.time.ReadablePartial) timeOfDay24, (long) (byte) -1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType32 = null;
        boolean boolean33 = periodType31.isSupported(durationFieldType32);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 1, 0L, periodType31);
        int[] intArray37 = chronology21.get((org.joda.time.ReadablePeriod) period34, (long) 2022, (long) ' ');
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, chronology21);
        mutableDateTime9.setChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField40 = chronology21.millisOfDay();
        org.joda.time.DurationField durationField41 = chronology21.weeks();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-86399999L) + "'", long28 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
    }

    @Test
    public void test5346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5346");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str2 = yearMonthDay1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) -1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears(1);
        org.joda.time.LocalDate.Property property8 = localDate5.year();
        org.joda.time.LocalDate.Property property9 = localDate5.dayOfYear();
        int int10 = localDate5.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int12 = localDate5.get(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay1.withField(dateTimeFieldType11, 2);
        org.joda.time.LocalDate localDate15 = yearMonthDay1.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay1.withDayOfMonth(59052);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59052 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test5347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5347");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.monthOfYear();
        int int5 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.LocalTime localTime7 = property2.setCopy(70);
        org.joda.time.LocalTime localTime9 = localTime7.minusHours(100);
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(chronology10);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test5348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5348");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, readableDuration6, periodType7);
        org.joda.time.Period period11 = period9.withSeconds(0);
        org.joda.time.Period period13 = period11.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period11, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.withWeekyear(13);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis(71);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime23.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime24.toMutableDateTime();
        org.joda.time.DateTime dateTime27 = dateTime24.minusYears(100);
        org.joda.time.DateTime.Property property28 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime29 = property28.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths(93);
        boolean boolean32 = localDateTime17.equals((java.lang.Object) 93);
        int int33 = localDateTime17.getHourOfDay();
        org.joda.time.LocalDateTime.Property property34 = localDateTime17.year();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 7 + "'", int33 == 7);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test5349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5349");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate7 = localDate2.minusDays(7);
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks(429);
        org.joda.time.LocalDate localDate11 = localDate7.plusWeeks(8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime16.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.year();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.getMutableDateTime();
        int int21 = property18.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime22 = property18.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime23 = property18.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forID("UTC");
        mutableDateTime23.setZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate7.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.LocalDate.Property property28 = localDate7.centuryOfEra();
        org.joda.time.LocalDate.Property property29 = localDate7.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 292278993 + "'", int21 == 292278993);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test5350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5350");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusYears((int) ' ');
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfMonth();
        org.joda.time.Instant instant5 = mutableDateTime3.toInstant();
        org.joda.time.MutableDateTime mutableDateTime6 = instant5.toMutableDateTime();
        boolean boolean7 = dateTime0.isEqual((org.joda.time.ReadableInstant) instant5);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.standard();
        java.lang.String str12 = periodType11.getName();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime17.toMutableDateTime();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = timeOfDay23.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay23.plusHours((-1));
        org.joda.time.Chronology chronology27 = timeOfDay26.getChronology();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.TimeOfDay timeOfDay30 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.withChronologyRetainFields(chronology31);
        long long34 = chronology27.set((org.joda.time.ReadablePartial) timeOfDay30, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(chronology27);
        org.joda.time.DateTime dateTime36 = dateTime17.toDateTime(chronology27);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'x', periodType11, chronology27);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.TimeOfDay timeOfDay40 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay40.withChronologyRetainFields(chronology41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType49 = periodType48.withWeeksRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, readableDuration47, periodType48);
        java.lang.Object obj51 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.TimeOfDay timeOfDay54 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay54.withChronologyRetainFields(chronology55);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = timeOfDay56.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay56.plusHours((-1));
        org.joda.time.Chronology chronology60 = timeOfDay59.getChronology();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.TimeOfDay timeOfDay63 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay63.withChronologyRetainFields(chronology64);
        long long67 = chronology60.set((org.joda.time.ReadablePartial) timeOfDay63, (long) (byte) -1);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType71 = null;
        boolean boolean72 = periodType70.isSupported(durationFieldType71);
        org.joda.time.Period period73 = new org.joda.time.Period((long) (byte) 1, 0L, periodType70);
        int[] intArray76 = chronology60.get((org.joda.time.ReadablePeriod) period73, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime(obj51, chronology60);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) 17, (long) (byte) -1, periodType48, chronology60);
        org.joda.time.DateTimeField dateTimeField79 = chronology60.monthOfYear();
        org.joda.time.DateTimeField dateTimeField80 = chronology60.clockhourOfDay();
        org.joda.time.LocalTime localTime81 = org.joda.time.LocalTime.now(chronology60);
        org.joda.time.DurationField durationField82 = chronology60.eras();
        org.joda.time.TimeOfDay timeOfDay83 = timeOfDay42.withChronologyRetainFields(chronology60);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) 32, periodType11, chronology60);
        org.joda.time.Period period85 = new org.joda.time.Period(2177884800000L, chronology60);
        org.joda.time.Duration duration86 = period85.toStandardDuration();
        org.joda.time.Instant instant87 = instant5.plus((org.joda.time.ReadableDuration) duration86);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Standard" + "'", str12, "Standard");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-86399999L) + "'", long34 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-86399999L) + "'", long67 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(timeOfDay83);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(instant87);
    }

    @Test
    public void test5351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5351");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-22T07:14:41.116");
    }

    @Test
    public void test5352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5352");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone3);
        boolean boolean5 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType8 = periodType7.withSecondsRemoved();
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.plusHours((-1));
        org.joda.time.Chronology chronology20 = timeOfDay19.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withChronologyRetainFields(chronology24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) timeOfDay23, (long) (byte) -1);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType31 = null;
        boolean boolean32 = periodType30.isSupported(durationFieldType31);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 1, 0L, periodType30);
        int[] intArray36 = chronology20.get((org.joda.time.ReadablePeriod) period33, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(obj11, chronology20);
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, 0, chronology20);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(43L, periodType8, chronology20);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        int int43 = mutableDateTime42.getDayOfMonth();
        org.joda.time.Instant instant44 = mutableDateTime42.toInstant();
        int int45 = dateTimeZone41.getOffset((org.joda.time.ReadableInstant) instant44);
        long long46 = instant44.getMillis();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod39, (org.joda.time.ReadableInstant) instant44);
        int int48 = mutablePeriod39.getMillis();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        int int50 = mutableDateTime49.getDayOfMonth();
        org.joda.time.Instant instant51 = mutableDateTime49.toInstant();
        org.joda.time.MutableDateTime mutableDateTime52 = instant51.toMutableDateTime();
        org.joda.time.Instant instant55 = instant51.withDurationAdded(43L, (-1));
        org.joda.time.Instant instant58 = instant55.withDurationAdded(1L, (int) 'a');
        org.joda.time.Instant instant60 = instant55.withMillis((long) 6);
        org.joda.time.Duration duration61 = mutablePeriod39.toDurationFrom((org.joda.time.ReadableInstant) instant55);
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateTime dateTime63 = mutableDateTime4.toDateTime();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-86399999L) + "'", long27 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645514209263L + "'", long46 == 1645514209263L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 43 + "'", int48 == 43);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test5353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5353");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property3.addToCopy(9);
        long long8 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime9 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusSeconds(17);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusHours((int) 'x');
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(86399);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        int int18 = mutableDateTime17.getDayOfMonth();
        org.joda.time.Instant instant19 = mutableDateTime17.toInstant();
        boolean boolean21 = mutableDateTime17.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int25 = dateTimeZone23.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime17.setZone(dateTimeZone23);
        mutableDateTime17.addWeeks(53);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight30.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.plusYears(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.withField(dateTimeFieldType36, 0);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.withFieldAdded(durationFieldType39, 69);
        mutableDateTime17.add(durationFieldType39, (-1));
        org.joda.time.LocalDateTime localDateTime45 = localDateTime16.withFieldAdded(durationFieldType39, (-31878));
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 309L + "'", long4 == 309L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 309L + "'", long8 == 309L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test5354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5354");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = periodType2.isSupported(durationFieldType3);
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 1, 0L, periodType2);
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period8 = period6.minusDays(93);
        int int9 = period8.getMillis();
        int int10 = period8.getWeeks();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test5355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5355");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime5.toMutableDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.withChronologyRetainFields(chronology10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = timeOfDay11.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay11.plusHours((-1));
        org.joda.time.Chronology chronology15 = timeOfDay14.getChronology();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.withChronologyRetainFields(chronology19);
        long long22 = chronology15.set((org.joda.time.ReadablePartial) timeOfDay18, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(chronology15);
        org.joda.time.DateTime dateTime24 = dateTime5.toDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone27);
        org.joda.time.Chronology chronology29 = chronology15.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField30 = chronology15.minutes();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay((-27081641880000L), chronology15);
        org.joda.time.DateTimeField dateTimeField32 = chronology15.yearOfCentury();
        long long35 = dateTimeField32.set(1645514168869L, 32);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-86399999L) + "'", long22 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1961046968869L + "'", long35 == 1961046968869L);
    }

    @Test
    public void test5356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5356");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate7 = localDate2.minusDays(7);
        org.joda.time.LocalDate localDate9 = localDate2.minusDays(2);
        org.joda.time.LocalDate localDate11 = localDate2.plusDays(32769);
        org.joda.time.LocalDate localDate13 = localDate11.plusYears(22);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.ReadableInterval readableInterval17 = null;
        mutablePeriod16.add(readableInterval17);
        mutablePeriod16.addHours(31);
        int int21 = mutablePeriod16.getDays();
        mutablePeriod16.setPeriod((long) (short) 10);
        org.joda.time.LocalDate localDate25 = localDate13.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod16, 12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate27 = localDate25.withDayOfYear(2004);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2004 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test5357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5357");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTimeFormatter5.getZone();
        java.lang.Integer int7 = dateTimeFormatter5.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.year();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime13.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime23 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfYear(2);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime23, readableInstant26);
        boolean boolean28 = mutableDateTime17.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) 'u');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.withCenturyOfEra((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod40.copy();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(chronology42);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.yearOfCentury();
        org.joda.time.Duration duration45 = mutablePeriod41.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod49 = mutablePeriod48.copy();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology50);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.yearOfCentury();
        org.joda.time.Duration duration53 = mutablePeriod49.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight51);
        boolean boolean54 = duration45.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration55 = duration53.toDuration();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration57 = duration53.toDuration();
        org.joda.time.Instant instant58 = instant30.plus((org.joda.time.ReadableDuration) duration53);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = dateTimeFormatter5.print((org.joda.time.ReadableInstant) mutableDateTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(instant58);
    }

    @Test
    public void test5358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5358");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((-1));
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 1);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekOfWeekyear(32);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMonths((-4));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test5359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5359");
        java.util.Date date1 = new java.util.Date(100L);
        int int2 = date1.getSeconds();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test5360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5360");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withCenturyOfEra((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod9.copy();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.yearOfCentury();
        org.joda.time.Duration duration14 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod17.copy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfCentury();
        org.joda.time.Duration duration22 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        boolean boolean23 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration24 = duration22.toDuration();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight6, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateMidnight.Property property26 = dateMidnight6.weekOfWeekyear();
        int int27 = dateMidnight6.getDayOfMonth();
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str29 = locale28.getDisplayLanguage();
        java.lang.String str31 = locale28.getUnicodeLocaleType("22");
        java.util.Calendar calendar32 = dateMidnight6.toCalendar(locale28);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale28);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e2d\u6587" + "'", str29, "\u4e2d\u6587");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=-61469971200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=22,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=37,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645514209493,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"-0001-02-23T07:10:53.393\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=49,MILLISECOND=493,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test5361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5361");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = timeOfDay5.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.plusHours((-1));
        org.joda.time.Chronology chronology9 = timeOfDay8.getChronology();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withChronologyRetainFields(chronology13);
        long long16 = chronology9.set((org.joda.time.ReadablePartial) timeOfDay12, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(chronology9);
        org.joda.time.Chronology chronology18 = chronology9.withUTC();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(252L, chronology9);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.plusYears(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withField(dateTimeFieldType27, 0);
        int int30 = mutableDateTime19.get(dateTimeFieldType27);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime19.yearOfEra();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-86399999L) + "'", long16 == (-86399999L));
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test5362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5362");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0, 91, (-1), 157, 69019, (int) (short) 1, 32, 13);
        org.joda.time.PeriodType periodType9 = mutablePeriod8.getPeriodType();
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test5363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5363");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.standard();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTime();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = timeOfDay13.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.plusHours((-1));
        org.joda.time.Chronology chronology17 = timeOfDay16.getChronology();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withChronologyRetainFields(chronology21);
        long long24 = chronology17.set((org.joda.time.ReadablePartial) timeOfDay20, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(chronology17);
        org.joda.time.DateTime dateTime26 = dateTime7.toDateTime(chronology17);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 'x', periodType1, chronology17);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) '#', periodType32, chronology33);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime28, readableDuration30, periodType32);
        mutableDateTime28.setMillis(1123200000L);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Standard" + "'", str2, "Standard");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-86399999L) + "'", long24 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(periodType32);
    }

    @Test
    public void test5364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5364");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfYear((int) '#');
        int int9 = localDateTime8.getHourOfDay();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        int int12 = localDateTime11.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 999 + "'", int12 == 999);
    }

    @Test
    public void test5365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5365");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        int int1 = timeOfDay0.getMillisOfSecond();
        int int2 = timeOfDay0.getHourOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 633 + "'", int1 == 633);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 7 + "'", int2 == 7);
    }

    @Test
    public void test5366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5366");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfMonth();
        boolean boolean5 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateMidnight.Property property6 = dateMidnight1.era();
        org.joda.time.DateMidnight dateMidnight7 = property6.withMaximumValue();
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.era();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withMillis((long) 53);
        java.lang.Object obj11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(obj11, dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod22.copy();
        mutablePeriod18.add((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType29 = periodType28.withWeeksRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight26, readableDuration27, periodType28);
        org.joda.time.Period period32 = period30.withSeconds(0);
        boolean boolean33 = mutablePeriod23.equals((java.lang.Object) period30);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadablePeriod) mutablePeriod23);
        int int35 = mutablePeriod23.size();
        org.joda.time.PeriodType periodType36 = mutablePeriod23.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod23.copy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(mutablePeriod37);
    }

    @Test
    public void test5367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5367");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withDayOfYear((int) '#');
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withCenturyOfEra((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod15.copy();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfCentury();
        org.joda.time.Duration duration20 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod24 = mutablePeriod23.copy();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(chronology25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.yearOfCentury();
        org.joda.time.Duration duration28 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        boolean boolean29 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration30 = duration28.toDuration();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight12, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateMidnight.Property property32 = dateMidnight12.weekOfWeekyear();
        int int33 = property5.compareTo((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.DateMidnight dateMidnight34 = property5.withMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateMidnight34);
    }

    @Test
    public void test5368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5368");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        calendar0.setFirstDayOfWeek((int) (byte) 0);
        calendar0.setTimeInMillis((long) (short) 100);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType11 = periodType10.withWeeksRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight8, readableDuration9, periodType10);
        org.joda.time.Period period14 = period12.withSeconds(0);
        org.joda.time.Period period16 = period14.plusMinutes((int) (byte) 1);
        org.joda.time.Period period18 = period14.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period21 = period14.withField(durationFieldType19, 7);
        org.joda.time.Period period23 = period14.minusDays(0);
        org.joda.time.Period period25 = period23.minusSeconds(99);
        org.joda.time.Period period27 = period25.withDays(93);
        org.joda.time.Period period29 = period25.minusSeconds(6000000);
        org.joda.time.LocalTime localTime30 = localTime6.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period32 = period25.minusYears(60);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"-0001-02-23T07:10:53.393\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test5369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5369");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        mutableDateTime0.addWeeks(53);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setMinuteOfHour(1095);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1095 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test5370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5370");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        int int6 = localDate2.getYearOfEra();
        org.joda.time.LocalDate localDate8 = localDate2.minusMonths(70);
        org.joda.time.LocalDate.Property property9 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval12 = localDate11.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = interval12.toMutableInterval();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        boolean boolean17 = interval12.isBefore((org.joda.time.ReadableInterval) interval16);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        int int19 = mutableDateTime18.getDayOfMonth();
        org.joda.time.Instant instant20 = mutableDateTime18.toInstant();
        org.joda.time.Instant instant22 = instant20.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        int int24 = mutableDateTime23.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType31 = periodType30.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableInstant) dateTime28, periodType31);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod36 = mutablePeriod35.copy();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.yearOfCentury();
        org.joda.time.Duration duration40 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight38);
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant20, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.Interval interval43 = interval16.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        org.joda.time.ReadableInterval readableInterval44 = null;
        boolean boolean45 = interval43.isAfter(readableInterval44);
        org.joda.time.DateTime dateTime46 = interval43.getStart();
        int int47 = property9.getDifference((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DurationField durationField48 = property9.getDurationField();
        long long51 = durationField48.getMillis(27, 5460000L);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 85203792000000L + "'", long51 == 85203792000000L);
    }

    @Test
    public void test5371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5371");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((-785), 36000002, (int) (byte) 100, (int) (short) 100, 6000000, (int) 'u', 2387);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5372");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        long long5 = dateTimeField3.remainder(924L);
        org.joda.time.DurationField durationField6 = dateTimeField3.getLeapDurationField();
        long long9 = dateTimeField3.addWrapField((-1000L), (int) (byte) 100);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-900L) + "'", long9 == (-900L));
    }

    @Test
    public void test5373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5373");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8, periodType9);
        org.joda.time.Period period13 = period11.withSeconds(0);
        org.joda.time.Period period15 = period13.plusMinutes((int) (byte) 1);
        org.joda.time.Period period17 = period13.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period20 = period13.withField(durationFieldType18, 7);
        org.joda.time.LocalTime localTime22 = localTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period13, (int) (short) 1);
        org.joda.time.Period period24 = period13.withMillis((int) (short) -1);
        java.lang.String str25 = period24.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, readableDuration28, periodType29);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = timeOfDay36.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay36.plusHours((-1));
        org.joda.time.Chronology chronology40 = timeOfDay39.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.TimeOfDay timeOfDay43 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.withChronologyRetainFields(chronology44);
        long long47 = chronology40.set((org.joda.time.ReadablePartial) timeOfDay43, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField48 = chronology40.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight27.withChronology(chronology40);
        org.joda.time.DateMidnight.Property property50 = dateMidnight27.weekOfWeekyear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.TimeOfDay timeOfDay53 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.withChronologyRetainFields(chronology54);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray56 = timeOfDay55.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay55.plusHours((-1));
        org.joda.time.Chronology chronology59 = timeOfDay58.getChronology();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.TimeOfDay timeOfDay62 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay62.withChronologyRetainFields(chronology63);
        long long66 = chronology59.set((org.joda.time.ReadablePartial) timeOfDay62, (long) (byte) -1);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType70 = null;
        boolean boolean71 = periodType69.isSupported(durationFieldType70);
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 1, 0L, periodType69);
        int[] intArray75 = chronology59.get((org.joda.time.ReadablePeriod) period72, (long) 2022, (long) ' ');
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight27.plus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.Period period78 = period72.minusYears(292278993);
        org.joda.time.Period period79 = period24.withFields((org.joda.time.ReadablePeriod) period72);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(chronology80);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType84 = periodType83.withWeeksRemoved();
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight81, readableDuration82, periodType83);
        org.joda.time.Period period87 = period85.withSeconds(0);
        int int88 = period87.getDays();
        org.joda.time.MutableDateTime mutableDateTime89 = new org.joda.time.MutableDateTime();
        int int90 = mutableDateTime89.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType91 = org.joda.time.DurationFieldType.hours();
        mutableDateTime89.add(durationFieldType91, (int) (short) 100);
        int int94 = period87.get(durationFieldType91);
        org.joda.time.Period period96 = period72.withField(durationFieldType91, 69);
        org.joda.time.Period period98 = period96.minusMonths(2022);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0.001S" + "'", str25, "PT0.001S");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-86399999L) + "'", long47 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray56);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-86399999L) + "'", long66 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 22 + "'", int90 == 22);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test5374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5374");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone0);
        calendar2.setLenient(false);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514209998,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"-0001-02-23T07:10:53.393\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=49,MILLISECOND=998,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test5375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5375");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.plusYears(1969);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withDayOfYear(54);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withMonthOfYear(10);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((-52L));
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test5376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5376");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval6 = localDate5.toInterval();
        boolean boolean7 = interval2.isBefore((org.joda.time.ReadableInterval) interval6);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        int int9 = mutableDateTime8.getDayOfMonth();
        org.joda.time.Instant instant10 = mutableDateTime8.toInstant();
        org.joda.time.Instant instant12 = instant10.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        int int14 = mutableDateTime13.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType21 = periodType20.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateTime18, periodType21);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod25.copy();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.yearOfCentury();
        org.joda.time.Duration duration30 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant10, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval33 = interval6.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval36 = localDate35.toInterval();
        java.lang.String str37 = interval36.toString();
        boolean boolean39 = interval36.isAfter(86400000L);
        org.joda.time.ReadableInterval readableInterval40 = null;
        boolean boolean41 = interval36.abuts(readableInterval40);
        boolean boolean42 = interval33.contains((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime43 = interval36.getStart();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod47 = mutablePeriod46.copy();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.yearOfCentury();
        org.joda.time.Duration duration51 = mutablePeriod47.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = dateMidnight49.toString(dateTimeFormatter52);
        org.joda.time.DateMidnight.Property property54 = dateMidnight49.monthOfYear();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight49.plusWeeks(11);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.minusMonths(429);
        boolean boolean59 = interval36.isAfter((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.DateMidnight.Property property60 = dateMidnight56.dayOfWeek();
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str37, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str53, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test5377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5377");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withChronologyRetainFields(chronology4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = timeOfDay5.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.plusHours((-1));
        org.joda.time.Chronology chronology9 = timeOfDay8.getChronology();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withChronologyRetainFields(chronology13);
        long long16 = chronology9.set((org.joda.time.ReadablePartial) timeOfDay12, (long) (byte) -1);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType20 = null;
        boolean boolean21 = periodType19.isSupported(durationFieldType20);
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 1, 0L, periodType19);
        int[] intArray25 = chronology9.get((org.joda.time.ReadablePeriod) period22, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(obj0, chronology9);
        int int27 = localTime26.size();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-86399999L) + "'", long16 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test5378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5378");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        int int5 = dateTime3.getYear();
        int int6 = dateTime3.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime3.withDayOfMonth(32772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test5379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5379");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.lang.String str1 = timeZone0.getID();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone0);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar2);
        java.lang.Object obj4 = calendar2.clone();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "-0001-02-23T07:10:53.393" + "'", str1, "-0001-02-23T07:10:53.393");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514210246,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"-0001-02-23T07:10:53.393\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=50,MILLISECOND=246,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(obj4);
// flaky:         org.junit.Assert.assertEquals(obj4.toString(), "java.util.GregorianCalendar[time=1645514210246,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"-0001-02-23T07:10:53.393\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=50,MILLISECOND=246,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "java.util.GregorianCalendar[time=1645514210246,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"-0001-02-23T07:10:53.393\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=50,MILLISECOND=246,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "java.util.GregorianCalendar[time=1645514210246,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"-0001-02-23T07:10:53.393\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=50,MILLISECOND=246,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test5380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5380");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((-1));
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = property11.setCopy("PeriodType[YearMonthDayTimeNoMinutes]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PeriodType[YearMonthDayTimeNoMinutes]\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test5381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5381");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight3 = property2.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight4 = property2.withMaximumValue();
        int int5 = dateMidnight4.getDayOfWeek();
        org.joda.time.DateMidnight.Property property6 = dateMidnight4.year();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.year();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime17 = property13.add((int) 'a');
        int int18 = mutableDateTime17.getMillisOfSecond();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) 'u');
        mutableDateTime17.setMillis((org.joda.time.ReadableInstant) instant20);
        org.joda.time.MutableDateTime mutableDateTime22 = instant20.toMutableDateTime();
        int int23 = dateMidnight4.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight4.era();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = dateTime30.minusYears((int) ' ');
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = timeOfDay37.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay37.plusHours((-1));
        org.joda.time.Chronology chronology41 = timeOfDay40.getChronology();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.withChronologyRetainFields(chronology45);
        long long48 = chronology41.set((org.joda.time.ReadablePartial) timeOfDay44, (long) (byte) -1);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType52 = null;
        boolean boolean53 = periodType51.isSupported(durationFieldType52);
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 1, 0L, periodType51);
        int[] intArray57 = chronology41.get((org.joda.time.ReadablePeriod) period54, (long) 2022, (long) ' ');
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((java.lang.Object) dateTime30, chronology41);
        org.joda.time.DateTimeField dateTimeField59 = chronology41.weekyear();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(chronology60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType64 = periodType63.withWeeksRemoved();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight61, readableDuration62, periodType63);
        org.joda.time.Period period67 = period65.withSeconds(0);
        org.joda.time.Period period69 = period67.plusMinutes((int) (byte) 1);
        org.joda.time.Period period71 = period67.plusSeconds(8);
        int int72 = period71.getMonths();
        int[] intArray74 = chronology41.get((org.joda.time.ReadablePeriod) period71, (long) (short) 10);
        org.joda.time.DateTimeField dateTimeField75 = chronology41.dayOfYear();
        org.joda.time.DateTime dateTime76 = dateTime29.toDateTime(chronology41);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight4.withChronology(chronology41);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-86399999L) + "'", long48 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateMidnight77);
    }

    @Test
    public void test5382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5382");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight3 = property2.withMinimumValue();
        java.lang.String str4 = property2.toString();
        org.joda.time.DateMidnight dateMidnight5 = property2.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight7 = property2.addWrapFieldToCopy(51);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withChronologyRetainFields(chronology11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.plusHours((-1));
        org.joda.time.Chronology chronology16 = timeOfDay15.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.withChronologyRetainFields(chronology20);
        long long23 = chronology16.set((org.joda.time.ReadablePartial) timeOfDay19, (long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        int int25 = mutableDateTime24.getDayOfMonth();
        org.joda.time.Instant instant26 = mutableDateTime24.toInstant();
        boolean boolean28 = mutableDateTime24.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int32 = dateTimeZone30.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime24.setZone(dateTimeZone30);
        org.joda.time.DateTime dateTime34 = timeOfDay19.toDateTimeToday(dateTimeZone30);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime40 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.LocalTime localTime41 = timeOfDay19.toLocalTime();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.TimeOfDay timeOfDay47 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay47.withChronologyRetainFields(chronology48);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray50 = timeOfDay49.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay49.plusHours((-1));
        org.joda.time.Chronology chronology53 = timeOfDay52.getChronology();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.TimeOfDay timeOfDay56 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay56.withChronologyRetainFields(chronology57);
        long long60 = chronology53.set((org.joda.time.ReadablePartial) timeOfDay56, (long) (byte) -1);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType64 = null;
        boolean boolean65 = periodType63.isSupported(durationFieldType64);
        org.joda.time.Period period66 = new org.joda.time.Period((long) (byte) 1, 0L, periodType63);
        int[] intArray69 = chronology53.get((org.joda.time.ReadablePeriod) period66, (long) 2022, (long) ' ');
        org.joda.time.DateTimeField dateTimeField70 = chronology53.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField71 = chronology53.era();
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((int) ' ', 2, 11, chronology53);
        org.joda.time.TimeOfDay timeOfDay73 = timeOfDay19.withChronologyRetainFields(chronology53);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight7.withChronology(chronology53);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[dayOfWeek]" + "'", str4, "Property[dayOfWeek]");
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-86399999L) + "'", long23 == (-86399999L));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-86399999L) + "'", long60 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(dateMidnight74);
    }

    @Test
    public void test5383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5383");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        int int2 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Instant instant3 = mutableDateTime1.toInstant();
        boolean boolean5 = mutableDateTime1.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int9 = dateTimeZone7.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime1.setZone(dateTimeZone7);
        long long12 = dateTimeZone7.previousTransition((long) (short) -1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 2, dateTimeZone7);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) -1, chronology15);
        org.joda.time.LocalDate localDate18 = localDate16.minusYears(1);
        org.joda.time.LocalDate.Property property19 = localDate16.year();
        int int20 = localDate16.getYearOfEra();
        org.joda.time.LocalDate localDate22 = localDate16.plusMonths((int) '4');
        org.joda.time.LocalDate.Property property23 = localDate22.year();
        int int24 = localDate13.compareTo((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.LocalDate.Property property25 = localDate22.dayOfMonth();
        int int26 = localDate22.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property27 = localDate22.monthOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 18 + "'", int26 == 18);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test5384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5384");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weeks();
        boolean boolean5 = localDate3.isSupported(durationFieldType4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8, periodType9);
        org.joda.time.Period period13 = period11.withSeconds(0);
        org.joda.time.LocalDate localDate14 = localDate3.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.LocalDate.Property property15 = localDate14.yearOfCentury();
        org.joda.time.LocalDate localDate17 = property15.addWrapFieldToCopy(32);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableDuration20, periodType21);
        org.joda.time.Period period25 = period23.withSeconds(0);
        org.joda.time.Period period27 = period25.plusMinutes((int) (byte) 1);
        org.joda.time.Period period29 = period25.plusSeconds(8);
        org.joda.time.Period period31 = period25.withMinutes(58);
        org.joda.time.Period period33 = period31.plusMonths(292278993);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate35 = localDate17.withPeriodAdded((org.joda.time.ReadablePeriod) period33, 600);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 292278993 * 600");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test5385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5385");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) (byte) 1);
        java.lang.Object obj2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(obj2, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minus((org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = localDateTime12.toString(dateTimeFormatter13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusHours((int) (short) 10);
        int[] intArray17 = localDateTime16.getValues();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusMillis(32770);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(chronology20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType24 = periodType23.withWeeksRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight21, readableDuration22, periodType23);
        org.joda.time.Period period27 = period25.withSeconds(0);
        int int28 = period27.getDays();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        int int30 = mutableDateTime29.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        mutableDateTime29.add(durationFieldType31, (int) (short) 100);
        int int34 = period27.get(durationFieldType31);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime19.withFieldAdded(durationFieldType31, 2022);
        boolean boolean37 = period1.isSupported(durationFieldType31);
        org.joda.time.Period period39 = period1.minusWeeks(999);
        org.joda.time.Period period41 = period1.minusWeeks(73);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "-0001-02-23T07:16:50.401" + "'", str14, "-0001-02-23T07:16:50.401");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 2, 23, 62210401]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test5386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5386");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.time();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1);
        int int4 = mutablePeriod3.size();
        mutablePeriod3.setHours(13);
        int int7 = mutablePeriod3.getYears();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Time" + "'", str2, "Time");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test5387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5387");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod3 = mutablePeriod2.copy();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.yearOfCentury();
        org.joda.time.Duration duration7 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod10.copy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfCentury();
        org.joda.time.Duration duration15 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight13);
        boolean boolean16 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration17 = duration15.toDuration();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        org.joda.time.DateTime dateTime25 = dateTime22.minusYears(100);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.TimeOfDay timeOfDay27 = dateTime25.toTimeOfDay();
        org.joda.time.DateTime dateTime28 = dateTime25.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test5388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5388");
        org.joda.time.YearMonth yearMonth0 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth2 = yearMonth0.withYear(7);
        org.joda.time.YearMonth.Property property3 = yearMonth2.year();
        org.joda.time.YearMonth yearMonth5 = property3.setCopy(2);
        int int6 = property3.get();
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        int int9 = property3.getMaximumShortTextLength(locale7);
        java.util.Locale locale10 = locale7.stripExtensions();
        java.lang.String str11 = locale10.getISO3Language();
        java.lang.String str12 = locale10.getVariant();
        java.util.Locale.setDefault(locale10);
        org.junit.Assert.assertNotNull(yearMonth0);
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonth5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test5389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5389");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("-0001-02-23T07:11:15.467");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        int int3 = mutableDateTime2.getDayOfMonth();
        org.joda.time.Instant instant4 = mutableDateTime2.toInstant();
        org.joda.time.Instant instant6 = instant4.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        int int8 = mutableDateTime7.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableInstant) dateTime12, periodType15);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod19.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.yearOfCentury();
        org.joda.time.Duration duration24 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant4, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant29 = instant4.withDurationAdded((long) 4, 12);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(chronology30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.yearOfCentury();
        org.joda.time.DateMidnight.Property property33 = dateMidnight31.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        int int35 = mutableDateTime34.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateTime dateTime40 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType42 = periodType41.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime34, (org.joda.time.ReadableInstant) dateTime39, periodType42);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod47 = mutablePeriod46.copy();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(chronology48);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.yearOfCentury();
        org.joda.time.Duration duration51 = mutablePeriod47.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight49);
        mutablePeriod43.setPeriod((org.joda.time.ReadableDuration) duration51);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod56 = mutablePeriod55.copy();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(chronology57);
        org.joda.time.DateMidnight.Property property59 = dateMidnight58.yearOfCentury();
        org.joda.time.Duration duration60 = mutablePeriod56.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod63.copy();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.yearOfCentury();
        org.joda.time.Duration duration68 = mutablePeriod64.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight66);
        boolean boolean69 = duration60.isShorterThan((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Period period70 = duration68.toPeriod();
        boolean boolean71 = duration51.isEqual((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Period period72 = duration51.toPeriod();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight31.withDurationAdded((org.joda.time.ReadableDuration) duration51, 0);
        org.joda.time.Instant instant75 = instant4.plus((org.joda.time.ReadableDuration) duration51);
        boolean boolean76 = instant1.isAfter((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Instant instant77 = instant4.toInstant();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(mutablePeriod56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(instant77);
    }

    @Test
    public void test5390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5390");
        org.joda.time.YearMonth yearMonth2 = new org.joda.time.YearMonth((int) (byte) 10, 3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = yearMonth2.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType5 = yearMonth2.getFieldType(86040000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86040000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
    }

    @Test
    public void test5391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5391");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(842L);
    }

    @Test
    public void test5392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5392");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.year();
        org.joda.time.LocalDate localDate4 = localDate1.withCenturyOfEra(10);
        org.joda.time.LocalDate localDate6 = localDate4.plusDays((int) (short) -1);
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test5393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5393");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str2 = yearMonthDay1.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) -1, chronology4);
        org.joda.time.LocalDate localDate7 = localDate5.minusYears(1);
        org.joda.time.LocalDate.Property property8 = localDate5.year();
        org.joda.time.LocalDate.Property property9 = localDate5.dayOfYear();
        int int10 = localDate5.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int12 = localDate5.get(dateTimeFieldType11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay1.withField(dateTimeFieldType11, 2);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay1.toDateMidnight();
        int int16 = yearMonthDay1.getYear();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1970-01-01" + "'", str2, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
    }

    @Test
    public void test5394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5394");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean2 = localDateTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMillisOfDay((int) 'x');
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test5395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5395");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        int int7 = localDateTime2.getYear();
        org.joda.time.DateTime dateTime8 = localDateTime2.toDateTime();
        int int9 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minusWeeks(53);
        org.joda.time.LocalDateTime.Property property12 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMinimumValue();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test5396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5396");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("fr");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        calendar2.setLenient(true);
        long long6 = calendar2.getTimeInMillis();
        int int7 = calendar2.getWeeksInWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            calendar2.set(44, 429);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 44");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514210786,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=50,MILLISECOND=786,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514210786L + "'", long6 == 1645514210786L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test5397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5397");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale7 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Locale locale11 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale7, locale8, locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale.FilteringMode filteringMode15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList13, filteringMode15);
        boolean boolean17 = charSet1.removeAll((java.util.Collection<java.util.Locale>) localeList16);
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category18, locale19);
        boolean boolean21 = charSet1.contains((java.lang.Object) category18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.YearMonth yearMonth24 = new org.joda.time.YearMonth(dateTimeZone23);
        int int25 = yearMonth24.getYear();
        org.joda.time.YearMonth.Property property26 = yearMonth24.year();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        int int28 = mutableDateTime27.getDayOfMonth();
        org.joda.time.Instant instant29 = mutableDateTime27.toInstant();
        boolean boolean31 = mutableDateTime27.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int35 = dateTimeZone33.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime27.setZone(dateTimeZone33);
        int int37 = property26.compareTo((org.joda.time.ReadableInstant) mutableDateTime27);
        int int38 = property26.get();
        java.util.Locale locale39 = java.util.Locale.PRC;
        java.lang.String str40 = locale39.getDisplayScript();
        int int41 = property26.getMaximumShortTextLength(locale39);
        java.util.Locale.setDefault(category18, locale39);
        java.lang.String str43 = locale39.getDisplayVariant();
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale45 = java.util.Locale.getDefault(category44);
        java.lang.String str46 = locale39.getDisplayName(locale45);
        java.lang.String str47 = locale45.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category44.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "chinois (Chine)" + "'", str46, "chinois (Chine)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test5398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5398");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfYear();
        int int7 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property8 = localDate5.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate5.withDayOfWeek((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test5399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5399");
        org.joda.time.YearMonth yearMonth1 = new org.joda.time.YearMonth(396L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType6 = periodType5.withWeeksRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight3, readableDuration4, periodType5);
        org.joda.time.Period period9 = period7.withSeconds(0);
        org.joda.time.Period period11 = period9.plusMinutes((int) (byte) 1);
        org.joda.time.Period period13 = period9.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period16 = period9.withField(durationFieldType14, 7);
        org.joda.time.Period period18 = period9.minusDays(0);
        org.joda.time.format.PeriodFormatter periodFormatter19 = null;
        java.lang.String str20 = period9.toString(periodFormatter19);
        org.joda.time.Period period21 = period9.toPeriod();
        org.joda.time.YearMonth yearMonth22 = yearMonth1.plus((org.joda.time.ReadablePeriod) period21);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(yearMonth22);
    }

    @Test
    public void test5400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5400");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime6 = property2.withMaximumValue();
        org.joda.time.DurationField durationField7 = property2.getRangeDurationField();
        org.joda.time.LocalTime localTime8 = property2.withMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test5401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5401");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTime dateTime23 = dateTime4.toDateTime(chronology14);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateTime4.toDateTime(chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.withChronologyRetainFields(chronology29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = timeOfDay30.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay30.plusHours((-1));
        org.joda.time.Chronology chronology34 = timeOfDay33.getChronology();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay37.withChronologyRetainFields(chronology38);
        long long41 = chronology34.set((org.joda.time.ReadablePartial) timeOfDay37, (long) (byte) -1);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType45 = null;
        boolean boolean46 = periodType44.isSupported(durationFieldType45);
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 1, 0L, periodType44);
        int[] intArray50 = chronology34.get((org.joda.time.ReadablePeriod) period47, (long) 2022, (long) ' ');
        org.joda.time.DateTimeField dateTimeField51 = chronology34.yearOfCentury();
        org.joda.time.DateTime dateTime52 = dateTime4.withChronology(chronology34);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property55 = localTime54.millisOfDay();
        java.lang.String str57 = localTime54.toString("22");
        org.joda.time.LocalTime localTime59 = localTime54.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalTime.Property property60 = localTime59.secondOfMinute();
        org.joda.time.LocalTime localTime61 = property60.withMinimumValue();
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType63 = periodType62.withWeeksRemoved();
        java.lang.String str64 = periodType63.toString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType69 = periodType68.withWeeksRemoved();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight66, readableDuration67, periodType68);
        org.joda.time.Period period72 = period70.withSeconds(0);
        int int73 = period72.getDays();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime();
        int int75 = mutableDateTime74.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.hours();
        mutableDateTime74.add(durationFieldType76, (int) (short) 100);
        int int79 = period72.get(durationFieldType76);
        boolean boolean80 = periodType63.isSupported(durationFieldType76);
        boolean boolean81 = localTime61.isSupported(durationFieldType76);
        boolean boolean82 = dateTime4.equals((java.lang.Object) boolean81);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod86 = mutablePeriod85.copy();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.DateMidnight dateMidnight88 = new org.joda.time.DateMidnight(chronology87);
        org.joda.time.DateMidnight.Property property89 = dateMidnight88.yearOfCentury();
        org.joda.time.Duration duration90 = mutablePeriod86.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight88);
        mutablePeriod86.setSeconds((int) (short) 10);
        int int93 = mutablePeriod86.getMinutes();
        org.joda.time.DateTime dateTime95 = dateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod86, 69);
        mutablePeriod86.setWeeks(118);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-86399999L) + "'", long41 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "22" + "'", str57, "22");
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PeriodType[YearMonthDayTime]" + "'", str64, "PeriodType[YearMonthDayTime]");
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 22 + "'", int75 == 22);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mutablePeriod86);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test5402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5402");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.addWrapField(17);
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime9 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.minuteOfHour();
        mutableDateTime9.addMinutes(35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test5403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5403");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.monthOfYear();
        org.joda.time.Chronology chronology2 = mutableDateTime0.getChronology();
        mutableDateTime0.setWeekyear(4);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType10 = null;
        boolean boolean11 = periodType9.isSupported(durationFieldType10);
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 1, 0L, periodType9);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod16 = mutablePeriod15.copy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withChronologyRetainFields(chronology22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = timeOfDay23.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay23.plusHours((-1));
        org.joda.time.Chronology chronology27 = timeOfDay26.getChronology();
        mutablePeriod15.setPeriod((long) (byte) 1, 208L, chronology27);
        boolean boolean29 = periodType9.equals((java.lang.Object) chronology27);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, (long) 58, periodType9);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getDurationType();
        boolean boolean33 = periodType9.isSupported(durationFieldType32);
        mutableDateTime0.add(durationFieldType32, 4);
        mutableDateTime0.add((long) 53);
        mutableDateTime0.addDays(432);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test5404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5404");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withWeekyear(5);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.minusYears(24);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = localDateTime10.toString("2022-02-22T07:12:51.339Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test5405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5405");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.LocalTime localTime5 = property2.addWrapFieldToCopy((int) (short) 1);
        int int6 = localTime5.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test5406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5406");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime5 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime6 = property2.withMaximumValue();
        org.joda.time.Period period8 = org.joda.time.Period.days((int) (byte) 1);
        org.joda.time.Days days9 = period8.toStandardDays();
        org.joda.time.LocalTime localTime10 = localTime6.plus((org.joda.time.ReadablePeriod) days9);
        org.joda.time.LocalTime localTime12 = localTime10.plusMinutes(27);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(days9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test5407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5407");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        int int7 = localDateTime2.getYear();
        org.joda.time.DateTime dateTime8 = localDateTime2.toDateTime();
        int int9 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minusWeeks(53);
        org.joda.time.LocalDateTime.Property property12 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.plusMonths(24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((java.lang.Object) 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test5408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5408");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType8 = periodType7.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime5, periodType8);
        org.joda.time.LocalDateTime localDateTime10 = dateTime5.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfYear(3);
        int int15 = localDateTime14.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.secondOfMinute();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = property17.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = property17.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test5409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5409");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        int int7 = localDateTime2.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withField(dateTimeFieldType8, 32);
        org.joda.time.DateTime dateTime11 = localDateTime10.toDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withYear((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withWeekyear(46);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test5410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5410");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        boolean boolean10 = localDateTime8.equals((java.lang.Object) 7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.secondOfMinute();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withCenturyOfEra((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod21.copy();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.yearOfCentury();
        org.joda.time.Duration duration26 = mutablePeriod22.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod29.copy();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.yearOfCentury();
        org.joda.time.Duration duration34 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight32);
        boolean boolean35 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration36 = duration34.toDuration();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight18, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration34, 365);
        org.joda.time.Duration duration40 = duration34.toDuration();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(duration40);
    }

    @Test
    public void test5411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5411");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.monthOfYear();
        int int5 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        int int7 = mutableDateTime6.getDayOfMonth();
        org.joda.time.Instant instant8 = mutableDateTime6.toInstant();
        boolean boolean10 = mutableDateTime6.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int14 = dateTimeZone12.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime6.setZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int17 = mutableDateTime16.getDayOfMonth();
        org.joda.time.Instant instant18 = mutableDateTime16.toInstant();
        boolean boolean20 = mutableDateTime16.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int24 = dateTimeZone22.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime16.setZone(dateTimeZone22);
        long long27 = dateTimeZone22.previousTransition((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime6.toMutableDateTime(dateTimeZone22);
        mutableDateTime28.addMinutes((int) 'x');
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime28.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime37.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime38.toMutableDateTime();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.TimeOfDay timeOfDay42 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay42.withChronologyRetainFields(chronology43);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = timeOfDay44.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay44.plusHours((-1));
        org.joda.time.Chronology chronology48 = timeOfDay47.getChronology();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.TimeOfDay timeOfDay51 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay51.withChronologyRetainFields(chronology52);
        long long55 = chronology48.set((org.joda.time.ReadablePartial) timeOfDay51, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay56 = new org.joda.time.TimeOfDay(chronology48);
        org.joda.time.DateTime dateTime57 = dateTime38.toDateTime(chronology48);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) 100, chronology48);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone61);
        org.joda.time.DateTime dateTime63 = dateTime62.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime63.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime64.year();
        org.joda.time.DateTimeField dateTimeField66 = property65.getField();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int70 = dateTimeZone68.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now(dateTimeZone68);
        long long72 = property65.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime71);
        org.joda.time.MutableDateTime mutableDateTime73 = mutableDateTime71.copy();
        mutableDateTime71.setYear(5);
        mutableDateTime58.setMillis((org.joda.time.ReadableInstant) mutableDateTime71);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime28, (org.joda.time.ReadableInstant) mutableDateTime71);
        mutablePeriod77.add(209L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-86399999L) + "'", long55 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-52L) + "'", long72 == (-52L));
        org.junit.Assert.assertNotNull(mutableDateTime73);
    }

    @Test
    public void test5412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5412");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withWeeksRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight1, readableDuration2, periodType3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField22 = chronology14.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight1.withChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.millisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.TimeOfDay timeOfDay27 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = timeOfDay29.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay29.plusHours((-1));
        org.joda.time.Chronology chronology33 = timeOfDay32.getChronology();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.withChronologyRetainFields(chronology37);
        long long40 = chronology33.set((org.joda.time.ReadablePartial) timeOfDay36, (long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime();
        int int42 = mutableDateTime41.getDayOfMonth();
        org.joda.time.Instant instant43 = mutableDateTime41.toInstant();
        boolean boolean45 = mutableDateTime41.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int49 = dateTimeZone47.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime41.setZone(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = timeOfDay36.toDateTimeToday(dateTimeZone47);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(chronology52);
        org.joda.time.DateMidnight.Property property54 = dateMidnight53.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight53.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime57 = timeOfDay36.toDateTime((org.joda.time.ReadableInstant) dateMidnight53);
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.lang.String str60 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) timeOfDay36, 17, locale59);
        long long62 = dateTimeField24.roundHalfCeiling((-1836080280000L));
        java.lang.String str63 = dateTimeField24.getName();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-86399999L) + "'", long40 == (-86399999L));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 22 + "'", int42 == 22);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "17" + "'", str60, "17");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1836080280000L) + "'", long62 == (-1836080280000L));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "millisOfSecond" + "'", str63, "millisOfSecond");
    }

    @Test
    public void test5413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5413");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str3 = yearMonthDay2.toString();
        java.lang.String str4 = yearMonthDay2.toString();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusDays(4);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.plusYears(22);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long13 = dateTimeZone11.convertUTCToLocal((long) (-1));
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay6.toDateMidnight(dateTimeZone11);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay6.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay17 = property15.addToCopy(12);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int21 = dateTimeZone19.getOffset(0L);
        long long24 = dateTimeZone19.convertLocalToUTC((long) (short) 0, true);
        org.joda.time.DateTime dateTime25 = yearMonthDay17.toDateTimeAtMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval28 = localDate27.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = interval28.toMutableInterval();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval32 = localDate31.toInterval();
        boolean boolean33 = interval28.isBefore((org.joda.time.ReadableInterval) interval32);
        long long34 = interval32.getStartMillis();
        org.joda.time.Interval interval35 = interval32.toInterval();
        org.joda.time.MutableInterval mutableInterval36 = interval32.toMutableInterval();
        org.joda.time.Chronology chronology37 = interval32.getChronology();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay17.withChronologyRetainFields(chronology37);
        int int40 = yearMonthDay17.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str43 = yearMonthDay42.toString();
        java.lang.String str44 = yearMonthDay42.toString();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.plusDays(4);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.plusYears(22);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime50.getZone();
        long long53 = dateTimeZone51.convertUTCToLocal((long) (-1));
        org.joda.time.DateMidnight dateMidnight54 = yearMonthDay46.toDateMidnight(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight55 = org.joda.time.DateMidnight.now(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = yearMonthDay17.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(215L, dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableInterval29);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutableInterval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01" + "'", str43, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01" + "'", str44, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test5414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5414");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfMonth();
        boolean boolean5 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) mutableDateTime3);
        int int6 = mutableDateTime3.getWeekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod9.copy();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.yearOfCentury();
        org.joda.time.Duration duration14 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod17.copy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfCentury();
        org.joda.time.Duration duration22 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        boolean boolean23 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period26 = period24.minusMonths(0);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod29.copy();
        mutablePeriod30.setPeriod(69, 58, 58, 292278993, 32772, 1970, 999, 10);
        int int40 = mutablePeriod30.getWeeks();
        org.joda.time.Period period41 = period26.withFields((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.TimeOfDay timeOfDay46 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay46.withChronologyRetainFields(chronology47);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray49 = timeOfDay48.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay48.plusHours((-1));
        org.joda.time.Chronology chronology52 = timeOfDay51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.halfdayOfDay();
        mutablePeriod30.setPeriod(842L, 549L, chronology52);
        org.joda.time.DateTimeField dateTimeField55 = chronology52.secondOfMinute();
        org.joda.time.DurationField durationField56 = chronology52.weeks();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 58 + "'", int40 == 58);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray49);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test5415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5415");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        int int6 = localDate2.getYearOfEra();
        org.joda.time.LocalDate localDate8 = localDate2.plusMonths((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.yearOfCentury();
        boolean boolean10 = localDate2.isSupported(dateTimeFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType9.getDurationType();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType9.getRangeDurationType();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
    }

    @Test
    public void test5416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5416");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) -1, chronology3);
        int int5 = localDate4.getYearOfCentury();
        int int6 = localDate4.getYear();
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int11 = dateTimeZone9.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        java.lang.String str14 = dateTimeZone9.getNameKey(10L);
        org.joda.time.DateTime dateTime15 = dateTime7.withZone(dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval16 = new org.joda.time.Interval(208L, (long) 2, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 69 + "'", int5 == 69);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test5417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5417");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate7 = localDate2.minusDays(7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.year();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.MutableDateTime mutableDateTime18 = property15.set(5);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        int int20 = property15.getMaximumTextLength(locale19);
        java.lang.String str21 = localDate7.toString("1", locale19);
        org.joda.time.LocalDate.Property property22 = localDate7.era();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test5418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5418");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType0.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
    }

    @Test
    public void test5419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5419");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusHours((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withMinuteOfHour(18);
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.hourOfDay();
        int int11 = property10.getMaximumValue();
        int int12 = property10.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 23 + "'", int12 == 23);
    }

    @Test
    public void test5420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5420");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.hourOfHalfday();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology8);
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period23 = period21.withPeriodType(periodType22);
        int int24 = period21.getWeeks();
        org.joda.time.LocalTime localTime25 = localTime18.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod29.copy();
        org.joda.time.format.PeriodFormatter periodFormatter31 = null;
        java.lang.String str32 = mutablePeriod30.toString(periodFormatter31);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType34 = periodType33.withYearsRemoved();
        org.joda.time.Period period35 = new org.joda.time.Period((java.lang.Object) periodFormatter31, periodType33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone38);
        org.joda.time.DateTime dateTime40 = dateTime39.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime40.toMutableDateTime();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray47 = timeOfDay46.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay46.plusHours((-1));
        org.joda.time.Chronology chronology50 = timeOfDay49.getChronology();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.TimeOfDay timeOfDay53 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.withChronologyRetainFields(chronology54);
        long long57 = chronology50.set((org.joda.time.ReadablePartial) timeOfDay53, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay58 = new org.joda.time.TimeOfDay(chronology50);
        org.joda.time.DateTime dateTime59 = dateTime40.toDateTime(chronology50);
        org.joda.time.DateTimeField dateTimeField60 = chronology50.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField61 = chronology50.yearOfCentury();
        org.joda.time.Period period62 = new org.joda.time.Period(100L, periodType33, chronology50);
        org.joda.time.MutablePeriod mutablePeriod63 = period62.toMutablePeriod();
        org.joda.time.Period period65 = period62.plusHours(36000001);
        org.joda.time.PeriodType periodType66 = period62.getPeriodType();
        org.joda.time.LocalTime localTime67 = localTime25.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.LocalTime localTime69 = localTime25.plusSeconds(39421);
        org.joda.time.LocalTime localTime71 = localTime69.minusMinutes(9);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0.099S" + "'", str32, "PT0.099S");
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray47);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-86399999L) + "'", long57 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime71);
    }

    @Test
    public void test5421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5421");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("UTC");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale10 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale14 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale10, locale11, locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.Locale.FilteringMode filteringMode18 = null;
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList16, filteringMode18);
        java.lang.String[] strArray43 = new java.lang.String[] { "PT0.099S", "22", "PeriodType[YearMonthDayTime]", "hi!", "PT0S", "2022-02-22T07:09:21.203Z", "7", "2022-02-22T07:09:21.203Z", "22", "\u5fb7\u56fd", "22", "Standard", "zho", "UTC", "DateTimeField[millisOfSecond]", "zho", "22", "hi!", "-0001-02-23T07:09:19.011", "PeriodType[YearMonthDayTime]", "DateTimeField[yearOfCentury]", "DateTimeField[yearOfCentury]", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList44, filteringMode46);
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList47, filteringMode48);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap50 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap50);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList51, strMap52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList53, strMap54);
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = locale56.getLanguage();
        java.util.Set<java.lang.String> strSet58 = locale56.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags(languageRangeList53, (java.util.Collection<java.lang.String>) strSet58);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale10.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale14.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode46.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode48.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(languageRangeList55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "fr" + "'", str57, "fr");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strList59);
    }

    @Test
    public void test5422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5422");
        java.util.Date date1 = new java.util.Date(100L);
        long long2 = date1.getTime();
        int int3 = date1.getSeconds();
        int int4 = date1.getMonth();
        int int5 = date1.getMonth();
        java.lang.String str6 = date1.toGMTString();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 1, 0L, periodType10);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period16 = period13.minusMonths(9);
        org.joda.time.Period period18 = period16.withSeconds(0);
        org.joda.time.Period period20 = period16.plusDays(1);
        org.joda.time.Period period22 = period16.withMonths(365);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay7.withPeriodAdded((org.joda.time.ReadablePeriod) period22, 31);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay7.withYear(516);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str29 = yearMonthDay28.toString();
        java.lang.String str30 = yearMonthDay28.toString();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.plusDays(4);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.plusYears(22);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime36.getZone();
        long long39 = dateTimeZone37.convertUTCToLocal((long) (-1));
        org.joda.time.DateMidnight dateMidnight40 = yearMonthDay32.toDateMidnight(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str43 = dateTimeFieldType42.toString();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight41.withField(dateTimeFieldType42, (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay7.withField(dateTimeFieldType42, 1091);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str6, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.001S" + "'", str14, "PT0.001S");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01" + "'", str29, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "minuteOfDay" + "'", str43, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateMidnight45);
    }

    @Test
    public void test5423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5423");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        int int6 = localDateTime2.getValue(2);
        int int7 = localDateTime2.getYear();
        org.joda.time.DateTime dateTime8 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.minusYears(32772);
        int int11 = localDateTime2.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
    }

    @Test
    public void test5424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5424");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = timeOfDay16.isSupported(dateTimeFieldType17);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = timeOfDay16.getFieldTypes();
        int int20 = timeOfDay16.getMinuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
    }

    @Test
    public void test5425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5425");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int17 = mutableDateTime16.getDayOfMonth();
        org.joda.time.Instant instant18 = mutableDateTime16.toInstant();
        boolean boolean20 = mutableDateTime16.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int24 = dateTimeZone22.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime16.setZone(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = timeOfDay11.toDateTimeToday(dateTimeZone22);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime32 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.LocalTime localTime33 = timeOfDay11.toLocalTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.TimeOfDay timeOfDay39 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.withChronologyRetainFields(chronology40);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = timeOfDay41.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay41.plusHours((-1));
        org.joda.time.Chronology chronology45 = timeOfDay44.getChronology();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.TimeOfDay timeOfDay48 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.withChronologyRetainFields(chronology49);
        long long52 = chronology45.set((org.joda.time.ReadablePartial) timeOfDay48, (long) (byte) -1);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType56 = null;
        boolean boolean57 = periodType55.isSupported(durationFieldType56);
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 1, 0L, periodType55);
        int[] intArray61 = chronology45.get((org.joda.time.ReadablePeriod) period58, (long) 2022, (long) ' ');
        org.joda.time.DateTimeField dateTimeField62 = chronology45.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField63 = chronology45.era();
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((int) ' ', 2, 11, chronology45);
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay11.withChronologyRetainFields(chronology45);
        org.joda.time.DateTimeField dateTimeField66 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField67 = chronology45.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay(chronology45);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-86399999L) + "'", long52 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test5426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5426");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(999L);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(141);
        org.joda.time.LocalDate localDate5 = localDate3.withYearOfEra(434);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test5427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5427");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        long long11 = dateTimeZone6.previousTransition((long) (short) -1);
        long long13 = dateTimeZone6.previousTransition((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(dateTimeZone6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay14.minusMinutes((int) 'u');
        org.joda.time.Chronology chronology18 = timeOfDay17.getChronology();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test5428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5428");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.monthOfYear();
        int int5 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.LocalTime localTime7 = property2.setCopy(70);
        org.joda.time.LocalTime localTime9 = localTime7.minusHours(100);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear(2);
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.Instant instant20 = instant18.withMillis((long) 5);
        org.joda.time.MutableDateTime mutableDateTime21 = instant20.toMutableDateTimeISO();
        mutableDateTime21.setHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.toMutableDateTime();
        org.joda.time.DateTime dateTime25 = localTime9.toDateTime((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime24.era();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.add((long) 71);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
    }

    @Test
    public void test5429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5429");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfYear();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy(365);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate12 = localDate10.plusWeeks(9);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate10);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str16 = yearMonthDay15.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) -1, chronology18);
        org.joda.time.LocalDate localDate21 = localDate19.minusYears(1);
        org.joda.time.LocalDate.Property property22 = localDate19.year();
        org.joda.time.LocalDate.Property property23 = localDate19.dayOfYear();
        int int24 = localDate19.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int26 = localDate19.get(dateTimeFieldType25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay15.withField(dateTimeFieldType25, 2);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(chronology29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType33 = periodType32.withWeeksRemoved();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, readableDuration31, periodType32);
        org.joda.time.Period period36 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period38 = period36.plusHours((int) (short) 10);
        org.joda.time.Period period39 = period34.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay15.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType44 = null;
        boolean boolean45 = periodType43.isSupported(durationFieldType44);
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 1, 0L, periodType43);
        java.lang.String str47 = period46.toString();
        org.joda.time.Period period49 = period46.minusMonths(9);
        org.joda.time.Period period51 = period49.plusMinutes((int) (byte) 0);
        org.joda.time.Period period53 = period49.withDays(8);
        org.joda.time.Period period55 = period53.withSeconds(32);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay15.withPeriodAdded((org.joda.time.ReadablePeriod) period53, (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime60 = yearMonthDay15.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate10.toDateTimeAtStartOfDay(dateTimeZone59);
        long long64 = dateTimeZone59.convertLocalToUTC((long) 45, true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1969 + "'", int24 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT0.001S" + "'", str47, "PT0.001S");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 45L + "'", long64 == 45L);
    }

    @Test
    public void test5430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5430");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        boolean boolean4 = mutableDateTime0.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime0.setZone(dateTimeZone6);
        long long11 = dateTimeZone6.nextTransition(463L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 463L + "'", long11 == 463L);
    }

    @Test
    public void test5431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5431");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        int int3 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.DateTime dateTime6 = localDate5.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks(35);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 69 + "'", int3 == 69);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test5432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5432");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear((-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = null;
        java.lang.String str12 = localDateTime10.toString(dateTimeFormatter11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusHours((int) (short) 10);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) 'u');
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.withCenturyOfEra((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod26.copy();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology28);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.yearOfCentury();
        org.joda.time.Duration duration31 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod34.copy();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.yearOfCentury();
        org.joda.time.Duration duration39 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        boolean boolean40 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration41 = duration39.toDuration();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight23, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = duration39.toDuration();
        org.joda.time.Instant instant44 = instant16.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime10.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone48);
        org.joda.time.DateTime dateTime50 = dateTime49.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime50.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime51.year();
        org.joda.time.Chronology chronology53 = mutableDateTime51.getChronology();
        int int54 = mutableDateTime51.getMillisOfDay();
        int int55 = mutableDateTime51.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime51.toMutableDateTime();
        org.joda.time.DateTime dateTime57 = localDateTime45.toDateTime((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(chronology58);
        org.joda.time.DateMidnight.Property property60 = dateMidnight59.era();
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime();
        int int62 = mutableDateTime61.getDayOfMonth();
        boolean boolean63 = dateMidnight59.isEqual((org.joda.time.ReadableInstant) mutableDateTime61);
        java.lang.String str64 = mutableDateTime61.toString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(chronology65);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight68 = property67.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone71);
        org.joda.time.DateTime dateTime73 = dateTime72.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime73.toMutableDateTime();
        org.joda.time.DateTime dateTime76 = dateTime73.minusYears(100);
        org.joda.time.DateTime.Property property77 = dateTime73.dayOfMonth();
        boolean boolean78 = dateMidnight68.isBefore((org.joda.time.ReadableInstant) dateTime73);
        boolean boolean79 = mutableDateTime61.isAfter((org.joda.time.ReadableInstant) dateMidnight68);
        boolean boolean81 = dateMidnight68.isEqual((long) 86399999);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight68.plusYears(157);
        org.joda.time.DateMidnight.Property property84 = dateMidnight68.dayOfWeek();
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime51, (org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.DateMidnight.Property property86 = dateMidnight68.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight87 = property86.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "-0001-02-23T07:16:54.584" + "'", str12, "-0001-02-23T07:16:54.584");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 22 + "'", int62 == 22);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T07:16:54.683Z" + "'", str64, "2022-02-22T07:16:54.683Z");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateMidnight87);
    }

    @Test
    public void test5433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5433");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        java.lang.String str4 = localTime1.toString("22");
        org.joda.time.LocalTime localTime6 = localTime1.withMillisOfSecond((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localTime1.isSupported(dateTimeFieldType7);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (long) (short) 0);
        org.joda.time.LocalTime localTime12 = localTime1.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.LocalTime localTime14 = localTime1.withMillisOfDay((int) 'a');
        org.joda.time.LocalTime localTime16 = localTime1.plusMinutes(17);
        int int17 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime.Property property18 = localTime1.millisOfSecond();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "22" + "'", str4, "22");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test5434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5434");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withChronologyRetainFields(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = timeOfDay10.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusHours((-1));
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        long long21 = chronology14.set((org.joda.time.ReadablePartial) timeOfDay17, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(chronology14);
        org.joda.time.DateTime dateTime23 = dateTime4.toDateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone26);
        org.joda.time.Chronology chronology28 = chronology14.withZone(dateTimeZone26);
        org.joda.time.DurationField durationField29 = chronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.year();
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime35.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        java.lang.String str40 = dateTimeZone39.toString();
        long long42 = dateTimeZone37.getMillisKeepLocal(dateTimeZone39, 25767315L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((java.lang.Object) chronology14, dateTimeZone37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-86399999L) + "'", long21 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "UTC" + "'", str40, "UTC");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 25767315L + "'", long42 == 25767315L);
    }

    @Test
    public void test5435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5435");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withYear((int) 'u');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.millisOfDay();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfMonth();
        java.lang.String str9 = dateTimeFieldType8.getName();
        boolean boolean10 = localDateTime7.isSupported(dateTimeFieldType8);
        int int11 = localDateTime7.getDayOfWeek();
        int int12 = localDateTime7.getEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.withHourOfDay(16);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime14);
        int int16 = localDateTime15.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514214819,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=54,MILLISECOND=819,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "dayOfMonth" + "'", str9, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test5436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5436");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate6 = property5.roundCeilingCopy();
        org.joda.time.LocalDate localDate8 = localDate6.plusYears((int) (short) 0);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test5437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5437");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay14.plusHours((-1));
        org.joda.time.Chronology chronology18 = timeOfDay17.getChronology();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withChronologyRetainFields(chronology22);
        long long25 = chronology18.set((org.joda.time.ReadablePartial) timeOfDay21, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(chronology18);
        org.joda.time.DateTime dateTime27 = dateTime8.toDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone30);
        org.joda.time.Chronology chronology32 = chronology18.withZone(dateTimeZone30);
        boolean boolean33 = dateTimeZone1.equals((java.lang.Object) chronology18);
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.now(dateTimeZone1);
        int int35 = dateMidnight34.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-86399999L) + "'", long25 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test5438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5438");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        int int3 = charSet2.size();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay14.plusHours((-1));
        org.joda.time.Chronology chronology18 = timeOfDay17.getChronology();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withChronologyRetainFields(chronology22);
        long long25 = chronology18.set((org.joda.time.ReadablePartial) timeOfDay21, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(chronology18);
        org.joda.time.DateTime dateTime27 = dateTime8.toDateTime(chronology18);
        org.joda.time.DateTimeField dateTimeField28 = chronology18.yearOfCentury();
        org.joda.time.DurationField durationField29 = chronology18.days();
        boolean boolean30 = charSet2.remove((java.lang.Object) chronology18);
        org.joda.time.Period period31 = new org.joda.time.Period((-1L), chronology18);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.TimeOfDay timeOfDay34 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.withChronologyRetainFields(chronology35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = timeOfDay36.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay36.plusHours((-1));
        org.joda.time.Chronology chronology40 = timeOfDay39.getChronology();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.TimeOfDay timeOfDay43 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay43.withChronologyRetainFields(chronology44);
        long long47 = chronology40.set((org.joda.time.ReadablePartial) timeOfDay43, (long) (byte) -1);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType51 = null;
        boolean boolean52 = periodType50.isSupported(durationFieldType51);
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 1, 0L, periodType50);
        int[] intArray56 = chronology40.get((org.joda.time.ReadablePeriod) period53, (long) 2022, (long) ' ');
        org.joda.time.DurationField durationField57 = chronology40.months();
        org.joda.time.DurationFieldType durationFieldType58 = durationField57.getType();
        int int59 = period31.indexOf(durationFieldType58);
        org.joda.time.Period period61 = period31.minusYears((int) '4');
        org.joda.time.Period period63 = period31.withHours(100);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-86399999L) + "'", long25 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-86399999L) + "'", long47 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
    }

    @Test
    public void test5439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5439");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int11 = dateTimeZone9.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        long long13 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.setHourOfDay(9);
        int int16 = mutableDateTime12.getYear();
        mutableDateTime12.addYears(0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-52L) + "'", long13 == (-52L));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
    }

    @Test
    public void test5440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5440");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime dateTime7 = dateTime4.minusYears(100);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval10 = localDate9.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = interval10.toMutableInterval();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval14 = localDate13.toInterval();
        boolean boolean15 = interval10.isBefore((org.joda.time.ReadableInterval) interval14);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int17 = mutableDateTime16.getDayOfMonth();
        org.joda.time.Instant instant18 = mutableDateTime16.toInstant();
        org.joda.time.Instant instant20 = instant18.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        int int22 = mutableDateTime21.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType29 = periodType28.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime21, (org.joda.time.ReadableInstant) dateTime26, periodType29);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod33.copy();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.yearOfCentury();
        org.joda.time.Duration duration38 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        mutablePeriod30.setPeriod((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant18, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Interval interval41 = interval14.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTime dateTime42 = dateTime4.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateMidnight dateMidnight44 = org.joda.time.DateMidnight.parse("-0001-02-23T07:10:31.138");
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int49 = dateTimeZone47.getOffset(0L);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfMonth();
        org.joda.time.DateTime dateTime53 = dateTime50.plusWeeks(2968);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime50);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = mutablePeriod54.getValue(32769);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32769");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test5441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5441");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        long long4 = interval2.getEndMillis();
        org.joda.time.Chronology chronology5 = interval2.getChronology();
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 86400000L + "'", long4 == 86400000L);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test5442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5442");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property7 = localDate2.yearOfCentury();
        org.joda.time.LocalDate.Property property8 = localDate2.era();
        java.lang.String str9 = property8.getName();
        org.joda.time.LocalDate localDate10 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate11 = property8.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "era" + "'", str9, "era");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test5443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5443");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear(2);
        org.joda.time.Instant instant8 = dateTime7.toInstant();
        org.joda.time.Instant instant10 = instant8.withMillis((long) 5);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(chronology12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.era();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        int int16 = mutableDateTime15.getDayOfMonth();
        boolean boolean17 = dateMidnight13.isEqual((org.joda.time.ReadableInstant) mutableDateTime15);
        int int18 = mutableDateTime15.getWeekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod21.copy();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.yearOfCentury();
        org.joda.time.Duration duration26 = mutablePeriod22.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod29.copy();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(chronology31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.yearOfCentury();
        org.joda.time.Duration duration34 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight32);
        boolean boolean35 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod40 = mutablePeriod39.copy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(chronology41);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.yearOfCentury();
        org.joda.time.Duration duration44 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod48 = mutablePeriod47.copy();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(chronology49);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.yearOfCentury();
        org.joda.time.Duration duration52 = mutablePeriod48.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        boolean boolean53 = duration44.isEqual((org.joda.time.ReadableDuration) duration52);
        int int54 = duration34.compareTo((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Instant instant55 = instant10.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime();
        int int57 = mutableDateTime56.getDayOfMonth();
        org.joda.time.Instant instant58 = mutableDateTime56.toInstant();
        boolean boolean60 = mutableDateTime56.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int64 = dateTimeZone62.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime56.setZone(dateTimeZone62);
        mutableDateTime56.setMillisOfDay((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean71 = dateTimeZone69.isStandardOffset((long) 'u');
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime(dateTimeZone69);
        mutableDateTime56.setZone(dateTimeZone69);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime56.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        boolean boolean78 = dateTimeZone76.isStandardOffset((long) 'u');
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime(dateTimeZone76);
        mutableDateTime56.setZone(dateTimeZone76);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime56.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) mutableDateTime56);
        org.joda.time.Period period83 = duration34.toPeriod();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(period83);
    }

    @Test
    public void test5444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5444");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withZone(dateTimeZone3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronology();
        boolean boolean7 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) 8);
        java.lang.String str10 = yearMonthDay9.toString();
        java.lang.String str11 = yearMonthDay9.toString();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay9.plusDays(4);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.plusYears(22);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        long long20 = dateTimeZone18.convertUTCToLocal((long) (-1));
        org.joda.time.DateMidnight dateMidnight21 = yearMonthDay13.toDateMidnight(dateTimeZone18);
        org.joda.time.YearMonthDay.Property property22 = yearMonthDay13.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay24 = property22.addToCopy(12);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int28 = dateTimeZone26.getOffset(0L);
        long long31 = dateTimeZone26.convertLocalToUTC((long) (short) 0, true);
        org.joda.time.DateTime dateTime32 = yearMonthDay24.toDateTimeAtMidnight(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) 8);
        org.joda.time.YearMonthDay yearMonthDay36 = yearMonthDay34.plusDays(32769);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay34.minusDays((int) '4');
        org.joda.time.DateMidnight dateMidnight39 = yearMonthDay34.toDateMidnight();
        boolean boolean40 = dateTimeZone26.equals((java.lang.Object) dateMidnight39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter5.withZone(dateTimeZone26);
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = dateTimeFormatter5.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter5.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime45 = dateTimeFormatter43.parseMutableDateTime("2022-02-22T07:15:44.889");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01" + "'", str10, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay36);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNull(dateTimePrinter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test5445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5445");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("UTC");
        java.lang.String str3 = languageRange2.getRange();
        java.util.Locale.LanguageRange languageRange5 = new java.util.Locale.LanguageRange("UTC");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] { languageRange2, languageRange5 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale16 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Locale locale20 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale16, locale17, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.Locale.FilteringMode filteringMode24 = null;
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList22, filteringMode24);
        boolean boolean26 = charSet10.removeAll((java.util.Collection<java.util.Locale>) localeList25);
        java.util.List<java.util.Locale> localeList27 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.Locale.LanguageRange languageRange29 = new java.util.Locale.LanguageRange("UTC");
        java.lang.String str30 = languageRange29.getRange();
        java.util.Locale.LanguageRange languageRange32 = new java.util.Locale.LanguageRange("UTC");
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] { languageRange29, languageRange32 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale locale43 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale43, locale44, locale47 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale.FilteringMode filteringMode51 = null;
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList49, filteringMode51);
        boolean boolean53 = charSet37.removeAll((java.util.Collection<java.util.Locale>) localeList52);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList52);
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList52, filteringMode56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "utc" + "'", str3, "utc");
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localeList27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "utc" + "'", str30, "utc");
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode56.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
    }

    @Test
    public void test5446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5446");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        calendar0.setFirstDayOfWeek((int) (byte) 0);
        calendar0.setTimeInMillis((long) (short) 100);
        java.time.Instant instant6 = calendar0.toInstant();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        int int8 = calendar0.getWeeksInWeekYear();
        org.joda.time.YearMonth yearMonth11 = org.joda.time.YearMonth.now();
        org.joda.time.YearMonth yearMonth13 = yearMonth11.withYear(7);
        org.joda.time.YearMonth.Property property14 = yearMonth13.year();
        org.joda.time.YearMonth yearMonth16 = property14.setCopy(2);
        int int17 = property14.get();
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        int int20 = property14.getMaximumShortTextLength(locale18);
        java.util.Locale locale21 = locale18.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap22 = calendar0.getDisplayNames(3991, (int) (short) 10, locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(yearMonth11);
        org.junit.Assert.assertNotNull(yearMonth13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonth16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
    }

    @Test
    public void test5447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5447");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(70L);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        int int3 = mutableDateTime2.getDayOfMonth();
        org.joda.time.Instant instant4 = mutableDateTime2.toInstant();
        boolean boolean6 = mutableDateTime2.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int10 = dateTimeZone8.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime2.setZone(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime13 = dateTime1.toDateTime(dateTimeZone8);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(dateTimeZone8);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone8);
        int int17 = dateTimeZone8.getStandardOffset(1123200000L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test5448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5448");
        java.util.Locale locale3 = new java.util.Locale("ita", "17 Dec 4640 21:19:00 GMT", "");
        org.junit.Assert.assertEquals(locale3.toString(), "ita_17 DEC 4640 21:19:00 GMT");
    }

    @Test
    public void test5449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5449");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(37065600000L);
        int int2 = timeOfDay1.getHourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test5450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5450");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(54, 100, 1970, 24, 7, 958, (int) (short) 1, 59);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod8.setValue(86399, 730485);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86399");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5451");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime6 = dateTime4.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.property(dateTimeFieldType9);
        int int11 = localDateTime6.getYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test5452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5452");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 22);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.withChronologyRetainFields(chronology5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = timeOfDay6.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.plusHours((-1));
        org.joda.time.Chronology chronology10 = timeOfDay9.getChronology();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withChronologyRetainFields(chronology14);
        long long17 = chronology10.set((org.joda.time.ReadablePartial) timeOfDay13, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay1.withChronologyRetainFields(chronology10);
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        org.joda.time.TimeOfDay.Property property20 = timeOfDay18.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay18.plusMinutes(1091);
        org.joda.time.TimeOfDay.Property property23 = timeOfDay18.hourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-86399999L) + "'", long17 == (-86399999L));
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test5453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5453");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int5 = localDate1.get(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate1.minusDays(22);
        org.joda.time.LocalDate localDate9 = localDate1.minusYears(99);
        org.joda.time.DateMidnight dateMidnight10 = localDate9.toDateMidnight();
        org.joda.time.LocalDate.Property property11 = localDate9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test5454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5454");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        int int17 = mutableDateTime16.getDayOfMonth();
        org.joda.time.Instant instant18 = mutableDateTime16.toInstant();
        boolean boolean20 = mutableDateTime16.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int24 = dateTimeZone22.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime16.setZone(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = timeOfDay11.toDateTimeToday(dateTimeZone22);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime32 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateTime.Property property33 = dateTime32.centuryOfEra();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test5455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5455");
        java.lang.Character[] charArray1 = new java.lang.Character[] { 'a' };
        java.util.LinkedHashSet<java.lang.Character> charSet2 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet2, charArray1);
        java.lang.Object[] objArray4 = charSet2.toArray();
        java.util.Iterator<java.lang.Character> charItor5 = charSet2.iterator();
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        int int8 = charSet7.size();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = timeOfDay19.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.plusHours((-1));
        org.joda.time.Chronology chronology23 = timeOfDay22.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) timeOfDay26, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology23);
        org.joda.time.DateTime dateTime32 = dateTime13.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.yearOfCentury();
        org.joda.time.DurationField durationField34 = chronology23.days();
        boolean boolean35 = charSet7.remove((java.lang.Object) chronology23);
        java.util.Iterator<java.lang.Character> charItor36 = charSet7.iterator();
        java.util.Locale locale38 = new java.util.Locale("-0001-02-23T07:09:31.675");
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale45 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale locale49 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray50 = new java.util.Locale[] { locale45, locale46, locale49 };
        java.util.ArrayList<java.util.Locale> localeList51 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList51, localeArray50);
        java.util.Locale.FilteringMode filteringMode53 = null;
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList51, filteringMode53);
        java.lang.Character[] charArray56 = new java.lang.Character[] { 'a' };
        java.util.LinkedHashSet<java.lang.Character> charSet57 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet57, charArray56);
        java.lang.Object[] objArray59 = charSet57.toArray();
        java.util.Locale.LanguageRange languageRange61 = new java.util.Locale.LanguageRange("UTC");
        java.lang.String str62 = languageRange61.getRange();
        java.util.Locale.LanguageRange languageRange64 = new java.util.Locale.LanguageRange("UTC");
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] { languageRange61, languageRange64 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet69 = locale68.getExtensionKeys();
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale locale75 = new java.util.Locale("hi!", "hi!");
        java.util.Locale locale76 = java.util.Locale.FRANCE;
        java.util.Locale locale79 = new java.util.Locale("hi!", "hi!");
        java.util.Locale[] localeArray80 = new java.util.Locale[] { locale75, locale76, locale79 };
        java.util.ArrayList<java.util.Locale> localeList81 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList81, localeArray80);
        java.util.Locale.FilteringMode filteringMode83 = null;
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList81, filteringMode83);
        boolean boolean85 = charSet69.removeAll((java.util.Collection<java.util.Locale>) localeList84);
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.util.Locale>) localeList84);
        boolean boolean87 = charSet57.retainAll((java.util.Collection<java.util.Locale>) localeList86);
        java.util.Locale locale88 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList86);
        boolean boolean89 = charSet39.removeAll((java.util.Collection<java.util.Locale>) localeList86);
        boolean boolean90 = charSet7.retainAll((java.util.Collection<java.util.Locale>) localeList86);
        boolean boolean91 = charSet2.removeAll((java.util.Collection<java.util.Locale>) localeList86);
        boolean boolean93 = charSet2.remove((java.lang.Object) 32L);
        int int94 = charSet2.size();
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[a]");
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-86399999L) + "'", long30 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charItor36);
        org.junit.Assert.assertEquals(locale38.toString(), "-0001-02-23t07:09:31.675");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale49.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[a]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[a]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "utc" + "'", str62, "utc");
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals(locale75.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale79.toString(), "hi!_HI!");
        org.junit.Assert.assertNotNull(localeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(locale88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
    }

    @Test
    public void test5456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5456");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.weeks();
        boolean boolean5 = localDate3.isSupported(durationFieldType4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType10 = periodType9.withWeeksRemoved();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, readableDuration8, periodType9);
        org.joda.time.Period period13 = period11.withSeconds(0);
        org.joda.time.LocalDate localDate14 = localDate3.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.Period period17 = period15.multipliedBy((int) (byte) 100);
        org.joda.time.Period period19 = period17.withSeconds(58);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = period17.withPeriodType(periodType20);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test5457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5457");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime5.toTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.plusMinutes(292278994);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay6.plusMinutes(54);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test5458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5458");
        java.util.Date date6 = new java.util.Date(433, (int) (byte) 1, 2, 15, (-785), 1863);
        long long7 = date6.getTime();
        int int8 = date6.getHours();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 02 02:26:03 GMT 2333");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 11457944763000L + "'", long7 == 11457944763000L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test5459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5459");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight.Property property3 = dateMidnight1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        int int5 = mutableDateTime4.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone8);
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType12 = periodType11.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateTime9, periodType12);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod17 = mutablePeriod16.copy();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(chronology18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.yearOfCentury();
        org.joda.time.Duration duration21 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration21);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod25.copy();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(chronology27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.yearOfCentury();
        org.joda.time.Duration duration30 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod34 = mutablePeriod33.copy();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.yearOfCentury();
        org.joda.time.Duration duration38 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        boolean boolean39 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period40 = duration38.toPeriod();
        boolean boolean41 = duration21.isEqual((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period42 = duration21.toPeriod();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight1.withDurationAdded((org.joda.time.ReadableDuration) duration21, 0);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusDays(13);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.dayOfMonth();
        org.joda.time.DurationField durationField48 = property47.getRangeDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test5460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5460");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        int int1 = mutableDateTime0.getDayOfMonth();
        org.joda.time.Instant instant2 = mutableDateTime0.toInstant();
        org.joda.time.Instant instant4 = instant2.plus((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        int int6 = mutableDateTime5.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableInstant) dateTime10, periodType13);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod18 = mutablePeriod17.copy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfCentury();
        org.joda.time.Duration duration22 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant2, (org.joda.time.ReadableDuration) duration22);
        java.lang.Object obj25 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone28);
        int int30 = dateTime29.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTime(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(obj25, dateTimeZone32);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.year();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) mutableDateTime35, periodType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(chronology39);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.era();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        int int43 = mutableDateTime42.getDayOfMonth();
        boolean boolean44 = dateMidnight40.isEqual((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(chronology45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType49 = periodType48.withWeeksRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight46, readableDuration47, periodType48);
        org.joda.time.Period period52 = period50.withSeconds(0);
        org.joda.time.Period period54 = period52.plusMinutes((int) (byte) 1);
        org.joda.time.Period period56 = period52.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period59 = period52.withField(durationFieldType57, 7);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime();
        int int63 = mutableDateTime62.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone66);
        org.joda.time.DateTime dateTime68 = dateTime67.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType70 = periodType69.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime62, (org.joda.time.ReadableInstant) dateTime67, periodType70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(208L, (long) 100, periodType70, chronology72);
        org.joda.time.Period period74 = period52.withPeriodType(periodType70);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateMidnight40, periodType70);
        org.joda.time.Instant instant76 = new org.joda.time.Instant((java.lang.Object) dateMidnight40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight78 = dateMidnight40.withMonthOfYear(434);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 434 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 22 + "'", int63 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period74);
    }

    @Test
    public void test5461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5461");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusHours((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay7.toDateTimeToday();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType13 = periodType12.withWeeksRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, readableDuration11, periodType12);
        org.joda.time.Period period16 = period14.withSeconds(0);
        org.joda.time.Period period18 = period16.plusMinutes((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay7.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.TimeOfDay timeOfDay22 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.withChronologyRetainFields(chronology23);
        org.joda.time.DateTime dateTime25 = timeOfDay24.toDateTimeToday();
        org.joda.time.DateTime dateTime27 = dateTime25.plusYears((int) 'u');
        org.joda.time.Chronology chronology28 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfWeek();
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay19.withChronologyRetainFields(chronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = chronology28.getZone();
        int int33 = dateTimeZone31.getOffsetFromLocal(27L);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test5462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5462");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime8 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear(2);
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        org.joda.time.Instant instant13 = instant11.withMillis((long) 5);
        org.joda.time.MutableDateTime mutableDateTime14 = instant13.toMutableDateTimeISO();
        org.joda.time.Instant instant17 = instant13.withDurationAdded((long) (-292275054), 32);
        long long18 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) instant13);
        org.joda.time.DateMidnight dateMidnight19 = property2.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight20 = property2.roundHalfCeilingCopy();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.lang.String str23 = locale22.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = dateMidnight20.toString("-0001-02-23T07:13:11.054", locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 19044L + "'", long18 == 19044L);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test5463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5463");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        org.joda.time.MutableInterval mutableInterval3 = interval2.toMutableInterval();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval6 = localDate5.toInterval();
        boolean boolean7 = interval2.isBefore((org.joda.time.ReadableInterval) interval6);
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period10 = interval6.toPeriod(periodType9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval13 = localDate12.toInterval();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = interval16.toMutableInterval();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval20 = localDate19.toInterval();
        boolean boolean21 = interval16.isBefore((org.joda.time.ReadableInterval) interval20);
        boolean boolean22 = interval13.abuts((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Interval interval23 = interval6.overlap((org.joda.time.ReadableInterval) interval16);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval26 = localDate25.toInterval();
        org.joda.time.MutableInterval mutableInterval27 = interval26.toMutableInterval();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval30 = localDate29.toInterval();
        boolean boolean31 = interval26.isBefore((org.joda.time.ReadableInterval) interval30);
        org.joda.time.MutableInterval mutableInterval32 = interval30.toMutableInterval();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period34 = interval30.toPeriod(periodType33);
        boolean boolean35 = interval23.contains((org.joda.time.ReadableInterval) interval30);
        long long36 = interval23.getEndMillis();
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(mutableInterval3);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutableInterval27);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 86400000L + "'", long36 == 86400000L);
    }

    @Test
    public void test5464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5464");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.era();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        int int4 = mutableDateTime3.getDayOfMonth();
        boolean boolean5 = dateMidnight1.isEqual((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateMidnight.Property property6 = dateMidnight1.era();
        org.joda.time.DateMidnight dateMidnight7 = property6.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight8 = property6.getDateMidnight();
        int int9 = property6.getLeapAmount();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test5465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5465");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.Instant instant4 = instant0.withDurationAdded(296L, 32769);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) 13, (long) 157);
        org.joda.time.Interval interval8 = interval7.toInterval();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod12 = mutablePeriod11.copy();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(chronology13);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.yearOfCentury();
        org.joda.time.Duration duration16 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod19.copy();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.yearOfCentury();
        org.joda.time.Duration duration24 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        boolean boolean25 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration26 = duration24.toDuration();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone29);
        org.joda.time.DateTime dateTime31 = dateTime30.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime31.toMutableDateTime();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.withChronologyRetainFields(chronology36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = timeOfDay37.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay37.plusHours((-1));
        org.joda.time.Chronology chronology41 = timeOfDay40.getChronology();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.TimeOfDay timeOfDay44 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.withChronologyRetainFields(chronology45);
        long long48 = chronology41.set((org.joda.time.ReadablePartial) timeOfDay44, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(chronology41);
        org.joda.time.DateTime dateTime50 = dateTime31.toDateTime(chronology41);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = dateTime31.toDateTime(chronology51);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Interval interval54 = interval8.withDurationAfterStart((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Instant instant56 = instant4.withDurationAdded((org.joda.time.ReadableDuration) duration26, 13);
        org.joda.time.Instant instant59 = instant56.withDurationAdded(53L, 999);
        org.joda.time.MutableDateTime mutableDateTime60 = instant56.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime61 = instant56.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-86399999L) + "'", long48 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
    }

    @Test
    public void test5466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5466");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDate2.getFieldTypes();
        org.joda.time.LocalDate localDate8 = localDate2.withWeekOfWeekyear(9);
        org.joda.time.DateMidnight dateMidnight9 = localDate8.toDateMidnight();
        org.joda.time.LocalDate.Property property10 = localDate8.monthOfYear();
        org.joda.time.Interval interval11 = localDate8.toInterval();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test5467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5467");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.lang.String str2 = locale1.getLanguage();
        java.lang.String str3 = locale1.getDisplayName();
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str5 = locale1.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test5468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5468");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.year();
        org.joda.time.LocalDate localDate3 = property2.roundHalfFloorCopy();
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.plusWeeks(37);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay(4518869219L);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean9 = localDate6.isAfter((org.joda.time.ReadablePartial) localTime8);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test5469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5469");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate7 = localDate2.minusDays(7);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.minusDays(25993011);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-24" + "'", str8, "1969-12-24");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test5470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5470");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.DurationField durationField17 = chronology8.days();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType21 = null;
        boolean boolean22 = periodType20.isSupported(durationFieldType21);
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 1, 0L, periodType20);
        org.joda.time.Period period25 = period23.withMillis(2968);
        int[] intArray28 = chronology8.get((org.joda.time.ReadablePeriod) period25, (long) 59000, (long) (short) 1);
        java.util.Date date30 = new java.util.Date((long) 6);
        date30.setMinutes(1);
        java.lang.String str33 = date30.toLocaleString();
        org.joda.time.YearMonthDay yearMonthDay34 = org.joda.time.YearMonthDay.fromDateFields(date30);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay34.year();
        org.joda.time.YearMonthDay yearMonthDay37 = property35.setCopy(0);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.plusDays((-292275054));
        int int40 = yearMonthDay37.size();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.standard();
        java.lang.String str43 = periodType42.getName();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone46);
        org.joda.time.DateTime dateTime48 = dateTime47.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime48.toMutableDateTime();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.TimeOfDay timeOfDay52 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.withChronologyRetainFields(chronology53);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = timeOfDay54.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay54.plusHours((-1));
        org.joda.time.Chronology chronology58 = timeOfDay57.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.TimeOfDay timeOfDay61 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay61.withChronologyRetainFields(chronology62);
        long long65 = chronology58.set((org.joda.time.ReadablePartial) timeOfDay61, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay66 = new org.joda.time.TimeOfDay(chronology58);
        org.joda.time.DateTime dateTime67 = dateTime48.toDateTime(chronology58);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 'x', periodType42, chronology58);
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.Period period74 = new org.joda.time.Period((long) (byte) 0, 0L);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.Period period76 = period74.withPeriodType(periodType75);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.minutes();
        boolean boolean78 = periodType75.isSupported(durationFieldType77);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(periodType75);
        org.joda.time.LocalTime localTime81 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property82 = localTime81.millisOfDay();
        java.lang.String str84 = localTime81.toString("22");
        org.joda.time.LocalTime localTime86 = localTime81.withMillisOfSecond((int) (short) 0);
        org.joda.time.Chronology chronology87 = localTime86.getChronology();
        org.joda.time.Period period88 = new org.joda.time.Period(0L, 100L, periodType75, chronology87);
        int[] intArray90 = chronology58.get((org.joda.time.ReadablePeriod) period88, (long) 24);
        // The following exception was thrown during execution in test generation
        try {
            chronology8.validate((org.joda.time.ReadablePartial) yearMonthDay37, intArray90);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, -58, -999]");
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Thu Jan 01 00:01:00 GMT 1970");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-1-1 0:01:00" + "'", str33, "1970-1-1 0:01:00");
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Standard" + "'", str43, "Standard");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-86399999L) + "'", long65 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "22" + "'", str84, "22");
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 0, 0]");
    }

    @Test
    public void test5471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5471");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withYear((int) 'u');
        org.joda.time.DateTime dateTime4 = dateTime2.plusMonths((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withChronologyRetainFields(chronology18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = timeOfDay19.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay19.plusHours((-1));
        org.joda.time.Chronology chronology23 = timeOfDay22.getChronology();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withChronologyRetainFields(chronology27);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) timeOfDay26, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(chronology23);
        org.joda.time.DateTime dateTime32 = dateTime13.toDateTime(chronology23);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone35);
        org.joda.time.Chronology chronology37 = chronology23.withZone(dateTimeZone35);
        boolean boolean38 = dateTimeZone6.equals((java.lang.Object) chronology23);
        org.joda.time.DateTime dateTime39 = dateTime2.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight40 = dateTime2.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-86399999L) + "'", long30 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test5472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5472");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.clear();
        org.joda.time.YearMonth yearMonth2 = org.joda.time.YearMonth.fromCalendarFields(calendar0);
        java.util.TimeZone timeZone3 = calendar0.getTimeZone();
        java.time.Instant instant4 = calendar0.toInstant();
        java.lang.Object obj5 = calendar0.clone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonth2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test5473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5473");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType3 = periodType2.withSecondsRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.withChronologyRetainFields(chronology7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = timeOfDay8.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.plusHours((-1));
        org.joda.time.Chronology chronology12 = timeOfDay11.getChronology();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.halfdayOfDay();
        org.joda.time.Period period15 = new org.joda.time.Period(86399999L, 43L, periodType3, chronology12);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(periodType3);
        mutablePeriod16.addMinutes(1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test5474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5474");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.year();
        org.joda.time.Chronology chronology11 = mutableDateTime9.getChronology();
        org.joda.time.Period period12 = new org.joda.time.Period((long) 17, chronology11);
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTime dateTime14 = dateTime2.withChronology(chronology13);
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology13);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test5475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5475");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate7 = localDate2.minusDays(7);
        org.joda.time.LocalDate localDate9 = localDate2.minusDays(2);
        org.joda.time.DateTime dateTime10 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property11 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate13 = property11.addToCopy((int) (byte) -1);
        org.joda.time.LocalDate localDate14 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = property11.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate16 = property11.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test5476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5476");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        java.lang.Object obj2 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone5);
        int int7 = dateTime6.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(obj2, dateTimeZone9);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.year();
        boolean boolean14 = calendar0.after((java.lang.Object) property13);
        calendar0.setMinimalDaysInFirstWeek(69);
        calendar0.setTimeInMillis((-292275054L));
        int int19 = calendar0.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-292275054,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=69,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=28,DAY_OF_YEAR=362,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=48,SECOND=44,MILLISECOND=946,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test5477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5477");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        int int4 = calendar2.getActualMaximum((int) (short) 10);
        java.time.Instant instant5 = calendar2.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            calendar2.setWeekDate(433, 0, 59000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 59000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514219363,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=59,MILLISECOND=363,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNotNull(instant5);
    }

    @Test
    public void test5478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5478");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime9 = property6.getMutableDateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.minusYears((int) ' ');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology14);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.withChronologyRetainFields(chronology16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = timeOfDay17.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.plusHours((-1));
        org.joda.time.Chronology chronology21 = timeOfDay20.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.withChronologyRetainFields(chronology25);
        long long28 = chronology21.set((org.joda.time.ReadablePartial) timeOfDay24, (long) (byte) -1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType32 = null;
        boolean boolean33 = periodType31.isSupported(durationFieldType32);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 1, 0L, periodType31);
        int[] intArray37 = chronology21.get((org.joda.time.ReadablePeriod) period34, (long) 2022, (long) ' ');
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, chronology21);
        mutableDateTime9.setChronology(chronology21);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime();
        int int41 = mutableDateTime40.getDayOfMonth();
        org.joda.time.Instant instant42 = mutableDateTime40.toInstant();
        boolean boolean44 = mutableDateTime40.isBefore((long) 2);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int48 = dateTimeZone46.getOffsetFromLocal((long) (byte) 1);
        mutableDateTime40.setZone(dateTimeZone46);
        long long51 = dateTimeZone46.previousTransition((long) (short) -1);
        long long53 = dateTimeZone46.previousTransition((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay(dateTimeZone46);
        mutableDateTime9.setZoneRetainFields(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int59 = dateTimeZone57.getOffsetFromLocal((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone62);
        org.joda.time.DateTime dateTime64 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime64.toMutableDateTime();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.TimeOfDay timeOfDay68 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay68.withChronologyRetainFields(chronology69);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = timeOfDay70.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay73 = timeOfDay70.plusHours((-1));
        org.joda.time.Chronology chronology74 = timeOfDay73.getChronology();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.TimeOfDay timeOfDay77 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology76);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.TimeOfDay timeOfDay79 = timeOfDay77.withChronologyRetainFields(chronology78);
        long long81 = chronology74.set((org.joda.time.ReadablePartial) timeOfDay77, (long) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay82 = new org.joda.time.TimeOfDay(chronology74);
        org.joda.time.DateTime dateTime83 = dateTime64.toDateTime(chronology74);
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone86);
        org.joda.time.Chronology chronology88 = chronology74.withZone(dateTimeZone86);
        boolean boolean89 = dateTimeZone57.equals((java.lang.Object) chronology74);
        org.joda.time.DateMidnight dateMidnight90 = org.joda.time.DateMidnight.now(dateTimeZone57);
        int int91 = dateMidnight90.getMinuteOfHour();
        mutableDateTime9.setTime((org.joda.time.ReadableInstant) dateMidnight90);
        org.joda.time.DateMidnight dateMidnight94 = dateMidnight90.withYearOfCentury(27);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-86399999L) + "'", long28 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 10L + "'", long53 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(timeOfDay79);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-86399999L) + "'", long81 == (-86399999L));
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(dateMidnight94);
    }

    @Test
    public void test5479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5479");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval2 = localDate1.toInterval();
        java.lang.String str3 = interval2.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime7.withTimeAtStartOfDay();
        boolean boolean9 = interval2.isBefore((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.MutableInterval mutableInterval10 = interval2.toMutableInterval();
        org.joda.time.Chronology chronology11 = mutableInterval10.getChronology();
        org.joda.time.DateTime dateTime12 = mutableInterval10.getStart();
        org.joda.time.Instant instant13 = org.joda.time.Instant.now();
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime15 = instant13.toMutableDateTimeISO();
        org.joda.time.Chronology chronology16 = instant13.getChronology();
        org.joda.time.Instant instant17 = instant13.toInstant();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.Interval interval20 = localDate19.toInterval();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(chronology21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.era();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        int int25 = mutableDateTime24.getDayOfMonth();
        boolean boolean26 = dateMidnight22.isEqual((org.joda.time.ReadableInstant) mutableDateTime24);
        int int27 = mutableDateTime24.getWeekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod30.copy();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(chronology32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.yearOfCentury();
        org.joda.time.Duration duration35 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod38.copy();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(chronology40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.yearOfCentury();
        org.joda.time.Duration duration43 = mutablePeriod39.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        boolean boolean44 = duration35.isEqual((org.joda.time.ReadableDuration) duration43);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration43, 0);
        org.joda.time.Interval interval47 = interval20.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Instant instant48 = instant13.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.YearMonthDay yearMonthDay50 = dateTime12.toYearMonthDay();
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str3, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
    }

    @Test
    public void test5480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5480");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '4');
        org.joda.time.Period period3 = period1.plusHours((int) (short) 10);
        org.joda.time.Period period5 = period3.withSeconds((-292275054));
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test5481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5481");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate localDate3 = localDate1.plusDays(93);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfWeek();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514219615,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=59,MILLISECOND=615,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test5482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5482");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.TimeOfDay timeOfDay6 = dateTime5.toTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.plusSeconds((int) (byte) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = timeOfDay6.getFieldTypes();
        org.joda.time.TimeOfDay.Property property10 = timeOfDay6.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test5483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5483");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.Chronology chronology7 = dateTimeFormatter6.getChronology();
        boolean boolean8 = dateTimeFormatter6.isOffsetParsed();
        org.joda.time.Chronology chronology9 = dateTimeFormatter6.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 24);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter11.getPrinter();
        boolean boolean13 = dateTimeFormatter11.isParser();
        boolean boolean14 = dateTimeFormatter11.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = org.joda.time.DateMidnight.parse("it", dateTimeFormatter11);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimePrinter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test5484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5484");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        calendar0.setTimeZone(timeZone1);
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromCalendarFields(calendar0);
        calendar0.clear();
        // The following exception was thrown during execution in test generation
        try {
            calendar0.roll((-12), true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514219675,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=59,MILLISECOND=675,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay4);
    }

    @Test
    public void test5485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5485");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("-0001-02-23T07:15:56.246", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5486");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.year();
        org.joda.time.LocalDate localDate4 = localDate1.withCenturyOfEra(10);
        org.joda.time.LocalDate localDate6 = localDate4.plusDays((int) (short) -1);
        java.lang.String str7 = localDate6.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1069-12-31" + "'", str7, "1069-12-31");
    }

    @Test
    public void test5487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5487");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTime dateTime5 = timeOfDay4.toDateTimeToday();
        int int6 = dateTime5.getDayOfYear();
        org.joda.time.DateTime dateTime7 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test5488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5488");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate.Property property6 = localDate2.dayOfYear();
        int int7 = localDate2.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int9 = localDate2.get(dateTimeFieldType8);
        org.joda.time.LocalDate.Property property10 = localDate2.era();
        org.joda.time.LocalDate localDate12 = localDate2.plusWeeks((int) 'a');
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test5489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5489");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plusWeeks((int) ' ');
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.weekOfWeekyear();
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = dateMidnight6.toString("0", locale9);
        boolean boolean11 = locale9.hasExtensions();
        boolean boolean12 = locale9.hasExtensions();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        calendar13.setTimeZone(timeZone14);
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromCalendarFields(calendar13);
        java.lang.Character[] charArray23 = new java.lang.Character[] { 'x', 'u', 'u', '4', 'u', '#' };
        java.util.LinkedHashSet<java.lang.Character> charSet24 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet24, charArray23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        boolean boolean27 = charSet24.remove((java.lang.Object) dateTime26);
        boolean boolean28 = charSet24.isEmpty();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime32.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime33.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.year();
        org.joda.time.MutableDateTime mutableDateTime37 = property35.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime38 = property35.getMutableDateTime();
        boolean boolean39 = charSet24.remove((java.lang.Object) property35);
        boolean boolean40 = calendar13.equals((java.lang.Object) property35);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645514219810,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=16,SECOND=59,MILLISECOND=810,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test5490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5490");
        java.util.Date date1 = new java.util.Date((long) 6);
        date1.setMinutes(1);
        java.lang.String str4 = date1.toLocaleString();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.year();
        org.joda.time.YearMonthDay yearMonthDay8 = property6.setCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = yearMonthDay8.getFieldType(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:01:00 GMT 1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-1-1 0:01:00" + "'", str4, "1970-1-1 0:01:00");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test5491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5491");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) -1, chronology1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(1);
        org.joda.time.LocalDate.Property property5 = localDate2.year();
        org.joda.time.LocalDate localDate7 = localDate2.minusDays(7);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.year();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.MutableDateTime mutableDateTime18 = property15.set(5);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        int int20 = property15.getMaximumTextLength(locale19);
        java.lang.String str21 = localDate7.toString("1", locale19);
        org.joda.time.LocalDate localDate23 = localDate7.minusYears(1976);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test5492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5492");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 10);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int5 = localDate1.get(dateTimeFieldType4);
        org.joda.time.LocalDate localDate7 = localDate1.minusDays(22);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.year();
        int int11 = dateTimeField9.getLeapAmount(1645513989099L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test5493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5493");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("1976");
        java.lang.String str2 = locale1.getISO3Language();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test5494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5494");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(68, 432, 1091, 1095, 300001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1095 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5495");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = property2.setCopy((int) (short) 10);
        org.joda.time.LocalTime localTime5 = property2.withMinimumValue();
        org.joda.time.LocalTime localTime6 = property2.roundHalfCeilingCopy();
        java.lang.String str7 = property2.getName();
        java.lang.String str8 = property2.getAsShortText();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.year();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.addWrapField(6);
        org.joda.time.MutableDateTime mutableDateTime18 = property15.getMutableDateTime();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property15.getAsText(locale19);
        java.util.Locale locale23 = new java.util.Locale("1976", "PeriodType[YearMonthDayTime]");
        int int24 = property15.getMaximumShortTextLength(locale23);
        java.util.Set<java.lang.Character> charSet25 = locale23.getExtensionKeys();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale23);
        java.lang.String str27 = property2.getAsShortText(locale23);
        org.joda.time.LocalTime localTime28 = property2.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "millisOfDay" + "'", str7, "millisOfDay");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1976" + "'", str20, "1976");
        org.junit.Assert.assertEquals(locale23.toString(), "1976_PERIODTYPE[YEARMONTHDAYTIME]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645514220000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test5496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5496");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(32772);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        mutableDateTime2.setTime(1, 7, 11, 0);
        int int9 = mutableDateTime2.getCenturyOfEra();
        int int10 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) mutableDateTime2);
        mutableDateTime2.setDayOfYear(70);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32772 + "'", int10 == 32772);
    }

    @Test
    public void test5497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5497");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType9 = periodType8.withWeeksRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight6, readableDuration7, periodType8);
        java.lang.Object obj11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withChronologyRetainFields(chronology15);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = timeOfDay16.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay16.plusHours((-1));
        org.joda.time.Chronology chronology20 = timeOfDay19.getChronology();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withChronologyRetainFields(chronology24);
        long long27 = chronology20.set((org.joda.time.ReadablePartial) timeOfDay23, (long) (byte) -1);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType31 = null;
        boolean boolean32 = periodType30.isSupported(durationFieldType31);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 1, 0L, periodType30);
        int[] intArray36 = chronology20.get((org.joda.time.ReadablePeriod) period33, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(obj11, chronology20);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 17, (long) (byte) -1, periodType8, chronology20);
        org.joda.time.DateTimeField dateTimeField39 = chronology20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology20.clockhourOfDay();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology20);
        org.joda.time.DurationField durationField42 = chronology20.eras();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 0, chronology20);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay((long) 86040000, chronology20);
        org.joda.time.TimeOfDay timeOfDay45 = org.joda.time.TimeOfDay.fromMillisOfDay(8L, chronology20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay47 = timeOfDay45.withMinuteOfHour(434);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 434 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-86399999L) + "'", long27 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(timeOfDay45);
    }

    @Test
    public void test5498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5498");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withChronologyRetainFields(chronology3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay4.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.plusHours((-1));
        org.joda.time.Chronology chronology8 = timeOfDay7.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.withChronologyRetainFields(chronology12);
        long long15 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay11, (long) (byte) -1);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfDay();
        org.joda.time.LocalTime localTime20 = property18.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime21 = property18.roundHalfFloorCopy();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(chronology22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType26 = periodType25.withWeeksRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, readableDuration24, periodType25);
        org.joda.time.Period period29 = period27.withSeconds(0);
        org.joda.time.Period period31 = period29.plusMinutes((int) (byte) 1);
        org.joda.time.Period period33 = period29.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period36 = period29.withField(durationFieldType34, 7);
        org.joda.time.LocalTime localTime38 = localTime21.withPeriodAdded((org.joda.time.ReadablePeriod) period29, (int) (short) 1);
        org.joda.time.Period period40 = period29.withMillis((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay11.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) (byte) 1);
        org.joda.time.LocalTime.Property property47 = localTime46.millisOfDay();
        org.joda.time.LocalTime localTime49 = property47.addNoWrapToCopy(11);
        org.joda.time.LocalTime localTime50 = property47.roundHalfFloorCopy();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType55 = periodType54.withWeeksRemoved();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight52, readableDuration53, periodType54);
        org.joda.time.Period period58 = period56.withSeconds(0);
        org.joda.time.Period period60 = period58.plusMinutes((int) (byte) 1);
        org.joda.time.Period period62 = period58.withSeconds((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period65 = period58.withField(durationFieldType63, 7);
        org.joda.time.LocalTime localTime67 = localTime50.withPeriodAdded((org.joda.time.ReadablePeriod) period58, (int) (short) 1);
        org.joda.time.Period period69 = period58.withMillis((int) (short) -1);
        mutablePeriod44.add((org.joda.time.ReadablePeriod) period69);
        int int71 = period69.getSeconds();
        org.joda.time.Period period72 = period29.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Period period74 = period29.withDays(85);
        int int75 = period29.getWeeks();
        org.joda.time.Duration duration76 = period29.toStandardDuration();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86399999L) + "'", long15 == (-86399999L));
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(duration76);
    }

    @Test
    public void test5499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5499");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.withDayOfYear((int) '#');
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight1.plusYears(1969);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withField(dateTimeFieldType7, 0);
        org.joda.time.Interval interval10 = dateMidnight9.toInterval();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 1, 100L);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod13.copy();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(chronology15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.yearOfCentury();
        org.joda.time.Duration duration18 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight9.minusWeeks(6000000);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test5500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5500");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType7 = periodType6.withWeeksRemoved();
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight4, readableDuration5, periodType6);
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withChronologyRetainFields(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = timeOfDay14.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay14.plusHours((-1));
        org.joda.time.Chronology chronology18 = timeOfDay17.getChronology();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay(1L, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withChronologyRetainFields(chronology22);
        long long25 = chronology18.set((org.joda.time.ReadablePartial) timeOfDay21, (long) (byte) -1);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.DurationFieldType durationFieldType29 = null;
        boolean boolean30 = periodType28.isSupported(durationFieldType29);
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 1, 0L, periodType28);
        int[] intArray34 = chronology18.get((org.joda.time.ReadablePeriod) period31, (long) 2022, (long) ' ');
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(obj9, chronology18);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 17, (long) (byte) -1, periodType6, chronology18);
        org.joda.time.DateTimeField dateTimeField37 = chronology18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology18.clockhourOfDay();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField40 = chronology18.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay((long) 59, chronology18);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-86399999L) + "'", long25 == (-86399999L));
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, -1, -990]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest21 {

    public static boolean debug = false;

    @Test
    public void test10501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10501");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(575);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((java.lang.Object) locale0, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
    }

    @Test
    public void test10502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10502");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Interval interval22 = localDate21.toInterval();
        org.joda.time.LocalDate localDate24 = localDate21.withDayOfYear(94);
        java.lang.String str25 = localDate24.toString();
        org.joda.time.LocalDate.Property property26 = localDate24.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate28 = localDate24.withWeekOfWeekyear(69499207);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69499207 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-04-04" + "'", str25, "2022-04-04");
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test10503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10503");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add(1322017);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test10504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10504");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime5.millisOfDay();
        mutableDateTime5.addMinutes(69298980);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test10505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10505");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 5, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusHours((-2022));
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        boolean boolean10 = localDateTime8.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean14 = localDateTime12.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusDays(69218383);
        boolean boolean17 = property7.equals((java.lang.Object) 69218383);
        org.joda.time.DateTime dateTime18 = property7.getDateTime();
        int int19 = property7.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2922789 + "'", int19 == 2922789);
    }

    @Test
    public void test10506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10506");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears(1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYear(69204037);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withSecondOfMinute(24);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusHours(69427575);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.era();
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        boolean boolean25 = dateTimeZone21.equals((java.lang.Object) strMap23);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (byte) -1);
        long long30 = dateTimeZone21.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str31 = dateTimeZone21.getID();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone21);
        int int33 = localDate32.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property35 = localDate32.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType34.getField(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) chronology36, chronology38);
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.minutes();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekyear();
        org.joda.time.DurationField durationField43 = durationFieldType17.getField(chronology40);
        org.joda.time.DurationField durationField44 = chronology40.days();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap51 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder50.appendTimeZoneShortName(strMap51);
        boolean boolean53 = dateTimeZone49.equals((java.lang.Object) strMap51);
        boolean boolean55 = dateTimeZone49.isStandardOffset((long) (byte) -1);
        long long58 = dateTimeZone49.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str59 = dateTimeZone49.getID();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone49);
        int int61 = localDate60.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property63 = localDate60.property(dateTimeFieldType62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType62.getField(chronology64);
        java.util.Locale locale66 = java.util.Locale.getDefault();
        int int67 = dateTimeField65.getMaximumShortTextLength(locale66);
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        int int69 = dateTimeField65.getMaximumTextLength(locale68);
        java.util.Locale locale70 = locale68.stripExtensions();
        int int71 = dateTimeField45.getMaximumTextLength(locale68);
        boolean boolean72 = locale68.hasExtensions();
        java.lang.String str73 = locale68.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime74 = property15.setCopy("2022-01-25T17:33:39.549", locale68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-01-25T17:33:39.549\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-360599990L) + "'", long30 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+100:10" + "'", str31, "+100:10");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-360599990L) + "'", long58 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+100:10" + "'", str59, "+100:10");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale66);
// flaky:         org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "fr" + "'", str73, "fr");
    }

    @Test
    public void test10507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10507");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfMonth();
        org.joda.time.DateTime dateTime33 = property32.roundCeilingCopy();
        org.joda.time.DateTime dateTime34 = property32.getDateTime();
        org.joda.time.DateTime dateTime36 = dateTime34.withYear(69207073);
        org.joda.time.DateTime dateTime38 = dateTime36.plusMillis(69219412);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.ISODateTimeFormat.dateTimeNoMillis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter39.withOffsetParsed();
        java.lang.String str41 = dateTime38.toString(dateTimeFormatter40);
        java.lang.StringBuffer stringBuffer42 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.monthOfYear();
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str48 = locale47.getISO3Language();
        int int49 = property46.getMaximumShortTextLength(locale47);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property46.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime52 = property46.add((long) '#');
        mutableDateTime52.addYears(69210165);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime52.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        mutableDateTime52.add(readablePeriod56);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime52.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter40.printTo(stringBuffer42, (org.joda.time.ReadableInstant) mutableDateTime52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "69207073-01-06T14:31:40+100:10" + "'", str41, "69207073-01-06T14:31:40+100:10");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "fra" + "'", str48, "fra");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test10508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10508");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendTimeZoneShortName(strMap10);
        boolean boolean12 = dateTimeZone8.equals((java.lang.Object) strMap10);
        boolean boolean14 = dateTimeZone8.isStandardOffset((long) (byte) -1);
        long long17 = dateTimeZone8.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str18 = dateTimeZone8.getID();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone8);
        int int20 = localDate19.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property22 = localDate19.property(dateTimeFieldType21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType21.getField(chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((java.lang.Object) chronology23, chronology25);
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.months();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.weekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap38 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendTimeZoneShortName(strMap38);
        boolean boolean40 = dateTimeZone36.equals((java.lang.Object) strMap38);
        boolean boolean42 = dateTimeZone36.isStandardOffset((long) (byte) -1);
        long long45 = dateTimeZone36.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str46 = dateTimeZone36.getID();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone36);
        int int48 = localDate47.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property50 = localDate47.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType49.getField(chronology51);
        java.util.Locale locale53 = java.util.Locale.getDefault();
        int int54 = dateTimeField52.getMaximumShortTextLength(locale53);
        long long56 = dateTimeField52.roundCeiling((long) 1970);
        int int58 = dateTimeField52.get((long) 69214930);
        java.util.Locale locale60 = new java.util.Locale("hi!");
        java.util.Locale locale61 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.lang.String str63 = locale60.getISO3Language();
        int int64 = dateTimeField52.getMaximumShortTextLength(locale60);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) 12, chronology27, locale60);
        java.util.Locale.setDefault(category0, locale60);
        java.util.Locale.Builder builder67 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder69 = builder67.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder71 = builder69.setScript("");
        java.util.Locale locale72 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder73 = builder71.setLocale(locale72);
        java.util.Locale locale74 = builder71.build();
        java.util.Locale.Builder builder76 = builder71.setRegion("ko");
        java.util.Locale locale77 = builder71.build();
        java.util.Locale.setDefault(category0, locale77);
        java.util.Locale locale79 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-360599990L) + "'", long17 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+100:10" + "'", str18, "+100:10");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-360599990L) + "'", long45 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+100:10" + "'", str46, "+100:10");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(locale53);
// flaky:         org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 9223372036494175807L + "'", long56 == 9223372036494175807L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals(locale60.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hi!" + "'", str63, "hi!");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_KO");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_KO");
    }

    @Test
    public void test10509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10509");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withDurationAdded(readableDuration5, 1969);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.minusDays(54202800);
        int int10 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusDays(31);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime0.plus(readableDuration13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime0.year();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder21 = builder19.setScript("");
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder23.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale26 = builder23.build();
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Locale.Builder builder29 = builder22.setLocale(locale27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = localDateTime0.toString("5777058235T181708+10010", locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test10510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10510");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.minusMinutes(69207073);
        org.joda.time.LocalTime localTime5 = localTime3.minusHours(69218807);
        org.joda.time.LocalTime localTime7 = localTime5.plusMinutes(69207900);
        org.joda.time.LocalTime localTime9 = localTime7.minusSeconds(31);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime9.plus(readablePeriod10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = localTime11.withMillisOfSecond(69375034);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69375034 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test10511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10511");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate22.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDate.Property property27 = localDate22.weekyear();
        org.joda.time.Chronology chronology28 = localDate22.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.Chronology chronology30 = chronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap37 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendTimeZoneShortName(strMap37);
        boolean boolean39 = dateTimeZone35.equals((java.lang.Object) strMap37);
        boolean boolean41 = dateTimeZone35.isStandardOffset((long) (byte) -1);
        long long44 = dateTimeZone35.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str45 = dateTimeZone35.getID();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone35);
        int int47 = localDate46.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property49 = localDate46.property(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType48.getField(chronology50);
        java.util.Locale locale52 = java.util.Locale.getDefault();
        int int53 = dateTimeField51.getMaximumShortTextLength(locale52);
        boolean boolean54 = locale52.hasExtensions();
        java.lang.String str55 = locale52.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 69300104, chronology28, locale52, (java.lang.Integer) 69228250);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone60);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime61.monthOfYear();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime61.minuteOfDay();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime61.dayOfYear();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime61.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime66 = property65.roundHalfFloor();
        java.lang.Object obj67 = mutableDateTime66.clone();
        boolean boolean68 = mutableDateTime58.isEqual((org.joda.time.ReadableInstant) mutableDateTime66);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime58.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-360599990L) + "'", long44 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:10" + "'", str45, "+100:10");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "fr-FR" + "'", str55, "fr-FR");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "1970-01-05T04:00:00.000+100:10");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1970-01-05T04:00:00.000+100:10");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1970-01-05T04:00:00.000+100:10");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test10512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10512");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime34 = property32.roundCeilingCopy();
        org.joda.time.DateTime dateTime36 = dateTime34.plus((long) 69214639);
        org.joda.time.DateTime dateTime38 = dateTime34.plusYears(69206325);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.DateTime dateTime42 = dateTime40.withMillisOfDay(69234149);
        org.joda.time.DateTime dateTime44 = dateTime40.withMillisOfDay(65651);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test10513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10513");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.yearOfCentury();
        mutableDateTime4.setMillisOfDay((int) '#');
        int int10 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "1", (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime4.toMutableDateTime();
        int int14 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", 4);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap20);
        boolean boolean22 = dateTimeZone18.equals((java.lang.Object) strMap20);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) -1);
        long long27 = dateTimeZone18.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str28 = dateTimeZone18.getID();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone18);
        int int30 = localDate29.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property32 = localDate29.property(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType31.getField(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) chronology33, chronology35);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate40 = localDate36.withPeriodAdded(readablePeriod38, (int) '#');
        org.joda.time.LocalDate.Property property41 = localDate36.weekyear();
        org.joda.time.LocalDate localDate42 = property41.withMinimumValue();
        org.joda.time.Chronology chronology43 = localDate42.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter0.withChronology(chronology43);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap50 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder49.appendTimeZoneShortName(strMap50);
        boolean boolean52 = dateTimeZone48.equals((java.lang.Object) strMap50);
        boolean boolean54 = dateTimeZone48.isStandardOffset((long) (byte) -1);
        long long57 = dateTimeZone48.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str58 = dateTimeZone48.getID();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone48);
        org.joda.time.LocalDate.Property property60 = localDate59.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight61 = localDate59.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder66 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap67 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder66.appendTimeZoneShortName(strMap67);
        boolean boolean69 = dateTimeZone65.equals((java.lang.Object) strMap67);
        boolean boolean71 = dateTimeZone65.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter62.withZone(dateTimeZone65);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone65);
        org.joda.time.DateTime dateTime74 = localDate59.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.DateTime dateTime76 = dateTime74.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property77 = dateTime74.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.DateTime dateTime80 = dateTime74.withDurationAdded(readableDuration78, 69213992);
        java.lang.String str81 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) dateTime74);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2) + "'", int10 == (-2));
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-5) + "'", int14 == (-5));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-360599990L) + "'", long27 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+100:10" + "'", str28, "+100:10");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-360599990L) + "'", long57 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+100:10" + "'", str58, "+100:10");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1970-005" + "'", str81, "1970-005");
    }

    @Test
    public void test10514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10514");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        java.util.Locale locale20 = java.util.Locale.getDefault();
        int int21 = dateTimeField19.getMaximumShortTextLength(locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String[] strArray32 = new java.lang.String[] { "", "1", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "monthOfYear", "hi!", "1", "monthOfYear", "hi!", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean35 = strSet33.isEmpty();
        boolean boolean36 = strSet22.removeAll((java.util.Collection<java.lang.String>) strSet33);
        boolean boolean37 = strSet33.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray43 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList51);
        boolean boolean55 = strList53.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList61);
        boolean boolean65 = strList63.equals((java.lang.Object) (-1));
        boolean boolean66 = strList53.retainAll((java.util.Collection<java.lang.String>) strList63);
        boolean boolean67 = strSet44.retainAll((java.util.Collection<java.lang.String>) strList53);
        java.util.Locale.FilteringMode filteringMode68 = null;
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList53, filteringMode68);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.lang.String>) strList75);
        boolean boolean79 = strList77.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.lang.String[] strArray84 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.lang.String>) strList85);
        boolean boolean89 = strList87.equals((java.lang.Object) (-1));
        boolean boolean90 = strList77.retainAll((java.util.Collection<java.lang.String>) strList87);
        strList77.clear();
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList77);
        boolean boolean93 = strSet33.retainAll((java.util.Collection<java.lang.String>) strList92);
        java.util.Set<java.lang.String> strSet94 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Iterator<java.lang.String> strItor95 = strSet94.iterator();
        boolean boolean96 = strSet33.addAll((java.util.Collection<java.lang.String>) strSet94);
        java.util.stream.Stream<java.lang.String> strStream97 = strSet33.parallelStream();
        int int98 = strSet33.size();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertNotNull(strItor95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(strStream97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 575 + "'", int98 == 575);
    }

    @Test
    public void test10515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10515");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder10.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendWeekyear(69213826, 69210315);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder11.appendDayOfMonth(59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder11.appendFractionOfHour(100, 86399999);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder19.appendFractionOfDay(57, 69335479);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder22.appendTimeZoneOffset("-2000-02-25T19:17:52.871", false, 65841, 69241069);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
    }

    @Test
    public void test10516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10516");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.LocalDate localDate23 = localDate21.minusDays(0);
        org.joda.time.LocalDate.Property property24 = localDate23.weekyear();
        org.joda.time.LocalDate localDate26 = property24.addWrapFieldToCopy(69253766);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test10517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10517");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        java.util.Locale locale20 = java.util.Locale.getDefault();
        int int21 = dateTimeField19.getMaximumShortTextLength(locale20);
        int int23 = dateTimeField19.getLeapAmount((long) 69218773);
        int int25 = dateTimeField19.getMaximumValue((long) 69497437);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test10518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10518");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(69263485, 69377626, 69418042, 69507097, 69257507, 69505082);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69507097 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10519");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate21.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDate.Property property26 = localDate21.weekyear();
        int int27 = property26.getLeapAmount();
        org.joda.time.LocalDate localDate28 = property26.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfYear();
        org.joda.time.LocalDate localDate31 = property29.addWrapFieldToCopy(2922750);
        int int32 = localDate31.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test10520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10520");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears(1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds((-32));
        org.joda.time.Chronology chronology9 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfWeek();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval13 = localDate11.toInterval();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate11.plus(readablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.monthOfYear();
        int int20 = mutableDateTime18.getWeekOfWeekyear();
        mutableDateTime18.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean24 = mutableDateTime18.isSupported(dateTimeFieldType23);
        int int25 = localDate11.get(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        boolean boolean27 = localDate11.isSupported(durationFieldType26);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        boolean boolean31 = localDateTime29.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withYearOfCentury((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.withDurationAdded(readableDuration34, 1969);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime29.minusDays(54202800);
        int int39 = localDateTime29.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime29.minusDays(31);
        int[] intArray42 = localDateTime29.getValues();
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology47);
        java.lang.String str49 = dateTimeFormatter45.print((org.joda.time.ReadablePartial) localTime48);
        org.joda.time.LocalTime.Property property50 = localTime48.millisOfDay();
        org.joda.time.LocalTime localTime52 = property50.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime54 = property50.addCopy((long) 70);
        org.joda.time.LocalTime localTime55 = property50.roundHalfFloorCopy();
        org.joda.time.Chronology chronology57 = null;
        java.util.Locale locale59 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology57, locale59, (java.lang.Integer) 54202800);
        java.util.Set<java.lang.Character> charSet62 = locale59.getExtensionKeys();
        int int63 = property50.getMaximumTextLength(locale59);
        java.util.Locale.setDefault(category44, locale59);
        java.util.Locale locale65 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str66 = locale65.getISO3Language();
        java.lang.String str67 = locale65.getISO3Language();
        java.lang.String str68 = locale65.getDisplayScript();
        java.util.Locale.setDefault(category44, locale65);
        java.util.Locale locale70 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category44, locale70);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray72 = dateTimeField10.set((org.joda.time.ReadablePartial) localDate11, 69351549, intArray42, "27", locale70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"27\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 56 + "'", int25 == 56);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 41 + "'", int39 == 41);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[2022, 2, 25, 69581278]");
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category44.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str49, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!");
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 8 + "'", int63 == 8);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "fra" + "'", str66, "fra");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "fra" + "'", str67, "fra");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(locale70);
// flaky:         org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
    }

    @Test
    public void test10521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10521");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 69210315);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.monthOfYear();
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        int int9 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property6.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime12 = property6.add((long) '#');
        int int13 = mutableDateTime12.getYearOfCentury();
        boolean boolean15 = mutableDateTime12.isEqual((long) 56);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap21 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendTimeZoneShortName(strMap21);
        boolean boolean23 = dateTimeZone19.equals((java.lang.Object) strMap21);
        boolean boolean25 = dateTimeZone19.isStandardOffset((long) (byte) -1);
        long long28 = dateTimeZone19.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str29 = dateTimeZone19.getID();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone19);
        java.util.TimeZone timeZone31 = dateTimeZone19.toTimeZone();
        mutableDateTime12.setZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter0.withZone(dateTimeZone19);
        long long36 = dateTimeZone19.adjustOffset((long) 54, false);
        java.util.TimeZone timeZone37 = dateTimeZone19.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 72 + "'", int13 == 72);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-360599990L) + "'", long28 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:10" + "'", str29, "+100:10");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 54L + "'", long36 == 54L);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+:0:10");
    }

    @Test
    public void test10522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10522");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.addCopy(69213916);
        org.joda.time.LocalTime localTime10 = property5.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField11 = property5.getField();
        org.joda.time.LocalTime localTime12 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime13 = property5.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test10523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10523");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime2.toGregorianCalendar();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar4);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.monthOfYear();
        long long10 = mutableDateTime8.getMillis();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime8.add(readableDuration11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder17.appendTimeZoneShortName(strMap18);
        boolean boolean20 = dateTimeZone16.equals((java.lang.Object) strMap18);
        boolean boolean22 = dateTimeZone16.isStandardOffset((long) (byte) -1);
        long long25 = dateTimeZone16.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str26 = dateTimeZone16.getID();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(dateTimeZone16);
        org.joda.time.DateTime dateTime30 = localDate5.toDateTimeAtMidnight(dateTimeZone16);
        int int31 = localDate5.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDate localDate33 = localDate5.plus(readablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours(365);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = localDate33.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone40);
        mutableDateTime41.setTime((long) (short) -1);
        mutableDateTime41.setMillis((long) 1);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap51 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder50.appendTimeZoneShortName(strMap51);
        boolean boolean53 = dateTimeZone49.equals((java.lang.Object) strMap51);
        boolean boolean55 = dateTimeZone49.isStandardOffset((long) (byte) -1);
        long long58 = dateTimeZone49.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str59 = dateTimeZone49.getID();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone49);
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight62 = localDate60.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap68 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder69 = dateTimeFormatterBuilder67.appendTimeZoneShortName(strMap68);
        boolean boolean70 = dateTimeZone66.equals((java.lang.Object) strMap68);
        boolean boolean72 = dateTimeZone66.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter63.withZone(dateTimeZone66);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        org.joda.time.DateTime dateTime75 = localDate60.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.DateTime dateTime77 = dateTime75.plusHours(69205127);
        org.joda.time.DateTime.Property property78 = dateTime77.monthOfYear();
        org.joda.time.DateTime dateTime80 = property78.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property81 = dateTime80.year();
        org.joda.time.DateTime dateTime82 = dateTime80.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.DateTime dateTime84 = dateTime80.minus(readableDuration83);
        org.joda.time.DateTime.Property property85 = dateTime80.yearOfCentury();
        org.joda.time.DateTime dateTime87 = property85.addToCopy(10010L);
        mutableDateTime41.setTime((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.DateTime.Property property89 = dateTime87.weekOfWeekyear();
        org.joda.time.DateTime dateTime90 = property89.withMinimumValue();
        org.joda.time.DateTime dateTime92 = dateTime90.withYearOfEra(69232402);
        org.joda.time.DateTime.Property property93 = dateTime90.weekOfWeekyear();
        org.joda.time.DateTime dateTime95 = dateTime90.withMillis((long) 69232336);
        org.joda.time.DateTime dateTime97 = dateTime95.minusWeeks(68458327);
        boolean boolean98 = dateTimeZone35.equals((java.lang.Object) dateTime97);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-360599990L) + "'", long25 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+100:10" + "'", str26, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 70 + "'", int31 == 70);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-360599990L) + "'", long58 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+100:10" + "'", str59, "+100:10");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test10524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10524");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap37 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendTimeZoneShortName(strMap37);
        boolean boolean39 = dateTimeZone35.equals((java.lang.Object) strMap37);
        boolean boolean41 = dateTimeZone35.isStandardOffset((long) (byte) -1);
        long long44 = dateTimeZone35.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str45 = dateTimeZone35.getID();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone35);
        int int47 = localDate46.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property49 = localDate46.property(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType48.getField(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) chronology50, chronology52);
        org.joda.time.Chronology chronology54 = localDate53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.minutes();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.weekyear();
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime29.toMutableDateTime(chronology54);
        int int58 = mutableDateTime57.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-360599990L) + "'", long44 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:10" + "'", str45, "+100:10");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test10525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10525");
        java.lang.Object obj0 = null;
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap7);
        boolean boolean9 = dateTimeZone5.equals((java.lang.Object) strMap7);
        boolean boolean11 = dateTimeZone5.isStandardOffset((long) (byte) -1);
        long long14 = dateTimeZone5.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str15 = dateTimeZone5.getID();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone5);
        int int17 = localDate16.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property19 = localDate16.property(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType18.getField(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) chronology20, chronology22);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.minutes();
        boolean boolean26 = durationFieldType1.isSupported(chronology24);
        org.joda.time.DurationField durationField27 = chronology24.days();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj0, chronology24);
        org.joda.time.DateTimeField dateTimeField29 = chronology24.monthOfYear();
        org.joda.time.DurationField durationField30 = dateTimeField29.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap36 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendTimeZoneShortName(strMap36);
        boolean boolean38 = dateTimeZone34.equals((java.lang.Object) strMap36);
        boolean boolean40 = dateTimeZone34.isStandardOffset((long) (byte) -1);
        long long43 = dateTimeZone34.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str44 = dateTimeZone34.getID();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone34);
        int int46 = localDate45.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property48 = localDate45.property(dateTimeFieldType47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType47.getField(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) chronology49, chronology51);
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDate localDate56 = localDate52.withPeriodAdded(readablePeriod54, (int) '#');
        org.joda.time.LocalDate.Property property57 = localDate52.weekyear();
        org.joda.time.LocalDate localDate58 = property57.withMinimumValue();
        int int59 = localDate58.getEra();
        int int60 = localDate58.getDayOfYear();
        int int61 = localDate58.getDayOfYear();
        java.util.Locale.Category category62 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale63 = java.util.Locale.getDefault(category62);
        java.util.Locale locale64 = java.util.Locale.getDefault(category62);
        java.lang.String str65 = dateTimeField29.getAsShortText((org.joda.time.ReadablePartial) localDate58, locale64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone67);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime68.monthOfYear();
        java.util.Locale locale70 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str71 = locale70.getISO3Language();
        int int72 = property69.getMaximumShortTextLength(locale70);
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(locale73);
        java.lang.String str75 = locale70.getDisplayName(locale73);
        java.lang.String str76 = locale73.getISO3Country();
        java.util.Locale locale77 = locale73.stripExtensions();
        java.util.Locale locale78 = locale77.stripExtensions();
        java.lang.String str79 = locale64.getDisplayName(locale78);
        java.lang.String str80 = locale64.getDisplayLanguage();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360599990L) + "'", long14 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:10" + "'", str15, "+100:10");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-360599990L) + "'", long43 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+100:10" + "'", str44, "+100:10");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 56 + "'", int60 == 56);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 56 + "'", int61 == 56);
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category62.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale63);
// flaky:         org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale64);
// flaky:         org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "f\351vr." + "'", str65, "f\351vr.");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "fra" + "'", str71, "fra");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "fran\347ais (Canada)" + "'", str75, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "FRA" + "'", str76, "FRA");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "fran\347ais (France)" + "'", str79, "fran\347ais (France)");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "fran\347ais" + "'", str80, "fran\347ais");
    }

    @Test
    public void test10526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10526");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType13, (int) '4', 69204394);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendDayOfWeek((int) ' ');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder16.appendTwoDigitWeekyear(69258477, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder16.appendFractionOfMinute(69315335, 69351598);
        boolean boolean26 = dateTimeFormatterBuilder16.canBuildPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test10527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10527");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.minus(readableDuration37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime34.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime34.plusYears(2);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime34.minus(readableDuration42);
        org.joda.time.DateTime.Property property44 = dateTime34.dayOfWeek();
        java.lang.String str45 = dateTime34.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "5777058-08-23T18:19:41.547+100:10" + "'", str45, "5777058-08-23T18:19:41.547+100:10");
    }

    @Test
    public void test10528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10528");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.monthOfYear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.minuteOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfYear();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.set("70");
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = property9.getAsShortText(locale13);
        java.util.Locale.Builder builder15 = builder0.setLocale(locale13);
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder15.clear();
        java.util.Locale.Builder builder18 = builder15.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder15.setLanguageTag("5777058235T181747+10010");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 5777058235T181747+10010 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "70" + "'", str14, "70");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test10529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10529");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap4);
        boolean boolean6 = dateTimeZone2.equals((java.lang.Object) strMap4);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (byte) -1);
        java.lang.String str10 = dateTimeZone2.getShortName((long) 69203825);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        boolean boolean14 = localDateTime12.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDayOfMonth((int) (byte) 1);
        int int17 = localDateTime12.size();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime25 = property21.set("00");
        org.joda.time.DateTime dateTime26 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime12.withMinuteOfHour(6);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusMillis(69229172);
        boolean boolean32 = dateTimeZone2.isLocalDateTimeGap(localDateTime28);
        org.joda.time.LocalDateTime.Property property33 = localDateTime28.yearOfEra();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime35 = property33.roundHalfFloorCopy();
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder39.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder43 = builder41.setScript("");
        java.util.Locale.Builder builder44 = builder43.clear();
        java.util.Locale locale45 = builder44.build();
        java.lang.String str46 = locale38.getDisplayCountry(locale45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = property33.setCopy("ja", locale45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ja\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+100:10" + "'", str10, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test10530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10530");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval2 = localDate0.toInterval();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate5 = localDate0.withPeriodAdded(readablePeriod3, 12);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate0.plus(readablePeriod6);
        int int8 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate.Property property9 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate11 = localDate0.plusYears(69206284);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone13);
        mutableDateTime14.setTime((long) (short) -1);
        mutableDateTime14.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str20 = mutableDateTime14.toString(dateTimeFormatter19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.monthOfYear();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime23.minuteOfDay();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfYear();
        org.joda.time.DurationField durationField27 = property26.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime29 = property26.set("70");
        int int30 = mutableDateTime29.getYearOfEra();
        boolean boolean31 = mutableDateTime14.equals((java.lang.Object) int30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap36 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendTimeZoneShortName(strMap36);
        boolean boolean38 = dateTimeZone34.equals((java.lang.Object) strMap36);
        boolean boolean40 = dateTimeZone34.isStandardOffset((long) (byte) -1);
        java.lang.String str42 = dateTimeZone34.getShortName((long) 69203825);
        mutableDateTime14.setZoneRetainFields(dateTimeZone34);
        java.lang.String str45 = dateTimeZone34.getShortName((long) 69219412);
        org.joda.time.Interval interval46 = localDate11.toInterval(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar51 = mutableDateTime49.toGregorianCalendar();
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.monthOfYear();
        long long57 = mutableDateTime55.getMillis();
        org.joda.time.ReadableDuration readableDuration58 = null;
        mutableDateTime55.add(readableDuration58);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap65 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder66 = dateTimeFormatterBuilder64.appendTimeZoneShortName(strMap65);
        boolean boolean67 = dateTimeZone63.equals((java.lang.Object) strMap65);
        boolean boolean69 = dateTimeZone63.isStandardOffset((long) (byte) -1);
        long long72 = dateTimeZone63.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str73 = dateTimeZone63.getID();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone63);
        org.joda.time.MutableDateTime mutableDateTime75 = mutableDateTime55.toMutableDateTime(dateTimeZone63);
        org.joda.time.LocalDate localDate76 = org.joda.time.LocalDate.now(dateTimeZone63);
        org.joda.time.DateTime dateTime77 = localDate52.toDateTimeAtMidnight(dateTimeZone63);
        org.joda.time.DateTime dateTime78 = localDate11.toDateTimeAtMidnight(dateTimeZone63);
        org.joda.time.DateTime dateTime80 = dateTime78.minus((long) 864);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime82 = dateTime80.withSecondOfMinute(69274683);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69274683 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "00" + "'", str20, "00");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+100:10" + "'", str42, "+100:10");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:10" + "'", str45, "+100:10");
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(gregorianCalendar51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-360599990L) + "'", long72 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+100:10" + "'", str73, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test10531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10531");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.append(dateTimeFormatter11);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder12.appendWeekyear((int) (short) 10, 12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder16.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder16.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatterBuilder16.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder15.appendOptional(dateTimeParser21);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder22.appendCenturyOfEra(69217826, 54202757);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder22.appendFixedSignedDecimal(dateTimeFieldType26, 2019);
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType26.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap36 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendTimeZoneShortName(strMap36);
        boolean boolean38 = dateTimeZone34.equals((java.lang.Object) strMap36);
        boolean boolean40 = dateTimeZone34.isStandardOffset((long) (byte) -1);
        long long43 = dateTimeZone34.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str44 = dateTimeZone34.getID();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone34);
        int int46 = localDate45.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property48 = localDate45.property(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap54 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder53.appendTimeZoneShortName(strMap54);
        boolean boolean56 = dateTimeZone52.equals((java.lang.Object) strMap54);
        boolean boolean58 = dateTimeZone52.isStandardOffset((long) (byte) -1);
        long long61 = dateTimeZone52.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str62 = dateTimeZone52.getID();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone52);
        int int64 = localDate63.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property66 = localDate63.property(dateTimeFieldType65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType65.getField(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((java.lang.Object) chronology67, chronology69);
        org.joda.time.Chronology chronology71 = localDate70.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.minutes();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType47.getField(chronology71);
        java.util.Locale locale74 = java.util.Locale.JAPAN;
        java.lang.String str75 = locale74.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology71, locale74, (java.lang.Integer) 0, 54202800);
        boolean boolean79 = dateTimeFieldType26.isSupported(chronology71);
        org.joda.time.DateTimeField dateTimeField80 = chronology71.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeParser21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-360599990L) + "'", long43 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+100:10" + "'", str44, "+100:10");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-360599990L) + "'", long61 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+100:10" + "'", str62, "+100:10");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTimeField80);
    }

    @Test
    public void test10532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10532");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone2);
        mutableDateTime3.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        mutableDateTime8.addDays((int) (short) -1);
        int int12 = mutableDateTime8.getYear();
        boolean boolean13 = mutableDateTime3.isEqual((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.monthOfYear();
        int int18 = mutableDateTime16.getWeekOfWeekyear();
        mutableDateTime16.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean22 = mutableDateTime16.isSupported(dateTimeFieldType21);
        boolean boolean23 = mutableDateTime8.isSupported(dateTimeFieldType21);
        org.joda.time.Chronology chronology24 = mutableDateTime8.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 69298300, chronology24);
        int int26 = localDate25.getMonthOfYear();
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test10533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10533");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(100);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        boolean boolean15 = localDateTime13.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int21 = localDateTime19.get(dateTimeFieldType20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType20, 0, 69206284);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder24.appendFractionOfSecond(65647, 69277568);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder24.appendClockhourOfHalfday(69337598);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
    }

    @Test
    public void test10534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10534");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.time();
        boolean boolean2 = dateTimeFormatter1.isOffsetParsed();
        java.lang.String str4 = dateTimeFormatter1.print(69224426L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.parse("fran\347ais (canada)", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"franc?ais (canada)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:23:44.426+100:10" + "'", str4, "23:23:44.426+100:10");
    }

    @Test
    public void test10535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10535");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((int) (short) 100);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray17 = chronology9.get(readablePeriod14, (long) 69479276, (long) 69561661);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69581737 + "'", int1 == 69581737);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test10536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10536");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, 37);
        int int4 = dateTimeZone2.getOffsetFromLocal((long) 69218643);
        long long7 = dateTimeZone2.adjustOffset((long) 69206587, true);
        java.lang.String str8 = dateTimeZone2.toString();
        java.util.TimeZone timeZone9 = dateTimeZone2.toTimeZone();
        long long11 = dateTimeZone2.convertUTCToLocal(65655L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 38220000 + "'", int4 == 38220000);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 69206587L + "'", long7 == 69206587L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:37" + "'", str8, "+10:37");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+10:37");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 38285655L + "'", long11 == 38285655L);
    }

    @Test
    public void test10537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10537");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime2.toGregorianCalendar();
        java.lang.String str5 = mutableDateTime2.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendTimeZoneShortName(strMap10);
        boolean boolean12 = dateTimeZone8.equals((java.lang.Object) strMap10);
        long long14 = dateTimeZone8.nextTransition((long) 1969);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean16 = mutableDateTime2.equals((java.lang.Object) dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        boolean boolean19 = localDateTime17.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean23 = localDateTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getDurationType();
        java.lang.String str25 = durationFieldType24.getName();
        mutableDateTime2.add(durationFieldType24, 69229172);
        org.joda.time.Chronology chronology28 = mutableDateTime2.getChronology();
        mutableDateTime2.addDays(69208701);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime2.weekOfWeekyear();
        int int32 = mutableDateTime2.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime2.yearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str5, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1969L + "'", long14 == 1969L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "days" + "'", str25, "days");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test10538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10538");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfFloor();
        long long8 = property6.remainder();
        org.joda.time.MutableDateTime mutableDateTime9 = property6.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.add(100L);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder19.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder19.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatterBuilder19.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder19.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder19.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder19.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeParser dateTimeParser31 = dateTimeFormatterBuilder30.toParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder30.appendFixedDecimal(dateTimeFieldType32, 69215043);
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType32.getDurationType();
        mutableDateTime18.add(durationFieldType35, 69287180);
        mutableDateTime9.add(durationFieldType35, 69495922);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setWeekOfWeekyear(69570964);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69570964 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeParser24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeParser31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(durationFieldType35);
    }

    @Test
    public void test10539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10539");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(69210496);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime5 = dateTimeFormatter3.parseMutableDateTime("java.io.IOException");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.io.IOException\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test10540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10540");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatterBuilder3.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder9.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder9.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatterBuilder9.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder9.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendTimeZoneShortName(strMap19);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder18.appendDayOfYear(69243252);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder18.appendCenturyOfEra(0, 18);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder26.clear();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        boolean boolean30 = localDateTime28.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int36 = localDateTime34.get(dateTimeFieldType35);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder26.appendFixedDecimal(dateTimeFieldType35, 54202757);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder39.appendTwoDigitWeekyear(69205874, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendMinuteOfHour(70);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder42.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder45.appendFractionOfMinute(69210179, 69218943);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder48.appendFixedDecimal(dateTimeFieldType49, 69209230);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder52.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder52.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser57 = dateTimeFormatterBuilder56.toParser();
        boolean boolean58 = dateTimeFormatterBuilder56.canBuildParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter59 = dateTimeFormatterBuilder56.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder51.append(dateTimePrinter59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder38.append(dateTimePrinter59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap63 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = dateTimeFormatterBuilder62.appendTimeZoneShortName(strMap63);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder66 = dateTimeFormatterBuilder64.appendClockhourOfHalfday(69206284);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder64.appendWeekOfWeekyear(69213298);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = dateTimeFormatterBuilder64.appendYearOfCentury(0, 69206843);
        org.joda.time.format.DateTimeParser dateTimeParser72 = dateTimeFormatterBuilder64.toParser();
        int int73 = dateTimeParser72.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder74 = dateTimeFormatterBuilder18.append(dateTimePrinter59, dateTimeParser72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        boolean boolean76 = dateTimeFormatter75.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser77 = dateTimeFormatter75.getParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder78 = dateTimeFormatterBuilder3.append(dateTimePrinter59, dateTimeParser77);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder80 = dateTimeFormatterBuilder78.appendMinuteOfHour(69332133);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap81 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder82 = dateTimeFormatterBuilder78.appendTimeZoneName(strMap81);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeParser14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 7 + "'", int36 == 7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertNotNull(dateTimeParser57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimePrinter59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder66);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder71);
        org.junit.Assert.assertNotNull(dateTimeParser72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 207626429 + "'", int73 == 207626429);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder74);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeParser77);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder78);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder80);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder82);
    }

    @Test
    public void test10541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10541");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        mutableDateTime2.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str8 = mutableDateTime2.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.monthOfYear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.minuteOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.dayOfYear();
        org.joda.time.DurationField durationField15 = property14.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime17 = property14.set("70");
        int int18 = mutableDateTime17.getYearOfEra();
        boolean boolean19 = mutableDateTime2.equals((java.lang.Object) int18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        java.lang.String str30 = dateTimeZone22.getShortName((long) 69203825);
        mutableDateTime2.setZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        mutableDateTime2.add(durationFieldType33, 69293123);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime38 = property36.roundHalfCeiling();
        mutableDateTime38.addDays(69213082);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00" + "'", str8, "00");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+100:10" + "'", str30, "+100:10");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
    }

    @Test
    public void test10542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10542");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(15580079, 69528399, 69357266, 0, 69218709, 477, 69475772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69218709 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10543");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(10L);
        org.joda.time.LocalDate localDate3 = localDate1.withYear(69208090);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(19);
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfYear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        boolean boolean10 = dateTimeFormatter9.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 69206325);
        boolean boolean13 = dateTimeFormatter12.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendTimeZoneShortName(strMap19);
        boolean boolean21 = dateTimeZone17.equals((java.lang.Object) strMap19);
        boolean boolean23 = dateTimeZone17.isStandardOffset((long) (byte) -1);
        long long26 = dateTimeZone17.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str27 = dateTimeZone17.getID();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone17);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight30 = localDate28.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap36 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendTimeZoneShortName(strMap36);
        boolean boolean38 = dateTimeZone34.equals((java.lang.Object) strMap36);
        boolean boolean40 = dateTimeZone34.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter31.withZone(dateTimeZone34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.DateTime dateTime43 = localDate28.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours(69205127);
        org.joda.time.DateTime.Property property46 = dateTime45.monthOfYear();
        org.joda.time.DateTime dateTime48 = dateTime45.plusMinutes(69212644);
        org.joda.time.DateTime dateTime50 = dateTime45.withMillis((long) (short) 100);
        java.lang.String str51 = dateTimeFormatter12.print((org.joda.time.ReadableInstant) dateTime45);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = property6.getDifference((org.joda.time.ReadableInstant) dateTime45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 25274132741");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-360599990L) + "'", long26 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+100:10" + "'", str27, "+100:10");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "9864-328T18:19:41.897+100:10" + "'", str51, "9864-328T18:19:41.897+100:10");
    }

    @Test
    public void test10544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10544");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(10L);
        org.joda.time.LocalDate localDate3 = localDate1.withYear(69208090);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate6 = localDate1.withPeriodAdded(readablePeriod4, 69234097);
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks(3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendTimeZoneShortName(strMap14);
        boolean boolean16 = dateTimeZone12.equals((java.lang.Object) strMap14);
        boolean boolean18 = dateTimeZone12.isStandardOffset((long) (byte) -1);
        long long21 = dateTimeZone12.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str22 = dateTimeZone12.getID();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone12);
        int int24 = localDate23.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property26 = localDate23.property(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType25.getField(chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((java.lang.Object) chronology27, chronology29);
        org.joda.time.Chronology chronology31 = localDate30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.minutes();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap38 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendTimeZoneShortName(strMap38);
        boolean boolean40 = dateTimeZone36.equals((java.lang.Object) strMap38);
        boolean boolean42 = dateTimeZone36.isStandardOffset((long) (byte) -1);
        long long46 = dateTimeZone36.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap52 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder51.appendTimeZoneShortName(strMap52);
        boolean boolean54 = dateTimeZone50.equals((java.lang.Object) strMap52);
        boolean boolean56 = dateTimeZone50.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter47.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        long long60 = dateTimeZone36.getMillisKeepLocal(dateTimeZone50, (long) 10);
        org.joda.time.Chronology chronology61 = chronology33.withZone(dateTimeZone36);
        boolean boolean62 = dateTimeZone36.isFixed();
        org.joda.time.Interval interval63 = localDate6.toInterval(dateTimeZone36);
        boolean boolean65 = dateTimeZone36.isStandardOffset((long) 864);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-360599990L) + "'", long21 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+100:10" + "'", str22, "+100:10");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-360599999L) + "'", long46 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10L + "'", long60 == 10L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test10545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10545");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder7.appendWeekOfWeekyear(69232053);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder13.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder13.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatterBuilder17.toParser();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap25 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder24.appendTimeZoneShortName(strMap25);
        boolean boolean27 = dateTimeZone23.equals((java.lang.Object) strMap25);
        boolean boolean29 = dateTimeZone23.isStandardOffset((long) (byte) -1);
        long long32 = dateTimeZone23.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str33 = dateTimeZone23.getID();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone23);
        int int35 = localDate34.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property37 = localDate34.property(dateTimeFieldType36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap43 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendTimeZoneShortName(strMap43);
        boolean boolean45 = dateTimeZone41.equals((java.lang.Object) strMap43);
        boolean boolean47 = dateTimeZone41.isStandardOffset((long) (byte) -1);
        long long50 = dateTimeZone41.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str51 = dateTimeZone41.getID();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone41);
        int int53 = localDate52.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property55 = localDate52.property(dateTimeFieldType54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType54.getField(chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((java.lang.Object) chronology56, chronology58);
        org.joda.time.Chronology chronology60 = localDate59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.minutes();
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType36.getField(chronology60);
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.lang.String str64 = locale63.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology60, locale63, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeField dateTimeField68 = null;
        dateTimeParserBucket67.saveField(dateTimeField68, 5);
        org.joda.time.Chronology chronology71 = dateTimeParserBucket67.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.dayOfMonth();
        dateTimeParserBucket67.saveField(dateTimeFieldType72, 54202757);
        int int77 = dateTimeParser18.parseInto(dateTimeParserBucket67, "fr", 25);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder78 = dateTimeFormatterBuilder7.append(dateTimeParser18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeParser18);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-360599990L) + "'", long32 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+100:10" + "'", str33, "+100:10");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-360599990L) + "'", long50 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+100:10" + "'", str51, "+100:10");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-26) + "'", int77 == (-26));
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder78);
    }

    @Test
    public void test10546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10546");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        java.lang.String str10 = localTime9.toString();
        org.joda.time.DateTime dateTime11 = localTime9.toDateTimeToday();
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) (-26));
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime13.withDayOfWeek(17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23:59:50.010" + "'", str10, "23:59:50.010");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test10547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10547");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalTime localTime13 = localTime11.plusSeconds(10);
        org.joda.time.LocalTime localTime15 = localTime11.plusMinutes((int) (short) -1);
        org.joda.time.LocalTime.Property property16 = localTime15.secondOfMinute();
        org.joda.time.LocalTime localTime18 = localTime15.plusHours(69207366);
        boolean boolean20 = localTime15.equals((java.lang.Object) 69257126);
        org.joda.time.DateTime dateTime21 = localTime15.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test10548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10548");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = localDate21.withCenturyOfEra(69239741);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69239741 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test10549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10549");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        long long21 = dateTimeField19.roundHalfEven((long) 69207019);
        int int23 = dateTimeField19.getLeapAmount((long) 69218943);
        boolean boolean25 = dateTimeField19.isLeap((long) 69206843);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField19.getType();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-62135957400000L) + "'", long21 == (-62135957400000L));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
    }

    @Test
    public void test10550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10550");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        boolean boolean9 = strList7.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15);
        boolean boolean19 = strList17.equals((java.lang.Object) (-1));
        boolean boolean20 = strList7.retainAll((java.util.Collection<java.lang.String>) strList17);
        strList7.clear();
        boolean boolean23 = strList7.equals((java.lang.Object) 41);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        int int25 = localDateTime24.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withWeekyear((int) (short) 100);
        int int30 = localDateTime24.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property31 = localDateTime24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime24.plusDays(69250171);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime24.withMillisOfDay(8);
        boolean boolean36 = strList7.contains((java.lang.Object) 8);
        java.util.Spliterator<java.lang.String> strSpliterator37 = strList7.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 69582051 + "'", int25 == 69582051);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSpliterator37);
    }

    @Test
    public void test10551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10551");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime2.add(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime23 = mutableDateTime2.toDateTime();
        org.joda.time.DateTime dateTime24 = mutableDateTime2.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.minusSeconds(69239223);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfWeek();
        long long28 = property27.remainder();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 68577001L + "'", long28 == 68577001L);
    }

    @Test
    public void test10552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10552");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        mutableDateTime2.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str8 = mutableDateTime2.toString(dateTimeFormatter7);
        java.util.Date date9 = mutableDateTime2.toDate();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromDateFields(date9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromDateFields(date9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfDay(69380724);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00" + "'", str8, "00");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Jan 05 04:10:00 GMT+:0:10 1970");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test10553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10553");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.year();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.secondOfMinute();
        int int14 = property13.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.addWrapField(69206843);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.hourOfDay();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime16.weekyear();
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime16.add(readableDuration19, 69331040);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test10554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10554");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap38 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendTimeZoneShortName(strMap38);
        boolean boolean40 = dateTimeZone36.equals((java.lang.Object) strMap38);
        boolean boolean42 = dateTimeZone36.isStandardOffset((long) (byte) -1);
        long long45 = dateTimeZone36.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str46 = dateTimeZone36.getID();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone36);
        int int48 = localDate47.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property50 = localDate47.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType49.getField(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) chronology51, chronology53);
        org.joda.time.Chronology chronology55 = localDate54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.minutes();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.weekyear();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone60);
        org.joda.time.Chronology chronology62 = chronology55.withZone(dateTimeZone60);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime29.toMutableDateTime(chronology62);
        org.joda.time.DateTime.Property property64 = dateTime29.secondOfDay();
        org.joda.time.DateTime dateTime65 = property64.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime66 = dateTime65.toDateTimeISO();
        boolean boolean67 = dateTime66.isAfterNow();
        org.joda.time.DateTime dateTime69 = dateTime66.minusMinutes(0);
        org.joda.time.DateTime dateTime70 = dateTime66.toDateTimeISO();
        org.joda.time.DateTime.Property property71 = dateTime70.era();
        int int72 = dateTime70.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-360599990L) + "'", long45 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+100:10" + "'", str46, "+100:10");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 19 + "'", int72 == 19);
    }

    @Test
    public void test10555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10555");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long14 = dateTimeZone4.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap20);
        boolean boolean22 = dateTimeZone18.equals((java.lang.Object) strMap20);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter15.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        long long28 = dateTimeZone4.getMillisKeepLocal(dateTimeZone18, (long) 10);
        boolean boolean29 = dateTime1.equals((java.lang.Object) dateTimeZone18);
        org.joda.time.DateTime dateTime31 = dateTime1.withYear(39);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMillis(27);
        org.joda.time.DateTime.Property property34 = dateTime31.yearOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap41 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder40.appendTimeZoneShortName(strMap41);
        boolean boolean43 = dateTimeZone39.equals((java.lang.Object) strMap41);
        boolean boolean45 = dateTimeZone39.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter36.withZone(dateTimeZone39);
        int int48 = dateTimeZone39.getOffset((long) 69218807);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 63, dateTimeZone39);
        org.joda.time.DateTime dateTime50 = dateTime31.toDateTime(dateTimeZone39);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 5, chronology52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.plus(readableDuration54);
        org.joda.time.DateTime.Property property56 = dateTime55.secondOfDay();
        org.joda.time.DateTime dateTime58 = property56.addToCopy(69344432);
        boolean boolean59 = dateTime50.equals((java.lang.Object) property56);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360599999L) + "'", long14 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 360600000 + "'", int48 == 360600000);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test10556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10556");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime8 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property5.addWrapFieldToCopy(69231663);
        int int11 = localTime10.getMinuteOfHour();
        int int12 = localTime10.size();
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 13 + "'", int11 == 13);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test10557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10557");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        boolean boolean25 = dateTimeZone21.equals((java.lang.Object) strMap23);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter18.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime30 = localDate15.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property33 = dateTime30.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap39 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder38.appendTimeZoneShortName(strMap39);
        boolean boolean41 = dateTimeZone37.equals((java.lang.Object) strMap39);
        boolean boolean43 = dateTimeZone37.isStandardOffset((long) (byte) -1);
        long long46 = dateTimeZone37.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str47 = dateTimeZone37.getID();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone37);
        int int49 = localDate48.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property51 = localDate48.property(dateTimeFieldType50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType50.getField(chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) chronology52, chronology54);
        org.joda.time.Chronology chronology56 = localDate55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.minutes();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.weekyear();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        org.joda.time.Chronology chronology63 = chronology56.withZone(dateTimeZone61);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime30.toMutableDateTime(chronology63);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) 10010, chronology63);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray69 = chronology63.get(readablePeriod66, 83382081L, (long) 69385302);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-360599990L) + "'", long46 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+100:10" + "'", str47, "+100:10");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
    }

    @Test
    public void test10558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10558");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.LocalDateTime localDateTime7 = property3.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = property3.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69582281 + "'", int1 == 69582281);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test10559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10559");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendSecondOfDay(2022);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder12.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder12.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatterBuilder16.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder11.appendOptional(dateTimeParser17);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendDayOfMonth((int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder18.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder22.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder22.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser27 = dateTimeFormatterBuilder26.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder28.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder28.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser33 = dateTimeFormatterBuilder32.toParser();
        boolean boolean34 = dateTimeFormatterBuilder32.canBuildParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = dateTimeFormatterBuilder32.toPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone38);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.yearOfCentury();
        mutableDateTime39.setMillisOfDay((int) '#');
        int int45 = dateTimeFormatter36.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime39, "1", (int) (short) 0);
        org.joda.time.format.DateTimeParser dateTimeParser46 = dateTimeFormatter36.getParser();
        int int47 = dateTimeParser46.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder26.append(dateTimePrinter35, dateTimeParser46);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder49.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder49.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser54 = dateTimeFormatterBuilder49.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder49.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder57.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder57.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser62 = dateTimeFormatterBuilder61.toParser();
        boolean boolean63 = dateTimeFormatterBuilder61.canBuildParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter64 = dateTimeFormatterBuilder61.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder65.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder65.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder72 = dateTimeFormatterBuilder68.appendSignedDecimal(dateTimeFieldType69, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder75 = dateTimeFormatterBuilder72.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder77 = dateTimeFormatterBuilder75.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder78 = dateTimeFormatterBuilder75.appendTimeZoneId();
        org.joda.time.format.DateTimeParser dateTimeParser79 = dateTimeFormatterBuilder75.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder80 = dateTimeFormatterBuilder49.append(dateTimePrinter64, dateTimeParser79);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder81 = dateTimeFormatterBuilder21.append(dateTimePrinter35, dateTimeParser79);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder84 = dateTimeFormatterBuilder81.appendFractionOfHour(69573030, 69259550);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeParser17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeParser27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeParser33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimePrinter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-2) + "'", int45 == (-2));
        org.junit.Assert.assertNotNull(dateTimeParser46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 15 + "'", int47 == 15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertNotNull(dateTimeParser54);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertNotNull(dateTimeParser62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimePrinter64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder72);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder75);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder77);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder78);
        org.junit.Assert.assertNotNull(dateTimeParser79);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder80);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder81);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder84);
    }

    @Test
    public void test10560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10560");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime34 = property32.roundCeilingCopy();
        org.joda.time.DateTime dateTime36 = dateTime34.plus((long) 69214639);
        org.joda.time.DateTime dateTime38 = dateTime34.plusYears(69206325);
        int int39 = dateTime34.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime34.plus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime34.withZone(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 7 + "'", int39 == 7);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test10561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10561");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale4.getISO3Language();
        int int6 = property3.getMaximumShortTextLength(locale4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property3.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime9 = property3.add((long) '#');
        mutableDateTime9.addYears(69210165);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime9.add(readablePeriod13);
        mutableDateTime9.setMillisOfDay(69236444);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime9.add(readablePeriod17, 69497314);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test10562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10562");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime32 = dateTime29.withDurationAdded(readableDuration30, (int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime35 = dateTime29.withDurationAdded(readableDuration33, 69207019);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap41 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder40.appendTimeZoneShortName(strMap41);
        boolean boolean43 = dateTimeZone39.equals((java.lang.Object) strMap41);
        boolean boolean45 = dateTimeZone39.isStandardOffset((long) (byte) -1);
        long long48 = dateTimeZone39.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str49 = dateTimeZone39.getID();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone39);
        org.joda.time.LocalDate.Property property51 = localDate50.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight52 = localDate50.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap58 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = dateTimeFormatterBuilder57.appendTimeZoneShortName(strMap58);
        boolean boolean60 = dateTimeZone56.equals((java.lang.Object) strMap58);
        boolean boolean62 = dateTimeZone56.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter53.withZone(dateTimeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.DateTime dateTime65 = localDate50.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.DateTime dateTime67 = dateTime65.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property68 = dateTime65.monthOfYear();
        org.joda.time.DateTime dateTime70 = property68.setCopy(2);
        boolean boolean71 = dateTime35.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime73 = dateTime70.plusHours(69231059);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime75 = dateTime70.withDayOfYear(69451657);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69451657 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-360599990L) + "'", long48 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+100:10" + "'", str49, "+100:10");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test10563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10563");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setRegion("dayOfMonth");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: dayOfMonth [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test10564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10564");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap13 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap13);
        boolean boolean15 = dateTimeZone11.equals((java.lang.Object) strMap13);
        boolean boolean17 = dateTimeZone11.isStandardOffset((long) (byte) -1);
        long long20 = dateTimeZone11.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str21 = dateTimeZone11.getID();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone11);
        int int23 = localDate22.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property25 = localDate22.property(dateTimeFieldType24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType24.getField(chronology26);
        int int28 = dateTimeField27.getMinimumValue();
        mutableDateTime5.setRounding(dateTimeField27);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone33);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.monthOfYear();
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str37 = locale36.getISO3Language();
        int int38 = property35.getMaximumShortTextLength(locale36);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property35.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime41 = property35.add((long) '#');
        int int42 = mutableDateTime41.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        mutableDateTime41.add(readablePeriod43);
        mutableDateTime30.setTime((org.joda.time.ReadableInstant) mutableDateTime41);
        mutableDateTime30.addMillis(69258822);
        long long48 = mutableDateTime30.getMillis();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-360599990L) + "'", long20 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "fra" + "'", str37, "fra");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 72 + "'", int42 == 72);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-62135957400000L) + "'", long48 == (-62135957400000L));
    }

    @Test
    public void test10565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10565");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        long long4 = dateTimeZone1.convertLocalToUTC((-360530728L), false);
        boolean boolean6 = dateTimeZone1.isStandardOffset(2231588038172928063L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-486530728L) + "'", long4 == (-486530728L));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test10566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10566");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.LocalDate localDate17 = localDate14.plusWeeks(69222463);
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfWeek();
        int int19 = localDate17.getDayOfYear();
        int[] intArray20 = localDate17.getValues();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 248 + "'", int19 == 248);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[1328642, 9, 5]");
    }

    @Test
    public void test10567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10567");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("5777058235T181653+10010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"5777058235T181653+10010\" is malformed at \"5T181653+10010\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10568");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap7);
        boolean boolean9 = dateTimeZone5.equals((java.lang.Object) strMap7);
        boolean boolean11 = dateTimeZone5.isStandardOffset((long) (byte) -1);
        long long14 = dateTimeZone5.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str15 = dateTimeZone5.getID();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone5);
        int int17 = localDate16.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property19 = localDate16.property(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType18.getField(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) chronology20, chronology22);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap32 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder31.appendTimeZoneShortName(strMap32);
        boolean boolean34 = dateTimeZone30.equals((java.lang.Object) strMap32);
        boolean boolean36 = dateTimeZone30.isStandardOffset((long) (byte) -1);
        long long39 = dateTimeZone30.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str40 = dateTimeZone30.getID();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone30);
        int int42 = localDate41.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property44 = localDate41.property(dateTimeFieldType43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType43.getField(chronology45);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        int int48 = dateTimeField46.getMaximumShortTextLength(locale47);
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        int int50 = dateTimeField46.getMaximumTextLength(locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 20, chronology24, locale49, (java.lang.Integer) 2022, 0);
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 10, chronology24, locale54, (java.lang.Integer) 69203825);
        dateTimeParserBucket57.setOffset((java.lang.Integer) 69213798);
        dateTimeParserBucket57.setOffset(69293347);
        java.util.Locale locale62 = dateTimeParserBucket57.getLocale();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360599990L) + "'", long14 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:10" + "'", str15, "+100:10");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-360599990L) + "'", long39 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+100:10" + "'", str40, "+100:10");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh");
    }

    @Test
    public void test10569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10569");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set("00");
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        int int11 = dateTimeZone9.getStandardOffset((long) 70);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 69271135, dateTimeZone9);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 360600000 + "'", int11 == 360600000);
    }

    @Test
    public void test10570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10570");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusMinutes(69210179);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(65655);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.monthOfYear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime13.minuteOfDay();
        int int16 = mutableDateTime13.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.property(dateTimeFieldType17);
        mutableDateTime13.addMinutes(10010);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        int int22 = localDateTime21.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.minusMinutes((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder30.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder30.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser35 = dateTimeFormatterBuilder30.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder30.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder30.appendFractionOfHour(100, 5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder41.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder41.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder44.appendSignedDecimal(dateTimeFieldType45, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder30.appendText(dateTimeFieldType45);
        boolean boolean50 = localDateTime29.isSupported(dateTimeFieldType45);
        int int51 = mutableDateTime13.get(dateTimeFieldType45);
        org.joda.time.LocalDateTime.Property property52 = localDateTime10.property(dateTimeFieldType45);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone54);
        mutableDateTime55.setTime((long) (short) -1);
        mutableDateTime55.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str61 = mutableDateTime55.toString(dateTimeFormatter60);
        org.joda.time.Chronology chronology62 = mutableDateTime55.getChronology();
        boolean boolean63 = dateTimeFieldType45.isSupported(chronology62);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69582530 + "'", int1 == 69582530);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 69582530 + "'", int22 == 69582530);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeParser35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "00" + "'", str61, "00");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test10571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10571");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(65901, 206);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65901 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10572");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList14);
        boolean boolean18 = strList16.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList24);
        boolean boolean28 = strList26.equals((java.lang.Object) (-1));
        boolean boolean29 = strList16.retainAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean30 = strSet7.retainAll((java.util.Collection<java.lang.String>) strList16);
        java.util.Locale.FilteringMode filteringMode31 = null;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList16, filteringMode31);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Collection<java.lang.String> strCollection36 = null;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList43);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.monthOfYear();
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str51 = locale50.getISO3Language();
        int int52 = property49.getMaximumShortTextLength(locale50);
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str54 = locale53.getISO3Language();
        java.util.Locale locale56 = new java.util.Locale("hi!");
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        java.util.Locale locale59 = java.util.Locale.JAPAN;
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.util.Locale locale61 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str62 = locale61.getISO3Language();
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        java.lang.String str64 = locale63.getDisplayVariant();
        java.util.Locale locale66 = new java.util.Locale("hi!");
        java.util.Locale locale68 = new java.util.Locale("hi!");
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale50, locale53, locale57, locale59, locale60, locale61, locale63, locale66, locale68 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Locale locale73 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Locale locale74 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList70);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale75 = java.util.Locale.lookup(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fra" + "'", str51, "fra");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "fra" + "'", str54, "fra");
        org.junit.Assert.assertEquals(locale56.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "fra" + "'", str62, "fra");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals(locale66.toString(), "hi!");
        org.junit.Assert.assertEquals(locale68.toString(), "hi!");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNull(locale73);
        org.junit.Assert.assertNull(locale74);
    }

    @Test
    public void test10573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10573");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime35 = dateTime29.withDurationAdded(readableDuration33, 69213992);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) '4', dateTimeZone38);
        org.joda.time.DateTime dateTime40 = dateTime35.withZoneRetainFields(dateTimeZone38);
        int int41 = dateTime35.getYear();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.yearOfCentury();
        mutableDateTime44.addDays((int) (short) -1);
        int int48 = mutableDateTime44.getYear();
        org.joda.time.Instant instant49 = mutableDateTime44.toInstant();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        mutableDateTime44.add(readablePeriod50, 69203038);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime44.dayOfMonth();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime44.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime56 = property54.add((long) 3);
        boolean boolean57 = dateTime35.isBefore((org.joda.time.ReadableInstant) mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test10574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10574");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.months();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.centuryOfEra();
        java.util.Locale locale28 = new java.util.Locale("hi!");
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        int int31 = dateTimeField26.getMaximumTextLength(locale28);
        java.util.Locale locale34 = new java.util.Locale("Property[year]");
        java.lang.String str35 = dateTimeField26.getAsShortText((-28401180862402L), locale34);
        int int37 = dateTimeField26.getLeapAmount((long) 69481672);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertEquals(locale34.toString(), "property[year]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "10" + "'", str35, "10");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test10575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10575");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.getEra();
        org.joda.time.Chronology chronology6 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.year();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        int int11 = localDateTime10.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusSeconds(360600000);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.plusDays(69213082);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withPeriodAdded(readablePeriod19, 69239590);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMonths(69207073);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        boolean boolean26 = localDateTime24.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean30 = localDateTime28.isSupported(dateTimeFieldType29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withPeriodAdded(readablePeriod31, 38);
        java.util.Date date34 = localDateTime33.toDate();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekyear();
        int int38 = localDateTime36.getYear();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        int int41 = localDateTime40.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone48);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.monthOfYear();
        long long51 = mutableDateTime49.getMillis();
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableDateTime49.add(readableDuration52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.era();
        int int55 = mutableDateTime49.get(dateTimeFieldType54);
        long long56 = property46.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.LocalDateTime localDateTime57 = property46.roundHalfFloorCopy();
        int[] intArray58 = localDateTime57.getValues();
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = locale60.getDisplayScript();
        java.util.Locale locale62 = locale60.stripExtensions();
        java.lang.String str63 = locale60.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray64 = dateTimeField9.set((org.joda.time.ReadablePartial) localDateTime36, 0, intArray58, "fran\347ais", locale60);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"franc?ais\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 69582639 + "'", int11 == 69582639);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Fri Feb 25 19:19:42 GMT+:0:10 2000");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2000 + "'", int38 == 2000);
        org.junit.Assert.assertNotNull(localDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 69582640 + "'", int41 == 69582640);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 27385639L + "'", long56 == 27385639L);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2022, 1, 25, 69600000]");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "zh" + "'", str63, "zh");
    }

    @Test
    public void test10576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10576");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        mutableDateTime2.setMillis((long) 1);
        boolean boolean7 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap13 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap13);
        boolean boolean15 = dateTimeZone11.equals((java.lang.Object) strMap13);
        boolean boolean17 = dateTimeZone11.isStandardOffset((long) (byte) -1);
        long long20 = dateTimeZone11.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str21 = dateTimeZone11.getID();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone11);
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight24 = localDate22.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap30 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendTimeZoneShortName(strMap30);
        boolean boolean32 = dateTimeZone28.equals((java.lang.Object) strMap30);
        boolean boolean34 = dateTimeZone28.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter25.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.DateTime dateTime37 = localDate22.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTime dateTime39 = dateTime37.plusHours(69205127);
        org.joda.time.DateTime.Property property40 = dateTime39.monthOfYear();
        org.joda.time.DateTime dateTime42 = dateTime39.plusMinutes(69212644);
        org.joda.time.DateTime dateTime44 = dateTime39.withMillis((long) (short) 100);
        org.joda.time.DateTime dateTime46 = dateTime39.plusMonths(69221560);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMinutes(69262398);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property50 = dateTime48.dayOfWeek();
        org.joda.time.DateTime dateTime52 = dateTime48.minusSeconds((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = dateTime52.withWeekOfWeekyear(69487289);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69487289 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-360599990L) + "'", long20 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test10577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10577");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) chronology37, chronology39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType17.getField(chronology41);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale44, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, 5);
        org.joda.time.Chronology chronology52 = dateTimeParserBucket48.getChronology();
        int int53 = dateTimeParserBucket48.getOffset();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap59 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder58.appendTimeZoneShortName(strMap59);
        boolean boolean61 = dateTimeZone57.equals((java.lang.Object) strMap59);
        boolean boolean63 = dateTimeZone57.isStandardOffset((long) (byte) -1);
        long long66 = dateTimeZone57.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str67 = dateTimeZone57.getID();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone57);
        org.joda.time.LocalDate.Property property69 = localDate68.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight70 = localDate68.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType71.getDurationType();
        boolean boolean73 = dateMidnight70.isSupported(dateTimeFieldType71);
        org.joda.time.Chronology chronology76 = null;
        java.util.Locale locale78 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology76, locale78, (java.lang.Integer) 54202800);
        java.util.Locale locale81 = dateTimeParserBucket80.getLocale();
        java.util.Locale locale82 = dateTimeParserBucket80.getLocale();
        dateTimeParserBucket48.saveField(dateTimeFieldType71, "dayOfYear", locale82);
        dateTimeParserBucket48.setOffset(69238209);
        // The following exception was thrown during execution in test generation
        try {
            long long88 = dateTimeParserBucket48.computeMillis(false, "2022-02-25T19:19:17.358+100:10");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-360599990L) + "'", long66 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+100:10" + "'", str67, "+100:10");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals(locale78.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "hi!");
    }

    @Test
    public void test10578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10578");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale0.getDisplayScript(locale2);
        java.lang.String str4 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test10579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10579");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableDateTime2.add(readablePeriod4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendTimeZoneShortName(strMap10);
        boolean boolean12 = dateTimeZone8.equals((java.lang.Object) strMap10);
        boolean boolean14 = dateTimeZone8.isStandardOffset((long) (byte) -1);
        long long17 = dateTimeZone8.convertLocalToUTC((long) (short) 10, true);
        mutableDateTime2.setZoneRetainFields(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone8);
        java.lang.String str21 = dateTimeZone8.getName((long) 69273701);
        long long24 = dateTimeZone8.convertLocalToUTC(0L, false);
        long long28 = dateTimeZone8.convertLocalToUTC(4821348295L, true, (long) 69224009);
        java.lang.String str29 = dateTimeZone8.getID();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-360599990L) + "'", long17 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-360600000L) + "'", long24 == (-360600000L));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 4460748295L + "'", long28 == 4460748295L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:10" + "'", str29, "+100:10");
    }

    @Test
    public void test10580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10580");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronolgy();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList7);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder15.appendTimeZoneShortName(strMap16);
        boolean boolean18 = dateTimeZone14.equals((java.lang.Object) strMap16);
        boolean boolean20 = dateTimeZone14.isStandardOffset((long) (byte) -1);
        long long23 = dateTimeZone14.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str24 = dateTimeZone14.getID();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone14);
        int int26 = localDate25.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property28 = localDate25.property(dateTimeFieldType27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap34 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder33.appendTimeZoneShortName(strMap34);
        boolean boolean36 = dateTimeZone32.equals((java.lang.Object) strMap34);
        boolean boolean38 = dateTimeZone32.isStandardOffset((long) (byte) -1);
        long long41 = dateTimeZone32.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str42 = dateTimeZone32.getID();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone32);
        int int44 = localDate43.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property46 = localDate43.property(dateTimeFieldType45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType45.getField(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) chronology47, chronology49);
        org.joda.time.Chronology chronology51 = localDate50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.minutes();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType27.getField(chronology51);
        java.util.Locale locale54 = java.util.Locale.JAPAN;
        java.lang.String str55 = locale54.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology51, locale54, (java.lang.Integer) 0, 54202800);
        boolean boolean59 = strList7.remove((java.lang.Object) chronology51);
        org.joda.time.DateTimeField dateTimeField60 = chronology51.clockhourOfDay();
        org.joda.time.DurationField durationField61 = chronology51.months();
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now(chronology51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter0.withChronology(chronology51);
        org.joda.time.DateTimeField dateTimeField64 = chronology51.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(chronology1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-360599990L) + "'", long23 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+100:10" + "'", str24, "+100:10");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-360599990L) + "'", long41 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+100:10" + "'", str42, "+100:10");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test10581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10581");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate.Property property2 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate4 = localDate0.plusWeeks(57770);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.monthOfYear();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale9.getISO3Language();
        int int11 = property8.getMaximumShortTextLength(locale9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime14 = property8.add((long) '#');
        mutableDateTime14.addYears(69210165);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.days();
        mutableDateTime14.add(durationFieldType18, 365);
        boolean boolean21 = localDate0.equals((java.lang.Object) mutableDateTime14);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime14.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime14.add(readablePeriod23, 69550639);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fra" + "'", str10, "fra");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test10582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10582");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        int int10 = localTime3.size();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap15);
        boolean boolean17 = dateTimeZone13.equals((java.lang.Object) strMap15);
        boolean boolean19 = dateTimeZone13.isStandardOffset((long) (byte) -1);
        java.lang.String str21 = dateTimeZone13.getShortName((long) 69203825);
        org.joda.time.DateTime dateTime22 = localTime3.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime24 = dateTime22.minus((long) 0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.plus(readableDuration25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusWeeks(69395715);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime28.withTime(69577201, 69551133, 0, 69357391);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69577201 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test10583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10583");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.minuteOfDay();
        long long9 = dateTimeField7.roundHalfCeiling((long) 69231238);
        java.lang.String str11 = dateTimeField7.getAsText((long) 69206306);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 69240000L + "'", long9 == 69240000L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1403" + "'", str11, "1403");
    }

    @Test
    public void test10584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10584");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        int int5 = mutableDateTime2.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.property(dateTimeFieldType6);
        mutableDateTime2.addMinutes(10010);
        int int10 = mutableDateTime2.getYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime2.secondOfMinute();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test10585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10585");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.weekDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        boolean boolean25 = dateTimeZone21.equals((java.lang.Object) strMap23);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter18.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime30 = localDate15.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property33 = dateTime30.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded(readableDuration34, 69213992);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) '4', dateTimeZone39);
        org.joda.time.DateTime dateTime41 = dateTime36.withZoneRetainFields(dateTimeZone39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter0.withZone(dateTimeZone39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter0.withZoneUTC();
        boolean boolean44 = dateTimeFormatter43.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test10586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10586");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendMonthOfYear(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendLiteral("English (United States)");
        boolean boolean8 = dateTimeFormatterBuilder5.canBuildFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder5.appendTimeZoneOffset("java.io.IOException: hi!", "October", true, 56, 69229050);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendMinuteOfDay(69229050);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder14.appendFractionOfSecond(69336999, 54296);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder14.appendSecondOfMinute(69483037);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder14.appendDayOfYear(69227744);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder14.appendYear(69574905, 69229344);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
    }

    @Test
    public void test10587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10587");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval2 = localDate0.toInterval();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate5 = localDate0.withPeriodAdded(readablePeriod3, 12);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate0.plus(readablePeriod6);
        int int8 = localDate0.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.monthOfYear();
        long long13 = mutableDateTime11.getMillis();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime11.add(readableDuration14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap21 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendTimeZoneShortName(strMap21);
        boolean boolean23 = dateTimeZone19.equals((java.lang.Object) strMap21);
        boolean boolean25 = dateTimeZone19.isStandardOffset((long) (byte) -1);
        long long28 = dateTimeZone19.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str29 = dateTimeZone19.getID();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime11.toMutableDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime32 = mutableDateTime11.toDateTime();
        org.joda.time.DateTime dateTime33 = mutableDateTime11.toDateTime();
        org.joda.time.DateTime dateTime34 = localDate0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateTime dateTime36 = dateTime34.minus((long) 69229344);
        org.joda.time.DateTime dateTime38 = dateTime36.plusMillis(99);
        int int39 = dateTime38.getMillisOfDay();
        org.joda.time.DateTime dateTime41 = dateTime38.plusHours(69523015);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-360599990L) + "'", long28 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:10" + "'", str29, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 32170756 + "'", int39 == 32170756);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10588");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.getMutableDateTime();
        org.joda.time.Chronology chronology8 = mutableDateTime7.getChronology();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test10589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10589");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(1969L, 0);
        org.joda.time.DateTime dateTime19 = dateTime14.withYearOfEra(69206920);
        org.joda.time.DateTime dateTime20 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property21 = dateTime14.weekOfWeekyear();
        org.joda.time.DateTime.Property property22 = dateTime14.dayOfWeek();
        int int23 = property22.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test10590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10590");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) '4', dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfMonth();
        org.joda.time.LocalDate localDate5 = property4.roundCeilingCopy();
        int int6 = localDate5.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
    }

    @Test
    public void test10591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10591");
        java.util.Locale locale2 = new java.util.Locale("1970-01-05T19:15", "69207073-01-06T14:31:30+100:10");
        org.junit.Assert.assertEquals(locale2.toString(), "1970-01-05t19:15_69207073-01-06T14:31:30+100:10");
    }

    @Test
    public void test10592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10592");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, 37);
        int int4 = dateTimeZone2.getOffsetFromLocal((long) 69218643);
        long long7 = dateTimeZone2.adjustOffset((long) 69206587, true);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder15.appendTimeZoneShortName(strMap16);
        boolean boolean18 = dateTimeZone14.equals((java.lang.Object) strMap16);
        boolean boolean20 = dateTimeZone14.isStandardOffset((long) (byte) -1);
        long long23 = dateTimeZone14.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str24 = dateTimeZone14.getID();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone14);
        int int26 = localDate25.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property28 = localDate25.property(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType27.getField(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) chronology29, chronology31);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime10.toMutableDateTime(chronology33);
        mutableDateTime10.setSecondOfDay((int) '4');
        mutableDateTime10.setDate((long) 69209957);
        int int39 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) mutableDateTime10);
        long long41 = dateTimeZone2.convertUTCToLocal(31536000000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 38220000 + "'", int4 == 38220000);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 69206587L + "'", long7 == 69206587L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-360599990L) + "'", long23 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+100:10" + "'", str24, "+100:10");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 38220000 + "'", int39 == 38220000);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 31574220000L + "'", long41 == 31574220000L);
    }

    @Test
    public void test10593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10593");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfYear();
        org.joda.time.DurationField durationField6 = property5.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.set("70");
        int int9 = property5.getMaximumValue();
        long long10 = property5.remainder();
        org.joda.time.MutableDateTime mutableDateTime12 = property5.add((long) 69206843);
        org.joda.time.MutableDateTime mutableDateTime13 = property5.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.monthOfYear();
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str19 = locale18.getISO3Language();
        int int20 = property17.getMaximumShortTextLength(locale18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.yearOfCentury();
        int int28 = property17.getDifference((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime mutableDateTime30 = property17.add(69210165);
        org.joda.time.MutableDateTime mutableDateTime32 = property17.add((long) 69203825);
        org.joda.time.MutableDateTime mutableDateTime33 = property17.getMutableDateTime();
        mutableDateTime13.setMillis((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder35.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder35.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder38.appendSignedDecimal(dateTimeFieldType39, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder42.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime51 = property49.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime53 = property49.set("00");
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime53.getZone();
        int int55 = mutableDateTime53.getRoundingMode();
        org.joda.time.DateTimeField dateTimeField56 = mutableDateTime53.getRoundingField();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime53.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean59 = mutableDateTime53.isSupported(dateTimeFieldType58);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder45.appendText(dateTimeFieldType58);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap66 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder65.appendTimeZoneShortName(strMap66);
        boolean boolean68 = dateTimeZone64.equals((java.lang.Object) strMap66);
        boolean boolean70 = dateTimeZone64.isStandardOffset((long) (byte) -1);
        long long73 = dateTimeZone64.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str74 = dateTimeZone64.getID();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone64);
        int int76 = localDate75.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property78 = localDate75.property(dateTimeFieldType77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType77.getField(chronology79);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((java.lang.Object) chronology79, chronology81);
        org.joda.time.Chronology chronology83 = localDate82.getChronology();
        org.joda.time.DurationField durationField84 = chronology83.minutes();
        org.joda.time.Chronology chronology85 = chronology83.withUTC();
        boolean boolean86 = dateTimeFieldType58.isSupported(chronology85);
        boolean boolean87 = mutableDateTime33.isSupported(dateTimeFieldType58);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime33.setWeekOfWeekyear(69563878);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69563878 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 365 + "'", int9 == 365);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 15000001L + "'", long10 == 15000001L);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fra" + "'", str19, "fra");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(dateTimeField56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-360599990L) + "'", long73 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+100:10" + "'", str74, "+100:10");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1970 + "'", int76 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test10594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10594");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendTimeZoneShortName(strMap17);
        boolean boolean19 = dateTimeZone15.equals((java.lang.Object) strMap17);
        boolean boolean21 = dateTimeZone15.isStandardOffset((long) (byte) -1);
        long long24 = dateTimeZone15.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str25 = dateTimeZone15.getID();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone15);
        org.joda.time.LocalDate.Property property27 = localDate26.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight28 = localDate26.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap34 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder33.appendTimeZoneShortName(strMap34);
        boolean boolean36 = dateTimeZone32.equals((java.lang.Object) strMap34);
        boolean boolean38 = dateTimeZone32.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter29.withZone(dateTimeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.DateTime dateTime41 = localDate26.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.DateTime dateTime43 = dateTime41.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime45 = dateTime41.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property46 = dateTime41.secondOfDay();
        org.joda.time.DateTime dateTime47 = dateTime41.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.minus(readablePeriod48);
        boolean boolean50 = mutableDateTime9.isEqual((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime52 = dateTime47.plusSeconds(69451657);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-360599990L) + "'", long24 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+100:10" + "'", str25, "+100:10");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test10595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10595");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.parse("5777058235T181828+10010", dateTimeFormatter2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"5777058235T181828+10010\" is malformed at \"35T181828+10010\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
    }

    @Test
    public void test10596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10596");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("months");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("10");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("191579-02-20");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeZone9);
    }

    @Test
    public void test10597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10597");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property34 = dateTime29.secondOfDay();
        org.joda.time.DateTime dateTime36 = dateTime29.minusHours(19);
        org.joda.time.DateTime.Property property37 = dateTime36.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime36.getZone();
        int int39 = dateTime36.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 19 + "'", int39 == 19);
    }

    @Test
    public void test10598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10598");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(69484523);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test10599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10599");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfYear();
        org.joda.time.DurationField durationField6 = property5.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.set("70");
        int int9 = mutableDateTime8.getYearOfEra();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap15);
        boolean boolean17 = dateTimeZone13.equals((java.lang.Object) strMap15);
        boolean boolean19 = dateTimeZone13.isStandardOffset((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime8.toMutableDateTime(dateTimeZone13);
        mutableDateTime8.setSecondOfDay(1439);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setSecondOfDay(69370560);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69370560 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test10600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10600");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("19:15:03.782");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '19:15:03.782' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10601");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder4 = builder2.setScript("");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder6 = builder4.setLocale(locale5);
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.Builder builder8 = builder4.clear();
        java.util.Locale.Builder builder9 = builder4.clearExtensions();
        java.util.Locale.Builder builder10 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setLanguage("4518918");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 4518918 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test10602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10602");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime2.toGregorianCalendar();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar4);
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfEra();
        int int7 = localDate5.getDayOfYear();
        org.joda.time.DateTime dateTime8 = localDate5.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(69214930);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 5, chronology12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.plus(readableDuration14);
        org.joda.time.DateTime dateTime17 = dateTime13.minusHours((-2022));
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.DateTime dateTime19 = property18.roundHalfFloorCopy();
        int int20 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = dateTime10.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test10603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10603");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getDisplayScript();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str4 = locale0.getExtension('x');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test10604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10604");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(1969L, 0);
        org.joda.time.DateTime dateTime19 = dateTime14.withYearOfEra(69206920);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.yearOfCentury();
        mutableDateTime22.addDays((int) (short) -1);
        mutableDateTime22.addMinutes((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime22.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.add((long) 1154);
        org.joda.time.MutableDateTime mutableDateTime32 = property28.add(69232402);
        boolean boolean33 = dateTime14.isEqual((org.joda.time.ReadableInstant) mutableDateTime32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime14.withHourOfDay(69514706);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69514706 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test10605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10605");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.months();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.DateTime dateTime26 = property25.withMinimumValue();
        java.util.Locale locale27 = java.util.Locale.UK;
        int int28 = property25.getMaximumTextLength(locale27);
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Set<java.lang.String> strSet30 = locale27.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
    }

    @Test
    public void test10606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10606");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(70);
        int[] intArray18 = localDate14.getValues();
        org.joda.time.LocalDate.Property property19 = localDate14.weekyear();
        org.joda.time.LocalDate localDate20 = property19.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate21 = property19.getLocalDate();
        int int22 = property19.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 5]");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
    }

    @Test
    public void test10607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10607");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        int int4 = dateTimeZone2.getOffset((long) 69208090);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 69388618, dateTimeZone2);
        int int6 = localDateTime5.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 126000000 + "'", int4 == 126000000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
    }

    @Test
    public void test10608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10608");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime9.minusSeconds((-26));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = localTime9.withMillisOfSecond(69556408);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69556408 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test10609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10609");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendSecondOfDay((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(360600000);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(69252147, false);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendTimeZoneName(strMap10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder9.appendFractionOfHour(69289172, 69239765);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendSecondOfMinute(69363853);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder14.appendWeekOfWeekyear(69376094);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
    }

    @Test
    public void test10610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10610");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(69365389, 69301812, 69371619, 69203825, 69359838);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69203825 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10611");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getRangeDurationType();
        org.joda.time.DateTime dateTime35 = dateTime29.withFieldAdded(durationFieldType33, 365);
        org.joda.time.DateTime dateTime37 = dateTime29.minusMinutes(69225701);
        org.joda.time.Chronology chronology38 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime41 = dateTime29.withDurationAdded((long) 69301812, 69384738);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime41.withSecondOfMinute((-38));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -38 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10612");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) '4', dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(69218773);
        org.joda.time.LocalDate localDate7 = localDate3.withYearOfEra((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder8.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder8.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatterBuilder8.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder8.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder8.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder8.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatterBuilder19.toParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder19.appendFixedDecimal(dateTimeFieldType21, 69215043);
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strList29);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap38 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendTimeZoneShortName(strMap38);
        boolean boolean40 = dateTimeZone36.equals((java.lang.Object) strMap38);
        boolean boolean42 = dateTimeZone36.isStandardOffset((long) (byte) -1);
        long long45 = dateTimeZone36.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str46 = dateTimeZone36.getID();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone36);
        int int48 = localDate47.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property50 = localDate47.property(dateTimeFieldType49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap56 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = dateTimeFormatterBuilder55.appendTimeZoneShortName(strMap56);
        boolean boolean58 = dateTimeZone54.equals((java.lang.Object) strMap56);
        boolean boolean60 = dateTimeZone54.isStandardOffset((long) (byte) -1);
        long long63 = dateTimeZone54.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str64 = dateTimeZone54.getID();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone54);
        int int66 = localDate65.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property68 = localDate65.property(dateTimeFieldType67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType67.getField(chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((java.lang.Object) chronology69, chronology71);
        org.joda.time.Chronology chronology73 = localDate72.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.minutes();
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType49.getField(chronology73);
        java.util.Locale locale76 = java.util.Locale.JAPAN;
        java.lang.String str77 = locale76.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology73, locale76, (java.lang.Integer) 0, 54202800);
        boolean boolean81 = strList29.remove((java.lang.Object) chronology73);
        org.joda.time.DateTimeField dateTimeField82 = chronology73.clockhourOfDay();
        boolean boolean83 = dateTimeFieldType21.isSupported(chronology73);
        org.joda.time.LocalDate.Property property84 = localDate7.property(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeParser13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeParser20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-360599990L) + "'", long45 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+100:10" + "'", str46, "+100:10");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-360599990L) + "'", long63 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+100:10" + "'", str64, "+100:10");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1970 + "'", int66 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test10613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10613");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder11.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder11.appendFractionOfHour(36, (int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        boolean boolean17 = dateTimeFormatter16.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = dateTimeFormatter16.getPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder19.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder19.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatterBuilder19.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder19.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder19.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder19.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeParser dateTimeParser31 = dateTimeFormatterBuilder30.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder15.append(dateTimePrinter18, dateTimeParser31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder15.appendTwoDigitYear(65746, false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimePrinter18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeParser24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeParser31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
    }

    @Test
    public void test10614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10614");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        int int4 = mutableDateTime2.getCenturyOfEra();
        boolean boolean5 = mutableDateTime2.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, 37);
        mutableDateTime2.setZone(dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime2.secondOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test10615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10615");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears(1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYear(69204037);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.minus(readableDuration10);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDateTime4.getFields();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
    }

    @Test
    public void test10616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10616");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        mutableDateTime2.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str8 = mutableDateTime2.toString(dateTimeFormatter7);
        java.util.Date date9 = mutableDateTime2.toDate();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime2.year();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime2.add(readableDuration11, 69207484);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendTimeZoneShortName(strMap19);
        boolean boolean21 = dateTimeZone17.equals((java.lang.Object) strMap19);
        boolean boolean23 = dateTimeZone17.isStandardOffset((long) (byte) -1);
        java.lang.String str25 = dateTimeZone17.getShortName((long) 69203825);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap33 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder32.appendTimeZoneShortName(strMap33);
        boolean boolean35 = dateTimeZone31.equals((java.lang.Object) strMap33);
        boolean boolean37 = dateTimeZone31.isStandardOffset((long) (byte) -1);
        long long40 = dateTimeZone31.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str41 = dateTimeZone31.getID();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone31);
        org.joda.time.LocalDate.Property property43 = localDate42.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight44 = localDate42.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap50 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder49.appendTimeZoneShortName(strMap50);
        boolean boolean52 = dateTimeZone48.equals((java.lang.Object) strMap50);
        boolean boolean54 = dateTimeZone48.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter45.withZone(dateTimeZone48);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        org.joda.time.DateTime dateTime57 = localDate42.toDateTimeAtCurrentTime(dateTimeZone48);
        org.joda.time.DateTime dateTime59 = dateTime57.plusHours(69205127);
        org.joda.time.DateTime.Property property60 = dateTime59.monthOfYear();
        org.joda.time.DateTime dateTime62 = dateTime59.withYearOfCentury(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime65 = dateTime59.withField(dateTimeFieldType63, 70);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        mutableDateTime68.add(readableDuration69, 0);
        mutableDateTime68.addWeekyears(0);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone75);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime76.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime79 = property77.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime81 = property77.set("00");
        org.joda.time.DateTimeZone dateTimeZone82 = mutableDateTime81.getZone();
        mutableDateTime68.setZone(dateTimeZone82);
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate((java.lang.Object) dateTime65, dateTimeZone82);
        org.joda.time.DateTime dateTime85 = mutableDateTime27.toDateTime(dateTimeZone82);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime27.secondOfMinute();
        int int87 = property14.compareTo((org.joda.time.ReadableInstant) mutableDateTime27);
        int int88 = property14.get();
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00" + "'", str8, "00");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Jan 05 04:10:00 GMT+:0:10 1970");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+100:10" + "'", str25, "+100:10");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-360599990L) + "'", long40 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+100:10" + "'", str41, "+100:10");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1970 + "'", int88 == 1970);
    }

    @Test
    public void test10617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10617");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add((long) '4');
        org.joda.time.MutableDateTime mutableDateTime10 = property6.add((long) 65612);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder15.appendTimeZoneShortName(strMap16);
        boolean boolean18 = dateTimeZone14.equals((java.lang.Object) strMap16);
        boolean boolean20 = dateTimeZone14.isStandardOffset((long) (byte) -1);
        long long23 = dateTimeZone14.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str24 = dateTimeZone14.getID();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone14);
        int int26 = localDate25.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property28 = localDate25.property(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType27.getField(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) chronology29, chronology31);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDate localDate36 = localDate32.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.LocalDate.Property property37 = localDate32.weekyear();
        org.joda.time.Chronology chronology38 = localDate32.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.hours();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfMonth();
        mutableDateTime10.setRounding(dateTimeField41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime10.dayOfWeek();
        org.joda.time.Chronology chronology44 = mutableDateTime10.getChronology();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime10.add(readableDuration45, 69329212);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setMonthOfYear(672);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 672 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-360599990L) + "'", long23 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+100:10" + "'", str24, "+100:10");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test10618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10618");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendSecondOfDay(2022);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder12.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder12.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatterBuilder16.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder11.appendOptional(dateTimeParser17);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendLiteral("2022-01-25T17:33:33.826");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder20.appendHalfdayOfDayText();
        boolean boolean22 = dateTimeFormatterBuilder20.canBuildPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeParser17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test10619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10619");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime8 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property5.addCopy((long) 44);
        org.joda.time.LocalTime localTime12 = localTime10.plusSeconds(69210404);
        int int13 = localTime12.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 54 + "'", int13 == 54);
    }

    @Test
    public void test10620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10620");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.months();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology22.add(readablePeriod24, (long) 69240895, 69223061);
        org.joda.time.DateTimeField dateTimeField28 = chronology22.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) '4', dateTimeZone31);
        org.joda.time.Chronology chronology33 = chronology22.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField34 = chronology22.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 69240895L + "'", long27 == 69240895L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test10621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10621");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.monthOfYear();
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str14 = locale13.getISO3Language();
        int int15 = property12.getMaximumShortTextLength(locale13);
        java.lang.String str16 = dateTimeZone7.getShortName((long) 69213298, locale13);
        int int18 = dateTimeZone7.getStandardOffset((long) 69332044);
        mutableDateTime4.setZoneRetainFields(dateTimeZone7);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone7);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fra" + "'", str14, "fra");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test10622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10622");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addDays((int) (short) -1);
        int int11 = mutableDateTime7.getYear();
        boolean boolean12 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.monthOfYear();
        int int17 = mutableDateTime15.getWeekOfWeekyear();
        mutableDateTime15.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean21 = mutableDateTime15.isSupported(dateTimeFieldType20);
        boolean boolean22 = mutableDateTime7.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap28 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder27.appendTimeZoneShortName(strMap28);
        boolean boolean30 = dateTimeZone26.equals((java.lang.Object) strMap28);
        boolean boolean32 = dateTimeZone26.isStandardOffset((long) (byte) -1);
        long long35 = dateTimeZone26.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str36 = dateTimeZone26.getID();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone26);
        int int38 = localDate37.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property40 = localDate37.property(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType39.getField(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) chronology41, chronology43);
        org.joda.time.Chronology chronology45 = localDate44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.minutes();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekyear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.Chronology chronology52 = chronology45.withZone(dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(dateTimeZone50);
        mutableDateTime7.setZone(dateTimeZone50);
        mutableDateTime7.addSeconds(0);
        mutableDateTime7.add((long) 69206325);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        java.util.Locale locale65 = java.util.Locale.ROOT;
        java.lang.String str66 = locale65.getDisplayCountry();
        java.lang.String str67 = dateTimeZone62.getShortName((-360600000L), locale65);
        long long69 = dateTimeZone62.nextTransition((long) 69222873);
        mutableDateTime7.setZoneRetainFields(dateTimeZone62);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-360599990L) + "'", long35 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+100:10" + "'", str36, "+100:10");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+100:10" + "'", str67, "+100:10");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 69222873L + "'", long69 == 69222873L);
    }

    @Test
    public void test10623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10623");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        java.util.Date date15 = localDateTime0.toDate();
        int int16 = localDateTime0.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime0.minus(readablePeriod17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 25 19:19:43 GMT+:0:10 2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test10624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10624");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test10625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10625");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendTimeZoneShortName(strMap14);
        boolean boolean16 = dateTimeZone12.equals((java.lang.Object) strMap14);
        boolean boolean18 = dateTimeZone12.isStandardOffset((long) (byte) -1);
        long long21 = dateTimeZone12.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str22 = dateTimeZone12.getID();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone12);
        int int24 = localDate23.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property26 = localDate23.property(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap32 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder31.appendTimeZoneShortName(strMap32);
        boolean boolean34 = dateTimeZone30.equals((java.lang.Object) strMap32);
        boolean boolean36 = dateTimeZone30.isStandardOffset((long) (byte) -1);
        long long39 = dateTimeZone30.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str40 = dateTimeZone30.getID();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone30);
        int int42 = localDate41.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property44 = localDate41.property(dateTimeFieldType43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType43.getField(chronology45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((java.lang.Object) chronology45, chronology47);
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.minutes();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType25.getField(chronology49);
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.lang.String str53 = locale52.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology49, locale52, (java.lang.Integer) 0, 54202800);
        boolean boolean57 = strList5.remove((java.lang.Object) chronology49);
        org.joda.time.DateTimeField dateTimeField58 = chronology49.clockhourOfDay();
        org.joda.time.DurationField durationField59 = chronology49.months();
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(chronology49);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap66 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder65.appendTimeZoneShortName(strMap66);
        boolean boolean68 = dateTimeZone64.equals((java.lang.Object) strMap66);
        boolean boolean70 = dateTimeZone64.isStandardOffset((long) (byte) -1);
        long long73 = dateTimeZone64.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str74 = dateTimeZone64.getID();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone64);
        int int76 = localDate75.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property78 = localDate75.property(dateTimeFieldType77);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType77.getField(chronology79);
        java.util.Locale locale81 = java.util.Locale.getDefault();
        int int82 = dateTimeField80.getMaximumShortTextLength(locale81);
        long long84 = dateTimeField80.roundCeiling((long) 1970);
        int int86 = dateTimeField80.get((long) 69214930);
        mutableDateTime60.setRounding(dateTimeField80);
        org.joda.time.DateTimeField dateTimeField88 = mutableDateTime60.getRoundingField();
        mutableDateTime60.addMonths(69326735);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime60.set(dateTimeFieldType91, 202);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 202 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-360599990L) + "'", long21 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+100:10" + "'", str22, "+100:10");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-360599990L) + "'", long39 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+100:10" + "'", str40, "+100:10");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-360599990L) + "'", long73 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+100:10" + "'", str74, "+100:10");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1970 + "'", int76 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 9223372036494175807L + "'", long84 == 9223372036494175807L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
    }

    @Test
    public void test10626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10626");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime2.add(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int24 = mutableDateTime2.get(dateTimeFieldType23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableDateTime2.add(readablePeriod25);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime2.secondOfMinute();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime2.hourOfDay();
        int int29 = mutableDateTime2.getDayOfMonth();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
    }

    @Test
    public void test10627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10627");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setExtension('4', "2022-01-25T19:19:26.078");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test10628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10628");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalTime localTime13 = localTime11.plusSeconds(10);
        org.joda.time.LocalTime localTime15 = localTime13.withSecondOfMinute(22);
        org.joda.time.LocalTime.Property property16 = localTime13.hourOfDay();
        org.joda.time.LocalTime localTime18 = property16.addCopy(0L);
        org.joda.time.LocalTime localTime20 = localTime18.minusMinutes(69239408);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test10629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10629");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap4);
        boolean boolean6 = dateTimeZone2.equals((java.lang.Object) strMap4);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone2.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder17.appendTimeZoneShortName(strMap18);
        boolean boolean20 = dateTimeZone16.equals((java.lang.Object) strMap18);
        boolean boolean22 = dateTimeZone16.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter13.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long26 = dateTimeZone2.getMillisKeepLocal(dateTimeZone16, (long) 10);
        long long29 = dateTimeZone2.convertLocalToUTC((long) 69222959, true);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap37 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendTimeZoneShortName(strMap37);
        boolean boolean39 = dateTimeZone35.equals((java.lang.Object) strMap37);
        boolean boolean41 = dateTimeZone35.isStandardOffset((long) (byte) -1);
        long long44 = dateTimeZone35.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str45 = dateTimeZone35.getID();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone35);
        int int47 = localDate46.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property49 = localDate46.property(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType48.getField(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) chronology50, chronology52);
        org.joda.time.Chronology chronology54 = localDate53.getChronology();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDate localDate57 = localDate53.withPeriodAdded(readablePeriod55, (int) '#');
        org.joda.time.LocalDate.Property property58 = localDate53.weekyear();
        org.joda.time.LocalDate localDate59 = property58.withMinimumValue();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths(2);
        int int62 = localDate61.getMonthOfYear();
        int int63 = localDate61.getDayOfWeek();
        int int64 = localDate61.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType65.getDurationType();
        boolean boolean67 = localDate61.isSupported(durationFieldType66);
        mutableDateTime30.add(durationFieldType66, 69221666);
        int int70 = mutableDateTime30.getMinuteOfHour();
        mutableDateTime30.addHours(69481268);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599999L) + "'", long12 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 10L + "'", long26 == 10L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-291377041L) + "'", long29 == (-291377041L));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-360599990L) + "'", long44 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:10" + "'", str45, "+100:10");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 12 + "'", int62 == 12);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 19 + "'", int70 == 19);
    }

    @Test
    public void test10630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10630");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime2.toGregorianCalendar();
        java.lang.String str5 = mutableDateTime2.toString();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendTimeZoneShortName(strMap10);
        boolean boolean12 = dateTimeZone8.equals((java.lang.Object) strMap10);
        long long14 = dateTimeZone8.nextTransition((long) 1969);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone8);
        boolean boolean16 = mutableDateTime2.equals((java.lang.Object) dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        boolean boolean19 = localDateTime17.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean23 = localDateTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getDurationType();
        java.lang.String str25 = durationFieldType24.getName();
        mutableDateTime2.add(durationFieldType24, 69229172);
        org.joda.time.Chronology chronology28 = mutableDateTime2.getChronology();
        int int29 = mutableDateTime2.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder30.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder30.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser35 = dateTimeFormatterBuilder30.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder30.appendHalfdayOfDayText();
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        int int38 = localDateTime37.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.withWeekyear((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int44 = localDateTime37.get(dateTimeFieldType43);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder36.appendShortText(dateTimeFieldType43);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType43.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime2.property(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone48 = mutableDateTime2.getZone();
        java.util.Date date49 = mutableDateTime2.toDate();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str5, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1969L + "'", long14 == 1969L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "days" + "'", str25, "days");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeParser35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 69583835 + "'", int38 == 69583835);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Sat Jan 18 04:10:00 GMT+:0:10 191513");
    }

    @Test
    public void test10631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10631");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 69228250);
        java.io.Writer writer4 = null;
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        int int6 = localDateTime5.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDateTime5.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withYearOfEra(1970);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withMillisOfDay(69235626);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(writer4, (org.joda.time.ReadablePartial) localDateTime13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 69583903 + "'", int6 == 69583903);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test10632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10632");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        java.lang.String[] strArray10 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList18);
        boolean boolean22 = strList20.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList28);
        boolean boolean32 = strList30.equals((java.lang.Object) (-1));
        boolean boolean33 = strList20.retainAll((java.util.Collection<java.lang.String>) strList30);
        boolean boolean34 = strSet11.retainAll((java.util.Collection<java.lang.String>) strList20);
        boolean boolean35 = strList5.retainAll((java.util.Collection<java.lang.String>) strSet11);
        java.util.Iterator<java.lang.String> strItor36 = strSet11.iterator();
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strList42);
        java.lang.String[] strArray47 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strList55);
        boolean boolean59 = strList57.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strList65);
        boolean boolean69 = strList67.equals((java.lang.Object) (-1));
        boolean boolean70 = strList57.retainAll((java.util.Collection<java.lang.String>) strList67);
        boolean boolean71 = strSet48.retainAll((java.util.Collection<java.lang.String>) strList57);
        boolean boolean72 = strList42.retainAll((java.util.Collection<java.lang.String>) strSet48);
        java.util.Iterator<java.lang.String> strItor73 = strSet48.iterator();
        boolean boolean74 = strSet11.retainAll((java.util.Collection<java.lang.String>) strSet48);
        strSet48.clear();
        boolean boolean77 = strSet48.contains((java.lang.Object) 69247182);
        java.util.Spliterator<java.lang.String> strSpliterator78 = strSet48.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strItor73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strSpliterator78);
    }

    @Test
    public void test10633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10633");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap31 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder30.appendTimeZoneShortName(strMap31);
        boolean boolean33 = dateTimeZone29.equals((java.lang.Object) strMap31);
        boolean boolean35 = dateTimeZone29.isStandardOffset((long) (byte) -1);
        long long38 = dateTimeZone29.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str39 = dateTimeZone29.getID();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone29);
        int int41 = localDate40.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property43 = localDate40.property(dateTimeFieldType42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap49 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder48.appendTimeZoneShortName(strMap49);
        boolean boolean51 = dateTimeZone47.equals((java.lang.Object) strMap49);
        boolean boolean53 = dateTimeZone47.isStandardOffset((long) (byte) -1);
        long long56 = dateTimeZone47.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str57 = dateTimeZone47.getID();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone47);
        int int59 = localDate58.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property61 = localDate58.property(dateTimeFieldType60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType60.getField(chronology62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((java.lang.Object) chronology62, chronology64);
        org.joda.time.Chronology chronology66 = localDate65.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.minutes();
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType42.getField(chronology66);
        org.joda.time.DurationField durationField69 = chronology66.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeField25, chronology66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.ZeroIsMaxDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-360599990L) + "'", long38 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+100:10" + "'", str39, "+100:10");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-360599990L) + "'", long56 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+100:10" + "'", str57, "+100:10");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
    }

    @Test
    public void test10634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10634");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        mutableDateTime2.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str8 = mutableDateTime2.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.monthOfYear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.minuteOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.dayOfYear();
        org.joda.time.DurationField durationField15 = property14.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime17 = property14.set("70");
        int int18 = mutableDateTime17.getYearOfEra();
        boolean boolean19 = mutableDateTime2.equals((java.lang.Object) int18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        java.lang.String str30 = dateTimeZone22.getShortName((long) 69203825);
        mutableDateTime2.setZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        mutableDateTime2.add(durationFieldType33, 69293123);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime2.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime38 = property36.add((long) 69422966);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 6942296600");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00" + "'", str8, "00");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+100:10" + "'", str30, "+100:10");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test10635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10635");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.timeParser();
        java.lang.String str2 = dateTimeFormatter0.print((long) 69207465);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval6 = localDate4.toInterval();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate9 = localDate4.withPeriodAdded(readablePeriod7, 12);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.plus(readablePeriod10);
        int int12 = localDate4.getMonthOfYear();
        org.joda.time.LocalDate.Property property13 = localDate4.dayOfMonth();
        org.joda.time.LocalDate localDate14 = property13.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate16 = localDate14.minusWeeks(69226456);
        org.joda.time.LocalDate localDate18 = localDate16.plusDays(69255088);
        java.lang.String str19 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = dateTimeFormatter0.parseLocalDate("Property[minuteOfHour]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[minuteOfHour]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23" + "'", str2, "23");
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd" + "'", str19, "\ufffd\ufffd");
    }

    @Test
    public void test10636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10636");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.setMillisOfDay((int) '#');
        int int6 = mutableDateTime2.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.monthOfYear();
        int int8 = property7.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.roundHalfFloor();
        org.joda.time.DateTime dateTime11 = mutableDateTime10.toDateTimeISO();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test10637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10637");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withYearOfEra(1970);
        org.joda.time.Chronology chronology7 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.plusMonths(5692);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        int int11 = localDateTime9.getYearOfCentury();
        int int12 = localDateTime9.getYear();
        int int13 = localDateTime9.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69584115 + "'", int1 == 69584115);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 96 + "'", int11 == 96);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2496 + "'", int12 == 2496);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test10638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10638");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        int int32 = dateTime31.getSecondOfDay();
        org.joda.time.DateTime.Property property33 = dateTime31.dayOfMonth();
        org.joda.time.DateTime dateTime35 = dateTime31.minusMonths(15004001);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 65984 + "'", int32 == 65984);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test10639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10639");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.addDays((int) (short) -1);
        mutableDateTime2.addMinutes((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime2.era();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.monthOfYear();
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = locale20.getISO3Language();
        int int22 = property19.getMaximumShortTextLength(locale20);
        java.lang.String str23 = property13.getAsText(locale20);
        java.lang.String str24 = locale20.getLanguage();
        int int25 = property9.getMaximumTextLength(locale20);
        java.lang.String str26 = locale20.getISO3Language();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fra" + "'", str21, "fra");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "70" + "'", str23, "70");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fr" + "'", str24, "fr");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fra" + "'", str26, "fra");
    }

    @Test
    public void test10640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10640");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar4 = mutableDateTime2.toGregorianCalendar();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime2);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("-2000-02-25T19:13:37.408");
        mutableDateTime7.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setDayOfMonth(301);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 301 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test10641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10641");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime9 = property5.addCopy((long) 70);
        org.joda.time.LocalTime localTime10 = property5.roundHalfFloorCopy();
        int int11 = property5.getMaximumValue();
        org.joda.time.LocalTime localTime12 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property5.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 86399999 + "'", int11 == 86399999);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test10642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10642");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder10.appendTimeZoneOffset("610", "-2000-02-25T19:13:50.545", true, 65685, 69258822);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale20 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology18, locale20, (java.lang.Integer) 54202800);
        java.util.Locale locale23 = dateTimeParserBucket22.getLocale();
        java.util.Locale locale24 = dateTimeParserBucket22.getLocale();
        dateTimeParserBucket22.setPivotYear((java.lang.Integer) 69221500);
        long long27 = dateTimeParserBucket22.computeMillis();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((java.lang.Object) "-2000-02-25T19:13:50.545", chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.secondOfMinute();
        org.joda.time.DurationField durationField33 = chronology28.eras();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-291396175L) + "'", long27 == (-291396175L));
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test10643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10643");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        boolean boolean5 = mutableDateTime2.isEqualNow();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.era();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime2.setZoneRetainFields(dateTimeZone7);
        int int9 = mutableDateTime2.getRoundingMode();
        int int10 = mutableDateTime2.getMonthOfYear();
        boolean boolean12 = mutableDateTime2.isBefore((long) 69427501);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutableDateTime2.add(durationFieldType13, 54528922);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(durationFieldType13);
    }

    @Test
    public void test10644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10644");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.monthOfYear();
        int int9 = mutableDateTime7.getWeekOfWeekyear();
        mutableDateTime7.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = mutableDateTime7.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime0.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property15 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test10645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10645");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfYear();
        org.joda.time.DurationField durationField6 = property5.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.set("70");
        int int9 = mutableDateTime8.getYearOfEra();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfEra();
        mutableDateTime8.setMillis((long) (short) 0);
        mutableDateTime8.setTime(0L);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime8.secondOfMinute();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test10646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10646");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateMidnight dateMidnight37 = dateTime34.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = dateTimeFormatter38.getPrinter();
        java.lang.String str40 = dateTime34.toString(dateTimeFormatter38);
        org.joda.time.DateTime.Property property41 = dateTime34.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField42 = property41.getField();
        long long44 = dateTimeField42.roundCeiling(0L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimePrinter39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "5777058235T181944+10010" + "'", str40, "5777058235T181944+10010");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 589800000L + "'", long44 == 589800000L);
    }

    @Test
    public void test10647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10647");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap7);
        boolean boolean9 = dateTimeZone5.equals((java.lang.Object) strMap7);
        boolean boolean11 = dateTimeZone5.isStandardOffset((long) (byte) -1);
        long long14 = dateTimeZone5.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str15 = dateTimeZone5.getID();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone5);
        int int17 = localDate16.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property19 = localDate16.property(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType18.getField(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) chronology20, chronology22);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate23.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.LocalDate.Property property28 = localDate23.weekyear();
        org.joda.time.Chronology chronology29 = localDate23.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.centuries();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 69210404, chronology29);
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 920, chronology29, locale32);
        org.joda.time.DurationField durationField34 = chronology29.halfdays();
        org.joda.time.DateTimeField dateTimeField35 = chronology29.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360599990L) + "'", long14 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:10" + "'", str15, "+100:10");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test10648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10648");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.months();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.minuteOfHour();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTime.Property property28 = dateTime27.secondOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks(3);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime37 = property34.getMutableDateTime();
        boolean boolean38 = dateTime30.isAfter((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.DateTime.Property property39 = dateTime30.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test10649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10649");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap4);
        boolean boolean6 = dateTimeZone2.equals((java.lang.Object) strMap4);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone2.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        int int14 = localDateTime13.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.property(dateTimeFieldType15);
        int int17 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusMonths(54202757);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMinuteOfHour((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withDurationAdded(readableDuration22, 19);
        int int25 = localDateTime24.getDayOfYear();
        boolean boolean26 = dateTimeZone2.isLocalDateTimeGap(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599999L) + "'", long12 == (-360599999L));
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 69584331 + "'", int14 == 69584331);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 206 + "'", int25 == 206);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10650");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology1, locale3, (java.lang.Integer) 54202800);
        java.util.Locale locale6 = dateTimeParserBucket5.getLocale();
        long long7 = dateTimeParserBucket5.computeMillis();
        long long8 = dateTimeParserBucket5.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap15);
        boolean boolean17 = dateTimeZone13.equals((java.lang.Object) strMap15);
        boolean boolean19 = dateTimeZone13.isStandardOffset((long) (byte) -1);
        long long22 = dateTimeZone13.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str23 = dateTimeZone13.getID();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone13);
        int int25 = localDate24.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property27 = localDate24.property(dateTimeFieldType26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType26.getField(chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) chronology28, chronology30);
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.minutes();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.weekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap40 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder39.appendTimeZoneShortName(strMap40);
        boolean boolean42 = dateTimeZone38.equals((java.lang.Object) strMap40);
        boolean boolean44 = dateTimeZone38.isStandardOffset((long) (byte) -1);
        long long47 = dateTimeZone38.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str48 = dateTimeZone38.getID();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone38);
        int int50 = localDate49.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property52 = localDate49.property(dateTimeFieldType51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType51.getField(chronology53);
        java.util.Locale locale55 = java.util.Locale.getDefault();
        int int56 = dateTimeField54.getMaximumShortTextLength(locale55);
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        int int58 = dateTimeField54.getMaximumTextLength(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 20, chronology32, locale57, (java.lang.Integer) 2022, 0);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap66 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder65.appendTimeZoneShortName(strMap66);
        boolean boolean68 = dateTimeZone64.equals((java.lang.Object) strMap66);
        dateTimeParserBucket61.setZone(dateTimeZone64);
        dateTimeParserBucket5.setZone(dateTimeZone64);
        java.lang.String str71 = dateTimeZone64.getID();
        java.util.TimeZone timeZone72 = dateTimeZone64.toTimeZone();
        java.lang.Object obj73 = timeZone72.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-291396175L) + "'", long7 == (-291396175L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-291396175L) + "'", long8 == (-291396175L));
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-360599990L) + "'", long22 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+100:10" + "'", str23, "+100:10");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-360599990L) + "'", long47 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+100:10" + "'", str48, "+100:10");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 9 + "'", int56 == 9);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 9 + "'", int58 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+100:10" + "'", str71, "+100:10");
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "java.util.SimpleTimeZone[id=+100:10,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "java.util.SimpleTimeZone[id=+100:10,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "java.util.SimpleTimeZone[id=+100:10,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test10651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10651");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap13 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap13);
        boolean boolean15 = dateTimeZone11.equals((java.lang.Object) strMap13);
        boolean boolean17 = dateTimeZone11.isStandardOffset((long) (byte) -1);
        long long20 = dateTimeZone11.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str21 = dateTimeZone11.getID();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone11);
        int int23 = localDate22.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property25 = localDate22.property(dateTimeFieldType24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType24.getField(chronology26);
        int int28 = dateTimeField27.getMinimumValue();
        mutableDateTime5.setRounding(dateTimeField27);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 69220682);
        mutableDateTime32.setDayOfMonth(19);
        mutableDateTime32.addHours(69266512);
        mutableDateTime30.setMillis((org.joda.time.ReadableInstant) mutableDateTime32);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime30.setWeekOfWeekyear(69497314);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69497314 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-360599990L) + "'", long20 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test10652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10652");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addDays((int) (short) -1);
        int int11 = mutableDateTime7.getYear();
        boolean boolean12 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.monthOfYear();
        int int17 = mutableDateTime15.getWeekOfWeekyear();
        mutableDateTime15.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean21 = mutableDateTime15.isSupported(dateTimeFieldType20);
        boolean boolean22 = mutableDateTime7.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology23 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap29 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder28.appendTimeZoneShortName(strMap29);
        boolean boolean31 = dateTimeZone27.equals((java.lang.Object) strMap29);
        boolean boolean33 = dateTimeZone27.isStandardOffset((long) (byte) -1);
        long long36 = dateTimeZone27.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str37 = dateTimeZone27.getID();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone27);
        int int39 = localDate38.getYearOfEra();
        org.joda.time.LocalDate.Property property40 = localDate38.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        mutableDateTime7.setRounding(dateTimeField41);
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder44.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale47 = builder46.build();
        java.lang.String str48 = locale47.getVariant();
        java.util.Locale.setDefault(locale47);
        java.lang.String str50 = dateTimeField41.getAsShortText((long) 69265337, locale47);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-360599990L) + "'", long36 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+100:10" + "'", str37, "+100:10");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970" + "'", str50, "1970");
    }

    @Test
    public void test10653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10653");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        long long11 = mutableDateTime9.getMillis();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime9.add(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        int int15 = mutableDateTime9.get(dateTimeFieldType14);
        long long16 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime9.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundHalfFloor();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69584428 + "'", int1 == 69584428);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 27385639L + "'", long16 == 27385639L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test10654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10654");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        java.lang.String[] strArray10 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList18);
        boolean boolean22 = strList20.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList28);
        boolean boolean32 = strList30.equals((java.lang.Object) (-1));
        boolean boolean33 = strList20.retainAll((java.util.Collection<java.lang.String>) strList30);
        boolean boolean34 = strSet11.retainAll((java.util.Collection<java.lang.String>) strList20);
        boolean boolean35 = strList5.retainAll((java.util.Collection<java.lang.String>) strSet11);
        java.util.Iterator<java.lang.String> strItor36 = strSet11.iterator();
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strList42);
        java.lang.String[] strArray47 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strList55);
        boolean boolean59 = strList57.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strList65);
        boolean boolean69 = strList67.equals((java.lang.Object) (-1));
        boolean boolean70 = strList57.retainAll((java.util.Collection<java.lang.String>) strList67);
        boolean boolean71 = strSet48.retainAll((java.util.Collection<java.lang.String>) strList57);
        boolean boolean72 = strList42.retainAll((java.util.Collection<java.lang.String>) strSet48);
        java.util.Iterator<java.lang.String> strItor73 = strSet48.iterator();
        boolean boolean74 = strSet11.retainAll((java.util.Collection<java.lang.String>) strSet48);
        strSet48.clear();
        boolean boolean77 = strSet48.contains((java.lang.Object) 69247182);
        java.util.stream.Stream<java.lang.String> strStream78 = strSet48.parallelStream();
        boolean boolean79 = strSet48.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strItor73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strStream78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test10655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10655");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate22.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDate.Property property27 = localDate22.weekyear();
        org.joda.time.LocalDate localDate28 = property27.withMinimumValue();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.LocalDate localDate30 = property27.roundFloorCopy();
        org.joda.time.LocalDate localDate32 = localDate30.withYearOfEra(69233211);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTimeAtStartOfDay(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap40 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder39.appendTimeZoneShortName(strMap40);
        boolean boolean42 = dateTimeZone38.equals((java.lang.Object) strMap40);
        boolean boolean44 = dateTimeZone38.isStandardOffset((long) (byte) -1);
        long long47 = dateTimeZone38.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str48 = dateTimeZone38.getID();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone38);
        int int50 = localDate49.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property52 = localDate49.property(dateTimeFieldType51);
        org.joda.time.LocalDate localDate54 = localDate49.minusYears(69206920);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.LocalDate localDate56 = localDate54.minus(readablePeriod55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDate localDate59 = localDate56.withPeriodAdded(readablePeriod57, 69210165);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone61);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        mutableDateTime62.add(readablePeriod64);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder69 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap70 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = dateTimeFormatterBuilder69.appendTimeZoneShortName(strMap70);
        boolean boolean72 = dateTimeZone68.equals((java.lang.Object) strMap70);
        boolean boolean74 = dateTimeZone68.isStandardOffset((long) (byte) -1);
        long long77 = dateTimeZone68.convertLocalToUTC((long) (short) 10, true);
        mutableDateTime62.setZoneRetainFields(dateTimeZone68);
        org.joda.time.DateTime dateTime79 = localDate56.toDateTimeAtStartOfDay(dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight80 = localDate32.toDateMidnight(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime81 = org.joda.time.MutableDateTime.now(dateTimeZone68);
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate((long) 312, dateTimeZone68);
        long long86 = dateTimeZone68.convertLocalToUTC((long) 69322673, true, (long) 69340505);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-360599990L) + "'", long47 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+100:10" + "'", str48, "+100:10");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-360599990L) + "'", long77 == (-360599990L));
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-291277327L) + "'", long86 == (-291277327L));
    }

    @Test
    public void test10656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10656");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) 100);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test10657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10657");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        org.joda.time.Chronology chronology5 = null;
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology5, locale7, (java.lang.Integer) 54202800);
        java.lang.String str10 = locale1.getDisplayCountry(locale7);
        boolean boolean11 = locale1.hasExtensions();
        java.lang.String str12 = locale1.getDisplayName();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendTimeZoneShortName(strMap19);
        boolean boolean21 = dateTimeZone17.equals((java.lang.Object) strMap19);
        boolean boolean23 = dateTimeZone17.isStandardOffset((long) (byte) -1);
        long long26 = dateTimeZone17.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str27 = dateTimeZone17.getID();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone17);
        int int29 = localDate28.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property31 = localDate28.property(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType30.getField(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) chronology32, chronology34);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.months();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.weekyear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap47 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder46.appendTimeZoneShortName(strMap47);
        boolean boolean49 = dateTimeZone45.equals((java.lang.Object) strMap47);
        boolean boolean51 = dateTimeZone45.isStandardOffset((long) (byte) -1);
        long long54 = dateTimeZone45.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str55 = dateTimeZone45.getID();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone45);
        int int57 = localDate56.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property59 = localDate56.property(dateTimeFieldType58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType58.getField(chronology60);
        java.util.Locale locale62 = java.util.Locale.getDefault();
        int int63 = dateTimeField61.getMaximumShortTextLength(locale62);
        long long65 = dateTimeField61.roundCeiling((long) 1970);
        int int67 = dateTimeField61.get((long) 69214930);
        java.util.Locale locale69 = new java.util.Locale("hi!");
        java.util.Locale locale70 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str71 = locale69.getDisplayVariant(locale70);
        java.lang.String str72 = locale69.getISO3Language();
        int int73 = dateTimeField61.getMaximumShortTextLength(locale69);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 12, chronology36, locale69);
        org.joda.time.DateTimeField dateTimeField75 = chronology36.minuteOfHour();
        java.util.Locale locale76 = java.util.Locale.JAPAN;
        java.lang.String str77 = locale76.getDisplayVariant();
        java.lang.String str78 = locale76.getCountry();
        int int79 = dateTimeField75.getMaximumShortTextLength(locale76);
        java.lang.String str80 = locale1.getDisplayCountry(locale76);
        java.util.Locale locale81 = locale76.stripExtensions();
        java.lang.String str82 = locale81.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hi!" + "'", str12, "hi!");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-360599990L) + "'", long26 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+100:10" + "'", str27, "+100:10");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-360599990L) + "'", long54 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+100:10" + "'", str55, "+100:10");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 9223372036494175807L + "'", long65 == 9223372036494175807L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals(locale69.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "hi!" + "'", str72, "hi!");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "JP" + "'", str78, "JP");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ja_JP" + "'", str82, "ja_JP");
    }

    @Test
    public void test10658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10658");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendHourOfDay(69215043);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendMillisOfDay(19);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSecondOfMinute(1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder3.appendMillisOfDay(39);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone11);
        mutableDateTime12.setTime((long) (short) -1);
        mutableDateTime12.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str18 = mutableDateTime12.toString(dateTimeFormatter17);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone21);
        mutableDateTime22.setTime((long) (short) -1);
        org.joda.time.Chronology chronology25 = mutableDateTime22.getChronology();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 69206325, chronology25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withChronology(chronology25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter17.withPivotYear((java.lang.Integer) 69385461);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder9.append(dateTimeFormatter29);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder9.appendDayOfWeekText();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "00" + "'", str18, "00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
    }

    @Test
    public void test10659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10659");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setExtension('#', "-2000-02-25T19:16:12.585");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test10660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10660");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime11.minus(readablePeriod12);
        java.lang.String str14 = localTime13.toString();
        org.joda.time.LocalTime.Property property15 = localTime13.millisOfDay();
        java.util.Locale locale16 = null;
        int int17 = property15.getMaximumShortTextLength(locale16);
        org.joda.time.LocalTime localTime18 = property15.roundCeilingCopy();
        org.joda.time.LocalTime localTime20 = localTime18.withMillisOfDay(69338735);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType22 = localTime18.getFieldType(69579307);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69579307");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "00:00:10.010" + "'", str14, "00:00:10.010");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test10661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10661");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = dateTime31.plusMinutes(69212644);
        org.joda.time.DateTime dateTime36 = dateTime31.withMillis((long) (short) 100);
        int int37 = dateTime31.getSecondOfMinute();
        org.joda.time.DateTime dateTime39 = dateTime31.minusMillis(65612);
        int int40 = dateTime31.getSecondOfMinute();
        org.joda.time.DateTime dateTime41 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime43 = dateTime41.withHourOfDay((int) (byte) 10);
        org.joda.time.DateTime.Property property44 = dateTime41.dayOfYear();
        org.joda.time.DateTime dateTime46 = property44.setCopy(206);
        org.joda.time.DateTime dateTime48 = property44.addToCopy(69239765L);
        org.joda.time.DateTime dateTime49 = dateTime48.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = dateTime49.withMillisOfSecond(69542695);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69542695 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 44 + "'", int37 == 44);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 44 + "'", int40 == 44);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test10662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10662");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.monthOfYear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.minuteOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfYear();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.set("70");
        java.util.Locale locale13 = java.util.Locale.JAPANESE;
        java.lang.String str14 = property9.getAsShortText(locale13);
        java.util.Locale.Builder builder15 = builder0.setLocale(locale13);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder16.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale19 = builder18.build();
        java.util.Locale.Builder builder20 = builder0.setLocale(locale19);
        java.util.Locale.Builder builder22 = builder0.addUnicodeLocaleAttribute("69247247");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder0.setRegion("2022-01-25T17:39:27.958");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-01-25T17:39:27.958 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "70" + "'", str14, "70");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test10663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10663");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        java.io.Writer writer2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withDurationAdded(readableDuration4, 6);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear(22);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(575);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(69241950);
        boolean boolean14 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(writer2, (org.joda.time.ReadablePartial) localDateTime16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test10664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10664");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        int int7 = localDateTime5.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.property(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusWeeks(69222873);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.year();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plus(readableDuration13);
        int int15 = localDateTime11.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69584735 + "'", int1 == 69584735);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 69584735 + "'", int15 == 69584735);
    }

    @Test
    public void test10665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10665");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.dayOfWeek();
        long long33 = chronology24.add(0L, (long) 69293347, 69336607);
        org.joda.time.DurationField durationField34 = chronology24.weeks();
        org.joda.time.DateTimeField dateTimeField35 = chronology24.clockhourOfDay();
        org.joda.time.DurationField durationField36 = chronology24.years();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 4804565568653629L + "'", long33 == 4804565568653629L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test10666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10666");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        boolean boolean25 = dateTimeZone21.equals((java.lang.Object) strMap23);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (byte) -1);
        long long30 = dateTimeZone21.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str31 = dateTimeZone21.getID();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone21);
        int int33 = localDate32.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property35 = localDate32.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType34.getField(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) chronology36, chronology38);
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.minutes();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType16.getField(chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-360599990L) + "'", long30 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+100:10" + "'", str31, "+100:10");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test10667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10667");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = new java.util.Locale("hi!");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology6, locale8, (java.lang.Integer) 54202800);
        java.lang.String str11 = locale2.getDisplayCountry(locale8);
        java.lang.String str14 = nameProvider0.getShortName(locale8, "-2000-02-25T19:13:31.786", "fra");
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str18 = nameProvider0.getShortName(locale15, "1970-02-05T19", "2022-01-25T17:33:50.182");
        java.util.Locale locale19 = java.util.Locale.KOREA;
        java.lang.String str22 = nameProvider0.getName(locale19, "-2000-02-25T19:13:49.095", "DateTimeField[era]");
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap28 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder27.appendTimeZoneShortName(strMap28);
        boolean boolean30 = dateTimeZone26.equals((java.lang.Object) strMap28);
        boolean boolean32 = dateTimeZone26.isStandardOffset((long) (byte) -1);
        long long35 = dateTimeZone26.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str36 = dateTimeZone26.getID();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone26);
        int int38 = localDate37.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property40 = localDate37.property(dateTimeFieldType39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap46 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder45.appendTimeZoneShortName(strMap46);
        boolean boolean48 = dateTimeZone44.equals((java.lang.Object) strMap46);
        boolean boolean50 = dateTimeZone44.isStandardOffset((long) (byte) -1);
        long long53 = dateTimeZone44.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str54 = dateTimeZone44.getID();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone44);
        int int56 = localDate55.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property58 = localDate55.property(dateTimeFieldType57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType57.getField(chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) chronology59, chronology61);
        org.joda.time.Chronology chronology63 = localDate62.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.minutes();
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType39.getField(chronology63);
        org.joda.time.DateTimeField dateTimeField66 = chronology63.year();
        java.util.Locale locale67 = java.util.Locale.CHINESE;
        int int68 = dateTimeField66.getMaximumShortTextLength(locale67);
        java.lang.String str69 = locale67.getVariant();
        java.lang.String str70 = locale67.getDisplayLanguage();
        java.lang.String str73 = nameProvider0.getShortName(locale67, "Korean", "Saturday");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko_KR");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-360599990L) + "'", long35 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+100:10" + "'", str36, "+100:10");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-360599990L) + "'", long53 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+100:10" + "'", str54, "+100:10");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Chinese" + "'", str70, "Chinese");
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test10668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10668");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(65685, 69405143, 54427, 69229864, 65900);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69229864 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10669");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        java.util.TimeZone timeZone5 = dateTimeZone3.toTimeZone();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.property(dateTimeFieldType9);
        org.joda.time.DurationField durationField11 = property10.getDurationField();
        org.joda.time.LocalDateTime localDateTime13 = property10.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime15 = property10.addWrapFieldToCopy(69208701);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone19);
        mutableDateTime20.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone24);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.yearOfCentury();
        mutableDateTime25.addDays((int) (short) -1);
        int int29 = mutableDateTime25.getYear();
        boolean boolean30 = mutableDateTime20.isEqual((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.monthOfYear();
        int int35 = mutableDateTime33.getWeekOfWeekyear();
        mutableDateTime33.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean39 = mutableDateTime33.isSupported(dateTimeFieldType38);
        boolean boolean40 = mutableDateTime25.isSupported(dateTimeFieldType38);
        int int41 = mutableDateTime25.getEra();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime25.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.yearOfCentury();
        mutableDateTime45.addDays((int) (short) -1);
        mutableDateTime45.addMinutes((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime45.hourOfDay();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime45.era();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime58 = property56.add((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone60);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime61.monthOfYear();
        java.util.Locale locale63 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str64 = locale63.getISO3Language();
        int int65 = property62.getMaximumShortTextLength(locale63);
        java.lang.String str66 = property56.getAsText(locale63);
        java.lang.String str67 = locale63.getLanguage();
        int int68 = property52.getMaximumTextLength(locale63);
        int int69 = property42.getMaximumShortTextLength(locale63);
        java.lang.String str70 = locale63.getDisplayLanguage();
        java.lang.String str71 = property16.getAsText(locale63);
        java.lang.String str72 = dateTimeZone3.getName((long) 69384322, locale63);
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime((long) 2023, dateTimeZone3);
        java.lang.String str75 = dateTimeZone3.getNameKey((long) 69423408);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69584839 + "'", int8 == 69584839);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "fra" + "'", str64, "fra");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 5 + "'", int65 == 5);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "70" + "'", str66, "70");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "fr" + "'", str67, "fr");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "French" + "'", str70, "French");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "f\351vrier" + "'", str71, "f\351vrier");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+100:10" + "'", str72, "+100:10");
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test10670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10670");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.yearMonthDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withDefaultYear(1969);
        java.lang.String str4 = dateTimeFormatter0.print((long) 69277568);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        long long18 = dateTimeZone9.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str19 = dateTimeZone9.getID();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone9);
        int int21 = localDate20.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property23 = localDate20.property(dateTimeFieldType22);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap29 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder28.appendTimeZoneShortName(strMap29);
        boolean boolean31 = dateTimeZone27.equals((java.lang.Object) strMap29);
        boolean boolean33 = dateTimeZone27.isStandardOffset((long) (byte) -1);
        long long36 = dateTimeZone27.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str37 = dateTimeZone27.getID();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone27);
        int int39 = localDate38.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property41 = localDate38.property(dateTimeFieldType40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType40.getField(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) chronology42, chronology44);
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.minutes();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType22.getField(chronology46);
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.lang.String str50 = locale49.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology46, locale49, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeZone dateTimeZone54 = chronology46.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter0.withChronology(chronology46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime57 = dateTimeFormatter55.parseLocalTime("Property[secondOfMinute]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[secondOfMinute]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-05" + "'", str4, "1970-01-05");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360599990L) + "'", long18 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+100:10" + "'", str19, "+100:10");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-360599990L) + "'", long36 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+100:10" + "'", str37, "+100:10");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
    }

    @Test
    public void test10671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10671");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology1, locale3, (java.lang.Integer) 54202800);
        java.util.Locale locale6 = dateTimeParserBucket5.getLocale();
        java.util.Locale locale7 = dateTimeParserBucket5.getLocale();
        java.util.Locale locale8 = dateTimeParserBucket5.getLocale();
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = locale8.getScript();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test10672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10672");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.setCopy(2);
        org.joda.time.DateTime dateTime35 = property32.withMaximumValue();
        org.joda.time.DateTime dateTime37 = property32.addToCopy(2022);
        org.joda.time.DateTime dateTime38 = property32.withMinimumValue();
        int int39 = dateTime38.getMonthOfYear();
        org.joda.time.DateTime dateTime41 = dateTime38.plusHours(69407303);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10673");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 5, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.yearOfEra();
        org.joda.time.DateTime.Property property4 = dateTime2.era();
        org.joda.time.DateTime dateTime6 = dateTime2.plusSeconds((int) '4');
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.minusWeeks(245);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap15);
        boolean boolean17 = dateTimeZone13.equals((java.lang.Object) strMap15);
        boolean boolean19 = dateTimeZone13.isStandardOffset((long) (byte) -1);
        long long22 = dateTimeZone13.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str23 = dateTimeZone13.getID();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone13);
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight26 = localDate24.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap32 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder31.appendTimeZoneShortName(strMap32);
        boolean boolean34 = dateTimeZone30.equals((java.lang.Object) strMap32);
        boolean boolean36 = dateTimeZone30.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter27.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        org.joda.time.DateTime dateTime39 = localDate24.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.DateTime dateTime41 = dateTime39.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property42 = dateTime39.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap48 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder47.appendTimeZoneShortName(strMap48);
        boolean boolean50 = dateTimeZone46.equals((java.lang.Object) strMap48);
        boolean boolean52 = dateTimeZone46.isStandardOffset((long) (byte) -1);
        long long55 = dateTimeZone46.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str56 = dateTimeZone46.getID();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone46);
        int int58 = localDate57.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property60 = localDate57.property(dateTimeFieldType59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType59.getField(chronology61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((java.lang.Object) chronology61, chronology63);
        org.joda.time.Chronology chronology65 = localDate64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.minutes();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.weekyear();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        org.joda.time.Chronology chronology72 = chronology65.withZone(dateTimeZone70);
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime39.toMutableDateTime(chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology72.secondOfMinute();
        long long78 = chronology72.add((long) 43, (long) 69230182, (-2));
        org.joda.time.DateTime dateTime79 = dateTime6.withChronology(chronology72);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-360599990L) + "'", long22 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+100:10" + "'", str23, "+100:10");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-360599990L) + "'", long55 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+100:10" + "'", str56, "+100:10");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-138460321L) + "'", long78 == (-138460321L));
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test10674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10674");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.monthOfYear();
        int int9 = mutableDateTime7.getWeekOfWeekyear();
        mutableDateTime7.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = mutableDateTime7.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime0.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(69208701);
        org.joda.time.LocalDateTime localDateTime17 = property14.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear(69501817);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder20.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder20.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser25 = dateTimeFormatterBuilder20.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder20.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder27.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder27.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder30.append(dateTimeFormatter31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder32.appendWeekyear((int) (short) 10, 12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder36.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder36.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser41 = dateTimeFormatterBuilder36.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder35.appendOptional(dateTimeParser41);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder42.appendCenturyOfEra(69217826, 54202757);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder42.appendFixedSignedDecimal(dateTimeFieldType46, 2019);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder48.appendYearOfEra(69282081, 69258541);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder51.appendDayOfMonth(69392792);
        boolean boolean54 = localDateTime19.equals((java.lang.Object) dateTimeFormatterBuilder53);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeParser25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeParser41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test10675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10675");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) chronology37, chronology39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType17.getField(chronology41);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale44, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeZone dateTimeZone49 = chronology41.getZone();
        org.joda.time.DurationField durationField50 = chronology41.centuries();
        org.joda.time.DateTimeField dateTimeField51 = chronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField52 = chronology41.secondOfMinute();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology41);
        org.joda.time.DateTime dateTime55 = dateTime53.minusHours(69263634);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test10676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10676");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        java.lang.String str4 = dateTimeZone2.getShortName((long) (byte) 100);
        java.lang.String str6 = dateTimeZone2.getName((long) 2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval10 = localDate8.toInterval();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate8.plus(readablePeriod11);
        boolean boolean13 = dateTimeZone2.equals((java.lang.Object) localDate12);
        int int14 = localDate12.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate12.plus(readablePeriod15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = localDate12.get(dateTimeFieldType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+100:10" + "'", str4, "+100:10");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+100:10" + "'", str6, "+100:10");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
    }

    @Test
    public void test10677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10677");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTimeISO();
        org.joda.time.LocalDate localDate14 = dateTime12.toLocalDate();
        org.joda.time.DateTime.Property property15 = dateTime12.secondOfDay();
        int int16 = dateTime12.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
    }

    @Test
    public void test10678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10678");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        int int10 = localDateTime9.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.property(dateTimeFieldType11);
        org.joda.time.DurationField durationField13 = property12.getDurationField();
        org.joda.time.LocalDateTime localDateTime15 = property12.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime17 = property12.addWrapFieldToCopy(69208701);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.monthOfYear();
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.lang.String str20 = property18.getAsShortText(locale19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.monthOfYear();
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str32 = locale31.getISO3Language();
        int int33 = property30.getMaximumShortTextLength(locale31);
        java.lang.String str34 = property24.getAsText(locale31);
        java.lang.String str35 = locale19.getDisplayCountry(locale31);
        java.util.Set<java.lang.String> strSet36 = locale31.getUnicodeLocaleKeys();
        int int37 = property6.getMaximumShortTextLength(locale31);
        org.joda.time.LocalDateTime localDateTime38 = property6.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69585182 + "'", int1 == 69585182);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 69585182 + "'", int10 == 69585182);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "feb" + "'", str20, "feb");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fra" + "'", str32, "fra");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "70" + "'", str34, "70");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Italie" + "'", str35, "Italie");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test10679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10679");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.weekyear();
        org.joda.time.DurationField durationField4 = chronology2.millis();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test10680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10680");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property5.addWrapFieldToCopy(69297355);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.yearOfCentury();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime16.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        int int39 = dateTimeField38.getMinimumValue();
        mutableDateTime16.setRounding(dateTimeField38);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime16.copy();
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime41.add(readableDuration42);
        java.util.GregorianCalendar gregorianCalendar44 = mutableDateTime41.toGregorianCalendar();
        mutableDateTime41.setYear(2);
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime41.add(readableDuration47, 69217826);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime41.property(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property53 = localTime10.property(dateTimeFieldType50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(gregorianCalendar44);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test10681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10681");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder4 = builder2.setScript("");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setLanguageTag("2022-02-25T19:14:19.140+100:10");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test10682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10682");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.LocalDate localDate17 = property15.getLocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.centuryOfEra();
        org.joda.time.LocalDate localDate19 = property18.withMinimumValue();
        org.joda.time.LocalDate localDate20 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.yearOfCentury();
        mutableDateTime23.addDays((int) (short) -1);
        int int27 = mutableDateTime23.getYear();
        org.joda.time.DateTimeZone dateTimeZone28 = mutableDateTime23.getZone();
        org.joda.time.DateTime dateTime29 = localDate20.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.LocalDate.Property property30 = localDate20.era();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test10683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10683");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale4 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology2, locale4, (java.lang.Integer) 54202800);
        org.joda.time.DateTimeField dateTimeField7 = null;
        dateTimeParserBucket6.saveField(dateTimeField7, 4);
        java.lang.Integer int10 = dateTimeParserBucket6.getOffsetInteger();
        boolean boolean12 = dateTimeParserBucket6.restoreState((java.lang.Object) 72);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder13.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder13.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatterBuilder13.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder13.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder13.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder13.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeParser dateTimeParser25 = dateTimeFormatterBuilder24.toParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder24.appendFixedDecimal(dateTimeFieldType26, 69215043);
        dateTimeParserBucket6.saveField(dateTimeFieldType26, 69259154);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap37 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendTimeZoneShortName(strMap37);
        boolean boolean39 = dateTimeZone35.equals((java.lang.Object) strMap37);
        boolean boolean41 = dateTimeZone35.isStandardOffset((long) (byte) -1);
        long long44 = dateTimeZone35.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str45 = dateTimeZone35.getID();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone35);
        int int47 = localDate46.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property49 = localDate46.property(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType48.getField(chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) chronology50, chronology52);
        org.joda.time.Chronology chronology54 = localDate53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.minutes();
        org.joda.time.Chronology chronology56 = chronology54.withUTC();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) '#', chronology54);
        org.joda.time.DurationField durationField58 = chronology54.years();
        boolean boolean59 = dateTimeFieldType26.isSupported(chronology54);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 69318354, chronology54);
        org.junit.Assert.assertEquals(locale4.toString(), "hi!");
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeParser18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeParser25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-360599990L) + "'", long44 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:10" + "'", str45, "+100:10");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test10684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10684");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime0.withMinuteOfHour(6);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusMillis(69229172);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withDayOfYear(69315446);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69315446 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test10685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10685");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap7);
        boolean boolean9 = dateTimeZone5.equals((java.lang.Object) strMap7);
        boolean boolean11 = dateTimeZone5.isStandardOffset((long) (byte) -1);
        long long14 = dateTimeZone5.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str15 = dateTimeZone5.getID();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone5);
        int int17 = localDate16.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property19 = localDate16.property(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType18.getField(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) chronology20, chronology22);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate27 = localDate23.withPeriodAdded(readablePeriod25, (int) '#');
        org.joda.time.LocalDate.Property property28 = localDate23.weekyear();
        org.joda.time.Chronology chronology29 = localDate23.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.centuries();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 69210404, chronology29);
        org.joda.time.DurationField durationField32 = chronology29.minutes();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 69208701, chronology29);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder34.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder34.appendDayOfWeekShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder37.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder37.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder40.appendSignedDecimal(dateTimeFieldType41, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder44.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder47.appendLiteral('4');
        boolean boolean50 = dateTimeFormatterBuilder49.canBuildParser();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder49.appendShortText(dateTimeFieldType51);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder34.appendDecimal(dateTimeFieldType51, 69210315, 69203038);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime33.set(dateTimeFieldType51, 69510219);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69510219 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360599990L) + "'", long14 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:10" + "'", str15, "+100:10");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
    }

    @Test
    public void test10686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10686");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendClockhourOfHalfday(69206284);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder2.appendWeekOfWeekyear(69213298);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTwoDigitWeekyear((-292275055));
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder9.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder9.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder12.appendSignedDecimal(dateTimeFieldType13, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendDayOfMonth(69203038);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondMillis();
        org.joda.time.format.DateTimeParser dateTimeParser25 = dateTimeFormatter24.getParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder21.appendOptional(dateTimeParser25);
        int int27 = dateTimeParser25.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder8.append(dateTimeParser25);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder28.appendYearOfCentury(69218709, 69381577);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeParser25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 28 + "'", int27 == 28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
    }

    @Test
    public void test10687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10687");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) chronology37, chronology39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType17.getField(chronology41);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale44, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeZone dateTimeZone49 = chronology41.getZone();
        org.joda.time.DurationField durationField50 = chronology41.centuries();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray54 = chronology41.get(readablePeriod51, (long) 69367719, 2183897289740679000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test10688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10688");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property34 = dateTime29.minuteOfHour();
        java.util.GregorianCalendar gregorianCalendar35 = dateTime29.toGregorianCalendar();
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone38);
        mutableDateTime39.setTime((long) (short) -1);
        mutableDateTime39.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str45 = mutableDateTime39.toString(dateTimeFormatter44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.monthOfYear();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime48.minuteOfDay();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime48.dayOfYear();
        org.joda.time.DurationField durationField52 = property51.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime54 = property51.set("70");
        int int55 = mutableDateTime54.getYearOfEra();
        boolean boolean56 = mutableDateTime39.equals((java.lang.Object) int55);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap61 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = dateTimeFormatterBuilder60.appendTimeZoneShortName(strMap61);
        boolean boolean63 = dateTimeZone59.equals((java.lang.Object) strMap61);
        boolean boolean65 = dateTimeZone59.isStandardOffset((long) (byte) -1);
        java.lang.String str67 = dateTimeZone59.getShortName((long) 69203825);
        mutableDateTime39.setZoneRetainFields(dateTimeZone59);
        org.joda.time.Interval interval69 = localDate36.toInterval(dateTimeZone59);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDate localDate71 = localDate36.plus(readablePeriod70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate73 = localDate71.withYearOfEra(292278994);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(gregorianCalendar35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "00" + "'", str45, "00");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+100:10" + "'", str67, "+100:10");
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(localDate71);
    }

    @Test
    public void test10689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10689");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        java.util.Locale locale20 = java.util.Locale.getDefault();
        int int21 = dateTimeField19.getMaximumShortTextLength(locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String[] strArray32 = new java.lang.String[] { "", "1", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "monthOfYear", "hi!", "1", "monthOfYear", "hi!", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean35 = strSet33.isEmpty();
        boolean boolean36 = strSet22.removeAll((java.util.Collection<java.lang.String>) strSet33);
        java.lang.Object[] objArray37 = strSet22.toArray();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
    }

    @Test
    public void test10690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10690");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        int int2 = localDateTime0.getYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        boolean boolean7 = localDateTime5.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFields((org.joda.time.ReadablePartial) localDateTime5);
        java.lang.String str11 = localDateTime10.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69585547 + "'", int1 == 69585547);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-25T19:19:45.547" + "'", str11, "2022-02-25T19:19:45.547");
    }

    @Test
    public void test10691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10691");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-25T00:00:00.010+100:10");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-25T00:00:00.010+100:10\" is malformed at \"+100:10\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10692");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        java.lang.String str12 = mutableDateTime9.toString();
        mutableDateTime9.addSeconds(1969);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        int int16 = localDateTime15.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.property(dateTimeFieldType17);
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        int int20 = property18.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        mutableDateTime9.setRounding(dateTimeField21);
        org.joda.time.DurationField durationField23 = dateTimeField21.getRangeDurationField();
        org.joda.time.DurationField durationField24 = dateTimeField21.getDurationField();
        java.lang.String str25 = dateTimeField21.toString();
        int int27 = dateTimeField21.get((long) 69273304);
        long long29 = dateTimeField21.roundHalfCeiling((long) 69243252);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str12, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 69585564 + "'", int16 == 69585564);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DateTimeField[era]" + "'", str25, "DateTimeField[era]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-62135596800000L) + "'", long29 == (-62135596800000L));
    }

    @Test
    public void test10693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10693");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder10.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.append(dateTimeFormatter12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder10.appendSecondOfMinute(19);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder15.appendDayOfWeekShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder15.appendTwoDigitWeekyear(69272321, false);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder15.appendMinuteOfHour(69346267);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList27);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap36 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendTimeZoneShortName(strMap36);
        boolean boolean38 = dateTimeZone34.equals((java.lang.Object) strMap36);
        boolean boolean40 = dateTimeZone34.isStandardOffset((long) (byte) -1);
        long long43 = dateTimeZone34.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str44 = dateTimeZone34.getID();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone34);
        int int46 = localDate45.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property48 = localDate45.property(dateTimeFieldType47);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap54 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder53.appendTimeZoneShortName(strMap54);
        boolean boolean56 = dateTimeZone52.equals((java.lang.Object) strMap54);
        boolean boolean58 = dateTimeZone52.isStandardOffset((long) (byte) -1);
        long long61 = dateTimeZone52.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str62 = dateTimeZone52.getID();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone52);
        int int64 = localDate63.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property66 = localDate63.property(dateTimeFieldType65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType65.getField(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((java.lang.Object) chronology67, chronology69);
        org.joda.time.Chronology chronology71 = localDate70.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.minutes();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType47.getField(chronology71);
        java.util.Locale locale74 = java.util.Locale.JAPAN;
        java.lang.String str75 = locale74.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology71, locale74, (java.lang.Integer) 0, 54202800);
        boolean boolean79 = strList27.remove((java.lang.Object) chronology71);
        org.joda.time.DateTimeField dateTimeField80 = chronology71.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField81 = chronology71.secondOfMinute();
        long long84 = dateTimeField81.getDifferenceAsLong((long) 297, 0L);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = dateTimeField81.getType();
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType85.getDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder87 = dateTimeFormatterBuilder15.appendShortText(dateTimeFieldType85);
        org.joda.time.DurationFieldType durationFieldType88 = dateTimeFieldType85.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-360599990L) + "'", long43 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+100:10" + "'", str44, "+100:10");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1970 + "'", int46 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-360599990L) + "'", long61 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+100:10" + "'", str62, "+100:10");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder87);
        org.junit.Assert.assertNotNull(durationFieldType88);
    }

    @Test
    public void test10694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10694");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((-5));
        org.joda.time.LocalTime localTime6 = localTime4.minusHours((-26));
        org.joda.time.LocalTime.Property property7 = localTime4.secondOfMinute();
        org.joda.time.LocalTime localTime9 = property7.addCopy(69298920);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test10695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10695");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 69370690);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMonths(65889);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test10696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10696");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfDay(2022, 69218943);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder7.appendClockhourOfDay(69230182);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder12.appendTimeZoneOffset("\u897f\u66a6", true, 254, 69210934);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendFractionOfHour(69280605, 69313959);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder20.appendTimeZoneOffset("PM", false, 69368489, 69376094);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder25.appendYearOfEra(69318006, 1314000000);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
    }

    @Test
    public void test10697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10697");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.minusMinutes(69207073);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalTime localTime6 = localTime3.withPeriodAdded(readablePeriod4, 65615);
        org.joda.time.LocalTime localTime8 = localTime6.plusSeconds((-2022));
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendTimeZoneShortName(strMap17);
        boolean boolean19 = dateTimeZone15.equals((java.lang.Object) strMap17);
        boolean boolean21 = dateTimeZone15.isStandardOffset((long) (byte) -1);
        long long25 = dateTimeZone15.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap31 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder30.appendTimeZoneShortName(strMap31);
        boolean boolean33 = dateTimeZone29.equals((java.lang.Object) strMap31);
        boolean boolean35 = dateTimeZone29.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter26.withZone(dateTimeZone29);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        long long39 = dateTimeZone15.getMillisKeepLocal(dateTimeZone29, (long) 10);
        mutableDateTime11.setZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime41 = localTime6.toDateTime((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.LocalTime localTime43 = localTime6.plusMinutes(65612);
        org.joda.time.LocalTime localTime45 = localTime6.plusMinutes(69433964);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-360599999L) + "'", long25 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 10L + "'", long39 == 10L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
    }

    @Test
    public void test10698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10698");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.monthOfYear();
        int int28 = dateTimeField25.getDifference((long) 69266721, 69247318L);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.monthOfYear();
        long long33 = mutableDateTime31.getMillis();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime31.add(readableDuration34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap41 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder40.appendTimeZoneShortName(strMap41);
        boolean boolean43 = dateTimeZone39.equals((java.lang.Object) strMap41);
        boolean boolean45 = dateTimeZone39.isStandardOffset((long) (byte) -1);
        long long48 = dateTimeZone39.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str49 = dateTimeZone39.getID();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime31.toMutableDateTime(dateTimeZone39);
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.now(dateTimeZone39);
        org.joda.time.LocalDate localDate54 = localDate52.plusWeeks(69264455);
        int int55 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localDate52);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-360599990L) + "'", long48 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+100:10" + "'", str49, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 12 + "'", int55 == 12);
    }

    @Test
    public void test10699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10699");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addWeeks(69255289);
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category3);
        java.util.Locale locale6 = java.util.Locale.getDefault(category3);
        java.util.Locale locale7 = java.util.Locale.getDefault(category3);
        java.util.Locale locale8 = java.util.Locale.getDefault(category3);
        java.util.Calendar calendar9 = mutableDateTime0.toCalendar(locale8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime0.add(readablePeriod10, 69504881);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=41887244243385692,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+100:10,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1329323,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=344,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=19,SECOND=45,MILLISECOND=692,ZONE_OFFSET=360600000,DST_OFFSET=0]");
    }

    @Test
    public void test10700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10700");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) chronology37, chronology39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType17.getField(chronology41);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale44, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, 5);
        org.joda.time.Chronology chronology52 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.year();
        java.lang.String str54 = chronology52.toString();
        org.joda.time.DurationField durationField55 = chronology52.seconds();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ISOChronology[UTC]" + "'", str54, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test10701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10701");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = chronology22.add(readablePeriod26, (long) 69206587, 69207019);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology22.getZone();
        org.joda.time.DateTimeField dateTimeField31 = chronology22.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 69206587L + "'", long29 == 69206587L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test10702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10702");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.time();
        org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronolgy();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(10L);
        org.joda.time.DateMidnight dateMidnight4 = localDate3.toDateMidnight();
        java.lang.String str5 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) dateMidnight4);
        java.io.Writer writer6 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        int int22 = localDate21.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property24 = localDate21.property(dateTimeFieldType23);
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.Interval interval26 = localDate25.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDate25.getFieldTypes();
        org.joda.time.Interval interval28 = localDate25.toInterval();
        org.joda.time.LocalDate localDate30 = localDate25.minusDays(191579);
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(writer6, (org.joda.time.ReadablePartial) localDate32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "00:00:00.000+100:10" + "'", str5, "00:00:00.000+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test10703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10703");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((int) (short) 100);
        int int9 = localDateTime3.getDayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = localDateTime3.toString(dateTimeFormatter10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.withYearOfEra(69230879);
        int int14 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property15 = localDateTime3.hourOfDay();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.plus(readableDuration16);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69585800 + "'", int1 == 69585800);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 25 + "'", int9 == 25);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-01-25T19:19:45.800" + "'", str11, "2022-01-25T19:19:45.800");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test10704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10704");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.Chronology chronology10 = localTime3.getChronology();
        org.joda.time.DateTime dateTime11 = localTime3.toDateTimeToday();
        org.joda.time.LocalTime localTime13 = localTime3.minusMinutes(69218943);
        int int14 = localTime3.getHourOfDay();
        org.joda.time.LocalTime localTime16 = localTime3.withSecondOfMinute(0);
        java.lang.String str17 = localTime16.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "00:00:00.010" + "'", str17, "00:00:00.010");
    }

    @Test
    public void test10705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10705");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime2.add(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int24 = mutableDateTime2.get(dateTimeFieldType23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 5, chronology26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime27.minusHours((-2022));
        org.joda.time.DateTime.Property property32 = dateTime31.centuryOfEra();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property34 = dateTime31.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime31.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime37 = dateTime31.plusMonths(1);
        org.joda.time.DateTime.Property property38 = dateTime31.yearOfCentury();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test10706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10706");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        int int8 = localDateTime7.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy(69226456);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("-2000-02-25T19:13:37.408");
        java.lang.String str14 = property9.getAsText(locale13);
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale18 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology16, locale18, (java.lang.Integer) 54202800);
        java.lang.String str21 = property9.getAsShortText(locale18);
        org.joda.time.LocalDateTime localDateTime22 = property9.withMinimumValue();
        int int23 = localDateTime22.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYearOfEra(69246442);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plus(readableDuration26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withMillisOfDay(69270073);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69585861 + "'", int1 == 69585861);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0" + "'", str14, "0");
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test10707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10707");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap7);
        boolean boolean9 = dateTimeZone5.equals((java.lang.Object) strMap7);
        boolean boolean11 = dateTimeZone5.isStandardOffset((long) (byte) -1);
        long long14 = dateTimeZone5.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str15 = dateTimeZone5.getID();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone5);
        int int17 = localDate16.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property19 = localDate16.property(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType18.getField(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) chronology20, chronology22);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap32 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder31.appendTimeZoneShortName(strMap32);
        boolean boolean34 = dateTimeZone30.equals((java.lang.Object) strMap32);
        boolean boolean36 = dateTimeZone30.isStandardOffset((long) (byte) -1);
        long long39 = dateTimeZone30.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str40 = dateTimeZone30.getID();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone30);
        int int42 = localDate41.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property44 = localDate41.property(dateTimeFieldType43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType43.getField(chronology45);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        int int48 = dateTimeField46.getMaximumShortTextLength(locale47);
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        int int50 = dateTimeField46.getMaximumTextLength(locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 20, chronology24, locale49, (java.lang.Integer) 2022, 0);
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 10, chronology24, locale54, (java.lang.Integer) 69203825);
        dateTimeParserBucket57.setOffset((java.lang.Integer) 69213798);
        java.util.Locale locale60 = dateTimeParserBucket57.getLocale();
        java.lang.Object obj61 = locale60.clone();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360599990L) + "'", long14 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:10" + "'", str15, "+100:10");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-360599990L) + "'", long39 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+100:10" + "'", str40, "+100:10");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "zh");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "zh");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "zh");
    }

    @Test
    public void test10708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10708");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 69476625);
    }

    @Test
    public void test10709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10709");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder1.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder1.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatterBuilder5.toParser();
        boolean boolean7 = dateTimeFormatterBuilder5.canBuildParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatterBuilder5.toPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder10.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder13.appendSignedDecimal(dateTimeFieldType14, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder20.appendTimeZoneId();
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatterBuilder20.toParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser24);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale29 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology27, locale29, (java.lang.Integer) 54202800);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, 4);
        dateTimeParserBucket31.setOffset((java.lang.Integer) 69210165);
        dateTimeParserBucket31.setOffset((java.lang.Integer) 69230879);
        int int41 = dateTimeParser24.parseInto(dateTimeParserBucket31, "2022-02-21T15:03:44.751Z", 444);
        int int42 = dateTimeParser24.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.parse("69459833", dateTimeFormatter43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"69459833\" is too short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeParser24);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-445) + "'", int41 == (-445));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 96 + "'", int42 == 96);
    }

    @Test
    public void test10710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10710");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        java.lang.Object obj5 = mutableDateTime2.clone();
        int int6 = mutableDateTime2.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.millisOfSecond();
        mutableDateTime2.addDays(65725);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfMonth(69418293);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69418293 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15000 + "'", int6 == 15000);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test10711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10711");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property34 = dateTime29.secondOfDay();
        org.joda.time.DateTime dateTime35 = dateTime29.toDateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfEra();
        org.joda.time.DateTime.Property property37 = dateTime35.secondOfMinute();
        org.joda.time.DateTime dateTime39 = dateTime35.minusMonths(69227744);
        int int40 = dateTime39.getCenturyOfEra();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillis((long) 69230413);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 57670 + "'", int40 == 57670);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test10712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10712");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap8 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendTimeZoneShortName(strMap8);
        boolean boolean10 = dateTimeZone6.equals((java.lang.Object) strMap8);
        boolean boolean12 = dateTimeZone6.isStandardOffset((long) (byte) -1);
        long long15 = dateTimeZone6.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str16 = dateTimeZone6.getID();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone6);
        int int18 = localDate17.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property20 = localDate17.property(dateTimeFieldType19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType19.getField(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) chronology21, chronology23);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime2.toMutableDateTime(chronology25);
        mutableDateTime2.setSecondOfDay((int) '4');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime2.weekyear();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime2.add(readableDuration30, 65612);
        int int33 = mutableDateTime2.getRoundingMode();
        mutableDateTime2.setDate((long) 69300713);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-360599990L) + "'", long15 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+100:10" + "'", str16, "+100:10");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test10713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10713");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(69205874, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendMinuteOfHour(70);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendDayOfWeek(69224426);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatterBuilder3.toPrinter();
        java.lang.StringBuffer stringBuffer9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology12);
        java.lang.String str14 = dateTimeFormatter10.print((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime.Property property15 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime17 = localTime13.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime19 = localTime13.minusSeconds(10);
        org.joda.time.LocalTime localTime21 = localTime19.minusSeconds((-26));
        org.joda.time.LocalTime localTime23 = localTime19.plusMillis(14100010);
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale27 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology25, locale27, (java.lang.Integer) 54202800);
        java.util.Set<java.lang.String> strSet30 = locale27.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet31 = locale27.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter8.printTo(stringBuffer9, (org.joda.time.ReadablePartial) localTime23, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strSet31);
    }

    @Test
    public void test10714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10714");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("CA");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("1970-01-04T04:10:00.000+100:10");
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendTimeZoneShortName(strMap14);
        boolean boolean16 = dateTimeZone12.equals((java.lang.Object) strMap14);
        boolean boolean18 = dateTimeZone12.isStandardOffset((long) (byte) -1);
        long long21 = dateTimeZone12.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str22 = dateTimeZone12.getID();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone12);
        int int24 = localDate23.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property26 = localDate23.property(dateTimeFieldType25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType25.getField(chronology27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        int int30 = dateTimeField28.getMaximumShortTextLength(locale29);
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        boolean boolean32 = strSet8.removeAll((java.util.Collection<java.lang.String>) strSet31);
        boolean boolean34 = strSet8.add("0365-01-05T19:15:04.593+100:10");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-360599990L) + "'", long21 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+100:10" + "'", str22, "+100:10");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test10715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10715");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plus(readableDuration4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMonths(69487186);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69586025 + "'", int1 == 69586025);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test10716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10716");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.months();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        int int25 = dateTime24.getEra();
        org.joda.time.DateTime.Property property26 = dateTime24.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime24.toMutableDateTimeISO();
        int int28 = mutableDateTime27.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime27.dayOfYear();
        int int30 = property29.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 54586 + "'", int28 == 54586);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test10717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10717");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap13 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap13);
        boolean boolean15 = dateTimeZone11.equals((java.lang.Object) strMap13);
        boolean boolean17 = dateTimeZone11.isStandardOffset((long) (byte) -1);
        long long20 = dateTimeZone11.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str21 = dateTimeZone11.getID();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone11);
        int int23 = localDate22.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property25 = localDate22.property(dateTimeFieldType24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType24.getField(chronology26);
        int int28 = dateTimeField27.getMinimumValue();
        mutableDateTime5.setRounding(dateTimeField27);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime5.copy();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31);
        java.util.GregorianCalendar gregorianCalendar33 = mutableDateTime30.toGregorianCalendar();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.yearOfCentury();
        mutableDateTime30.setTime(15000000L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime30.setWeekOfWeekyear(69298988);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69298988 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-360599990L) + "'", long20 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(gregorianCalendar33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test10718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10718");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2022-02-21T15:08:49.817Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T15:08:49.817Z\" is malformed at \"T15:08:49.817Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10719");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        int int5 = localDateTime0.getYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.minusWeeks(69206325);
        int int8 = localDateTime0.getDayOfWeek();
        int int9 = localDateTime0.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime0.minusHours(69251366);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder12.appendTwoDigitWeekyear(69205874, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder15.appendMinuteOfHour(70);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder15.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder15.appendCenturyOfEra(69332906, 69250171);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        int int23 = localDateTime22.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.property(dateTimeFieldType24);
        int int26 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMonths(54202757);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        int int32 = localDateTime31.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.property(dateTimeFieldType33);
        int int35 = localDateTime28.indexOf(dateTimeFieldType33);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder15.appendSignedDecimal(dateTimeFieldType33, (int) (short) 10, 69229846);
        boolean boolean39 = localDateTime0.isSupported(dateTimeFieldType33);
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType33.getRangeDurationType();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 69586075 + "'", int23 == 69586075);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 69586075 + "'", int32 == 69586075);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(durationFieldType40);
    }

    @Test
    public void test10720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10720");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap13 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap13);
        boolean boolean15 = dateTimeZone11.equals((java.lang.Object) strMap13);
        boolean boolean17 = dateTimeZone11.isStandardOffset((long) (byte) -1);
        long long20 = dateTimeZone11.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str21 = dateTimeZone11.getID();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone11);
        int int23 = localDate22.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property25 = localDate22.property(dateTimeFieldType24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType24.getField(chronology26);
        int int28 = dateTimeField27.getMinimumValue();
        mutableDateTime5.setRounding(dateTimeField27);
        org.joda.time.DurationField durationField30 = dateTimeField27.getLeapDurationField();
        long long32 = dateTimeField27.roundCeiling(0L);
        java.lang.String str34 = dateTimeField27.getAsText((long) 69479240);
        org.joda.time.DurationField durationField35 = dateTimeField27.getRangeDurationField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-360599990L) + "'", long20 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(durationField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 9223372036494175807L + "'", long32 == 9223372036494175807L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "AD" + "'", str34, "AD");
        org.junit.Assert.assertNull(durationField35);
    }

    @Test
    public void test10721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10721");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy("1");
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        int int13 = localDateTime11.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69586105 + "'", int1 == 69586105);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 57 + "'", int13 == 57);
    }

    @Test
    public void test10722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10722");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.setMillisOfDay((int) '#');
        int int6 = mutableDateTime2.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.hourOfDay();
        org.joda.time.DateTime dateTime8 = mutableDateTime2.toDateTime();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder15.appendTimeZoneShortName(strMap16);
        boolean boolean18 = dateTimeZone14.equals((java.lang.Object) strMap16);
        boolean boolean20 = dateTimeZone14.isStandardOffset((long) (byte) -1);
        long long23 = dateTimeZone14.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str24 = dateTimeZone14.getID();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone14);
        int int26 = localDate25.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property28 = localDate25.property(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType27.getField(chronology29);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        int int32 = dateTimeField30.getMaximumShortTextLength(locale31);
        boolean boolean33 = locale31.hasExtensions();
        boolean boolean34 = locale31.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime35 = property9.set("-2022", locale31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2022 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-360599990L) + "'", long23 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+100:10" + "'", str24, "+100:10");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test10723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10723");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate21.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDate.Property property26 = localDate21.weekyear();
        org.joda.time.LocalDate localDate27 = property26.withMinimumValue();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths(2);
        int int30 = localDate29.getMonthOfYear();
        int int31 = localDate29.getWeekyear();
        org.joda.time.LocalDate.Property property32 = localDate29.dayOfMonth();
        org.joda.time.LocalDate localDate33 = property32.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-292275055) + "'", int31 == (-292275055));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test10724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10724");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = builder2.build();
        java.lang.String str5 = locale4.getVariant();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test10725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10725");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy("1");
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withWeekyear(69296309);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusHours(69222959);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69586189 + "'", int1 == 69586189);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test10726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10726");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray4 = localDateTime0.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusSeconds(360600000);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plusDays(69213082);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withWeekyear(69246199);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekyear(69284707);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        int int18 = localDateTime17.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.minusMinutes((int) (short) 100);
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusHours(100);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withDurationAdded(readableDuration29, 69223258);
        int int32 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime14.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69586200 + "'", int1 == 69586200);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 69586200 + "'", int18 == 69586200);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-01-25T17:39:46.200" + "'", str26, "2022-01-25T17:39:46.200");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test10727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10727");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.DurationField durationField8 = dateTimeField7.getLeapDurationField();
        long long10 = dateTimeField7.roundHalfEven((long) 92);
        int int11 = dateTimeField7.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 92L + "'", long10 == 92L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test10728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10728");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendHourOfDay(69215043);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendMillisOfDay(19);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSecondOfMinute(1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder3.appendMillisOfDay(39);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap15);
        boolean boolean17 = dateTimeZone13.equals((java.lang.Object) strMap15);
        boolean boolean19 = dateTimeZone13.isStandardOffset((long) (byte) -1);
        long long22 = dateTimeZone13.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str23 = dateTimeZone13.getID();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone13);
        org.joda.time.LocalDate.Property property25 = localDate24.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight26 = localDate24.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap32 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder31.appendTimeZoneShortName(strMap32);
        boolean boolean34 = dateTimeZone30.equals((java.lang.Object) strMap32);
        boolean boolean36 = dateTimeZone30.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter27.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        org.joda.time.DateTime dateTime39 = localDate24.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.DateTime dateTime41 = dateTime39.plusHours(69205127);
        org.joda.time.DateTime.Property property42 = dateTime41.monthOfYear();
        org.joda.time.DateTime dateTime44 = dateTime41.withYearOfCentury(19);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime dateTime47 = dateTime41.withField(dateTimeFieldType45, 70);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType45.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder9.appendDecimal(dateTimeFieldType45, 9864, 57770);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder9.appendSignedDecimal(dateTimeFieldType52, 69332133, 69577772);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-360599990L) + "'", long22 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+100:10" + "'", str23, "+100:10");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
    }

    @Test
    public void test10729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10729");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy("1");
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundCeilingCopy();
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69586272 + "'", int1 == 69586272);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10730");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy("1");
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plus(readablePeriod11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.monthOfYear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.minuteOfDay();
        int int18 = mutableDateTime15.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.property(dateTimeFieldType19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime8.withField(dateTimeFieldType19, 54296);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54296 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69586282 + "'", int1 == 69586282);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test10731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10731");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate21.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDate.Property property26 = localDate21.weekyear();
        int int27 = property26.getLeapAmount();
        org.joda.time.LocalDate localDate28 = property26.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate30 = property26.addToCopy(69222520);
        org.joda.time.LocalDate.Property property31 = localDate30.weekOfWeekyear();
        org.joda.time.LocalDate localDate32 = property31.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = localDate32.withDayOfWeek(69284252);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69284252 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test10732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10732");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder4 = builder2.setScript("");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale locale6 = builder5.build();
        java.util.Locale locale8 = new java.util.Locale("69208295-01-07T04:10:00.001+100:10");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder5.setLocale(locale8);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 69208295-01-07t04:10:00.001+100:10 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals(locale8.toString(), "69208295-01-07t04:10:00.001+100:10");
    }

    @Test
    public void test10733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10733");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 69210315);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.monthOfYear();
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        int int9 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property6.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime12 = property6.add((long) '#');
        int int13 = mutableDateTime12.getYearOfCentury();
        boolean boolean15 = mutableDateTime12.isEqual((long) 56);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap21 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendTimeZoneShortName(strMap21);
        boolean boolean23 = dateTimeZone19.equals((java.lang.Object) strMap21);
        boolean boolean25 = dateTimeZone19.isStandardOffset((long) (byte) -1);
        long long28 = dateTimeZone19.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str29 = dateTimeZone19.getID();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone19);
        java.util.TimeZone timeZone31 = dateTimeZone19.toTimeZone();
        mutableDateTime12.setZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter0.withZone(dateTimeZone19);
        boolean boolean34 = dateTimeFormatter33.isParser();
        org.joda.time.format.DateTimeParser dateTimeParser35 = dateTimeFormatter33.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter33.withPivotYear((java.lang.Integer) 69258541);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap43 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendTimeZoneShortName(strMap43);
        boolean boolean45 = dateTimeZone41.equals((java.lang.Object) strMap43);
        boolean boolean47 = dateTimeZone41.isStandardOffset((long) (byte) -1);
        long long50 = dateTimeZone41.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str51 = dateTimeZone41.getID();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone41);
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight54 = localDate52.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap60 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder59.appendTimeZoneShortName(strMap60);
        boolean boolean62 = dateTimeZone58.equals((java.lang.Object) strMap60);
        boolean boolean64 = dateTimeZone58.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter55.withZone(dateTimeZone58);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.joda.time.DateTime dateTime67 = localDate52.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.DateTime dateTime70 = dateTime67.withDurationAdded(readableDuration68, (int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTime dateTime73 = dateTime67.withDurationAdded(readableDuration71, 69207019);
        org.joda.time.DateTime.Property property74 = dateTime73.era();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime77 = dateTime73.withDurationAdded(readableDuration75, 22);
        java.lang.String str78 = dateTimeFormatter37.print((org.joda.time.ReadableInstant) dateTime73);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 72 + "'", int13 == 72);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-360599990L) + "'", long28 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:10" + "'", str29, "+100:10");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeParser35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-360599990L) + "'", long50 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+100:10" + "'", str51, "+100:10");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1970-01-05T19:19" + "'", str78, "1970-01-05T19:19");
    }

    @Test
    public void test10734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10734");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate22.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDate.Property property27 = localDate22.weekyear();
        org.joda.time.Chronology chronology28 = localDate22.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.Chronology chronology30 = chronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap37 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendTimeZoneShortName(strMap37);
        boolean boolean39 = dateTimeZone35.equals((java.lang.Object) strMap37);
        boolean boolean41 = dateTimeZone35.isStandardOffset((long) (byte) -1);
        long long44 = dateTimeZone35.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str45 = dateTimeZone35.getID();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone35);
        int int47 = localDate46.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property49 = localDate46.property(dateTimeFieldType48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType48.getField(chronology50);
        java.util.Locale locale52 = java.util.Locale.getDefault();
        int int53 = dateTimeField51.getMaximumShortTextLength(locale52);
        boolean boolean54 = locale52.hasExtensions();
        java.lang.String str55 = locale52.toLanguageTag();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 69300104, chronology28, locale52, (java.lang.Integer) 69228250);
        java.lang.String str58 = locale52.getDisplayLanguage();
        java.util.Locale locale59 = locale52.stripExtensions();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-360599990L) + "'", long44 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:10" + "'", str45, "+100:10");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "und" + "'", str55, "und");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
    }

    @Test
    public void test10735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10735");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate localDate17 = localDate14.minusYears(69436666);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test10736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10736");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(70);
        int[] intArray18 = localDate14.getValues();
        org.joda.time.LocalDate.Property property19 = localDate14.weekyear();
        org.joda.time.LocalDate localDate20 = property19.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate21 = property19.getLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = localDate21.withDayOfWeek(69547131);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69547131 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 5]");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test10737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10737");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.LocalDate localDate19 = localDate14.minusYears(69206920);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate19.minus(readablePeriod20);
        org.joda.time.LocalDate.Property property22 = localDate19.era();
        org.joda.time.LocalDate localDate24 = localDate19.withYear(69233168);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap30 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendTimeZoneShortName(strMap30);
        boolean boolean32 = dateTimeZone28.equals((java.lang.Object) strMap30);
        boolean boolean34 = dateTimeZone28.isStandardOffset((long) (byte) -1);
        long long38 = dateTimeZone28.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 69206587, dateTimeZone28);
        org.joda.time.DateTime dateTime40 = localDate24.toDateTimeAtStartOfDay(dateTimeZone28);
        int int42 = dateTimeZone28.getOffsetFromLocal((long) 69259550);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-360599999L) + "'", long38 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 360600000 + "'", int42 == 360600000);
    }

    @Test
    public void test10738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10738");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addDays((int) (short) -1);
        int int11 = mutableDateTime7.getYear();
        boolean boolean12 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.monthOfYear();
        int int17 = mutableDateTime15.getWeekOfWeekyear();
        mutableDateTime15.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean21 = mutableDateTime15.isSupported(dateTimeFieldType20);
        boolean boolean22 = mutableDateTime7.isSupported(dateTimeFieldType20);
        int int23 = mutableDateTime7.getEra();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale27 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology25, locale27, (java.lang.Integer) 54202800);
        java.util.Locale locale30 = dateTimeParserBucket29.getLocale();
        java.util.Locale locale31 = dateTimeParserBucket29.getLocale();
        dateTimeParserBucket29.setPivotYear((java.lang.Integer) 69221500);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap38 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendTimeZoneShortName(strMap38);
        boolean boolean40 = dateTimeZone36.equals((java.lang.Object) strMap38);
        boolean boolean42 = dateTimeZone36.isStandardOffset((long) (byte) -1);
        java.lang.String str44 = dateTimeZone36.getShortName((long) 69203825);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(dateTimeZone36);
        dateTimeParserBucket29.setZone(dateTimeZone36);
        mutableDateTime7.setZoneRetainFields(dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime7.add(readableDuration48);
        boolean boolean50 = mutableDateTime7.isBeforeNow();
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+100:10" + "'", str44, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test10739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10739");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyear();
        java.util.Locale locale27 = new java.util.Locale("hi!");
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        org.joda.time.Chronology chronology31 = null;
        java.util.Locale locale33 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology31, locale33, (java.lang.Integer) 54202800);
        java.lang.String str36 = locale27.getDisplayCountry(locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 19, chronology23, locale33);
        org.joda.time.DurationField durationField38 = chronology23.days();
        org.joda.time.DateTimeField dateTimeField39 = chronology23.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray43 = chronology23.get(readablePeriod40, (long) 69337759, (long) 69347005);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test10740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10740");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withZone(dateTimeZone3);
        java.util.TimeZone timeZone11 = dateTimeZone3.toTimeZone();
        java.lang.String str12 = timeZone11.getID();
        int int14 = timeZone11.getOffset((long) 31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap20);
        boolean boolean22 = dateTimeZone18.equals((java.lang.Object) strMap20);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter15.withZone(dateTimeZone18);
        java.util.TimeZone timeZone26 = dateTimeZone18.toTimeZone();
        int int27 = timeZone26.getRawOffset();
        java.util.TimeZone.setDefault(timeZone26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap34 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder33.appendTimeZoneShortName(strMap34);
        boolean boolean36 = dateTimeZone32.equals((java.lang.Object) strMap34);
        boolean boolean38 = dateTimeZone32.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter29.withZone(dateTimeZone32);
        java.util.TimeZone timeZone40 = dateTimeZone32.toTimeZone();
        java.lang.String str41 = timeZone40.getID();
        int int43 = timeZone40.getOffset(3L);
        boolean boolean44 = timeZone26.hasSameRules(timeZone40);
        timeZone26.setID("69206920W087");
        boolean boolean47 = timeZone11.hasSameRules(timeZone26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+100:10' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+100:10" + "'", str12, "+100:10");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 360600000 + "'", int14 == 360600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 360600000 + "'", int27 == 360600000);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+100:10" + "'", str41, "+100:10");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 360600000 + "'", int43 == 360600000);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test10741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10741");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hourMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear((java.lang.Integer) 69209217);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = dateTimeFormatter1.parseLocalDateTime("00:00:10.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"00:00:10.010\" is malformed at \":10.010\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test10742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10742");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = localTime2.getFieldTypes();
        int int4 = localTime2.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder5.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder8.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder9.appendTimeZoneName();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder10.appendSignedDecimal(dateTimeFieldType11, 44, 444);
        org.joda.time.LocalTime.Property property15 = localTime2.property(dateTimeFieldType11);
        org.joda.time.LocalTime localTime16 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime17 = property15.roundHalfCeilingCopy();
        java.lang.String str18 = property15.getAsString();
        org.joda.time.DateTimeField dateTimeField19 = property15.getField();
        java.lang.String str20 = dateTimeField19.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DateTimeField[secondOfMinute]" + "'", str20, "DateTimeField[secondOfMinute]");
    }

    @Test
    public void test10743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10743");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.plusWeeks(69210165);
        org.joda.time.DateTime dateTime40 = dateTime34.plusMinutes(12);
        boolean boolean41 = dateTime34.isAfterNow();
        org.joda.time.DateTime dateTime43 = dateTime34.plusMinutes(69261999);
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime50 = property48.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.yearOfCentury();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime50.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getDurationType();
        boolean boolean55 = mutableDateTime50.isSupported(dateTimeFieldType53);
        java.lang.String str56 = mutableDateTime50.toString();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, 37);
        int int61 = dateTimeZone59.getOffsetFromLocal((long) 69218643);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder66 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap67 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder66.appendTimeZoneShortName(strMap67);
        boolean boolean69 = dateTimeZone65.equals((java.lang.Object) strMap67);
        boolean boolean71 = dateTimeZone65.isStandardOffset((long) (byte) -1);
        long long74 = dateTimeZone65.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str75 = dateTimeZone65.getID();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone65);
        org.joda.time.LocalDate.Property property77 = localDate76.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight78 = localDate76.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder83 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap84 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder85 = dateTimeFormatterBuilder83.appendTimeZoneShortName(strMap84);
        boolean boolean86 = dateTimeZone82.equals((java.lang.Object) strMap84);
        boolean boolean88 = dateTimeZone82.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter79.withZone(dateTimeZone82);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone82);
        org.joda.time.DateTime dateTime91 = localDate76.toDateTimeAtCurrentTime(dateTimeZone82);
        org.joda.time.DateTime dateTime93 = dateTime91.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property94 = dateTime91.era();
        int int95 = dateTimeZone59.getOffset((org.joda.time.ReadableInstant) dateTime91);
        mutableDateTime50.setZone(dateTimeZone59);
        org.joda.time.DateTime dateTime97 = dateTime43.toDateTime(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str56, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 38220000 + "'", int61 == 38220000);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-360599990L) + "'", long74 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+100:10" + "'", str75, "+100:10");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 38220000 + "'", int95 == 38220000);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test10744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10744");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) chronology37, chronology39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType17.getField(chronology41);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale44, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeZone dateTimeZone49 = chronology41.getZone();
        org.joda.time.DurationField durationField50 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField51 = chronology41.weekOfWeekyear();
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.fromMillisOfDay(694224000012L);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        boolean boolean57 = localDateTime55.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean61 = localDateTime59.isSupported(dateTimeFieldType60);
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.withPeriodAdded(readablePeriod62, 38);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMinuteOfHour(25);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.withYearOfEra(54202800);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusYears(2000);
        int[] intArray71 = localDateTime70.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray73 = dateTimeField51.addWrapField((org.joda.time.ReadablePartial) localTime53, 69405068, intArray71, 65647);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 69405068");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[54204800, 2, 25, 69586554]");
    }

    @Test
    public void test10745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10745");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        org.joda.time.DateTime dateTime25 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(69377839);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test10746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10746");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendSecondOfDay(2022);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder12.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder12.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser17 = dateTimeFormatterBuilder16.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder11.appendOptional(dateTimeParser17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = org.joda.time.format.ISODateTimeFormat.yearMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withDefaultYear(69210496);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder11.append(dateTimeFormatter19);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder11.appendSecondOfMinute(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder24.appendTimeZoneId();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeParser17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
    }

    @Test
    public void test10747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10747");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 69364093);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours(69556);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test10748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10748");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.monthOfYear();
        int int9 = mutableDateTime7.getWeekOfWeekyear();
        mutableDateTime7.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = mutableDateTime7.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime0.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(69208701);
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusMillis((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.yearOfCentury();
        int int21 = localDateTime16.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 191509 + "'", int17 == 191509);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
    }

    @Test
    public void test10749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10749");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.Chronology chronology29 = chronology22.withZone(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(chronology29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property31.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
    }

    @Test
    public void test10750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10750");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 59, dateTimeZone34);
        boolean boolean36 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property37 = dateTime35.yearOfEra();
        org.joda.time.DateTime.Property property38 = dateTime35.secondOfDay();
        org.joda.time.DateTime dateTime40 = property38.addToCopy(69239192);
        java.lang.String str41 = property38.getAsString();
        org.joda.time.DateTime dateTime43 = property38.addWrapFieldToCopy(69308059);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "69207" + "'", str41, "69207");
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test10751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10751");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) chronology37, chronology39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType17.getField(chronology41);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale44, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeZone dateTimeZone49 = chronology41.getZone();
        org.joda.time.DurationField durationField50 = chronology41.days();
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(chronology41);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime51.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test10752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10752");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusMinutes(69210179);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withMillisOfDay(69207073);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfFloorCopy();
        int int13 = localDateTime12.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69586700 + "'", int1 == 69586700);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test10753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10753");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate14.year();
        org.joda.time.LocalDate localDate19 = property18.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap25 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder24.appendTimeZoneShortName(strMap25);
        boolean boolean27 = dateTimeZone23.equals((java.lang.Object) strMap25);
        boolean boolean29 = dateTimeZone23.isStandardOffset((long) (byte) -1);
        long long32 = dateTimeZone23.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str33 = dateTimeZone23.getID();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone23);
        org.joda.time.LocalDate.Property property35 = localDate34.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight36 = localDate34.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap42 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder41.appendTimeZoneShortName(strMap42);
        boolean boolean44 = dateTimeZone40.equals((java.lang.Object) strMap42);
        boolean boolean46 = dateTimeZone40.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter37.withZone(dateTimeZone40);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.joda.time.DateTime dateTime49 = localDate34.toDateTimeAtCurrentTime(dateTimeZone40);
        long long53 = dateTimeZone40.convertLocalToUTC((long) 65641, false, (long) 69213992);
        org.joda.time.DateTime dateTime54 = localDate19.toDateTimeAtMidnight(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap60 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder59.appendTimeZoneShortName(strMap60);
        boolean boolean62 = dateTimeZone58.equals((java.lang.Object) strMap60);
        boolean boolean64 = dateTimeZone58.isStandardOffset((long) (byte) -1);
        long long67 = dateTimeZone58.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str68 = dateTimeZone58.getID();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone58);
        int int70 = localDate69.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property72 = localDate69.property(dateTimeFieldType71);
        org.joda.time.LocalDate localDate74 = localDate69.minusYears(69206920);
        int int75 = localDate74.getDayOfYear();
        org.joda.time.LocalDate.Property property76 = localDate74.year();
        org.joda.time.LocalDate localDate78 = property76.addWrapFieldToCopy(69258822);
        org.joda.time.LocalDate localDate79 = localDate19.withFields((org.joda.time.ReadablePartial) localDate78);
        org.joda.time.DateTime dateTime80 = localDate19.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate82 = localDate19.withWeekyear(69503031);
        org.joda.time.Chronology chronology83 = localDate82.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-360599990L) + "'", long32 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+100:10" + "'", str33, "+100:10");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-360534359L) + "'", long53 == (-360534359L));
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-360599990L) + "'", long67 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+100:10" + "'", str68, "+100:10");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1970 + "'", int70 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 5 + "'", int75 == 5);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(chronology83);
    }

    @Test
    public void test10754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10754");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.LocalDate localDate17 = property15.getLocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks(69206920);
        org.joda.time.LocalDate localDate21 = localDate19.withMonthOfYear(6);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap27 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendTimeZoneShortName(strMap27);
        boolean boolean29 = dateTimeZone25.equals((java.lang.Object) strMap27);
        boolean boolean31 = dateTimeZone25.isStandardOffset((long) (byte) -1);
        long long34 = dateTimeZone25.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str35 = dateTimeZone25.getID();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone25);
        int int37 = localDate36.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property39 = localDate36.property(dateTimeFieldType38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType38.getField(chronology40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) chronology40, chronology42);
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDate localDate47 = localDate43.withPeriodAdded(readablePeriod45, (int) '#');
        org.joda.time.LocalDate.Property property48 = localDate43.monthOfYear();
        org.joda.time.LocalDate localDate50 = localDate43.minusDays(25);
        org.joda.time.LocalDate localDate52 = localDate43.minusWeeks(69215043);
        org.joda.time.LocalDate localDate53 = localDate19.withFields((org.joda.time.ReadablePartial) localDate43);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap59 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder58.appendTimeZoneShortName(strMap59);
        boolean boolean61 = dateTimeZone57.equals((java.lang.Object) strMap59);
        boolean boolean63 = dateTimeZone57.isStandardOffset((long) (byte) -1);
        long long66 = dateTimeZone57.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str67 = dateTimeZone57.getID();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone57);
        org.joda.time.LocalDate.Property property69 = localDate68.dayOfWeek();
        org.joda.time.LocalDate localDate70 = property69.getLocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.withYear(69264803);
        int int73 = localDate70.size();
        boolean boolean74 = localDate43.isBefore((org.joda.time.ReadablePartial) localDate70);
        java.lang.String str75 = localDate70.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-360599990L) + "'", long34 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+100:10" + "'", str35, "+100:10");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-360599990L) + "'", long66 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+100:10" + "'", str67, "+100:10");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-05" + "'", str75, "1970-01-05");
    }

    @Test
    public void test10755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10755");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime29.plusWeeks(0);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readablePeriod36);
        org.joda.time.DateTime dateTime39 = dateTime35.minus((long) 43);
        org.joda.time.DateTime dateTime41 = dateTime39.withCenturyOfEra((int) 'x');
        org.joda.time.DateTime.Property property42 = dateTime39.monthOfYear();
        org.joda.time.DateTime dateTime43 = property42.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test10756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10756");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 5, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime5 = dateTime3.plus(readableDuration4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.millis();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 69379033, chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test10757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10757");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime29.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property34 = dateTime33.minuteOfHour();
        org.joda.time.DateTime dateTime37 = dateTime33.withDurationAdded(54165425L, 69);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test10758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10758");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime9 = property5.addCopy((long) 70);
        org.joda.time.LocalTime localTime10 = property5.roundHalfFloorCopy();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology12, locale14, (java.lang.Integer) 54202800);
        java.util.Set<java.lang.Character> charSet17 = locale14.getExtensionKeys();
        int int18 = property5.getMaximumTextLength(locale14);
        java.lang.String str19 = locale14.getDisplayVariant();
        java.lang.String str20 = locale14.getDisplayVariant();
        java.util.Set<java.lang.String> strSet21 = locale14.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test10759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10759");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(0);
        int int3 = dateTimeZone1.getOffset((long) 69256175);
        java.lang.String str5 = dateTimeZone1.getNameKey((long) 69240944);
        long long9 = dateTimeZone1.convertLocalToUTC((long) 69398154, true, (long) 69464185);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 69398154L + "'", long9 == 69398154L);
    }

    @Test
    public void test10760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10760");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 5, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusHours((-2022));
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withEarlierOffsetAtOverlap();
        org.joda.time.LocalDate localDate9 = dateTime8.toLocalDate();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology10.add(readablePeriod11, (long) 69333400, 69204037);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology10);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 69333400L + "'", long14 == 69333400L);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test10761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10761");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(69301679, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10762");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property5.addCopy(65916);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test10763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10763");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfYear();
        org.joda.time.DurationField durationField6 = property5.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.set("70");
        int int9 = mutableDateTime8.getYearOfEra();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap15);
        boolean boolean17 = dateTimeZone13.equals((java.lang.Object) strMap15);
        boolean boolean19 = dateTimeZone13.isStandardOffset((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime8.toMutableDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.monthOfYear();
        mutableDateTime26.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.year();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.secondOfDay();
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        java.lang.String str36 = mutableDateTime30.toString();
        int int37 = mutableDateTime30.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap43 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendTimeZoneShortName(strMap43);
        boolean boolean45 = dateTimeZone41.equals((java.lang.Object) strMap43);
        boolean boolean47 = dateTimeZone41.isStandardOffset((long) (byte) -1);
        long long50 = dateTimeZone41.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str51 = dateTimeZone41.getID();
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone41);
        org.joda.time.LocalDate.Property property53 = localDate52.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight54 = localDate52.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap60 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder59.appendTimeZoneShortName(strMap60);
        boolean boolean62 = dateTimeZone58.equals((java.lang.Object) strMap60);
        boolean boolean64 = dateTimeZone58.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter55.withZone(dateTimeZone58);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.joda.time.DateTime dateTime67 = localDate52.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.DateTime dateTime69 = dateTime67.plusHours(69205127);
        org.joda.time.DateTime.Property property70 = dateTime69.monthOfYear();
        org.joda.time.DateTime dateTime72 = property70.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property73 = dateTime72.year();
        org.joda.time.DateTime dateTime74 = dateTime72.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime76 = dateTime72.plusWeeks(69210165);
        org.joda.time.DateTime.Property property77 = dateTime76.millisOfSecond();
        org.joda.time.DateTime dateTime79 = property77.addToCopy(69333185);
        boolean boolean80 = mutableDateTime30.isBefore((org.joda.time.ReadableInstant) dateTime79);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime30.setMinuteOfDay(69407303);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69407303 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str36, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-360599990L) + "'", long50 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+100:10" + "'", str51, "+100:10");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test10764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10764");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        java.io.Writer writer1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        int int3 = localTime2.size();
        org.joda.time.LocalTime localTime5 = localTime2.minusMinutes(69207073);
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes(69218709);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localTime5.toDateTimeToday(dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(writer1, (org.joda.time.ReadableInstant) dateTime9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test10765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10765");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.addDays((int) (short) -1);
        mutableDateTime2.addMinutes((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime2.era();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime10.copy();
        int int12 = mutableDateTime11.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test10766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10766");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.yearOfCentury();
        mutableDateTime4.setMillisOfDay((int) '#');
        int int10 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "1", (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime4.toMutableDateTime();
        long long12 = mutableDateTime4.getMillis();
        java.lang.String str13 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendTimeZoneShortName(strMap19);
        boolean boolean21 = dateTimeZone17.equals((java.lang.Object) strMap19);
        boolean boolean23 = dateTimeZone17.isStandardOffset((long) (byte) -1);
        long long26 = dateTimeZone17.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str27 = dateTimeZone17.getID();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone17);
        int int29 = localDate28.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property31 = localDate28.property(dateTimeFieldType30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType30.getField(chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) chronology32, chronology34);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.months();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.clockhourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter0.withChronology(chronology36);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = chronology36.minuteOfDay();
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray46 = chronology36.get(readablePeriod43, (long) 69365582, (long) 11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2) + "'", int10 == (-2));
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-62135352599965L) + "'", long12 == (-62135352599965L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00" + "'", str13, "00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-360599990L) + "'", long26 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+100:10" + "'", str27, "+100:10");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test10767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10767");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plusWeeks(191509);
        org.joda.time.Chronology chronology8 = localDateTime7.getChronology();
        int int9 = localDateTime7.getYear();
        int int10 = localDateTime7.size();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMaximumValue();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plus(readableDuration13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = localDateTime12.getField(69394376);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69394376");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69587087 + "'", int1 == 69587087);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5692 + "'", int9 == 5692);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test10768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10768");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime11.minus(readablePeriod12);
        java.lang.String str14 = localTime13.toString();
        org.joda.time.LocalTime.Property property15 = localTime13.millisOfDay();
        org.joda.time.LocalTime.Property property16 = localTime13.minuteOfHour();
        org.joda.time.LocalTime localTime17 = property16.getLocalTime();
        org.joda.time.LocalTime localTime18 = property16.roundCeilingCopy();
        org.joda.time.LocalTime localTime20 = property16.addCopy(71459000L);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "00:00:10.010" + "'", str14, "00:00:10.010");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test10769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10769");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        mutableDateTime2.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str8 = mutableDateTime2.toString(dateTimeFormatter7);
        org.joda.time.Chronology chronology9 = mutableDateTime2.getChronology();
        java.lang.String str10 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime2.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.monthOfYear();
        long long16 = mutableDateTime14.getMillis();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime14.add(readableDuration17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime14.toMutableDateTime(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int36 = mutableDateTime14.get(dateTimeFieldType35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 5, chronology38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.plus(readableDuration40);
        org.joda.time.DateTime dateTime43 = dateTime39.minusHours((-2022));
        org.joda.time.DateTime.Property property44 = dateTime43.centuryOfEra();
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean46 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Chronology chronology47 = mutableDateTime2.getChronology();
        mutableDateTime2.addMillis(69488509);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime2.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00" + "'", str8, "00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str10, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test10770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10770");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        java.lang.String str10 = localTime9.toString();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime13 = localTime9.withFieldAdded(durationFieldType11, 25);
        org.joda.time.LocalTime localTime15 = localTime9.withMillisOfDay(69238499);
        org.joda.time.LocalTime.Property property16 = localTime15.millisOfSecond();
        int int17 = property16.getMinimumValueOverall();
        org.joda.time.LocalTime localTime18 = property16.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23:59:50.010" + "'", str10, "23:59:50.010");
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test10771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10771");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap8 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendTimeZoneShortName(strMap8);
        boolean boolean10 = dateTimeZone6.equals((java.lang.Object) strMap8);
        boolean boolean12 = dateTimeZone6.isStandardOffset((long) (byte) -1);
        long long15 = dateTimeZone6.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str16 = dateTimeZone6.getID();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone6);
        int int18 = localDate17.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property20 = localDate17.property(dateTimeFieldType19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType19.getField(chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((java.lang.Object) chronology21, chronology23);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime2.toMutableDateTime(chronology25);
        int int27 = mutableDateTime26.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime26.year();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap34 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder33.appendTimeZoneShortName(strMap34);
        boolean boolean36 = dateTimeZone32.equals((java.lang.Object) strMap34);
        boolean boolean38 = dateTimeZone32.isStandardOffset((long) (byte) -1);
        long long41 = dateTimeZone32.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str42 = dateTimeZone32.getID();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone32);
        int int44 = localDate43.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property46 = localDate43.property(dateTimeFieldType45);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType45.getField(chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) chronology47, chronology49);
        org.joda.time.Chronology chronology51 = localDate50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.months();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology51);
        org.joda.time.DateTime.Property property54 = dateTime53.era();
        org.joda.time.DateTime dateTime55 = property54.withMinimumValue();
        org.joda.time.DateTime dateTime57 = property54.addWrapFieldToCopy(92);
        org.joda.time.DateTime dateTime58 = property54.withMaximumValue();
        org.joda.time.DateTime.Property property59 = dateTime58.millisOfDay();
        boolean boolean61 = dateTime58.isBefore((long) 69246972);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(10L);
        org.joda.time.LocalDate localDate65 = localDate63.withYear(69208090);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int67 = localDate65.get(dateTimeFieldType66);
        org.joda.time.DateTime.Property property68 = dateTime58.property(dateTimeFieldType66);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime26.property(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-360599990L) + "'", long15 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+100:10" + "'", str16, "+100:10");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-360599990L) + "'", long41 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+100:10" + "'", str42, "+100:10");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
    }

    @Test
    public void test10772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10772");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap38 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendTimeZoneShortName(strMap38);
        boolean boolean40 = dateTimeZone36.equals((java.lang.Object) strMap38);
        boolean boolean42 = dateTimeZone36.isStandardOffset((long) (byte) -1);
        long long45 = dateTimeZone36.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str46 = dateTimeZone36.getID();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone36);
        int int48 = localDate47.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property50 = localDate47.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType49.getField(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) chronology51, chronology53);
        org.joda.time.Chronology chronology55 = localDate54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.minutes();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.weekyear();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone60);
        org.joda.time.Chronology chronology62 = chronology55.withZone(dateTimeZone60);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime29.toMutableDateTime(chronology62);
        org.joda.time.DateTime.Property property64 = dateTime29.secondOfDay();
        org.joda.time.DateTime dateTime66 = dateTime29.minusMillis(69234516);
        org.joda.time.DateTime dateTime68 = dateTime66.plusMillis(96);
        org.joda.time.DateTime dateTime70 = dateTime68.minus((long) 69340122);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-360599990L) + "'", long45 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+100:10" + "'", str46, "+100:10");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test10773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10773");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval2 = localDate0.toInterval();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate5 = localDate0.withPeriodAdded(readablePeriod3, 12);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate0.plus(readablePeriod6);
        int int8 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate.Property property9 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate10 = property9.withMinimumValue();
        org.joda.time.LocalDate.Property property11 = localDate10.era();
        org.joda.time.LocalDate localDate12 = property11.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test10774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10774");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendDayOfMonth(69203038);
        boolean boolean15 = dateTimeFormatterBuilder12.canBuildParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder12.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder12.appendDayOfMonth(69220682);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendClockhourOfHalfday(69214930);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder18.appendHourOfHalfday(69430577);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
    }

    @Test
    public void test10775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10775");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime34 = property32.roundCeilingCopy();
        org.joda.time.DateTime dateTime36 = dateTime34.plus((long) 69214639);
        org.joda.time.DateTime dateTime38 = dateTime34.plusYears(69206325);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.DateTime dateTime42 = dateTime40.withMillisOfDay(69234149);
        org.joda.time.DateTime dateTime44 = dateTime42.plusHours(69262433);
        org.joda.time.DateTime.Property property45 = dateTime44.minuteOfDay();
        org.joda.time.DateTime dateTime46 = dateTime44.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = dateTime44.withDate(63331516, 69240959, 69406840);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69240959 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test10776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10776");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(70);
        int[] intArray18 = localDate14.getValues();
        org.joda.time.LocalDate.Property property19 = localDate14.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = localDate14.getValue(69419085);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69419085");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 5]");
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test10777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10777");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        int int32 = dateTime29.getDayOfMonth();
        org.joda.time.DateTime.Property property33 = dateTime29.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        int int36 = localDateTime35.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime42 = property41.roundFloorCopy();
        int int43 = localDateTime42.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime46 = property44.addToCopy(69226456);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("-2000-02-25T19:13:37.408");
        java.lang.String str49 = property44.getAsText(locale48);
        java.util.Set<java.lang.Character> charSet50 = locale48.getExtensionKeys();
        java.util.Set<java.lang.String> strSet51 = locale48.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = property33.setCopy("jeu.", locale48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"jeu.\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 69587296 + "'", int36 == 69587296);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertNotNull(strSet51);
    }

    @Test
    public void test10778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10778");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setUnicodeLocaleKeyword("15218-01-05", "2022-01-25T17:38:34.485");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 15218-01-05 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test10779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10779");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = new java.util.Locale("hi!");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.Chronology chronology6 = null;
        java.util.Locale locale8 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology6, locale8, (java.lang.Integer) 54202800);
        java.lang.String str11 = locale2.getDisplayCountry(locale8);
        java.lang.String str14 = nameProvider0.getShortName(locale8, "-2000-02-25T19:13:31.786", "fra");
        java.lang.String str15 = locale8.getLanguage();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap21 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendTimeZoneShortName(strMap21);
        boolean boolean23 = dateTimeZone19.equals((java.lang.Object) strMap21);
        boolean boolean25 = dateTimeZone19.isStandardOffset((long) (byte) -1);
        long long28 = dateTimeZone19.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str29 = dateTimeZone19.getID();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone19);
        int int31 = localDate30.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property33 = localDate30.property(dateTimeFieldType32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType32.getField(chronology34);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        int int37 = dateTimeField35.getMaximumShortTextLength(locale36);
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str40 = locale36.getExtension('a');
        java.lang.String str41 = locale8.getDisplayScript(locale36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((java.lang.Object) locale36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hi!" + "'", str15, "hi!");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-360599990L) + "'", long28 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:10" + "'", str29, "+100:10");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test10780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10780");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(69433675, 65708, 69468423, 69352542, 69483448, 69357768, 69525518);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69352542 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10781");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendMonthOfYear(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendLiteral("English (United States)");
        boolean boolean8 = dateTimeFormatterBuilder5.canBuildFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder5.appendTimeZoneOffset("java.io.IOException: hi!", "October", true, 56, 69229050);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendMinuteOfDay(69229050);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder14.appendFractionOfSecond(69336999, 54296);
        boolean boolean20 = dateTimeFormatterBuilder19.canBuildParser();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test10782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10782");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withZone(dateTimeZone3);
        java.util.TimeZone timeZone11 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.yearOfCentury();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime17.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundCeiling();
        long long21 = mutableDateTime20.getMillis();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.monthOfYear();
        int int26 = mutableDateTime24.getWeekOfWeekyear();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = mutableDateTime24.toString("+100:10", locale28);
        mutableDateTime24.addSeconds(4);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime24.toMutableDateTimeISO();
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strList46);
        boolean boolean50 = strList48.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.lang.String>) strList56);
        boolean boolean60 = strList58.equals((java.lang.Object) (-1));
        boolean boolean61 = strList48.retainAll((java.util.Collection<java.lang.String>) strList58);
        boolean boolean62 = strSet39.retainAll((java.util.Collection<java.lang.String>) strList48);
        java.util.Locale.FilteringMode filteringMode63 = null;
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strList48, filteringMode63);
        boolean boolean66 = strList48.add("70");
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale70 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology68, locale70, (java.lang.Integer) 54202800);
        java.util.Locale locale73 = dateTimeParserBucket72.getLocale();
        java.util.Locale locale74 = dateTimeParserBucket72.getLocale();
        dateTimeParserBucket72.setPivotYear((java.lang.Integer) 69221500);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder80 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap81 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder82 = dateTimeFormatterBuilder80.appendTimeZoneShortName(strMap81);
        boolean boolean83 = dateTimeZone79.equals((java.lang.Object) strMap81);
        boolean boolean85 = dateTimeZone79.isStandardOffset((long) (byte) -1);
        java.lang.String str87 = dateTimeZone79.getShortName((long) 69203825);
        org.joda.time.MutableDateTime mutableDateTime88 = org.joda.time.MutableDateTime.now(dateTimeZone79);
        dateTimeParserBucket72.setZone(dateTimeZone79);
        org.joda.time.MutableDateTime mutableDateTime90 = new org.joda.time.MutableDateTime((java.lang.Object) "70", dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime24, dateTimeZone79);
        java.lang.String str92 = dateTimeZone79.toString();
        long long94 = dateTimeZone79.previousTransition(69224426L);
        org.joda.time.DateTime dateTime95 = mutableDateTime20.toDateTime(dateTimeZone79);
        long long97 = dateTimeZone3.getMillisKeepLocal(dateTimeZone79, (long) 69295089);
        org.joda.time.MutableDateTime mutableDateTime98 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1000L + "'", long21 == 1000L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:10" + "'", str29, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals(locale70.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "hi!");
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+100:10" + "'", str87, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "+100:10" + "'", str92, "+100:10");
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 69224426L + "'", long94 == 69224426L);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 69295089L + "'", long97 == 69295089L);
        org.junit.Assert.assertNotNull(mutableDateTime98);
    }

    @Test
    public void test10783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10783");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("China");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
    }

    @Test
    public void test10784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10784");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate2 = property1.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property3 = localDate2.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate2.withFieldAdded(durationFieldType4, 69279668);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test10785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10785");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withDurationAdded(readableDuration5, 1969);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.minusDays(54202800);
        int int10 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusDays(31);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime0.plus(readableDuration13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = localDateTime0.toString("Property[secondOfMinute]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test10786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10786");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDurationAdded(readableDuration1, 6);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withWeekyear(22);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(575);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(69241950);
        boolean boolean11 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.plusWeeks(69539604);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test10787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10787");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.addDays((int) (short) -1);
        mutableDateTime2.addMinutes((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.addWrapField(69223061);
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendTimeZoneShortName(strMap17);
        boolean boolean19 = dateTimeZone15.equals((java.lang.Object) strMap17);
        boolean boolean21 = dateTimeZone15.isStandardOffset((long) (byte) -1);
        long long24 = dateTimeZone15.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str25 = dateTimeZone15.getID();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone15);
        int int27 = localDate26.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property29 = localDate26.property(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType28.getField(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) chronology30, chronology32);
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.minutes();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.weekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        org.joda.time.Chronology chronology41 = chronology34.withZone(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.dayOfMonth();
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime43.weekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-04T09:11:00.001+100:10" + "'", str11, "1970-01-04T09:11:00.001+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-360599990L) + "'", long24 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+100:10" + "'", str25, "+100:10");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test10788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10788");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology1, locale3, (java.lang.Integer) 54202800);
        java.util.Locale locale6 = dateTimeParserBucket5.getLocale();
        long long7 = dateTimeParserBucket5.computeMillis();
        long long8 = dateTimeParserBucket5.computeMillis();
        long long11 = dateTimeParserBucket5.computeMillis(false, "minutes");
        dateTimeParserBucket5.setOffset((java.lang.Integer) 69332044);
        long long14 = dateTimeParserBucket5.computeMillis();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-291396175L) + "'", long7 == (-291396175L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-291396175L) + "'", long8 == (-291396175L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-291396175L) + "'", long11 == (-291396175L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-128219L) + "'", long14 == (-128219L));
    }

    @Test
    public void test10789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10789");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime8 = property3.addWrapFieldToCopy(69208701);
        org.joda.time.LocalDateTime localDateTime9 = property3.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        org.joda.time.DateTime dateTime12 = localDateTime9.toDateTime(dateTimeZone11);
        java.lang.String str13 = dateTimeZone11.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69587704 + "'", int1 == 69587704);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+35:00" + "'", str13, "+35:00");
    }

    @Test
    public void test10790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10790");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        boolean boolean25 = dateTimeZone21.equals((java.lang.Object) strMap23);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter18.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime30 = localDate15.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        org.joda.time.DateTime dateTime34 = property33.roundCeilingCopy();
        org.joda.time.DateTime dateTime35 = property33.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap42 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder41.appendTimeZoneShortName(strMap42);
        boolean boolean44 = dateTimeZone40.equals((java.lang.Object) strMap42);
        boolean boolean46 = dateTimeZone40.isStandardOffset((long) (byte) -1);
        long long49 = dateTimeZone40.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str50 = dateTimeZone40.getID();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone40);
        int int52 = localDate51.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property54 = localDate51.property(dateTimeFieldType53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType53.getField(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) chronology55, chronology57);
        org.joda.time.Chronology chronology59 = localDate58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.minutes();
        org.joda.time.DurationField durationField61 = chronology59.centuries();
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = locale62.stripExtensions();
        java.lang.String str64 = locale62.getDisplayVariant();
        java.util.Locale locale66 = new java.util.Locale("hi!");
        java.util.Locale locale67 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        org.joda.time.Chronology chronology70 = null;
        java.util.Locale locale72 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket74 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology70, locale72, (java.lang.Integer) 54202800);
        java.lang.String str75 = locale66.getDisplayCountry(locale72);
        java.lang.String str76 = locale62.getDisplayName(locale66);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket(69210934L, chronology59, locale62, (java.lang.Integer) 69213992, 69230413);
        int int80 = property33.getMaximumTextLength(locale62);
        java.lang.String str81 = locale62.getDisplayLanguage();
        java.lang.String str84 = nameProvider0.getName(locale62, "Japon", "Do");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-360599990L) + "'", long49 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+100:10" + "'", str50, "+100:10");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals(locale66.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals(locale72.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "German" + "'", str76, "German");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "German" + "'", str81, "German");
        org.junit.Assert.assertNull(str84);
    }

    @Test
    public void test10791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10791");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.LocalDateTime localDateTime6 = property3.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime8 = property3.addWrapFieldToCopy(69208701);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        int[] intArray10 = localDateTime8.getValues();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusWeeks(69306403);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder13.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder13.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatterBuilder13.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder13.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder20.appendSecondOfDay(2022);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder24.appendDayOfWeekShortText();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar30 = mutableDateTime28.toGregorianCalendar();
        java.lang.String str31 = mutableDateTime28.toString();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap36 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendTimeZoneShortName(strMap36);
        boolean boolean38 = dateTimeZone34.equals((java.lang.Object) strMap36);
        long long40 = dateTimeZone34.nextTransition((long) 1969);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone34);
        boolean boolean42 = mutableDateTime28.equals((java.lang.Object) dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        boolean boolean45 = localDateTime43.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean49 = localDateTime47.isSupported(dateTimeFieldType48);
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType48.getDurationType();
        java.lang.String str51 = durationFieldType50.getName();
        mutableDateTime28.add(durationFieldType50, 69229172);
        org.joda.time.Chronology chronology54 = mutableDateTime28.getChronology();
        int int55 = mutableDateTime28.getSecondOfMinute();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder56.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder56.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser61 = dateTimeFormatterBuilder56.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = dateTimeFormatterBuilder56.appendHalfdayOfDayText();
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now();
        int int64 = localDateTime63.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.withWeekyear((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int70 = localDateTime63.get(dateTimeFieldType69);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = dateTimeFormatterBuilder62.appendShortText(dateTimeFieldType69);
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType69.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime28.property(dateTimeFieldType69);
        org.joda.time.DurationFieldType durationFieldType74 = dateTimeFieldType69.getDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder77 = dateTimeFormatterBuilder25.appendDecimal(dateTimeFieldType69, 477, 69346267);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime79 = localDateTime12.withField(dateTimeFieldType69, 69324637);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69324637 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69587738 + "'", int1 == 69587738);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[-2022, 2, 25, 69587738]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeParser18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str31, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1969L + "'", long40 == 1969L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "days" + "'", str51, "days");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertNotNull(dateTimeParser61);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder62);
        org.junit.Assert.assertNotNull(localDateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 69587738 + "'", int64 == 69587738);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 7 + "'", int70 == 7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder71);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder77);
    }

    @Test
    public void test10792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10792");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) chronology37, chronology39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType17.getField(chronology41);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale44, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeField dateTimeField49 = chronology41.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter50.withLocale(locale51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.monthOfYear();
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str58 = locale57.getISO3Language();
        int int59 = property56.getMaximumShortTextLength(locale57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter52.withLocale(locale57);
        int int61 = dateTimeField49.getMaximumShortTextLength(locale57);
        long long63 = dateTimeField49.roundHalfEven((long) 69410271);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "fra" + "'", str58, "fra");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 5 + "'", int59 == 5);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 69410000L + "'", long63 == 69410000L);
    }

    @Test
    public void test10793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10793");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime9 = property5.addCopy((long) 70);
        java.util.Locale locale14 = new java.util.Locale("JP", "2022-01-25T17:36:04.055", "jeu.");
        java.util.Locale locale15 = locale14.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = property5.setCopy("millisOfSecond", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"millisOfSecond\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals(locale14.toString(), "jp_2022-01-25T17:36:04.055_jeu.");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "jp_2022-01-25T17:36:04.055_jeu.");
    }

    @Test
    public void test10794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10794");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        mutableDateTime2.addWeeks((int) (byte) 10);
        mutableDateTime2.setMillisOfDay(43);
        boolean boolean8 = mutableDateTime2.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendTimeZoneShortName(strMap14);
        boolean boolean16 = dateTimeZone12.equals((java.lang.Object) strMap14);
        boolean boolean18 = dateTimeZone12.isStandardOffset((long) (byte) -1);
        long long21 = dateTimeZone12.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str22 = dateTimeZone12.getID();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone12);
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight25 = localDate23.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap31 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder30.appendTimeZoneShortName(strMap31);
        boolean boolean33 = dateTimeZone29.equals((java.lang.Object) strMap31);
        boolean boolean35 = dateTimeZone29.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter26.withZone(dateTimeZone29);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.DateTime dateTime38 = localDate23.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.DateTime dateTime40 = dateTime38.plusHours(69205127);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 59, dateTimeZone43);
        boolean boolean45 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks(69209140);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap54 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder53.appendTimeZoneShortName(strMap54);
        boolean boolean56 = dateTimeZone52.equals((java.lang.Object) strMap54);
        boolean boolean58 = dateTimeZone52.isStandardOffset((long) (byte) -1);
        long long61 = dateTimeZone52.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str62 = dateTimeZone52.getID();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone52);
        int int64 = localDate63.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property66 = localDate63.property(dateTimeFieldType65);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType65.getField(chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((java.lang.Object) chronology67, chronology69);
        org.joda.time.Chronology chronology71 = localDate70.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.minutes();
        java.lang.String str73 = chronology71.toString();
        org.joda.time.MutableDateTime mutableDateTime74 = org.joda.time.MutableDateTime.now(chronology71);
        org.joda.time.MutableDateTime mutableDateTime75 = org.joda.time.MutableDateTime.now(chronology71);
        org.joda.time.DateTime dateTime76 = dateTime47.toDateTime(chronology71);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone79);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime80.monthOfYear();
        int int82 = mutableDateTime80.getWeekOfWeekyear();
        mutableDateTime80.setMinuteOfDay((int) (short) 0);
        boolean boolean85 = mutableDateTime80.isBeforeNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        mutableDateTime80.set(dateTimeFieldType86, 0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.set(dateTimeFieldType86, 69284779);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69284779 for weekyearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-360599990L) + "'", long21 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+100:10" + "'", str22, "+100:10");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 41857687872000059L + "'", long48 == 41857687872000059L);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-360599990L) + "'", long61 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+100:10" + "'", str62, "+100:10");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ISOChronology[UTC]" + "'", str73, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
    }

    @Test
    public void test10795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10795");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.LocalDate localDate17 = property15.getLocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusWeeks(69206920);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap25 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder24.appendTimeZoneShortName(strMap25);
        boolean boolean27 = dateTimeZone23.equals((java.lang.Object) strMap25);
        boolean boolean29 = dateTimeZone23.isStandardOffset((long) (byte) -1);
        long long33 = dateTimeZone23.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 69206587, dateTimeZone23);
        boolean boolean35 = localDate19.isBefore((org.joda.time.ReadablePartial) localDate34);
        int int36 = localDate34.getCenturyOfEra();
        org.joda.time.LocalDate.Property property37 = localDate34.era();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-360599999L) + "'", long33 == (-360599999L));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test10796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10796");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
    }

    @Test
    public void test10797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10797");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "1", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "monthOfYear", "hi!", "1", "monthOfYear", "hi!", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean15 = strSet13.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList21);
        boolean boolean25 = strList23.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList31);
        boolean boolean35 = strList33.equals((java.lang.Object) (-1));
        boolean boolean36 = strList23.retainAll((java.util.Collection<java.lang.String>) strList33);
        boolean boolean37 = strSet13.addAll((java.util.Collection<java.lang.String>) strList23);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList23);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList44);
        boolean boolean48 = strList46.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strList54);
        boolean boolean58 = strList56.equals((java.lang.Object) (-1));
        boolean boolean59 = strList46.retainAll((java.util.Collection<java.lang.String>) strList56);
        strList46.clear();
        boolean boolean62 = strList46.add("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        boolean boolean63 = strList23.addAll((java.util.Collection<java.lang.String>) strList46);
        org.joda.time.tz.Provider provider64 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider64);
        java.util.Set<java.lang.String> strSet66 = provider64.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone68 = provider64.getZone("CA");
        org.joda.time.DateTimeZone.setProvider(provider64);
        org.joda.time.DateTimeZone dateTimeZone71 = provider64.getZone("1970-01-04T04:10:00.000+100:10");
        java.util.Set<java.lang.String> strSet72 = provider64.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder77 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap78 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder79 = dateTimeFormatterBuilder77.appendTimeZoneShortName(strMap78);
        boolean boolean80 = dateTimeZone76.equals((java.lang.Object) strMap78);
        boolean boolean82 = dateTimeZone76.isStandardOffset((long) (byte) -1);
        long long85 = dateTimeZone76.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str86 = dateTimeZone76.getID();
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone76);
        int int88 = localDate87.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property90 = localDate87.property(dateTimeFieldType89);
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.DateTimeField dateTimeField92 = dateTimeFieldType89.getField(chronology91);
        java.util.Locale locale93 = java.util.Locale.getDefault();
        int int94 = dateTimeField92.getMaximumShortTextLength(locale93);
        java.util.Set<java.lang.String> strSet95 = locale93.getUnicodeLocaleKeys();
        boolean boolean96 = strSet72.removeAll((java.util.Collection<java.lang.String>) strSet95);
        boolean boolean97 = strList46.removeAll((java.util.Collection<java.lang.String>) strSet72);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(provider64);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNull(dateTimeZone68);
        org.junit.Assert.assertNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + (-360599990L) + "'", long85 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+100:10" + "'", str86, "+100:10");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1970 + "'", int88 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test10798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10798");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTwoDigitYear(69210934);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder4.appendFractionOfDay(69228819, 12);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendTimeZoneName(strMap10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder9.appendMillisOfSecond(65771);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder9.appendHourOfDay(69213916);
        org.joda.time.format.DateTimeParser dateTimeParser16 = dateTimeFormatterBuilder15.toParser();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeParser16);
    }

    @Test
    public void test10799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10799");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTime();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalTime.Property property6 = localTime3.property(dateTimeFieldType5);
        org.joda.time.LocalTime localTime8 = property6.addWrapFieldToCopy(15000000);
        int int9 = localTime8.getMillisOfDay();
        int int10 = localTime8.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = localTime8.withSecondOfMinute(69386633);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69386633 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "000000.010" + "'", str4, "000000.010");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test10800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10800");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale4.getISO3Language();
        int int6 = property3.getMaximumShortTextLength(locale4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property3.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime9 = property3.add((long) '#');
        org.joda.time.MutableDateTime mutableDateTime10 = property3.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime11 = property3.roundCeiling();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder17.appendTimeZoneShortName(strMap18);
        boolean boolean20 = dateTimeZone16.equals((java.lang.Object) strMap18);
        boolean boolean22 = dateTimeZone16.isStandardOffset((long) (byte) -1);
        long long25 = dateTimeZone16.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str26 = dateTimeZone16.getID();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone16);
        int int28 = localDate27.getYearOfEra();
        org.joda.time.LocalDate localDate30 = localDate27.withYearOfCentury(70);
        int int31 = localDate30.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = localDate30.getFieldType(0);
        int int34 = mutableDateTime11.get(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-360599990L) + "'", long25 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+100:10" + "'", str26, "+100:10");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1972 + "'", int34 == 1972);
    }

    @Test
    public void test10801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10801");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 59, dateTimeZone34);
        boolean boolean36 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property37 = dateTime35.yearOfEra();
        org.joda.time.DateTime dateTime38 = property37.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test10802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10802");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add((long) '4');
        org.joda.time.MutableDateTime mutableDateTime10 = property6.add((long) 65612);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder15.appendTimeZoneShortName(strMap16);
        boolean boolean18 = dateTimeZone14.equals((java.lang.Object) strMap16);
        boolean boolean20 = dateTimeZone14.isStandardOffset((long) (byte) -1);
        long long23 = dateTimeZone14.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str24 = dateTimeZone14.getID();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone14);
        int int26 = localDate25.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property28 = localDate25.property(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType27.getField(chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) chronology29, chronology31);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.LocalDate localDate36 = localDate32.withPeriodAdded(readablePeriod34, (int) '#');
        org.joda.time.LocalDate.Property property37 = localDate32.weekyear();
        org.joda.time.Chronology chronology38 = localDate32.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.hours();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfMonth();
        mutableDateTime10.setRounding(dateTimeField41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime10.dayOfWeek();
        java.lang.String str44 = property43.getAsShortText();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-360599990L) + "'", long23 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+100:10" + "'", str24, "+100:10");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ubaa9" + "'", str44, "\ubaa9");
    }

    @Test
    public void test10803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10803");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        org.joda.time.Chronology chronology1 = dateTimeFormatter0.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology4);
        java.lang.String str6 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property7 = localTime5.millisOfDay();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime10 = localTime8.plusMinutes(59);
        java.lang.String str11 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime10);
        org.joda.time.LocalTime.Property property12 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime14 = property12.addCopy(69278263);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property12.getFieldType();
        org.joda.time.LocalTime localTime16 = property12.roundHalfCeilingCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        java.lang.String str30 = dateTimeZone20.getNameKey((long) 65653);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(dateTimeZone20);
        int int32 = localTime31.getSecondOfMinute();
        boolean boolean33 = localTime16.equals((java.lang.Object) int32);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str6, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT00:58" + "'", str11, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT00:58");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(str30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 47 + "'", int32 == 47);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test10804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10804");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(15004, 69312863, 69221500, 15414650, 69374131, 69450946, 69294384);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 15414650 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10805");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withZone(dateTimeZone3);
        java.util.TimeZone timeZone11 = dateTimeZone3.toTimeZone();
        int int12 = timeZone11.getRawOffset();
        java.lang.String str13 = timeZone11.getID();
        int int15 = timeZone11.getOffset((long) 69234158);
        timeZone11.setRawOffset(69236538);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+100:10' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+19:13");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 360600000 + "'", int12 == 360600000);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 360600000 + "'", int15 == 360600000);
    }

    @Test
    public void test10806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10806");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 69320889);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMinuteOfDay(69276638);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69276638 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10807");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.addDays((int) (short) -1);
        int int6 = mutableDateTime2.getYear();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime2.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundCeiling();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.era();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test10808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10808");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        boolean boolean33 = property32.isLeap();
        org.joda.time.DateTime dateTime35 = property32.addWrapFieldToCopy(69213798);
        org.joda.time.DateTime dateTime36 = property32.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property37 = dateTime36.year();
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.lang.String str41 = locale38.getDisplayScript(locale40);
        java.lang.String str42 = property37.getAsText(locale38);
        org.joda.time.DateTime dateTime43 = property37.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime46 = dateTime43.withDurationAdded((long) 69231663, 69309637);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime48 = dateTime43.withMillisOfSecond(69304303);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69304303 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9864" + "'", str42, "9864");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test10809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10809");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendHalfdayOfDayText();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property12 = localDate11.weekOfWeekyear();
        org.joda.time.LocalDate localDate13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        int int15 = localDate13.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap21 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendTimeZoneShortName(strMap21);
        boolean boolean23 = dateTimeZone19.equals((java.lang.Object) strMap21);
        boolean boolean25 = dateTimeZone19.isStandardOffset((long) (byte) -1);
        long long28 = dateTimeZone19.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str29 = dateTimeZone19.getID();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone19);
        int int31 = localDate30.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property33 = localDate30.property(dateTimeFieldType32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType32.getField(chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) chronology34, chronology36);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate41 = localDate37.withPeriodAdded(readablePeriod39, (int) '#');
        org.joda.time.LocalDate.Property property42 = localDate37.weekyear();
        org.joda.time.LocalDate localDate43 = property42.withMinimumValue();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths(2);
        int int46 = localDate45.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap52 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder51.appendTimeZoneShortName(strMap52);
        boolean boolean54 = dateTimeZone50.equals((java.lang.Object) strMap52);
        boolean boolean56 = dateTimeZone50.isStandardOffset((long) (byte) -1);
        long long59 = dateTimeZone50.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str60 = dateTimeZone50.getID();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone50);
        org.joda.time.LocalDate.Property property62 = localDate61.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight63 = localDate61.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType64.getDurationType();
        boolean boolean66 = dateMidnight63.isSupported(dateTimeFieldType64);
        boolean boolean67 = localDate45.isSupported(dateTimeFieldType64);
        int int68 = localDate13.get(dateTimeFieldType64);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder70 = dateTimeFormatterBuilder7.appendFixedDecimal(dateTimeFieldType64, 69239357);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = dateTimeFormatterBuilder70.appendHalfdayOfDayText();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-360599990L) + "'", long28 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:10" + "'", str29, "+100:10");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-360599990L) + "'", long59 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+100:10" + "'", str60, "+100:10");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder70);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder71);
    }

    @Test
    public void test10810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10810");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withHourOfDay(20);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withWeekyear(3);
        org.joda.time.LocalDateTime.Property property12 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.halfdays();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test10811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10811");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendYear(69219549, 38);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap8 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendTimeZoneName(strMap8);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendTwoDigitYear((-69255290));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.yearOfCentury();
        mutableDateTime15.setMillisOfDay((int) '#');
        int int21 = dateTimeFormatter12.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime15, "1", (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime15.toMutableDateTime();
        long long23 = mutableDateTime15.getMillis();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime15.secondOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder25.appendTwoDigitWeekyear(69205874, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder28.appendMinuteOfHour(70);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder28.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder31.appendFractionOfMinute(69210179, 69218943);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder34.appendFixedDecimal(dateTimeFieldType35, 69209230);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap38 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendTimeZoneShortName(strMap38);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder37.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap42 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder41.appendTimeZoneShortName(strMap42);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder43.appendClockhourOfHalfday(69206284);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder43.appendTimeZoneOffset("-2000-02-25T19:13:31.786", "+00:00", false, 69208090, 69216412);
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        int int53 = localDateTime52.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.property(dateTimeFieldType54);
        int int56 = localDateTime52.getWeekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.plusMonths(54202757);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        int int62 = localDateTime61.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.property(dateTimeFieldType63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime60.withField(dateTimeFieldType63, 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder69 = dateTimeFormatterBuilder51.appendFraction(dateTimeFieldType63, 69207366, 69225701);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder70 = dateTimeFormatterBuilder37.appendShortText(dateTimeFieldType63);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime15.property(dateTimeFieldType63);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder73 = dateTimeFormatterBuilder9.appendFixedSignedDecimal(dateTimeFieldType63, 69234598);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-2) + "'", int21 == (-2));
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-62135352599965L) + "'", long23 == (-62135352599965L));
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 69588200 + "'", int53 == 69588200);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 69588201 + "'", int62 == 69588201);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder69);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder73);
    }

    @Test
    public void test10812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10812");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.hourOfDay();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.era();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundCeiling();
        java.lang.String str10 = property8.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[era]" + "'", str10, "Property[era]");
    }

    @Test
    public void test10813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10813");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter1.withZone(dateTimeZone4);
        java.util.TimeZone timeZone12 = dateTimeZone4.toTimeZone();
        java.lang.String str13 = dateTimeZone4.getID();
        java.lang.String str15 = dateTimeZone4.getNameKey((-360534359L));
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 69229151, dateTimeZone4);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 9);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withPeriodAdded(readablePeriod20, 65775);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusWeeks(365);
        org.joda.time.DateTime dateTime25 = localDateTime22.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test10814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10814");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hour();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.yearOfCentury();
        mutableDateTime4.setMillisOfDay((int) '#');
        int int10 = dateTimeFormatter1.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime4, "1", (int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime4.toMutableDateTime();
        long long12 = mutableDateTime4.getMillis();
        java.lang.String str13 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime4);
        java.lang.String str14 = mutableDateTime4.toString();
        org.joda.time.DateTimeField dateTimeField15 = mutableDateTime4.getRoundingField();
        mutableDateTime4.add((long) 69240944);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setTime(69269450, 69467101, 69569114, 69510572);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69269450 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-2) + "'", int10 == (-2));
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-62135352599965L) + "'", long12 == (-62135352599965L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00" + "'", str13, "00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0001-01-08T00:00:00.035+100:10" + "'", str14, "0001-01-08T00:00:00.035+100:10");
        org.junit.Assert.assertNull(dateTimeField15);
    }

    @Test
    public void test10815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10815");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap1);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap3);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendYearOfCentury(69221666, 69222520);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap13 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap13);
        boolean boolean15 = dateTimeZone11.equals((java.lang.Object) strMap13);
        boolean boolean17 = dateTimeZone11.isStandardOffset((long) (byte) -1);
        long long20 = dateTimeZone11.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str21 = dateTimeZone11.getID();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone11);
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight24 = localDate22.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap30 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendTimeZoneShortName(strMap30);
        boolean boolean32 = dateTimeZone28.equals((java.lang.Object) strMap30);
        boolean boolean34 = dateTimeZone28.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter25.withZone(dateTimeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.DateTime dateTime37 = localDate22.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.DateTime dateTime39 = dateTime37.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfMonth();
        org.joda.time.DateTime dateTime41 = property40.roundCeilingCopy();
        org.joda.time.DateTime dateTime42 = property40.getDateTime();
        org.joda.time.DateTime dateTime44 = dateTime42.withYear(69207073);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.monthOfYear();
        int int49 = mutableDateTime47.getWeekOfWeekyear();
        mutableDateTime47.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean53 = mutableDateTime47.isSupported(dateTimeFieldType52);
        org.joda.time.DateTime dateTime55 = dateTime42.withField(dateTimeFieldType52, 38);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = dateTimeFormatterBuilder4.appendFixedDecimal(dateTimeFieldType52, 69221560);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = dateTimeFormatterBuilder4.appendDayOfWeekText();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-360599990L) + "'", long20 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder57);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder58);
    }

    @Test
    public void test10816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10816");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate21.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDate.Property property26 = localDate21.weekyear();
        org.joda.time.Chronology chronology27 = localDate21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap36 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendTimeZoneShortName(strMap36);
        boolean boolean38 = dateTimeZone34.equals((java.lang.Object) strMap36);
        boolean boolean40 = dateTimeZone34.isStandardOffset((long) (byte) -1);
        long long43 = dateTimeZone34.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str44 = dateTimeZone34.getID();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone34);
        org.joda.time.LocalDate.Property property46 = localDate45.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight47 = localDate45.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap53 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder52.appendTimeZoneShortName(strMap53);
        boolean boolean55 = dateTimeZone51.equals((java.lang.Object) strMap53);
        boolean boolean57 = dateTimeZone51.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter48.withZone(dateTimeZone51);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.DateTime dateTime60 = localDate45.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.DateTime dateTime62 = dateTime60.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime64 = dateTime60.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property65 = dateTime60.secondOfDay();
        org.joda.time.DateTime dateTime66 = dateTime60.toDateTime();
        int int67 = dateTime60.getDayOfWeek();
        boolean boolean69 = dateTime60.isEqual((long) 69210315);
        boolean boolean70 = mutableDateTime30.isAfter((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 5, chronology72);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTime dateTime75 = dateTime73.plus(readableDuration74);
        org.joda.time.DateTime dateTime77 = dateTime75.withMillisOfDay(575);
        boolean boolean78 = mutableDateTime30.isBefore((org.joda.time.ReadableInstant) dateTime75);
        int int79 = mutableDateTime30.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-360599990L) + "'", long43 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+100:10" + "'", str44, "+100:10");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2022 + "'", int79 == 2022);
    }

    @Test
    public void test10817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10817");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList13);
        boolean boolean17 = strList15.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList23);
        boolean boolean27 = strList25.equals((java.lang.Object) (-1));
        boolean boolean28 = strList15.retainAll((java.util.Collection<java.lang.String>) strList25);
        boolean boolean29 = strSet6.retainAll((java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.FilteringMode filteringMode30 = null;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15, filteringMode30);
        int int32 = strList15.size();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology37);
        java.lang.String str39 = dateTimeFormatter35.print((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.LocalTime.Property property40 = localTime38.millisOfDay();
        org.joda.time.LocalTime localTime42 = property40.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime44 = property40.addCopy((long) 70);
        org.joda.time.LocalTime localTime45 = property40.roundHalfFloorCopy();
        boolean boolean46 = localTime34.isEqual((org.joda.time.ReadablePartial) localTime45);
        boolean boolean47 = strList15.contains((java.lang.Object) localTime45);
        boolean boolean48 = strList15.isEmpty();
        strList15.clear();
        java.util.Locale locale51 = new java.util.Locale("hi!");
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.util.Set<java.lang.String> strSet54 = locale51.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology56);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = localTime57.getFieldTypes();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray59 = strSet54.toArray(dateTimeFieldTypeArray58);
        boolean boolean60 = strList15.removeAll((java.util.Collection<java.lang.String>) strSet54);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str39, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test10818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10818");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime9 = property5.addCopy((long) 10);
        org.joda.time.LocalTime localTime11 = property5.addWrapFieldToCopy((-1));
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime11.minus(readablePeriod12);
        int int14 = localTime11.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = localTime11.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.plus(readablePeriod16);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test10819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10819");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap8 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendTimeZoneShortName(strMap8);
        boolean boolean10 = dateTimeZone6.equals((java.lang.Object) strMap8);
        boolean boolean12 = dateTimeZone6.isStandardOffset((long) (byte) -1);
        long long16 = dateTimeZone6.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        long long30 = dateTimeZone6.getMillisKeepLocal(dateTimeZone20, (long) 10);
        mutableDateTime2.setZoneRetainFields(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean33 = mutableDateTime2.isSupported(dateTimeFieldType32);
        java.lang.String str34 = mutableDateTime2.toString();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime2.era();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-360599999L) + "'", long16 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-05T04:10:00.001+100:10" + "'", str34, "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test10820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10820");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears(1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYear(69204037);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyear();
        org.joda.time.DurationField durationField12 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfDay();
        org.joda.time.DurationField durationField14 = chronology9.centuries();
        org.joda.time.DateTimeZone dateTimeZone15 = chronology9.getZone();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.halfdayOfDay();
        long long18 = dateTimeField16.roundCeiling((long) 69498042);
        int int20 = dateTimeField16.getLeapAmount((long) 69288529);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86400000L + "'", long18 == 86400000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test10821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10821");
        java.lang.String[] strArray13 = new java.lang.String[] { "2022-02-21T15:04:24.674Z", "2022-02-25T19:14:27.970+100:10", "2022-01-25T17:33:45.701", "era", "1970-01-05T00:00:00.001+100:10", "-2000-02-25T19:14:12.363", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000)", "15000000", "f\351vr.", "1970", "fra", "2022-02-25", "+00:00" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale19 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology17, locale19, (java.lang.Integer) 54202800);
        org.joda.time.DateTimeField dateTimeField22 = null;
        dateTimeParserBucket21.saveField(dateTimeField22, 4);
        dateTimeParserBucket21.setOffset((java.lang.Integer) 69210165);
        dateTimeParserBucket21.setOffset((java.lang.Integer) 69230879);
        dateTimeParserBucket21.setPivotYear((java.lang.Integer) 69256363);
        boolean boolean31 = strSet14.remove((java.lang.Object) dateTimeParserBucket21);
        dateTimeParserBucket21.setOffset((java.lang.Integer) 69260705);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale37 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology35, locale37, (java.lang.Integer) 54202800);
        org.joda.time.DateTimeField dateTimeField40 = null;
        dateTimeParserBucket39.saveField(dateTimeField40, 4);
        java.lang.Integer int43 = dateTimeParserBucket39.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        long long50 = dateTimeZone46.adjustOffset((long) 69238209, true);
        dateTimeParserBucket39.setZone(dateTimeZone46);
        dateTimeParserBucket21.setZone(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withDurationAdded(readableDuration54, 6);
        boolean boolean57 = dateTimeZone46.isLocalDateTimeGap(localDateTime56);
        long long60 = dateTimeZone46.adjustOffset((long) 2019, true);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!");
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 69238209L + "'", long50 == 69238209L);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 2019L + "'", long60 == 2019L);
    }

    @Test
    public void test10822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10822");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2022-01-25T17:33:39.549");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test10823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10823");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(69537000, 69408632, 69434561, 69508131);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69537000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10824");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicTTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.monthOfYear();
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.addMinutes(72);
        int int17 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime10, "", 69220671);
        boolean boolean18 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter0.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-69220672) + "'", int17 == (-69220672));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(dateTimeZone19);
    }

    @Test
    public void test10825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10825");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) chronology37, chronology39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType17.getField(chronology41);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology41, locale44, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeField dateTimeField49 = null;
        dateTimeParserBucket48.saveField(dateTimeField49, 5);
        org.joda.time.Chronology chronology52 = dateTimeParserBucket48.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.year();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.weekOfWeekyear();
        org.joda.time.Chronology chronology55 = chronology52.withUTC();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(chronology55);
    }

    @Test
    public void test10826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10826");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        boolean boolean25 = dateTimeZone21.equals((java.lang.Object) strMap23);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter18.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime30 = localDate15.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.DateTime dateTime32 = dateTime30.plusHours(69205127);
        org.joda.time.DateTime.Property property33 = dateTime32.monthOfYear();
        org.joda.time.DateTime dateTime35 = property33.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property36 = dateTime35.year();
        org.joda.time.DateTime dateTime37 = dateTime35.withTimeAtStartOfDay();
        org.joda.time.DateMidnight dateMidnight38 = dateTime35.toDateMidnight();
        org.joda.time.DateTime dateTime39 = dateTime35.withEarlierOffsetAtOverlap();
        java.util.Locale locale40 = null;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        org.joda.time.Chronology chronology42 = dateTime39.getChronology();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 69336849, chronology42);
        java.util.Date date44 = localDate43.toDate();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=182244194748588547,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+100:10,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5777058,MONTH=7,WEEK_OF_YEAR=35,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=235,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=19,SECOND=48,MILLISECOND=547,ZONE_OFFSET=360600000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(date44);
        org.junit.Assert.assertEquals(date44.toString(), "Mon Jan 05 00:00:00 GMT+:0:10 1970");
    }

    @Test
    public void test10827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10827");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        long long8 = dateTimeField5.addWrapField((long) 12, 2022);
        int int10 = dateTimeField5.getMaximumValue((-360597978L));
        long long12 = dateTimeField5.roundFloor((long) 69279297);
        int int13 = dateTimeField5.getMinimumValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 694224000012L + "'", long8 == 694224000012L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 99 + "'", int10 == 99);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360600000L) + "'", long12 == (-360600000L));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test10828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10828");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder4 = builder2.setScript("");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder6 = builder4.setLocale(locale5);
        java.util.Locale locale7 = builder4.build();
        java.util.Locale.Builder builder9 = builder4.setRegion("ko");
        java.util.Locale locale10 = builder4.build();
        java.util.Locale.Builder builder13 = builder4.setExtension('u', "69226168");
        java.util.Locale locale14 = builder13.build();
        java.util.Locale.Builder builder15 = builder13.clearExtensions();
        java.util.Locale.Builder builder17 = builder15.setLanguage("chinois");
        java.util.Locale.Builder builder18 = builder15.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_KO");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_KO_#u-69226168");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test10829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10829");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        java.lang.String str16 = localDate14.toString();
        org.joda.time.LocalDate localDate18 = localDate14.minusMonths(69355975);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDate14.getFields();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-05" + "'", str16, "1970-01-05");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
    }

    @Test
    public void test10830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10830");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(70);
        org.joda.time.LocalDate.Property property18 = localDate17.era();
        int int19 = localDate17.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
    }

    @Test
    public void test10831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10831");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableDateTime2.add(readablePeriod4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendTimeZoneShortName(strMap10);
        boolean boolean12 = dateTimeZone8.equals((java.lang.Object) strMap10);
        boolean boolean14 = dateTimeZone8.isStandardOffset((long) (byte) -1);
        long long17 = dateTimeZone8.convertLocalToUTC((long) (short) 10, true);
        mutableDateTime2.setZoneRetainFields(dateTimeZone8);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone8);
        java.util.TimeZone timeZone20 = dateTimeZone8.toTimeZone();
        timeZone20.setID("15052005");
        timeZone20.setRawOffset(13);
        timeZone20.setRawOffset(69453423);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-360599990L) + "'", long17 == (-360599990L));
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+19:17");
    }

    @Test
    public void test10832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10832");
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) 69206920);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = property6.set("00");
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime10.getZone();
        org.joda.time.DateTime dateTime12 = localTime2.toDateTimeToday(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) -1, dateTimeZone11);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.addWrapField(69282562);
        org.joda.time.MutableDateTime mutableDateTime17 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime18 = property14.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime18.millisOfDay();
        java.lang.String str21 = property20.getAsShortText();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "14999561" + "'", str21, "14999561");
    }

    @Test
    public void test10833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10833");
        java.io.IOException iOException1 = new java.io.IOException("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        java.lang.Throwable[] throwableArray3 = iOException1.getSuppressed();
        java.lang.Throwable[] throwableArray4 = iOException1.getSuppressed();
        java.lang.String str5 = iOException1.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000" + "'", str5, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
    }

    @Test
    public void test10834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10834");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.addCopy((long) 69229151);
        org.joda.time.LocalTime localTime11 = localTime9.minusHours((-292275054));
        org.joda.time.LocalTime localTime13 = localTime9.plusMillis((-11));
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test10835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10835");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.property(dateTimeFieldType2);
        org.joda.time.DurationField durationField4 = property3.getDurationField();
        int int5 = property3.getMaximumValue();
        boolean boolean6 = property3.isLeap();
        org.joda.time.LocalDateTime localDateTime7 = property3.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfYear(31);
        int int10 = localDateTime7.size();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69588757 + "'", int1 == 69588757);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test10836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10836");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology1, locale3, (java.lang.Integer) 54202800);
        java.util.Locale locale6 = dateTimeParserBucket5.getLocale();
        java.util.Locale locale7 = dateTimeParserBucket5.getLocale();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 69221500);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendTimeZoneShortName(strMap14);
        boolean boolean16 = dateTimeZone12.equals((java.lang.Object) strMap14);
        boolean boolean18 = dateTimeZone12.isStandardOffset((long) (byte) -1);
        java.lang.String str20 = dateTimeZone12.getShortName((long) 69203825);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        dateTimeParserBucket5.setZone(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTimeParserBucket5.getZone();
        dateTimeParserBucket5.setOffset((java.lang.Integer) 0);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.monthOfYear();
        int int30 = mutableDateTime28.getWeekOfWeekyear();
        mutableDateTime28.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean34 = mutableDateTime28.isSupported(dateTimeFieldType33);
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType33.getDurationType();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        int int37 = localDateTime36.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = localDateTime36.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.withYearOfEra(1970);
        org.joda.time.Chronology chronology43 = localDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.millisOfDay();
        boolean boolean46 = dateTimeFieldType33.isSupported(chronology43);
        org.joda.time.DurationField durationField47 = chronology43.minutes();
        boolean boolean48 = dateTimeParserBucket5.restoreState((java.lang.Object) chronology43);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 69588786 + "'", int37 == 69588786);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test10837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10837");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap7);
        boolean boolean9 = dateTimeZone5.equals((java.lang.Object) strMap7);
        boolean boolean11 = dateTimeZone5.isStandardOffset((long) (byte) -1);
        long long14 = dateTimeZone5.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str15 = dateTimeZone5.getID();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone5);
        int int17 = localDate16.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property19 = localDate16.property(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap25 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder24.appendTimeZoneShortName(strMap25);
        boolean boolean27 = dateTimeZone23.equals((java.lang.Object) strMap25);
        boolean boolean29 = dateTimeZone23.isStandardOffset((long) (byte) -1);
        long long32 = dateTimeZone23.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str33 = dateTimeZone23.getID();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone23);
        int int35 = localDate34.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property37 = localDate34.property(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType36.getField(chronology38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) chronology38, chronology40);
        org.joda.time.Chronology chronology42 = localDate41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.minutes();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType18.getField(chronology42);
        java.util.Locale locale45 = java.util.Locale.JAPAN;
        java.lang.String str46 = locale45.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology42, locale45, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeField dateTimeField50 = null;
        dateTimeParserBucket49.saveField(dateTimeField50, 5);
        org.joda.time.Chronology chronology53 = dateTimeParserBucket49.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.minutes();
        org.joda.time.DurationField durationField55 = chronology53.seconds();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.clockhourOfDay();
        java.util.Locale locale59 = new java.util.Locale("hi!");
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        java.util.Set<java.lang.Character> charSet62 = locale60.getExtensionKeys();
        java.lang.String str63 = locale60.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) 69472872, chronology53, locale60, (java.lang.Integer) 0, 70);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360599990L) + "'", long14 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:10" + "'", str15, "+100:10");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-360599990L) + "'", long32 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+100:10" + "'", str33, "+100:10");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(charSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "CA" + "'", str63, "CA");
    }

    @Test
    public void test10838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10838");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfCentury(70);
        int[] intArray18 = localDate14.getValues();
        org.joda.time.LocalDate.Property property19 = localDate14.weekyear();
        org.joda.time.LocalDate localDate21 = property19.addWrapFieldToCopy(69221560);
        org.joda.time.LocalDate localDate22 = property19.withMinimumValue();
        org.joda.time.LocalDate localDate23 = property19.getLocalDate();
        org.joda.time.LocalDate localDate24 = property19.withMinimumValue();
        java.lang.Class<?> wildcardClass25 = property19.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[1970, 1, 5]");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test10839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10839");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate21.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDate.Property property26 = localDate21.weekyear();
        org.joda.time.LocalDate localDate27 = property26.withMinimumValue();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.LocalDate localDate29 = property26.withMaximumValue();
        java.util.Date date30 = localDate29.toDate();
        org.joda.time.LocalDate.Property property31 = localDate29.era();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        java.lang.Object obj33 = null;
        boolean boolean34 = localDate32.equals(obj33);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(date30);
        org.junit.Assert.assertEquals(date30.toString(), "Fri Feb 22 00:00:00 GMT+:0:10 292278993");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test10840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10840");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.Chronology chronology29 = chronology22.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField30 = chronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField31 = chronology22.millisOfDay();
        java.lang.String str32 = dateTimeField31.getName();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "millisOfDay" + "'", str32, "millisOfDay");
    }

    @Test
    public void test10841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10841");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 69209217, dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.plus(readableDuration8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfEra();
        int int11 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test10842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10842");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime2 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.minus(readablePeriod3);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        long long18 = dateTimeZone9.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str19 = dateTimeZone9.getID();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone9);
        int int21 = localDate20.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property23 = localDate20.property(dateTimeFieldType22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType22.getField(chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) chronology24, chronology26);
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.weekyear();
        java.util.Locale locale32 = new java.util.Locale("hi!");
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str34 = locale32.getDisplayVariant(locale33);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale38 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology36, locale38, (java.lang.Integer) 54202800);
        java.lang.String str41 = locale32.getDisplayCountry(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 19, chronology28, locale38);
        org.joda.time.DateTime dateTime43 = dateTime4.withChronology(chronology28);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale47 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology45, locale47, (java.lang.Integer) 54202800);
        java.util.Locale locale50 = dateTimeParserBucket49.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 69315446, chronology28, locale50, (java.lang.Integer) 69563878);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360599990L) + "'", long18 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+100:10" + "'", str19, "+100:10");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale32.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
    }

    @Test
    public void test10843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10843");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        mutableDateTime2.setMillis((long) 1);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale10 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology8, locale10, (java.lang.Integer) 54202800);
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str17 = nameProvider13.getName(locale14, "1", "fr");
        java.lang.String str18 = locale10.getDisplayScript(locale14);
        java.util.Set<java.lang.Character> charSet19 = locale10.getExtensionKeys();
        java.util.Calendar calendar20 = mutableDateTime2.toCalendar(locale10);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.fromCalendarFields(calendar20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.fromCalendarFields(calendar20);
        int int23 = localDateTime22.getEra();
        org.junit.Assert.assertEquals(locale10.toString(), "hi!");
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test10844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10844");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime8 = localTime6.plusMinutes(59);
        org.joda.time.LocalTime localTime10 = localTime6.withMillisOfDay(58);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        java.lang.String str12 = property11.getName();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "millisOfSecond" + "'", str12, "millisOfSecond");
    }

    @Test
    public void test10845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10845");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        int int2 = localDateTime1.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusMonths((int) (short) -1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfEra(1970);
        org.joda.time.Chronology chronology8 = localDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfDay();
        org.joda.time.DurationField durationField11 = chronology8.eras();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale12.getDisplayVariant();
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale22 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology20, locale22, (java.lang.Integer) 54202800);
        java.lang.String str25 = locale16.getDisplayCountry(locale22);
        java.lang.String str26 = locale12.getDisplayName(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) (-292275055), chronology8, locale16);
        java.lang.Integer int28 = dateTimeParserBucket27.getPivotYear();
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder29.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder33 = builder31.setScript("");
        java.util.Locale.Builder builder34 = builder33.clear();
        java.util.Locale locale35 = builder33.build();
        boolean boolean36 = dateTimeParserBucket27.restoreState((java.lang.Object) locale35);
        org.junit.Assert.assertNotNull(localDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54588963 + "'", int2 == 54588963);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "German" + "'", str26, "German");
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test10846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10846");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("de", (double) 69513828);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=6.9513828E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10847");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(69213992);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test10848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10848");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        java.lang.String str16 = property15.getAsString();
        org.joda.time.LocalDate localDate17 = property15.getLocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.centuryOfEra();
        org.joda.time.LocalDate localDate19 = property18.withMinimumValue();
        org.joda.time.LocalDate localDate20 = property18.withMaximumValue();
        org.joda.time.LocalDate.Property property21 = localDate20.era();
        java.lang.String str22 = property21.getAsText();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc11c\uae30" + "'", str22, "\uc11c\uae30");
    }

    @Test
    public void test10849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10849");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime0.withMillisOfSecond(69247318);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69247318 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test10850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10850");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.LocalDate localDate24 = localDate21.minusMonths(10);
        org.joda.time.LocalDate.Property property25 = localDate24.monthOfYear();
        org.joda.time.LocalDate localDate26 = property25.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test10851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10851");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.Chronology chronology5 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.minuteOfDay();
        long long9 = dateTimeField7.roundHalfCeiling((long) 69231238);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology12);
        java.lang.String str14 = dateTimeFormatter10.print((org.joda.time.ReadablePartial) localTime13);
        org.joda.time.LocalTime.Property property15 = localTime13.millisOfDay();
        org.joda.time.DurationField durationField16 = property15.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField17 = property15.getField();
        org.joda.time.LocalTime localTime19 = property15.addCopy(69213916);
        org.joda.time.LocalTime localTime20 = property15.roundFloorCopy();
        org.joda.time.LocalTime localTime21 = property15.roundHalfEvenCopy();
        org.joda.time.Chronology chronology23 = null;
        java.util.Locale locale25 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology23, locale25, (java.lang.Integer) 54202800);
        java.util.Locale locale28 = dateTimeParserBucket27.getLocale();
        java.util.Locale locale29 = dateTimeParserBucket27.getLocale();
        java.util.Locale locale30 = dateTimeParserBucket27.getLocale();
        java.lang.String str31 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localTime21, locale30);
        org.joda.time.DateTime dateTime32 = localTime21.toDateTimeToday();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 69240000L + "'", long9 == 69240000L);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000" + "'", str14, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1190" + "'", str31, "1190");
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test10852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10852");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.Chronology chronology30 = chronology23.withZone(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 46, dateTimeZone28);
        int int33 = mutableDateTime32.getRoundingMode();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime32.add(readableDuration34);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test10853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10853");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 5, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTime dateTime4 = dateTime2.plus(readableDuration3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusHours((-2022));
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.DateTime dateTime8 = dateTime6.withEarlierOffsetAtOverlap();
        org.joda.time.LocalDate localDate9 = dateTime8.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(575);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone11);
        boolean boolean15 = dateTime13.isBefore((long) 69510219);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test10854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10854");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.setMillisOfDay((int) '#');
        int int6 = mutableDateTime2.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.hourOfDay();
        org.joda.time.DateTime dateTime8 = mutableDateTime2.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(69485976);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69485976 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test10855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10855");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendTimeZoneShortName(strMap4);
        boolean boolean6 = dateTimeZone2.equals((java.lang.Object) strMap4);
        boolean boolean8 = dateTimeZone2.isStandardOffset((long) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        boolean boolean11 = localDateTime9.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.monthOfYear();
        int int18 = mutableDateTime16.getWeekOfWeekyear();
        mutableDateTime16.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean22 = mutableDateTime16.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime9.property(dateTimeFieldType21);
        java.util.Date date24 = localDateTime9.toDate();
        boolean boolean25 = dateTimeZone2.isLocalDateTimeGap(localDateTime9);
        org.joda.time.LocalDateTime.Property property26 = localDateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime9.minusMillis((-292275055));
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.era();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Feb 25 19:19:49 GMT+:0:10 2022");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test10856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10856");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int7 = localDateTime0.get(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.withMillisOfDay(69210404);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.centuryOfEra();
        java.lang.String str13 = property12.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69589130 + "'", int1 == 69589130);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[centuryOfEra]" + "'", str13, "Property[centuryOfEra]");
    }

    @Test
    public void test10857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10857");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusMillis(86350010);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        org.joda.time.LocalTime.Property property6 = localTime5.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = property6.setCopy("1970-01-05T19:17:49.914+100:10");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-05T19:17:49.914+100:10\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test10858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10858");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(69431878, 65649, 69410919, 0, 0, 69248745, 69469140);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69248745 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10859");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.LocalDate.Property property16 = localDate14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        boolean boolean25 = dateTimeZone21.equals((java.lang.Object) strMap23);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (byte) -1);
        long long30 = dateTimeZone21.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str31 = dateTimeZone21.getID();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone21);
        int int33 = localDate32.getYearOfEra();
        org.joda.time.LocalDate localDate35 = localDate32.withYearOfCentury(70);
        int[] intArray36 = localDate32.getValues();
        int int37 = localDate32.getDayOfYear();
        int int38 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate40 = localDate32.minus(readablePeriod39);
        org.joda.time.DateTime dateTime41 = localDate40.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-360599990L) + "'", long30 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+100:10" + "'", str31, "+100:10");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1970, 1, 5]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 5 + "'", int37 == 5);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10860");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.year();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.secondOfDay();
        mutableDateTime9.addSeconds(7);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        java.lang.String str20 = dateTimeZone18.getShortName((long) (byte) 100);
        java.lang.String str22 = dateTimeZone18.getName((long) 2);
        mutableDateTime9.setZone(dateTimeZone18);
        java.lang.String str24 = mutableDateTime9.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+100:10" + "'", str22, "+100:10");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-05T04:10:07.001+100:10" + "'", str24, "1970-01-05T04:10:07.001+100:10");
    }

    @Test
    public void test10861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10861");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 69579357);
    }

    @Test
    public void test10862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10862");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.monthOfYear();
        int int9 = mutableDateTime7.getWeekOfWeekyear();
        mutableDateTime7.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = mutableDateTime7.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime0.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(69208701);
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusMillis((int) (byte) 100);
        int int20 = localDateTime19.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusMinutes(14400);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withDate(69564581, 69503031, 69264803);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69503031 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 191509 + "'", int17 == 191509);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test10863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10863");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime7.plus(readablePeriod8);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy(13);
        org.joda.time.LocalTime.Property property13 = localTime12.hourOfDay();
        org.joda.time.LocalTime localTime14 = property13.roundHalfEvenCopy();
        org.joda.time.DurationField durationField15 = property13.getDurationField();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test10864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10864");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology1, locale3, (java.lang.Integer) 54202800);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) chronology1);
        java.util.Date date7 = mutableDateTime6.toDate();
        mutableDateTime6.addMillis(444);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.lang.String[] strArray14 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strList15);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap42 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder41.appendTimeZoneShortName(strMap42);
        boolean boolean44 = dateTimeZone40.equals((java.lang.Object) strMap42);
        boolean boolean46 = dateTimeZone40.isStandardOffset((long) (byte) -1);
        long long49 = dateTimeZone40.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str50 = dateTimeZone40.getID();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone40);
        int int52 = localDate51.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property54 = localDate51.property(dateTimeFieldType53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType53.getField(chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((java.lang.Object) chronology55, chronology57);
        org.joda.time.Chronology chronology59 = localDate58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.minutes();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType35.getField(chronology59);
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.lang.String str63 = locale62.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology59, locale62, (java.lang.Integer) 0, 54202800);
        boolean boolean67 = strList15.remove((java.lang.Object) chronology59);
        org.joda.time.DateTimeField dateTimeField68 = chronology59.clockhourOfDay();
        org.joda.time.DurationField durationField69 = chronology59.months();
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now(chronology59);
        int int71 = mutableDateTime70.getDayOfMonth();
        mutableDateTime70.add((long) 292278993);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime70);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        mutableDateTime70.add(readablePeriod75, 69340236);
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Feb 25 19:19:49 GMT+:0:10 2022");
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-360599990L) + "'", long49 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+100:10" + "'", str50, "+100:10");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 21 + "'", int71 == 21);
    }

    @Test
    public void test10865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10865");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfMonth();
        org.joda.time.DateTime dateTime33 = property32.roundCeilingCopy();
        org.joda.time.DateTime dateTime34 = property32.getDateTime();
        org.joda.time.DateTime dateTime35 = property32.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int37 = dateTime35.get(dateTimeFieldType36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test10866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10866");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutableDateTime3.add(readablePeriod5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        long long18 = dateTimeZone9.convertLocalToUTC((long) (short) 10, true);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone9);
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale29 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology27, locale29, (java.lang.Integer) 54202800);
        java.lang.String str32 = locale23.getDisplayCountry(locale29);
        java.lang.String str33 = dateTimeZone9.getShortName((long) 69230879, locale23);
        java.lang.String str34 = dateTimeZone9.toString();
        org.joda.time.DateTime dateTime35 = localDate0.toDateTimeAtStartOfDay(dateTimeZone9);
        int int36 = localDate0.getDayOfWeek();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360599990L) + "'", long18 == (-360599990L));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+100:10" + "'", str33, "+100:10");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+100:10" + "'", str34, "+100:10");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
    }

    @Test
    public void test10867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10867");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendSecondOfDay(2022);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder7.appendMinuteOfHour(54202800);
        boolean boolean14 = dateTimeFormatterBuilder7.canBuildParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder7.appendLiteral("57694831001");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
    }

    @Test
    public void test10868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10868");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder7.appendYearOfEra((int) (byte) 1, 1970);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap15);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap17);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder18.appendYearOfCentury(69221666, 69222520);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap27 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendTimeZoneShortName(strMap27);
        boolean boolean29 = dateTimeZone25.equals((java.lang.Object) strMap27);
        boolean boolean31 = dateTimeZone25.isStandardOffset((long) (byte) -1);
        long long34 = dateTimeZone25.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str35 = dateTimeZone25.getID();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone25);
        org.joda.time.LocalDate.Property property37 = localDate36.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight38 = localDate36.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap44 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder43.appendTimeZoneShortName(strMap44);
        boolean boolean46 = dateTimeZone42.equals((java.lang.Object) strMap44);
        boolean boolean48 = dateTimeZone42.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter39.withZone(dateTimeZone42);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        org.joda.time.DateTime dateTime51 = localDate36.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.DateTime dateTime53 = dateTime51.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property54 = dateTime53.dayOfMonth();
        org.joda.time.DateTime dateTime55 = property54.roundCeilingCopy();
        org.joda.time.DateTime dateTime56 = property54.getDateTime();
        org.joda.time.DateTime dateTime58 = dateTime56.withYear(69207073);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone60);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime61.monthOfYear();
        int int63 = mutableDateTime61.getWeekOfWeekyear();
        mutableDateTime61.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean67 = mutableDateTime61.isSupported(dateTimeFieldType66);
        org.joda.time.DateTime dateTime69 = dateTime56.withField(dateTimeFieldType66, 38);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = dateTimeFormatterBuilder18.appendFixedDecimal(dateTimeFieldType66, 69221560);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder72 = dateTimeFormatterBuilder13.appendShortText(dateTimeFieldType66);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder73 = dateTimeFormatterBuilder72.appendDayOfWeekText();
        boolean boolean74 = dateTimeFormatterBuilder72.canBuildFormatter();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-360599990L) + "'", long34 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+100:10" + "'", str35, "+100:10");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder71);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder72);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test10869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10869");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        boolean boolean25 = durationFieldType0.isSupported(chronology23);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology23);
        mutableDateTime26.addMillis(69423671);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap35 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder34.appendTimeZoneShortName(strMap35);
        boolean boolean37 = dateTimeZone33.equals((java.lang.Object) strMap35);
        boolean boolean39 = dateTimeZone33.isStandardOffset((long) (byte) -1);
        long long43 = dateTimeZone33.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap49 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder48.appendTimeZoneShortName(strMap49);
        boolean boolean51 = dateTimeZone47.equals((java.lang.Object) strMap49);
        boolean boolean53 = dateTimeZone47.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter44.withZone(dateTimeZone47);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        long long57 = dateTimeZone33.getMillisKeepLocal(dateTimeZone47, (long) 10);
        boolean boolean58 = dateTime30.equals((java.lang.Object) dateTimeZone47);
        mutableDateTime26.setZoneRetainFields(dateTimeZone47);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-360599999L) + "'", long43 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 10L + "'", long57 == 10L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test10870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10870");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDate localDate26 = localDate22.withPeriodAdded(readablePeriod24, (int) '#');
        org.joda.time.LocalDate.Property property27 = localDate22.weekyear();
        org.joda.time.Chronology chronology28 = localDate22.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 191509, chronology28);
        mutableDateTime30.addMonths(572);
        mutableDateTime30.setTime((long) 69300104);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.weekOfWeekyear();
        mutableDateTime30.setMillisOfDay(69206284);
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime30.add(readableDuration38, 69470184);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test10871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10871");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(10L);
        org.joda.time.LocalDate localDate3 = localDate1.withYear(69208090);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(19);
        org.joda.time.LocalDate.Property property6 = localDate3.dayOfYear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfEvenCopy();
        int int8 = localDate7.getEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test10872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10872");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.LocalDate localDate23 = localDate21.minusDays(0);
        org.joda.time.LocalDate.Property property24 = localDate23.weekyear();
        org.joda.time.LocalDate localDate26 = localDate23.plusWeeks(0);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks(0);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfMonth();
        org.joda.time.LocalDate localDate31 = property29.addToCopy(69221500);
        int int32 = localDate31.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = localDate31.withMonthOfYear(69378213);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69378213 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
    }

    @Test
    public void test10873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10873");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add((long) '4');
        java.lang.String str9 = property6.getAsText();
        org.joda.time.DurationField durationField10 = property6.getRangeDurationField();
        java.lang.String str11 = property6.getName();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "22" + "'", str9, "22");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "yearOfCentury" + "'", str11, "yearOfCentury");
    }

    @Test
    public void test10874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10874");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        java.util.Locale locale20 = java.util.Locale.getDefault();
        int int21 = dateTimeField19.getMaximumShortTextLength(locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.lang.String[] strArray32 = new java.lang.String[] { "", "1", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000", "monthOfYear", "hi!", "1", "monthOfYear", "hi!", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean35 = strSet33.isEmpty();
        boolean boolean36 = strSet22.removeAll((java.util.Collection<java.lang.String>) strSet33);
        java.lang.Object[] objArray37 = strSet33.toArray();
        int int38 = strSet33.size();
        java.util.Iterator<java.lang.String> strItor39 = strSet33.iterator();
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Collection<java.lang.String> strCollection43 = null;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, strCollection43);
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList50);
        java.lang.String[] strArray55 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList63);
        boolean boolean67 = strList65.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.lang.String>) strList73);
        boolean boolean77 = strList75.equals((java.lang.Object) (-1));
        boolean boolean78 = strList65.retainAll((java.util.Collection<java.lang.String>) strList75);
        boolean boolean79 = strSet56.retainAll((java.util.Collection<java.lang.String>) strList65);
        boolean boolean80 = strList50.retainAll((java.util.Collection<java.lang.String>) strSet56);
        java.lang.String str81 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strSet56);
        boolean boolean82 = strSet33.equals((java.lang.Object) languageRangeList41);
        boolean boolean84 = strSet33.add("2022-01-25T17:35:09.244");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 6 + "'", int38 == 6);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test10875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10875");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMinutes((int) (short) 100);
        org.joda.time.Chronology chronology9 = localDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.year();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfDay();
        long long15 = dateTimeField13.roundHalfCeiling((long) 69346);
        long long17 = dateTimeField13.remainder((long) 69478781);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69589547 + "'", int1 == 69589547);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1078781L + "'", long17 == 1078781L);
    }

    @Test
    public void test10876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10876");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime7.plus(readablePeriod8);
        org.joda.time.LocalTime localTime11 = localTime9.minusHours(92);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime14 = localTime11.withPeriodAdded(readablePeriod12, 69382341);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType16 = localTime11.getFieldType(69580428);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69580428");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test10877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10877");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.add(0L);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.dayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test10878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10878");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        boolean boolean25 = dateTimeZone21.equals((java.lang.Object) strMap23);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (byte) -1);
        long long30 = dateTimeZone21.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str31 = dateTimeZone21.getID();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone21);
        int int33 = localDate32.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property35 = localDate32.property(dateTimeFieldType34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType34.getField(chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) chronology36, chronology38);
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.minutes();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType16.getField(chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.year();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology40);
        int int45 = mutableDateTime44.getRoundingMode();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-360599990L) + "'", long30 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+100:10" + "'", str31, "+100:10");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test10879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10879");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long14 = dateTimeZone4.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap20);
        boolean boolean22 = dateTimeZone18.equals((java.lang.Object) strMap20);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter15.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        long long28 = dateTimeZone4.getMillisKeepLocal(dateTimeZone18, (long) 10);
        boolean boolean29 = dateTime1.equals((java.lang.Object) dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap35 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder34.appendTimeZoneShortName(strMap35);
        boolean boolean37 = dateTimeZone33.equals((java.lang.Object) strMap35);
        boolean boolean39 = dateTimeZone33.isStandardOffset((long) (byte) -1);
        long long42 = dateTimeZone33.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str43 = dateTimeZone33.getID();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone33);
        org.joda.time.LocalDate.Property property45 = localDate44.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight46 = localDate44.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap52 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder51.appendTimeZoneShortName(strMap52);
        boolean boolean54 = dateTimeZone50.equals((java.lang.Object) strMap52);
        boolean boolean56 = dateTimeZone50.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter47.withZone(dateTimeZone50);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.DateTime dateTime59 = localDate44.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.DateTime dateTime61 = dateTime59.minusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime63 = dateTime59.withCenturyOfEra((int) (byte) 10);
        org.joda.time.DateTime.Property property64 = dateTime59.secondOfDay();
        org.joda.time.DateTime dateTime65 = dateTime59.toDateTime();
        org.joda.time.DateTime dateTime67 = dateTime65.withWeekyear(69206843);
        boolean boolean68 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime70 = dateTime1.withMinuteOfHour(9);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder74 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap75 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder76 = dateTimeFormatterBuilder74.appendTimeZoneShortName(strMap75);
        boolean boolean77 = dateTimeZone73.equals((java.lang.Object) strMap75);
        boolean boolean79 = dateTimeZone73.isStandardOffset((long) (byte) -1);
        java.lang.String str81 = dateTimeZone73.getShortName((long) 69203825);
        org.joda.time.DateTime dateTime82 = org.joda.time.DateTime.now(dateTimeZone73);
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime(dateTimeZone73);
        org.joda.time.DateTime dateTime84 = dateTime70.withZone(dateTimeZone73);
        org.joda.time.DateTime dateTime86 = dateTime70.plus((long) 16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime88 = dateTime86.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360599999L) + "'", long14 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-360599990L) + "'", long42 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+100:10" + "'", str43, "+100:10");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+100:10" + "'", str81, "+100:10");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test10880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10880");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.dayOfYear();
        mutableDateTime2.setSecondOfMinute(12);
        mutableDateTime2.setYear((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime2.copy();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale14 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology12, locale14, (java.lang.Integer) 54202800);
        org.joda.time.DateTimeField dateTimeField17 = null;
        dateTimeParserBucket16.saveField(dateTimeField17, 4);
        java.lang.Integer int20 = dateTimeParserBucket16.getOffsetInteger();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        long long27 = dateTimeZone23.adjustOffset((long) 69238209, true);
        dateTimeParserBucket16.setZone(dateTimeZone23);
        mutableDateTime2.setZone(dateTimeZone23);
        mutableDateTime2.setMillis((long) (-292275055));
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime2.add(readableDuration32, 69231246);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 69238209L + "'", long27 == 69238209L);
    }

    @Test
    public void test10881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10881");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = dateTime31.plusMinutes(69212644);
        org.joda.time.DateTime dateTime36 = dateTime31.withMillis((long) (short) 100);
        int int37 = dateTime31.getSecondOfMinute();
        org.joda.time.DateTime dateTime39 = dateTime31.minusMillis(65612);
        org.joda.time.DateTime dateTime41 = dateTime31.plusYears(69231238);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime31.withDayOfYear(69311198);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69311198 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 49 + "'", int37 == 49);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10882");
        java.util.Locale locale3 = new java.util.Locale("JP", "2022-01-25T17:36:04.055", "jeu.");
        java.util.Locale locale4 = locale3.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale4.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for jp");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "jp_2022-01-25T17:36:04.055_jeu.");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "jp_2022-01-25T17:36:04.055_jeu.");
    }

    @Test
    public void test10883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10883");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withEra(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withHourOfDay(20);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear(69241950);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean12 = localDateTime10.isSupported(dateTimeFieldType11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDayOfWeek(69380381);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69380381 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test10884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10884");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime2.add(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int24 = mutableDateTime2.get(dateTimeFieldType23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 5, chronology26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.plus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime27.minusHours((-2022));
        org.joda.time.DateTime.Property property32 = dateTime31.centuryOfEra();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property34 = dateTime31.minuteOfDay();
        org.joda.time.DurationField durationField35 = property34.getRangeDurationField();
        org.joda.time.DateTime dateTime36 = property34.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(69266721);
        int int39 = dateTime38.getYear();
        org.joda.time.DateTime dateTime41 = dateTime38.minusMonths(69279668);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1838 + "'", int39 == 1838);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10885");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate21.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDate.Property property26 = localDate21.weekyear();
        int int27 = property26.getLeapAmount();
        org.joda.time.LocalDate localDate28 = property26.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate30 = property26.addToCopy(69222520);
        org.joda.time.LocalDate.Property property31 = localDate30.weekOfWeekyear();
        org.joda.time.LocalDate localDate32 = property31.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap39 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder38.appendTimeZoneShortName(strMap39);
        boolean boolean41 = dateTimeZone37.equals((java.lang.Object) strMap39);
        boolean boolean43 = dateTimeZone37.isStandardOffset((long) (byte) -1);
        long long46 = dateTimeZone37.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str47 = dateTimeZone37.getID();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone37);
        int int49 = localDate48.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property51 = localDate48.property(dateTimeFieldType50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType50.getField(chronology52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) chronology52, chronology54);
        org.joda.time.Chronology chronology56 = localDate55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.minutes();
        org.joda.time.Chronology chronology58 = chronology56.withUTC();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.era();
        java.util.Locale locale62 = new java.util.Locale("5777058235T181451+10010", "2022-02-25T19:14:27.970+100:10");
        int int63 = dateTimeField59.getMaximumShortTextLength(locale62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate64 = property31.setCopy("9864-11-23T00:00:00.000+100:10", locale62);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"9864-11-23T00:00:00.000+100:10\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-360599990L) + "'", long46 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+100:10" + "'", str47, "+100:10");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertEquals(locale62.toString(), "5777058235t181451+10010_2022-02-25T19:14:27.970+100:10");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
    }

    @Test
    public void test10886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10886");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.LocalDate localDate23 = localDate21.minusDays(0);
        org.joda.time.LocalDate.Property property24 = localDate23.weekyear();
        org.joda.time.LocalDate localDate26 = localDate23.plusWeeks(0);
        org.joda.time.LocalDate localDate28 = localDate26.minusWeeks(0);
        org.joda.time.LocalDate localDate30 = localDate26.plusYears(69206284);
        org.joda.time.LocalDate localDate32 = localDate26.withWeekOfWeekyear((int) (short) 1);
        int int33 = localDate26.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 56 + "'", int33 == 56);
    }

    @Test
    public void test10887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10887");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.withYear(69264803);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = localDate16.toString("T191650.843");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test10888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10888");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale4.getISO3Language();
        int int6 = property3.getMaximumShortTextLength(locale4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property3.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime8 = property3.roundFloor();
        mutableDateTime8.setWeekyear(69249588);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime8.weekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test10889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10889");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((-5));
        org.joda.time.LocalTime localTime6 = localTime4.minusHours((-26));
        org.joda.time.LocalTime localTime8 = localTime4.minusMillis(69291486);
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds(0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test10890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10890");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addDays((int) (short) -1);
        int int11 = mutableDateTime7.getYear();
        boolean boolean12 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        boolean boolean16 = localDateTime14.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusYears(59);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withWeekOfWeekyear((int) '#');
        int int21 = localDateTime14.size();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.withYear(54202757);
        org.joda.time.LocalDateTime.Property property24 = localDateTime14.centuryOfEra();
        boolean boolean25 = mutableDateTime2.equals((java.lang.Object) localDateTime14);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.minusDays(69255184);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test10891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10891");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendTimeZoneId();
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatterBuilder10.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder10.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder15.appendMinuteOfDay(69430936);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeParser14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
    }

    @Test
    public void test10892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10892");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addDays((int) (short) -1);
        int int11 = mutableDateTime7.getYear();
        boolean boolean12 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.monthOfYear();
        int int17 = mutableDateTime15.getWeekOfWeekyear();
        mutableDateTime15.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean21 = mutableDateTime15.isSupported(dateTimeFieldType20);
        boolean boolean22 = mutableDateTime7.isSupported(dateTimeFieldType20);
        int int23 = mutableDateTime7.getEra();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime7.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap30 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendTimeZoneShortName(strMap30);
        boolean boolean32 = dateTimeZone28.equals((java.lang.Object) strMap30);
        boolean boolean34 = dateTimeZone28.isStandardOffset((long) (byte) -1);
        long long37 = dateTimeZone28.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str38 = dateTimeZone28.getID();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone28);
        int int40 = localDate39.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property42 = localDate39.property(dateTimeFieldType41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType41.getField(chronology43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) chronology43, chronology45);
        org.joda.time.Chronology chronology47 = localDate46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.minutes();
        java.lang.String str49 = chronology47.toString();
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(chronology47);
        org.joda.time.DateTimeField dateTimeField51 = chronology47.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime7, chronology47);
        java.lang.String str53 = mutableDateTime7.toString();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime7.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone56);
        mutableDateTime57.setTime((long) (short) -1);
        mutableDateTime57.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str63 = mutableDateTime57.toString(dateTimeFormatter62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone65);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.monthOfYear();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime66.minuteOfDay();
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime66.dayOfYear();
        org.joda.time.DurationField durationField70 = property69.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime72 = property69.set("70");
        int int73 = mutableDateTime72.getYearOfEra();
        boolean boolean74 = mutableDateTime57.equals((java.lang.Object) int73);
        java.lang.Object obj75 = mutableDateTime57.clone();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime57.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime78 = property76.addWrapField(69222520);
        mutableDateTime78.setMillisOfDay(69250365);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = property54.getDifference((org.joda.time.ReadableInstant) mutableDateTime78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -10508650364");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-360599990L) + "'", long37 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+100:10" + "'", str38, "+100:10");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[UTC]" + "'", str49, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-04T04:10:00.001+100:10" + "'", str53, "1970-01-04T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "00" + "'", str63, "00");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-05T04:10:00.001+100:10");
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(mutableDateTime78);
    }

    @Test
    public void test10893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10893");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addDays((int) (short) -1);
        int int11 = mutableDateTime7.getYear();
        boolean boolean12 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.monthOfYear();
        int int17 = mutableDateTime15.getWeekOfWeekyear();
        mutableDateTime15.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean21 = mutableDateTime15.isSupported(dateTimeFieldType20);
        boolean boolean22 = mutableDateTime7.isSupported(dateTimeFieldType20);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap28 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder27.appendTimeZoneShortName(strMap28);
        boolean boolean30 = dateTimeZone26.equals((java.lang.Object) strMap28);
        boolean boolean32 = dateTimeZone26.isStandardOffset((long) (byte) -1);
        long long35 = dateTimeZone26.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str36 = dateTimeZone26.getID();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone26);
        int int38 = localDate37.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property40 = localDate37.property(dateTimeFieldType39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType39.getField(chronology41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) chronology41, chronology43);
        org.joda.time.Chronology chronology45 = localDate44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.minutes();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekyear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.Chronology chronology52 = chronology45.withZone(dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(dateTimeZone50);
        mutableDateTime7.setZone(dateTimeZone50);
        mutableDateTime7.addSeconds(0);
        mutableDateTime7.add((long) 69206325);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder60.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = dateTimeFormatterBuilder60.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = dateTimeFormatterBuilder63.appendDayOfWeekText();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder64.appendFraction(dateTimeFieldType65, 59, 692071);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatterBuilder64.toFormatter();
        java.lang.String str70 = mutableDateTime7.toString(dateTimeFormatter69);
        mutableDateTime7.setDayOfYear(297);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-360599990L) + "'", long35 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+100:10" + "'", str36, "+100:10");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder63);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\uc77c\uc694\uc77c01088211" + "'", str70, "\uc77c\uc694\uc77c01088211");
    }

    @Test
    public void test10894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10894");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy("1");
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMonths(69218773);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.era();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69589956 + "'", int1 == 69589956);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test10895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10895");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime38 = dateTime34.minus(readableDuration37);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfDay();
        org.joda.time.DateTime dateTime41 = property39.addWrapFieldToCopy(69499753);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10896");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addDays((int) (short) -1);
        int int11 = mutableDateTime7.getYear();
        boolean boolean12 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.monthOfYear();
        int int17 = mutableDateTime15.getWeekOfWeekyear();
        mutableDateTime15.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean21 = mutableDateTime15.isSupported(dateTimeFieldType20);
        boolean boolean22 = mutableDateTime7.isSupported(dateTimeFieldType20);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale26 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology24, locale26, (java.lang.Integer) 54202800);
        java.util.Locale locale29 = dateTimeParserBucket28.getLocale();
        java.util.Locale locale30 = dateTimeParserBucket28.getLocale();
        dateTimeParserBucket28.setPivotYear((java.lang.Integer) 69221500);
        long long33 = dateTimeParserBucket28.computeMillis();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket28.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.millis();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.yearOfCentury();
        mutableDateTime7.setRounding(dateTimeField36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime7.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundFloor();
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-291396175L) + "'", long33 == (-291396175L));
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
    }

    @Test
    public void test10897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10897");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList13);
        boolean boolean17 = strList15.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList23);
        boolean boolean27 = strList25.equals((java.lang.Object) (-1));
        boolean boolean28 = strList15.retainAll((java.util.Collection<java.lang.String>) strList25);
        boolean boolean29 = strSet6.retainAll((java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.FilteringMode filteringMode30 = null;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15, filteringMode30);
        boolean boolean33 = strList15.add("70");
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale37 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology35, locale37, (java.lang.Integer) 54202800);
        java.util.Locale locale40 = dateTimeParserBucket39.getLocale();
        java.util.Locale locale41 = dateTimeParserBucket39.getLocale();
        dateTimeParserBucket39.setPivotYear((java.lang.Integer) 69221500);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap48 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder47.appendTimeZoneShortName(strMap48);
        boolean boolean50 = dateTimeZone46.equals((java.lang.Object) strMap48);
        boolean boolean52 = dateTimeZone46.isStandardOffset((long) (byte) -1);
        java.lang.String str54 = dateTimeZone46.getShortName((long) 69203825);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(dateTimeZone46);
        dateTimeParserBucket39.setZone(dateTimeZone46);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((java.lang.Object) "70", dateTimeZone46);
        int int58 = mutableDateTime57.getMillisOfSecond();
        int int59 = mutableDateTime57.getDayOfWeek();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+100:10" + "'", str54, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
    }

    @Test
    public void test10898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10898");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withZone(dateTimeZone3);
        java.util.TimeZone timeZone11 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendTimeZoneShortName(strMap17);
        boolean boolean19 = dateTimeZone15.equals((java.lang.Object) strMap17);
        boolean boolean21 = dateTimeZone15.isStandardOffset((long) (byte) -1);
        long long24 = dateTimeZone15.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str25 = dateTimeZone15.getID();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone15);
        java.util.TimeZone timeZone27 = dateTimeZone15.toTimeZone();
        boolean boolean28 = timeZone11.hasSameRules(timeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap34 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder33.appendTimeZoneShortName(strMap34);
        boolean boolean36 = dateTimeZone32.equals((java.lang.Object) strMap34);
        boolean boolean38 = dateTimeZone32.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter29.withZone(dateTimeZone32);
        java.util.TimeZone timeZone40 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap46 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder45.appendTimeZoneShortName(strMap46);
        boolean boolean48 = dateTimeZone44.equals((java.lang.Object) strMap46);
        boolean boolean50 = dateTimeZone44.isStandardOffset((long) (byte) -1);
        long long53 = dateTimeZone44.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str54 = dateTimeZone44.getID();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone44);
        java.util.TimeZone timeZone56 = dateTimeZone44.toTimeZone();
        boolean boolean57 = timeZone40.hasSameRules(timeZone56);
        timeZone56.setRawOffset(69205091);
        boolean boolean60 = timeZone11.hasSameRules(timeZone56);
        java.util.TimeZone.setDefault(timeZone56);
        boolean boolean62 = timeZone56.observesDaylightTime();
        int int64 = timeZone56.getOffset((long) 69245597);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        int int66 = timeZone65.getRawOffset();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap72 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder73 = dateTimeFormatterBuilder71.appendTimeZoneShortName(strMap72);
        boolean boolean74 = dateTimeZone70.equals((java.lang.Object) strMap72);
        boolean boolean76 = dateTimeZone70.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter67.withZone(dateTimeZone70);
        java.util.TimeZone timeZone78 = dateTimeZone70.toTimeZone();
        int int79 = timeZone78.getRawOffset();
        java.util.TimeZone.setDefault(timeZone78);
        boolean boolean81 = timeZone65.hasSameRules(timeZone78);
        timeZone65.setID("");
        boolean boolean84 = timeZone56.hasSameRules(timeZone65);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-360599990L) + "'", long24 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+100:10" + "'", str25, "+100:10");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-360599990L) + "'", long53 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+100:10" + "'", str54, "+100:10");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+19:13");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 69205091 + "'", int64 == 69205091);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+19:13");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 69205091 + "'", int66 == 69205091);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 360600000 + "'", int79 == 360600000);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test10899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10899");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendClockhourOfHalfday(69206284);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder2.appendWeekOfWeekyear(69213298);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendSecondOfDay(69316953);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder6.appendSecondOfDay(69568334);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
    }

    @Test
    public void test10900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10900");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy("1");
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(69241950);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.minusDays(69207019);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        int int16 = localDateTime15.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.property(dateTimeFieldType17);
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        int int20 = property18.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        org.joda.time.LocalDateTime localDateTime22 = property18.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime23 = property18.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime24 = property18.getLocalDateTime();
        int int25 = localDateTime24.getHourOfDay();
        boolean boolean26 = localDateTime13.isEqual((org.joda.time.ReadablePartial) localDateTime24);
        int int27 = localDateTime13.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69590145 + "'", int1 == 69590145);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 69590145 + "'", int16 == 69590145);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 19 + "'", int25 == 19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 283 + "'", int27 == 283);
    }

    @Test
    public void test10901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10901");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 0);
        int int2 = dateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime3 = dateTime1.toLocalDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        org.joda.time.DateTime dateTime5 = dateTime1.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = dateTime5.withMonthOfYear(69518552);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69518552 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test10902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10902");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusMillis(86350010);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime5 = property3.withMinimumValue();
        java.lang.String str6 = localTime5.toString();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "00:19:00.182" + "'", str6, "00:19:00.182");
    }

    @Test
    public void test10903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10903");
        java.util.Locale locale3 = new java.util.Locale("GMT+:0:10", "-2000-02-25T19:16:39.583", "2022-01-25T19:19:45.800");
        org.junit.Assert.assertEquals(locale3.toString(), "gmt+:0:10_-2000-02-25T19:16:39.583_2022-01-25T19:19:45.800");
    }

    @Test
    public void test10904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10904");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.minuteOfDay();
        int int5 = mutableDateTime2.getYear();
        java.util.Date date6 = mutableDateTime2.toDate();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime2.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap13 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap13);
        boolean boolean15 = dateTimeZone11.equals((java.lang.Object) strMap13);
        boolean boolean17 = dateTimeZone11.isStandardOffset((long) (byte) -1);
        long long20 = dateTimeZone11.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str21 = dateTimeZone11.getID();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone11);
        int int23 = localDate22.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property25 = localDate22.property(dateTimeFieldType24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType24.getField(chronology26);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) chronology26, chronology28);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate29.withPeriodAdded(readablePeriod31, (int) '#');
        org.joda.time.LocalDate.Property property34 = localDate29.weekyear();
        org.joda.time.Chronology chronology35 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        mutableDateTime2.setChronology(chronology35);
        org.joda.time.ReadablePartial readablePartial39 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray41 = chronology35.get(readablePartial39, (long) 54407);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Jan 05 04:10:00 GMT+:0:10 1970");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-360599990L) + "'", long20 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test10905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10905");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.lang.String str6 = locale3.getDisplayScript(locale5);
        java.util.Locale.Builder builder7 = builder2.setLocale(locale5);
        java.util.Locale.Builder builder9 = builder7.setRegion("AM");
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.addUnicodeLocaleAttribute("199");
        java.util.Locale.Builder builder14 = builder12.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder12.setExtension('a', "69206920W087");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 69206920W087 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test10906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10906");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        java.util.Date date23 = localDate21.toDate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = localDate21.toString("JPN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(date23);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Feb 25 00:00:00 GMT+:0:10 2022");
    }

    @Test
    public void test10907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10907");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendSignedDecimal(dateTimeFieldType4, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendDayOfMonth(69203038);
        boolean boolean15 = dateTimeFormatterBuilder12.canBuildParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder12.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendMillisOfDay(69229172);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder16.appendYear(69206920, 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder16.appendMillisOfSecond(69213916);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder16.appendDayOfMonth(0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
    }

    @Test
    public void test10908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10908");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        int int2 = strSet1.size();
        strSet1.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test10909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10909");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36, 0);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap43 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendTimeZoneShortName(strMap43);
        boolean boolean45 = dateTimeZone41.equals((java.lang.Object) strMap43);
        boolean boolean47 = dateTimeZone41.isStandardOffset((long) (byte) -1);
        mutableDateTime35.setZoneRetainFields(dateTimeZone41);
        boolean boolean49 = dateTime31.isBefore((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.DateTime dateTime51 = dateTime31.minus(readableDuration50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap57 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = dateTimeFormatterBuilder56.appendTimeZoneShortName(strMap57);
        boolean boolean59 = dateTimeZone55.equals((java.lang.Object) strMap57);
        boolean boolean61 = dateTimeZone55.isStandardOffset((long) (byte) -1);
        long long64 = dateTimeZone55.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str65 = dateTimeZone55.getID();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone55);
        int int67 = localDate66.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property69 = localDate66.property(dateTimeFieldType68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType68.getField(chronology70);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((java.lang.Object) chronology70, chronology72);
        org.joda.time.Chronology chronology74 = localDate73.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.minutes();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.weekyear();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone79);
        org.joda.time.Chronology chronology81 = chronology74.withZone(dateTimeZone79);
        org.joda.time.MutableDateTime mutableDateTime82 = org.joda.time.MutableDateTime.now(dateTimeZone79);
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime(dateTimeZone79);
        org.joda.time.DateTime dateTime84 = dateTime51.toDateTime(dateTimeZone79);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.DateTime dateTime86 = dateTime51.minus(readableDuration85);
        org.joda.time.DateTime dateTime87 = dateTime86.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-360599990L) + "'", long64 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+100:10" + "'", str65, "+100:10");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1970 + "'", int67 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test10910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10910");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        java.lang.String str10 = localTime9.toString();
        org.joda.time.DateTime dateTime11 = localTime9.toDateTimeToday();
        org.joda.time.DateTime dateTime13 = dateTime11.withMillis((long) (-26));
        org.joda.time.DateTime dateTime15 = dateTime11.plus((long) 69223173);
        boolean boolean17 = dateTime15.isEqual((long) 54310);
        int int18 = dateTime15.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "23:59:50.010" + "'", str10, "23:59:50.010");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 26 + "'", int18 == 26);
    }

    @Test
    public void test10911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10911");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("weekyear");
        double double2 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test10912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10912");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property35 = dateTime34.year();
        org.joda.time.DateTime dateTime36 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime34.plusWeeks(69210165);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap43 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendTimeZoneShortName(strMap43);
        boolean boolean45 = dateTimeZone41.equals((java.lang.Object) strMap43);
        boolean boolean47 = dateTimeZone41.isStandardOffset((long) (byte) -1);
        long long51 = dateTimeZone41.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.DateTime dateTime52 = dateTime38.toDateTime(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone54);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        mutableDateTime55.add(readablePeriod57);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap63 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = dateTimeFormatterBuilder62.appendTimeZoneShortName(strMap63);
        boolean boolean65 = dateTimeZone61.equals((java.lang.Object) strMap63);
        boolean boolean67 = dateTimeZone61.isStandardOffset((long) (byte) -1);
        long long70 = dateTimeZone61.convertLocalToUTC((long) (short) 10, true);
        mutableDateTime55.setZoneRetainFields(dateTimeZone61);
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime73 = dateTime52.toDateTime(dateTimeZone61);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.DateTime dateTime76 = dateTime52.withPeriodAdded(readablePeriod74, 69282741);
        org.joda.time.Instant instant77 = dateTime76.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-360599999L) + "'", long51 == (-360599999L));
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-360599990L) + "'", long70 == (-360599990L));
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(instant77);
    }

    @Test
    public void test10913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10913");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.ordinalDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 69228250);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime6 = dateTimeFormatter0.parseMutableDateTime("minutes");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"minutes\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test10914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10914");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        int int10 = localTime3.size();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap15);
        boolean boolean17 = dateTimeZone13.equals((java.lang.Object) strMap15);
        boolean boolean19 = dateTimeZone13.isStandardOffset((long) (byte) -1);
        java.lang.String str21 = dateTimeZone13.getShortName((long) 69203825);
        org.joda.time.DateTime dateTime22 = localTime3.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime24 = dateTime22.minus((long) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.minus(694224000012L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime26.withMillisOfSecond(69287336);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69287336 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:10" + "'", str21, "+100:10");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test10915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10915");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(69205874, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendMinuteOfHour(70);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendEraText();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatterBuilder5.toPrinter();
        int int8 = dateTimePrinter7.estimatePrintedLength();
        java.lang.StringBuffer stringBuffer9 = null;
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        int int11 = localDateTime10.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.property(dateTimeFieldType12);
        org.joda.time.DurationField durationField14 = property13.getDurationField();
        org.joda.time.LocalDateTime localDateTime16 = property13.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime18 = property13.addWrapFieldToCopy(69208701);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        int int22 = localDateTime21.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundFloorCopy();
        int int29 = localDateTime28.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = property30.addToCopy(69226456);
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("-2000-02-25T19:13:37.408");
        java.lang.String str35 = property30.getAsText(locale34);
        java.util.Set<java.lang.Character> charSet36 = locale34.getExtensionKeys();
        java.util.Set<java.lang.String> strSet37 = locale34.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter7.printTo(stringBuffer9, (org.joda.time.ReadablePartial) localDateTime18, locale34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 92 + "'", int8 == 92);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 69590374 + "'", int11 == 69590374);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 69590375 + "'", int22 == 69590375);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertNotNull(strSet37);
    }

    @Test
    public void test10916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10916");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendSecondOfDay(2022);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder7.appendMinuteOfHour(54202800);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder7.appendSecondOfDay(69258119);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder16.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder16.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatterBuilder16.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder16.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder16.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder16.appendClockhourOfHalfday(100);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        boolean boolean31 = localDateTime29.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withDayOfMonth((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.withYear((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int37 = localDateTime35.get(dateTimeFieldType36);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder16.appendDecimal(dateTimeFieldType36, 0, 69206284);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder7.appendFixedSignedDecimal(dateTimeFieldType36, 69251947);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder42.appendWeekOfWeekyear(69261999);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder44.appendHourOfDay(69357698);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder44.appendPattern("2022-01-25T17:35:43.110");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeParser21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
    }

    @Test
    public void test10917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10917");
        java.util.Locale locale1 = new java.util.Locale("000000.010");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale1.toString(), "000000.010");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test10918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10918");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test10919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10919");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology3);
        java.lang.String str5 = dateTimeFormatter1.print((org.joda.time.ReadablePartial) localTime4);
        org.joda.time.LocalTime.Property property6 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime8 = property6.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime9 = property6.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime11 = localTime9.plusHours(69221560);
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 21, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.minuteOfDay();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = dateTimeField15.getAsText((long) 69222520, locale17);
        long long20 = dateTimeField15.remainder((long) 69344432);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap26 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder25.appendTimeZoneShortName(strMap26);
        boolean boolean28 = dateTimeZone24.equals((java.lang.Object) strMap26);
        boolean boolean30 = dateTimeZone24.isStandardOffset((long) (byte) -1);
        long long33 = dateTimeZone24.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str34 = dateTimeZone24.getID();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone24);
        int int36 = localDate35.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property38 = localDate35.property(dateTimeFieldType37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType37.getField(chronology39);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) chronology39, chronology41);
        org.joda.time.Chronology chronology43 = localDate42.getChronology();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDate localDate46 = localDate42.withPeriodAdded(readablePeriod44, (int) '#');
        org.joda.time.LocalDate.Property property47 = localDate42.weekyear();
        org.joda.time.LocalDate localDate48 = property47.withMinimumValue();
        java.lang.String str50 = localDate48.toString("00:00");
        org.joda.time.LocalDate localDate52 = localDate48.minusMonths(69207073);
        org.joda.time.DateTime dateTime53 = localDate48.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap60 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder59.appendTimeZoneShortName(strMap60);
        boolean boolean62 = dateTimeZone58.equals((java.lang.Object) strMap60);
        boolean boolean64 = dateTimeZone58.isStandardOffset((long) (byte) -1);
        long long67 = dateTimeZone58.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str68 = dateTimeZone58.getID();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone58);
        int int70 = localDate69.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property72 = localDate69.property(dateTimeFieldType71);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType71.getField(chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((java.lang.Object) chronology73, chronology75);
        org.joda.time.Chronology chronology77 = localDate76.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.minutes();
        org.joda.time.DurationField durationField79 = chronology77.centuries();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        long long83 = chronology77.add(readablePeriod80, (long) 19, 69206587);
        long long87 = chronology77.add((long) 1154, (long) 254, 69344441);
        org.joda.time.DateTimeZone dateTimeZone89 = null;
        org.joda.time.MutableDateTime mutableDateTime90 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone89);
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime90.monthOfYear();
        java.util.GregorianCalendar gregorianCalendar92 = mutableDateTime90.toGregorianCalendar();
        org.joda.time.LocalDate localDate93 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar92);
        org.joda.time.LocalDate.Property property94 = localDate93.yearOfEra();
        int int95 = localDate93.size();
        int[] intArray97 = chronology77.get((org.joda.time.ReadablePartial) localDate93, (long) 489);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = dateTimeField15.addWrapField((org.joda.time.ReadablePartial) localDate48, 69501593, intArray97, 220);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 69501593");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str5, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1153" + "'", str18, "1153");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 44432L + "'", long20 == 44432L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-360599990L) + "'", long33 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+100:10" + "'", str34, "+100:10");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "00:00" + "'", str50, "00:00");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-360599990L) + "'", long67 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+100:10" + "'", str68, "+100:10");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1970 + "'", int70 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 19L + "'", long83 == 19L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 17613489168L + "'", long87 == 17613489168L);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(gregorianCalendar92);
        org.junit.Assert.assertNotNull(localDate93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
        org.junit.Assert.assertNotNull(intArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray97), "[1970, 1, 1]");
    }

    @Test
    public void test10920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10920");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(69229, 5692, 69258006);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69229 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10921");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.lang.String str3 = locale2.getLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
    }

    @Test
    public void test10922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10922");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-01-25T19:14:40.299");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test10923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10923");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale4.getISO3Language();
        int int6 = property3.getMaximumShortTextLength(locale4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property3.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime9 = property3.add((long) '#');
        mutableDateTime9.addYears(69210165);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime9.add(readablePeriod13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime9.dayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test10924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10924");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.Chronology chronology29 = chronology22.withZone(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone27);
        int int32 = mutableDateTime31.getSecondOfDay();
        mutableDateTime31.addMonths(69233168);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime31.year();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundHalfCeiling();
        int int37 = mutableDateTime36.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 69590 + "'", int32 == 69590);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 53 + "'", int37 == 53);
    }

    @Test
    public void test10925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10925");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalTime localTime13 = localTime3.minusSeconds(69224989);
        org.joda.time.LocalTime localTime15 = localTime13.minusHours(44668);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder16.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder16.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser21 = dateTimeFormatterBuilder16.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder16.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder16.appendFractionOfHour(100, 5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder26.appendTimeZoneOffset("ISOChronology[UTC]", "1970-01-05T23:23:30.180+100:10", true, 20, 69216412);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder32.appendFraction(dateTimeFieldType33, 38, 69210934);
        boolean boolean37 = localTime15.isSupported(dateTimeFieldType33);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType33.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeFieldType33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeParser21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(durationFieldType38);
    }

    @Test
    public void test10926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10926");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate25 = localDate21.withPeriodAdded(readablePeriod23, (int) '#');
        org.joda.time.LocalDate.Property property26 = localDate21.monthOfYear();
        org.joda.time.LocalDate localDate28 = property26.addToCopy(69210404);
        int int29 = property26.getMaximumValue();
        org.joda.time.LocalDate localDate30 = property26.withMaximumValue();
        org.joda.time.LocalDate localDate31 = property26.getLocalDate();
        int int32 = localDate31.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 56 + "'", int32 == 56);
    }

    @Test
    public void test10927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10927");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder1.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder1.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatterBuilder5.toParser();
        boolean boolean7 = dateTimeFormatterBuilder5.canBuildParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatterBuilder5.toPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder10.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder13.appendSignedDecimal(dateTimeFieldType14, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder20.appendTimeZoneId();
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatterBuilder20.toParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser24);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale29 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology27, locale29, (java.lang.Integer) 54202800);
        org.joda.time.DateTimeField dateTimeField32 = null;
        dateTimeParserBucket31.saveField(dateTimeField32, 4);
        dateTimeParserBucket31.setOffset((java.lang.Integer) 69210165);
        dateTimeParserBucket31.setOffset((java.lang.Integer) 69230879);
        int int41 = dateTimeParser24.parseInto(dateTimeParserBucket31, "2022-02-21T15:03:44.751Z", 444);
        int int42 = dateTimeParser24.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser24);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter43.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.parse("2022-01-25T17:34:55.763", dateTimeFormatter43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-01-25T17:34:55.763\" is malformed at \"-25T17:34:55.763\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeParser24);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-445) + "'", int41 == (-445));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 96 + "'", int42 == 96);
        org.junit.Assert.assertNotNull(dateTimeParser44);
    }

    @Test
    public void test10928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10928");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime7.plus(readablePeriod8);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localTime9.getValue(69453649);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69453649");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test10929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10929");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.monthOfYear();
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.year();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.addWrapField(0);
        mutableDateTime15.addMonths(69216412);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        mutableDateTime15.add(readablePeriod18, 69344227);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime15.year();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test10930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10930");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone33);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.yearOfCentury();
        org.joda.time.DurationField durationField36 = property35.getDurationField();
        org.joda.time.DateTimeField dateTimeField37 = property35.getField();
        boolean boolean38 = dateTimeField37.isLenient();
        int int39 = dateTime29.get(dateTimeField37);
        org.joda.time.DateTime dateTime41 = dateTime29.plusDays(1139);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 70 + "'", int39 == 70);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test10931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10931");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        mutableDateTime2.setMillis((long) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str8 = mutableDateTime2.toString(dateTimeFormatter7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.monthOfYear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.minuteOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.dayOfYear();
        org.joda.time.DurationField durationField15 = property14.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime17 = property14.set("70");
        int int18 = mutableDateTime17.getYearOfEra();
        boolean boolean19 = mutableDateTime2.equals((java.lang.Object) int18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        java.lang.String str30 = dateTimeZone22.getShortName((long) 69203825);
        mutableDateTime2.setZoneRetainFields(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        mutableDateTime2.add(durationFieldType33, 69293123);
        int int36 = mutableDateTime2.getDayOfWeek();
        java.util.GregorianCalendar gregorianCalendar37 = mutableDateTime2.toGregorianCalendar();
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar37);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00" + "'", str8, "00");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+100:10" + "'", str30, "+100:10");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(gregorianCalendar37);
        org.junit.Assert.assertNotNull(localDate38);
    }

    @Test
    public void test10932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10932");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withLocale(locale1);
        boolean boolean3 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap11);
        boolean boolean13 = dateTimeZone9.equals((java.lang.Object) strMap11);
        boolean boolean15 = dateTimeZone9.isStandardOffset((long) (byte) -1);
        long long18 = dateTimeZone9.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str19 = dateTimeZone9.getID();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone9);
        int int21 = localDate20.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property23 = localDate20.property(dateTimeFieldType22);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap29 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder28.appendTimeZoneShortName(strMap29);
        boolean boolean31 = dateTimeZone27.equals((java.lang.Object) strMap29);
        boolean boolean33 = dateTimeZone27.isStandardOffset((long) (byte) -1);
        long long36 = dateTimeZone27.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str37 = dateTimeZone27.getID();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone27);
        int int39 = localDate38.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property41 = localDate38.property(dateTimeFieldType40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType40.getField(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) chronology42, chronology44);
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.minutes();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType22.getField(chronology46);
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.lang.String str50 = locale49.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology46, locale49, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeField dateTimeField54 = null;
        dateTimeParserBucket53.saveField(dateTimeField54, 5);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket53.getChronology();
        int int58 = dateTimeParserBucket53.getOffset();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap64 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder63.appendTimeZoneShortName(strMap64);
        boolean boolean66 = dateTimeZone62.equals((java.lang.Object) strMap64);
        boolean boolean68 = dateTimeZone62.isStandardOffset((long) (byte) -1);
        long long71 = dateTimeZone62.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str72 = dateTimeZone62.getID();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone62);
        org.joda.time.LocalDate.Property property74 = localDate73.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight75 = localDate73.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType77 = dateTimeFieldType76.getDurationType();
        boolean boolean78 = dateMidnight75.isSupported(dateTimeFieldType76);
        org.joda.time.Chronology chronology81 = null;
        java.util.Locale locale83 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology81, locale83, (java.lang.Integer) 54202800);
        java.util.Locale locale86 = dateTimeParserBucket85.getLocale();
        java.util.Locale locale87 = dateTimeParserBucket85.getLocale();
        dateTimeParserBucket53.saveField(dateTimeFieldType76, "dayOfYear", locale87);
        dateTimeParserBucket53.setOffset(69238209);
        int int91 = dateTimeParserBucket53.getOffset();
        int int94 = dateTimeParser4.parseInto(dateTimeParserBucket53, "2022-01-25T17:33:49.050", 69261391);
        java.util.Locale locale95 = dateTimeParserBucket53.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeParser4);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-360599990L) + "'", long18 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+100:10" + "'", str19, "+100:10");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-360599990L) + "'", long36 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+100:10" + "'", str37, "+100:10");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-360599990L) + "'", long71 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+100:10" + "'", str72, "+100:10");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals(locale83.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 69238209 + "'", int91 == 69238209);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-69261392) + "'", int94 == (-69261392));
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "ja_JP");
    }

    @Test
    public void test10933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10933");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap7);
        boolean boolean9 = dateTimeZone5.equals((java.lang.Object) strMap7);
        boolean boolean11 = dateTimeZone5.isStandardOffset((long) (byte) -1);
        long long14 = dateTimeZone5.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str15 = dateTimeZone5.getID();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone5);
        int int17 = localDate16.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property19 = localDate16.property(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTimeField dateTimeField21 = dateTimeFieldType18.getField(chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((java.lang.Object) chronology20, chronology22);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.minutes();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.weekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap32 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder31.appendTimeZoneShortName(strMap32);
        boolean boolean34 = dateTimeZone30.equals((java.lang.Object) strMap32);
        boolean boolean36 = dateTimeZone30.isStandardOffset((long) (byte) -1);
        long long39 = dateTimeZone30.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str40 = dateTimeZone30.getID();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone30);
        int int42 = localDate41.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property44 = localDate41.property(dateTimeFieldType43);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType43.getField(chronology45);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        int int48 = dateTimeField46.getMaximumShortTextLength(locale47);
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        int int50 = dateTimeField46.getMaximumTextLength(locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 20, chronology24, locale49, (java.lang.Integer) 2022, 0);
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((long) 10, chronology24, locale54, (java.lang.Integer) 69203825);
        org.joda.time.DateTimeField dateTimeField58 = chronology24.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField59 = chronology24.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-360599990L) + "'", long14 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:10" + "'", str15, "+100:10");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-360599990L) + "'", long39 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+100:10" + "'", str40, "+100:10");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test10934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10934");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2022-01-25T17:33:33.826");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-01-25T17:33:33.826\" is malformed at \"22-01-25T17:33:33.826\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10935");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTime.Property property32 = dateTime31.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.addToCopy((long) 69206325);
        org.joda.time.DateMidnight dateMidnight35 = dateTime34.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime43 = property39.set("00");
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime43.getZone();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight35, dateTimeZone44);
        int int46 = localDate45.getCenturyOfEra();
        org.joda.time.LocalDate localDate48 = localDate45.minusMonths(69255088);
        org.joda.time.LocalDate.Property property49 = localDate45.year();
        org.joda.time.LocalDate localDate51 = localDate45.plusDays(69230144);
        int int52 = localDate45.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 57770 + "'", int46 == 57770);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 58 + "'", int52 == 58);
    }

    @Test
    public void test10936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10936");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale3 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology1, locale3, (java.lang.Integer) 54202800);
        java.util.Locale locale6 = dateTimeParserBucket5.getLocale();
        java.util.Locale locale7 = dateTimeParserBucket5.getLocale();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 69221500);
        java.lang.Object obj10 = dateTimeParserBucket5.saveState();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        java.lang.String str15 = dateTimeZone13.getShortName((long) (byte) 100);
        java.lang.String str17 = dateTimeZone13.getName((long) 2);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(dateTimeZone13);
        dateTimeParserBucket5.setZone(dateTimeZone13);
        java.lang.Integer int20 = dateTimeParserBucket5.getOffsetInteger();
        org.junit.Assert.assertEquals(locale3.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:10" + "'", str15, "+100:10");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+100:10" + "'", str17, "+100:10");
        org.junit.Assert.assertNull(int20);
    }

    @Test
    public void test10937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10937");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(69205874, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendMinuteOfHour(70);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendLiteral("ISOChronology[UTC]");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder6.appendYear(38, 191509);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatter12.getPrinter();
        int int14 = dateTimePrinter13.estimatePrintedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder15.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder15.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatterBuilder15.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder15.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder22.appendSecondOfDay(2022);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder27.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder27.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatterBuilder31.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder26.appendOptional(dateTimeParser32);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder33.appendDayOfMonth((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = org.joda.time.format.ISODateTimeFormat.ordinalDateTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatter36.getPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder38.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder38.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser43 = dateTimeFormatterBuilder38.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder38.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder45.appendLiteral("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder45.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder48.append(dateTimeFormatter49);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder50.appendWeekyear((int) (short) 10, 12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder54.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = dateTimeFormatterBuilder54.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser59 = dateTimeFormatterBuilder54.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder53.appendOptional(dateTimeParser59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder61.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder61.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser66 = dateTimeFormatterBuilder65.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder67.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = dateTimeFormatterBuilder67.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser72 = dateTimeFormatterBuilder67.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder73 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder73.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder77 = dateTimeFormatterBuilder73.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser78 = dateTimeFormatterBuilder77.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder79 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder79.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder83 = dateTimeFormatterBuilder79.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser84 = dateTimeFormatterBuilder79.toParser();
        org.joda.time.format.DateTimeParser[] dateTimeParserArray85 = new org.joda.time.format.DateTimeParser[] { dateTimeParser59, dateTimeParser66, dateTimeParser72, dateTimeParser78, dateTimeParser84 };
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder86 = dateTimeFormatterBuilder33.append(dateTimePrinter37, dateTimeParserArray85);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder87 = dateTimeFormatterBuilder6.append(dateTimePrinter13, dateTimeParserArray85);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder89 = dateTimeFormatterBuilder87.appendClockhourOfHalfday(69256236);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder91 = dateTimeFormatterBuilder87.appendDayOfWeek(69224542);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder92 = dateTimeFormatterBuilder91.appendHalfdayOfDayText();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimePrinter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 39 + "'", int14 == 39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeParser20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeParser32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimePrinter37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeParser43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder58);
        org.junit.Assert.assertNotNull(dateTimeParser59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder65);
        org.junit.Assert.assertNotNull(dateTimeParser66);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder71);
        org.junit.Assert.assertNotNull(dateTimeParser72);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder77);
        org.junit.Assert.assertNotNull(dateTimeParser78);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder83);
        org.junit.Assert.assertNotNull(dateTimeParser84);
        org.junit.Assert.assertNotNull(dateTimeParserArray85);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder86);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder87);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder89);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder91);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder92);
    }

    @Test
    public void test10938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10938");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusYears(59);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekOfWeekyear((int) '#');
        int int7 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test10939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10939");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap38 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendTimeZoneShortName(strMap38);
        boolean boolean40 = dateTimeZone36.equals((java.lang.Object) strMap38);
        boolean boolean42 = dateTimeZone36.isStandardOffset((long) (byte) -1);
        long long45 = dateTimeZone36.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str46 = dateTimeZone36.getID();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone36);
        int int48 = localDate47.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property50 = localDate47.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType49.getField(chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((java.lang.Object) chronology51, chronology53);
        org.joda.time.Chronology chronology55 = localDate54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.minutes();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.weekyear();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone60);
        org.joda.time.Chronology chronology62 = chronology55.withZone(dateTimeZone60);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime29.toMutableDateTime(chronology62);
        org.joda.time.DateTime.Property property64 = dateTime29.secondOfDay();
        int int65 = dateTime29.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime29.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-360599990L) + "'", long45 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+100:10" + "'", str46, "+100:10");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 19 + "'", int65 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone66);
    }

    @Test
    public void test10940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10940");
        java.util.Locale locale3 = new java.util.Locale("DateTimeField[millisOfDay]", "15052005", "69561");
        org.junit.Assert.assertEquals(locale3.toString(), "datetimefield[millisofday]_15052005_69561");
    }

    @Test
    public void test10941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10941");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap24);
        boolean boolean26 = dateTimeZone22.equals((java.lang.Object) strMap24);
        boolean boolean28 = dateTimeZone22.isStandardOffset((long) (byte) -1);
        long long31 = dateTimeZone22.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str32 = dateTimeZone22.getID();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone22);
        int int34 = localDate33.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property36 = localDate33.property(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType35.getField(chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) chronology37, chronology39);
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.minutes();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType17.getField(chronology41);
        org.joda.time.LocalDate.Property property44 = localDate0.property(dateTimeFieldType17);
        org.joda.time.LocalDate localDate45 = property44.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField46 = property44.getField();
        org.joda.time.LocalDate localDate47 = property44.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate49 = localDate47.withCenturyOfEra(69304233);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69304233 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-360599990L) + "'", long31 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+100:10" + "'", str32, "+100:10");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDate47);
    }

    @Test
    public void test10942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10942");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withDurationAdded(readableDuration5, 1969);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.minusDays(54202800);
        int int10 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusDays(31);
        int[] intArray13 = localDateTime0.getValues();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime0.minusMonths(69220671);
        int int16 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime0.withYear(69551011);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 50 + "'", int10 == 50);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2022, 2, 25, 69590992]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test10943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10943");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.months();
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology22);
        int int25 = dateTime24.getEra();
        org.joda.time.DateTime.Property property26 = dateTime24.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime24.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime24.withMillis((long) 69409144);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test10944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10944");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 69514485);
    }

    @Test
    public void test10945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10945");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addDays((int) (short) -1);
        int int11 = mutableDateTime7.getYear();
        boolean boolean12 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime7.add(readableDuration13, 69206843);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime7.copy();
        mutableDateTime16.addWeeks(69564323);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test10946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10946");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        java.util.Date date15 = localDateTime0.toDate();
        int int16 = localDateTime0.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime0.minus(readablePeriod17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 25 19:19:51 GMT+:0:10 2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test10947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10947");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableDateTime2.add(readablePeriod4);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendTimeZoneShortName(strMap10);
        boolean boolean12 = dateTimeZone8.equals((java.lang.Object) strMap10);
        boolean boolean14 = dateTimeZone8.isStandardOffset((long) (byte) -1);
        long long17 = dateTimeZone8.convertLocalToUTC((long) (short) 10, true);
        mutableDateTime2.setZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime.Property property20 = dateTime19.year();
        org.joda.time.DateTime.Property property21 = dateTime19.weekyear();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime23 = dateTime19.minus(readablePeriod22);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        boolean boolean26 = localDateTime24.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withYearOfCentury((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withEra(0);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime32 = property31.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minus(readableDuration33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withWeekyear(69210934);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.plus(readablePeriod37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusMillis(69218807);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusDays(69297147);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = localDateTime44.getFieldType(0);
        org.joda.time.DateTime.Property property47 = dateTime23.property(dateTimeFieldType46);
        org.joda.time.DateTime dateTime48 = property47.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-360599990L) + "'", long17 == (-360599990L));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test10948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10948");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalTime localTime13 = localTime11.plusSeconds(10);
        org.joda.time.LocalTime localTime15 = localTime13.withSecondOfMinute(22);
        org.joda.time.LocalTime.Property property16 = localTime13.hourOfDay();
        org.joda.time.LocalTime localTime18 = property16.addWrapFieldToCopy(69287258);
        org.joda.time.LocalTime localTime20 = property16.addCopy(69245210);
        org.joda.time.LocalTime localTime21 = property16.roundFloorCopy();
        org.joda.time.LocalTime localTime22 = property16.roundCeilingCopy();
        org.joda.time.LocalTime.Property property23 = localTime22.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test10949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10949");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withPivotYear(69221666);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 69220682);
        mutableDateTime9.setDayOfMonth(19);
        java.lang.String str12 = dateTimeFormatter7.print((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = mutableDateTime9.getRoundingField();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "19700119T232340+10010" + "'", str12, "19700119T232340+10010");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNull(dateTimeField14);
    }

    @Test
    public void test10950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10950");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusSeconds(69218047);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusSeconds(69279894);
        int int10 = localDateTime9.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69591224 + "'", int1 == 69591224);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 38 + "'", int10 == 38);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test10951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10951");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType13, (int) '4', 69204394);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneShortName(strMap23);
        boolean boolean25 = dateTimeZone21.equals((java.lang.Object) strMap23);
        boolean boolean27 = dateTimeZone21.isStandardOffset((long) (byte) -1);
        long long30 = dateTimeZone21.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str31 = dateTimeZone21.getID();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone21);
        int int33 = localDate32.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property35 = localDate32.property(dateTimeFieldType34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap41 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder40.appendTimeZoneShortName(strMap41);
        boolean boolean43 = dateTimeZone39.equals((java.lang.Object) strMap41);
        boolean boolean45 = dateTimeZone39.isStandardOffset((long) (byte) -1);
        long long48 = dateTimeZone39.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str49 = dateTimeZone39.getID();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone39);
        int int51 = localDate50.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property53 = localDate50.property(dateTimeFieldType52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType52.getField(chronology54);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) chronology54, chronology56);
        org.joda.time.Chronology chronology58 = localDate57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.minutes();
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType34.getField(chronology58);
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.lang.String str62 = locale61.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) (byte) 10, chronology58, locale61, (java.lang.Integer) 0, 54202800);
        org.joda.time.DateTimeField dateTimeField66 = null;
        dateTimeParserBucket65.saveField(dateTimeField66, 5);
        org.joda.time.Chronology chronology69 = dateTimeParserBucket65.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.minutes();
        org.joda.time.DurationField durationField71 = chronology69.millis();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType13.getField(chronology69);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        long long77 = chronology69.add(readablePeriod74, (long) 69300104, 69230182);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-360599990L) + "'", long30 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+100:10" + "'", str31, "+100:10");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-360599990L) + "'", long48 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+100:10" + "'", str49, "+100:10");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 69300104L + "'", long77 == 69300104L);
    }

    @Test
    public void test10952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10952");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.secondOfDay();
        org.joda.time.DurationField durationField26 = chronology22.halfdays();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.year();
        int int29 = dateTimeField27.get((-1036645919L));
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1969 + "'", int29 == 1969);
    }

    @Test
    public void test10953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10953");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendEraText();
        boolean boolean4 = dateTimeFormatterBuilder3.canBuildPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test10954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10954");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap6);
        boolean boolean8 = dateTimeZone4.equals((java.lang.Object) strMap6);
        boolean boolean10 = dateTimeZone4.isStandardOffset((long) (byte) -1);
        long long13 = dateTimeZone4.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str14 = dateTimeZone4.getID();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone4);
        int int16 = localDate15.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property18 = localDate15.property(dateTimeFieldType17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType17.getField(chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) chronology19, chronology21);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyear();
        org.joda.time.DurationField durationField26 = durationFieldType0.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.minuteOfHour();
        java.util.Locale locale30 = new java.util.Locale("hi!");
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str32 = locale30.getDisplayVariant(locale31);
        java.lang.String str33 = dateTimeField27.getAsText(69301812, locale30);
        java.util.Set<java.lang.Character> charSet34 = locale30.getExtensionKeys();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-360599990L) + "'", long13 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:10" + "'", str14, "+100:10");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "69301812" + "'", str33, "69301812");
        org.junit.Assert.assertNotNull(charSet34);
    }

    @Test
    public void test10955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10955");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("T191427", (double) 69329036);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=6.9329036E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10956");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withZone(dateTimeZone3);
        java.util.TimeZone timeZone11 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendTimeZoneShortName(strMap17);
        boolean boolean19 = dateTimeZone15.equals((java.lang.Object) strMap17);
        boolean boolean21 = dateTimeZone15.isStandardOffset((long) (byte) -1);
        long long24 = dateTimeZone15.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str25 = dateTimeZone15.getID();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone15);
        java.util.TimeZone timeZone27 = dateTimeZone15.toTimeZone();
        boolean boolean28 = timeZone11.hasSameRules(timeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap34 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder33.appendTimeZoneShortName(strMap34);
        boolean boolean36 = dateTimeZone32.equals((java.lang.Object) strMap34);
        boolean boolean38 = dateTimeZone32.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter29.withZone(dateTimeZone32);
        java.util.TimeZone timeZone40 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap46 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder45.appendTimeZoneShortName(strMap46);
        boolean boolean48 = dateTimeZone44.equals((java.lang.Object) strMap46);
        boolean boolean50 = dateTimeZone44.isStandardOffset((long) (byte) -1);
        long long53 = dateTimeZone44.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str54 = dateTimeZone44.getID();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone44);
        java.util.TimeZone timeZone56 = dateTimeZone44.toTimeZone();
        boolean boolean57 = timeZone40.hasSameRules(timeZone56);
        timeZone56.setRawOffset(69205091);
        boolean boolean60 = timeZone11.hasSameRules(timeZone56);
        java.util.TimeZone.setDefault(timeZone56);
        boolean boolean62 = timeZone56.observesDaylightTime();
        timeZone56.setRawOffset(57770);
        int int66 = timeZone56.getOffset((long) 69264512);
        timeZone56.setID("2022-01-25T19:15:08.018");
        int int69 = timeZone56.getRawOffset();
        java.lang.String str70 = timeZone56.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-360599990L) + "'", long24 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+100:10" + "'", str25, "+100:10");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+:0:10");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-360599990L) + "'", long53 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+100:10" + "'", str54, "+100:10");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 57770 + "'", int66 == 57770);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 57770 + "'", int69 == 57770);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "GMT+00:00" + "'", str70, "GMT+00:00");
    }

    @Test
    public void test10957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10957");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        int int4 = property3.get();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfCeiling();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test10958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10958");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 0);
        boolean boolean2 = dateTime1.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay3 = dateTime1.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendTimeZoneShortName(strMap9);
        boolean boolean11 = dateTimeZone7.equals((java.lang.Object) strMap9);
        boolean boolean13 = dateTimeZone7.isStandardOffset((long) (byte) -1);
        long long16 = dateTimeZone7.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str17 = dateTimeZone7.getID();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone7);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight20 = localDate18.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap26 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder25.appendTimeZoneShortName(strMap26);
        boolean boolean28 = dateTimeZone24.equals((java.lang.Object) strMap26);
        boolean boolean30 = dateTimeZone24.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter21.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.DateTime dateTime33 = localDate18.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours(69205127);
        org.joda.time.DateTime.Property property36 = dateTime35.monthOfYear();
        org.joda.time.DateTime dateTime38 = property36.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property39 = dateTime38.year();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateMidnight dateMidnight41 = dateTime38.toDateMidnight();
        org.joda.time.DateTime dateTime42 = dateTime38.withEarlierOffsetAtOverlap();
        java.util.Locale locale43 = null;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        boolean boolean45 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime48 = dateTime1.withPeriodAdded(readablePeriod46, 56);
        org.joda.time.DateTime.Property property49 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime50 = dateTime1.withLaterOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime52 = dateTime1.minus(readablePeriod51);
        org.joda.time.DateTime dateTime54 = dateTime1.plusSeconds(69258477);
        org.joda.time.DateTime dateTime56 = dateTime54.minusYears(38220000);
        org.joda.time.DateTime.Property property57 = dateTime54.secondOfMinute();
        org.joda.time.DateTime dateTime59 = dateTime54.minus((long) 69231758);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMillis(69538307);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-360599990L) + "'", long16 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+100:10" + "'", str17, "+100:10");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=182244194748591438,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+100:10,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5777058,MONTH=7,WEEK_OF_YEAR=35,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=235,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=19,SECOND=51,MILLISECOND=438,ZONE_OFFSET=360600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test10959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10959");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneName();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder5.appendSignedDecimal(dateTimeFieldType6, 44, 444);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder5.appendWeekOfWeekyear(69297716);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder5.appendLiteral('a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder14.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder14.appendSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder17.appendSignedDecimal(dateTimeFieldType18, (int) (byte) 10, (int) (short) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder21.appendFractionOfMinute(69204037, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder24.appendTimeZoneOffset("610", "-2000-02-25T19:13:50.545", true, 65685, 69258822);
        org.joda.time.Chronology chronology32 = null;
        java.util.Locale locale34 = new java.util.Locale("hi!");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((long) 69203825, chronology32, locale34, (java.lang.Integer) 54202800);
        java.util.Locale locale37 = dateTimeParserBucket36.getLocale();
        java.util.Locale locale38 = dateTimeParserBucket36.getLocale();
        dateTimeParserBucket36.setPivotYear((java.lang.Integer) 69221500);
        long long41 = dateTimeParserBucket36.computeMillis();
        org.joda.time.Chronology chronology42 = dateTimeParserBucket36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((java.lang.Object) "-2000-02-25T19:13:50.545", chronology42);
        org.joda.time.DateTimeField dateTimeField46 = chronology42.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) dateTimeFormatterBuilder5, chronology42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.format.DateTimeFormatterBuilder");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-291396175L) + "'", long41 == (-291396175L));
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test10960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10960");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval2 = localDate0.toInterval();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate0.plus(readablePeriod3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.monthOfYear();
        int int9 = mutableDateTime7.getWeekOfWeekyear();
        mutableDateTime7.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = mutableDateTime7.isSupported(dateTimeFieldType12);
        int int14 = localDate0.get(dateTimeFieldType12);
        org.joda.time.DurationFieldType durationFieldType15 = null;
        boolean boolean16 = localDate0.isSupported(durationFieldType15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        boolean boolean20 = dateTimeZone18.equals((java.lang.Object) "java.io.IOException: hi!");
        org.joda.time.DateTime dateTime21 = localDate0.toDateTimeAtCurrentTime(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfSecond(69240438);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69240438 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 56 + "'", int14 == 56);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test10961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10961");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(10L);
        int int2 = localDate1.getWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
    }

    @Test
    public void test10962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10962");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((-5));
        org.joda.time.LocalTime localTime6 = localTime4.minusHours((-26));
        org.joda.time.LocalTime localTime8 = localTime4.minusMillis(69291486);
        int int9 = localTime4.size();
        int int10 = localTime4.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = localTime4.withHourOfDay(69473723);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69473723 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
    }

    @Test
    public void test10963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10963");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.plusHours(69205127);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(69207900);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 59, dateTimeZone34);
        boolean boolean36 = dateTime31.isEqual((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime31.getYearOfCentury();
        int int38 = dateTime31.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 64 + "'", int37 == 64);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9864 + "'", int38 == 9864);
    }

    @Test
    public void test10964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10964");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.getEra();
        org.joda.time.Chronology chronology6 = localDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.year();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfDay();
        java.lang.String str11 = dateTimeField9.getAsText(69252147L);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        boolean boolean14 = localDateTime12.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDayOfMonth((int) (byte) 1);
        int int17 = localDateTime12.getEra();
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withCenturyOfEra(0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        boolean boolean24 = localDateTime22.equals((java.lang.Object) 100L);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMinutes(864);
        int int29 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        int int32 = localDateTime31.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime39 = property37.setCopy("1");
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusMonths(69241950);
        int[] intArray42 = localDateTime41.getValues();
        int[] intArray44 = dateTimeField9.addWrapField((org.joda.time.ReadablePartial) localDateTime22, 0, intArray42, 577);
        int int45 = localDateTime22.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "69252147" + "'", str11, "69252147");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 69591569 + "'", int32 == 69591569);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[5770839, 8, 26, 69541569]");
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[5770839, 8, 26, 69541569]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 25 + "'", int45 == 25);
    }

    @Test
    public void test10965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10965");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addDays((int) (short) -1);
        int int11 = mutableDateTime7.getYear();
        boolean boolean12 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime2.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTimeZoneShortName(strMap20);
        boolean boolean22 = dateTimeZone18.equals((java.lang.Object) strMap20);
        boolean boolean24 = dateTimeZone18.isStandardOffset((long) (byte) -1);
        long long27 = dateTimeZone18.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str28 = dateTimeZone18.getID();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone18);
        int int30 = localDate29.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property32 = localDate29.property(dateTimeFieldType31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType31.getField(chronology33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) chronology33, chronology35);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.minutes();
        boolean boolean39 = durationFieldType14.isSupported(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField42 = chronology37.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setRounding(dateTimeField42, 69370690);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 69370690");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-360599990L) + "'", long27 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+100:10" + "'", str28, "+100:10");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test10966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10966");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.setCopy(2);
        org.joda.time.DateTime dateTime35 = property32.withMaximumValue();
        org.joda.time.DateTime dateTime37 = property32.addToCopy(2022);
        long long38 = property32.remainder();
        org.joda.time.DateTime dateTime39 = property32.withMaximumValue();
        int int40 = dateTime39.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 415191621L + "'", long38 == 415191621L);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1159 + "'", int40 == 1159);
    }

    @Test
    public void test10967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10967");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        int int17 = dateMidnight16.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test10968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10968");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime6 = property3.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        int int22 = localDate21.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property24 = localDate21.property(dateTimeFieldType23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType23.getField(chronology25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) chronology25, chronology27);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.minutes();
        java.lang.String str31 = chronology29.toString();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField33 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.minuteOfHour();
        int int35 = mutableDateTime6.get(dateTimeField34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.monthOfYear();
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str41 = locale40.getISO3Language();
        int int42 = property39.getMaximumShortTextLength(locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property39.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime45 = property39.add((long) '#');
        mutableDateTime45.addYears(69210165);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime45.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableDateTime45.add(readablePeriod49);
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) mutableDateTime45);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fra" + "'", str41, "fra");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test10969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10969");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.LocalDate localDate23 = localDate21.minusDays(0);
        org.joda.time.LocalDate.Property property24 = localDate23.weekyear();
        org.joda.time.LocalDate localDate26 = localDate23.plusWeeks(0);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        boolean boolean28 = localDate23.isSupported(durationFieldType27);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (byte) 10, 37);
        int int34 = dateTimeZone32.getOffsetFromLocal((long) 69218643);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.monthOfYear();
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str41 = locale40.getISO3Language();
        int int42 = property39.getMaximumShortTextLength(locale40);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(locale43);
        java.lang.String str45 = locale40.getDisplayName(locale43);
        java.lang.String str46 = locale43.getISO3Country();
        java.util.Locale locale47 = locale43.stripExtensions();
        java.lang.String str48 = dateTimeZone32.getName((long) 69261457, locale47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(63781413317942L, dateTimeZone32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((java.lang.Object) boolean28, dateTimeZone32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 38220000 + "'", int34 == 38220000);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fra" + "'", str41, "fra");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fran\347ais (Canada)" + "'", str45, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "FRA" + "'", str46, "FRA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+10:37" + "'", str48, "+10:37");
    }

    @Test
    public void test10970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10970");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfDay(59, (int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder11.appendMonthOfYearText();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        boolean boolean15 = localDateTime13.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusYears(59);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withWeekOfWeekyear((int) '#');
        int int20 = localDateTime13.size();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.withYear(54202757);
        org.joda.time.LocalDateTime.Property property23 = localDateTime13.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder12.appendText(dateTimeFieldType24);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder12.appendMillisOfSecond(69418042);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder12.appendHourOfHalfday(69567179);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
    }

    @Test
    public void test10971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10971");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfMonth((int) (byte) 1);
        int int5 = localDateTime0.size();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set("00");
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime0.withMinuteOfHour(6);
        int int17 = localDateTime16.getMonthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean19 = localDateTime16.isSupported(dateTimeFieldType18);
        int int20 = localDateTime16.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusMillis(65853);
        java.util.Locale locale25 = new java.util.Locale("KR");
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = localDateTime22.toString("Property[yearOfEra]", locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 25 + "'", int20 == 25);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertEquals(locale25.toString(), "kr");
        org.junit.Assert.assertNotNull(charSet26);
    }

    @Test
    public void test10972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10972");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str4 = nameProvider0.getName(locale1, "1", "fr");
        java.util.Locale locale8 = new java.util.Locale("", "-2000-02-25T19:13:50.545", "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        java.lang.String str11 = nameProvider0.getName(locale8, "GMT+19:13", "1970-01-05T04:10:00.000+100:10");
        java.util.Locale locale13 = new java.util.Locale("hi!");
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        java.util.Set<java.lang.Character> charSet16 = locale14.getExtensionKeys();
        java.lang.String str19 = nameProvider0.getShortName(locale14, "2022-02-21T15:03:44.751Z", "chinois");
        java.util.Locale locale20 = null;
        java.lang.String str23 = nameProvider0.getShortName(locale20, "00:00", "Frankreich");
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap29 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder28.appendTimeZoneShortName(strMap29);
        boolean boolean31 = dateTimeZone27.equals((java.lang.Object) strMap29);
        boolean boolean33 = dateTimeZone27.isStandardOffset((long) (byte) -1);
        long long36 = dateTimeZone27.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str37 = dateTimeZone27.getID();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone27);
        int int39 = localDate38.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property41 = localDate38.property(dateTimeFieldType40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType40.getField(chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) chronology42, chronology44);
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.minutes();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.weekyear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.Chronology chronology53 = chronology46.withZone(dateTimeZone51);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now(chronology53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = new java.util.Locale("hi!");
        java.lang.String str58 = locale55.getDisplayCountry(locale57);
        java.lang.String str59 = locale55.getCountry();
        java.util.Calendar calendar60 = mutableDateTime54.toCalendar(locale55);
        java.lang.String str62 = locale55.getExtension('u');
        java.lang.String str65 = nameProvider0.getName(locale55, "", "1970-01-05T04:10:00.000");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNull(str4);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT195000");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-360599990L) + "'", long36 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+100:10" + "'", str37, "+100:10");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals(locale57.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1645456191764,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+100:10,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=25,DAY_OF_YEAR=56,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=19,SECOND=51,MILLISECOND=764,ZONE_OFFSET=360600000,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test10973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10973");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime2.add(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(dateTimeZone10);
        int int23 = mutableDateTime2.getRoundingMode();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime27 = property24.addWrapField(69478273);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime27.setTime(69571749, 69393978, 0, 69320889);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69571749 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test10974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10974");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        mutableDateTime2.setTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addDays((int) (short) -1);
        int int11 = mutableDateTime7.getYear();
        boolean boolean12 = mutableDateTime2.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.monthOfYear();
        int int17 = mutableDateTime15.getWeekOfWeekyear();
        mutableDateTime15.add((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean21 = mutableDateTime15.isSupported(dateTimeFieldType20);
        boolean boolean22 = mutableDateTime7.isSupported(dateTimeFieldType20);
        int int23 = mutableDateTime7.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime7.secondOfDay();
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 7 + "'", int23 == 7);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test10975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10975");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.Instant instant4 = mutableDateTime2.toInstant();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        long long11 = dateTimeZone7.convertLocalToUTC((long) 70, true, 1969L);
        boolean boolean12 = mutableDateTime2.equals((java.lang.Object) dateTimeZone7);
        boolean boolean13 = mutableDateTime2.isAfterNow();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.year();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfCeiling();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        long long29 = dateTimeZone20.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str30 = dateTimeZone20.getID();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone20);
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight33 = localDate31.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap39 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder38.appendTimeZoneShortName(strMap39);
        boolean boolean41 = dateTimeZone37.equals((java.lang.Object) strMap39);
        boolean boolean43 = dateTimeZone37.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter34.withZone(dateTimeZone37);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.DateTime dateTime46 = localDate31.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.DateTime dateTime48 = dateTime46.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property49 = dateTime46.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap55 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder54.appendTimeZoneShortName(strMap55);
        boolean boolean57 = dateTimeZone53.equals((java.lang.Object) strMap55);
        boolean boolean59 = dateTimeZone53.isStandardOffset((long) (byte) -1);
        long long62 = dateTimeZone53.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str63 = dateTimeZone53.getID();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone53);
        int int65 = localDate64.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property67 = localDate64.property(dateTimeFieldType66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType66.getField(chronology68);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((java.lang.Object) chronology68, chronology70);
        org.joda.time.Chronology chronology72 = localDate71.getChronology();
        org.joda.time.DurationField durationField73 = chronology72.minutes();
        org.joda.time.DateTimeField dateTimeField74 = chronology72.weekyear();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone77);
        org.joda.time.Chronology chronology79 = chronology72.withZone(dateTimeZone77);
        org.joda.time.MutableDateTime mutableDateTime80 = dateTime46.toMutableDateTime(chronology79);
        org.joda.time.DateTimeField dateTimeField81 = chronology79.secondOfMinute();
        long long85 = chronology79.add((long) 70, (long) 86399999, 15023);
        mutableDateTime16.setChronology(chronology79);
        org.joda.time.DateTimeField dateTimeField87 = chronology79.hourOfHalfday();
        long long89 = dateTimeField87.roundHalfEven((long) 69411888);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-360599930L) + "'", long11 == (-360599930L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-360599990L) + "'", long29 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+100:10" + "'", str30, "+100:10");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-360599990L) + "'", long62 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+100:10" + "'", str63, "+100:10");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1297987185047L + "'", long85 == 1297987185047L);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 67800000L + "'", long89 == 67800000L);
    }

    @Test
    public void test10976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10976");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 0);
        int int2 = dateTime1.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime3 = dateTime1.toLocalDateTime();
        java.lang.String str4 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusMonths((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withHourOfDay(69288576);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69288576 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-05T04:10:00.000" + "'", str4, "1970-01-05T04:10:00.000");
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test10977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10977");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendClockhourOfHalfday(69206284);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone6);
        mutableDateTime7.setTime((long) (short) -1);
        int int10 = mutableDateTime7.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean12 = mutableDateTime7.isSupported(dateTimeFieldType11);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder4.appendText(dateTimeFieldType11);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendFractionOfSecond(2022, 69229);
        dateTimeFormatterBuilder16.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendClockhourOfDay(69292971);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
    }

    @Test
    public void test10978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10978");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        java.lang.String[] strArray10 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList18);
        boolean boolean22 = strList20.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList28);
        boolean boolean32 = strList30.equals((java.lang.Object) (-1));
        boolean boolean33 = strList20.retainAll((java.util.Collection<java.lang.String>) strList30);
        boolean boolean34 = strSet11.retainAll((java.util.Collection<java.lang.String>) strList20);
        boolean boolean35 = strList5.retainAll((java.util.Collection<java.lang.String>) strSet11);
        java.util.Iterator<java.lang.String> strItor36 = strSet11.iterator();
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strList42);
        java.lang.String[] strArray47 = new java.lang.String[] { "fra", "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.lang.String>) strList55);
        boolean boolean59 = strList57.equals((java.lang.Object) (-1));
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strList65);
        boolean boolean69 = strList67.equals((java.lang.Object) (-1));
        boolean boolean70 = strList57.retainAll((java.util.Collection<java.lang.String>) strList67);
        boolean boolean71 = strSet48.retainAll((java.util.Collection<java.lang.String>) strList57);
        boolean boolean72 = strList42.retainAll((java.util.Collection<java.lang.String>) strSet48);
        java.util.Iterator<java.lang.String> strItor73 = strSet48.iterator();
        boolean boolean74 = strSet11.retainAll((java.util.Collection<java.lang.String>) strSet48);
        boolean boolean75 = strSet11.isEmpty();
        strSet11.clear();
        java.util.stream.Stream<java.lang.String> strStream77 = strSet11.parallelStream();
        boolean boolean79 = strSet11.add("8");
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strItor73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strStream77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test10979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10979");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((int) (short) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.add(0L);
        java.lang.Object obj11 = mutableDateTime10.clone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendTimeZoneShortName(strMap17);
        boolean boolean19 = dateTimeZone15.equals((java.lang.Object) strMap17);
        boolean boolean21 = dateTimeZone15.isStandardOffset((long) (byte) -1);
        long long24 = dateTimeZone15.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str25 = dateTimeZone15.getID();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone15);
        int int27 = localDate26.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property29 = localDate26.property(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType28.getField(chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) chronology30, chronology32);
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.minutes();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(obj11, chronology34);
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 69374131);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableDateTime36.add(readablePeriod40);
        java.lang.Object obj42 = null;
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap49 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder48.appendTimeZoneShortName(strMap49);
        boolean boolean51 = dateTimeZone47.equals((java.lang.Object) strMap49);
        boolean boolean53 = dateTimeZone47.isStandardOffset((long) (byte) -1);
        long long56 = dateTimeZone47.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str57 = dateTimeZone47.getID();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone47);
        int int59 = localDate58.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property61 = localDate58.property(dateTimeFieldType60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType60.getField(chronology62);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((java.lang.Object) chronology62, chronology64);
        org.joda.time.Chronology chronology66 = localDate65.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.minutes();
        boolean boolean68 = durationFieldType43.isSupported(chronology66);
        org.joda.time.DurationField durationField69 = chronology66.days();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(obj42, chronology66);
        org.joda.time.DateTime dateTime71 = dateTime70.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime73 = dateTime70.withWeekyear(65746);
        mutableDateTime36.setMillis((org.joda.time.ReadableInstant) dateTime73);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-05T04:10:01.000+100:10");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-05T04:10:01.000+100:10");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-05T04:10:01.000+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-360599990L) + "'", long24 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+100:10" + "'", str25, "+100:10");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-360599990L) + "'", long56 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+100:10" + "'", str57, "+100:10");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1970 + "'", int59 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test10980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10980");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType16.getField(chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((java.lang.Object) chronology18, chronology20);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.LocalDate localDate24 = localDate21.minusMonths(10);
        org.joda.time.LocalDate localDate26 = localDate24.withYearOfEra(69239154);
        org.joda.time.LocalDate.Property property27 = localDate24.year();
        org.joda.time.LocalDate localDate28 = property27.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test10981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10981");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(54383524L);
    }

    @Test
    public void test10982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10982");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.addUnicodeLocaleAttribute("fra");
        java.util.Locale.Builder builder4 = builder2.setScript("");
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder6 = builder4.setLocale(locale5);
        java.util.Locale locale7 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder4.setUnicodeLocaleKeyword("69325596", "dimanche");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 69325596 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
    }

    @Test
    public void test10983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10983");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.minusMinutes(69207073);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalTime localTime6 = localTime3.withPeriodAdded(readablePeriod4, 65615);
        org.joda.time.LocalTime localTime8 = localTime6.minusHours(9);
        org.joda.time.DateTimeField dateTimeField10 = localTime8.getField(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = localTime8.toString("Property[yearOfEra]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test10984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10984");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-09-25T19:13:53.410");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test10985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10985");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(69205874, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendMinuteOfHour(70);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendMillisOfSecond(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendMinuteOfDay(69217826);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendSecondOfMinute(69304233);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatterBuilder11.toFormatter();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test10986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10986");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        int int4 = mutableDateTime2.getWeekOfWeekyear();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = mutableDateTime2.toString("+100:10", locale6);
        mutableDateTime2.addSeconds(4);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendTimeZoneShortName(strMap15);
        boolean boolean17 = dateTimeZone13.equals((java.lang.Object) strMap15);
        boolean boolean19 = dateTimeZone13.isStandardOffset((long) (byte) -1);
        long long22 = dateTimeZone13.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str23 = dateTimeZone13.getID();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone13);
        int int25 = localDate24.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property27 = localDate24.property(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap33 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder32.appendTimeZoneShortName(strMap33);
        boolean boolean35 = dateTimeZone31.equals((java.lang.Object) strMap33);
        boolean boolean37 = dateTimeZone31.isStandardOffset((long) (byte) -1);
        long long40 = dateTimeZone31.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str41 = dateTimeZone31.getID();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone31);
        int int43 = localDate42.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property45 = localDate42.property(dateTimeFieldType44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType44.getField(chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((java.lang.Object) chronology46, chronology48);
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.minutes();
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType26.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.year();
        long long55 = dateTimeField53.remainder((long) 10010);
        int int56 = mutableDateTime2.get(dateTimeField53);
        long long57 = mutableDateTime2.getMillis();
        org.joda.time.Chronology chronology58 = mutableDateTime2.getChronology();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 5, chronology60);
        org.joda.time.DateTime.Property property62 = dateTime61.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property62.getFieldType();
        int int64 = mutableDateTime2.get(dateTimeFieldType63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        mutableDateTime2.add(readableDuration65);
        mutableDateTime2.setSecondOfMinute(37);
        org.joda.time.Instant instant69 = mutableDateTime2.toInstant();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:10" + "'", str7, "+100:10");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-360599990L) + "'", long22 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+100:10" + "'", str23, "+100:10");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-360599990L) + "'", long40 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+100:10" + "'", str41, "+100:10");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 10010L + "'", long55 == 10010L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 4001L + "'", long57 == 4001L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(instant69);
    }

    @Test
    public void test10987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10987");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendSecondOfMinute((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTimeNoMillis();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter6.getPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.append(dateTimePrinter7);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendDayOfYear(69259401);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder10.appendHalfdayOfDayText();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendTimeZoneShortName(strMap17);
        boolean boolean19 = dateTimeZone15.equals((java.lang.Object) strMap17);
        boolean boolean21 = dateTimeZone15.isStandardOffset((long) (byte) -1);
        long long25 = dateTimeZone15.convertLocalToUTC((long) (short) 1, false, (long) (byte) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 69206587, dateTimeZone15);
        int int28 = dateTimeZone15.getOffsetFromLocal((long) 15000000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((java.lang.Object) dateTimeFormatterBuilder11, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.format.DateTimeFormatterBuilder");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-360599999L) + "'", long25 == (-360599999L));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 360600000 + "'", int28 == 360600000);
    }

    @Test
    public void test10988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10988");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.Chronology chronology10 = localTime3.getChronology();
        org.joda.time.DateTime dateTime11 = localTime3.toDateTimeToday();
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfHour();
        org.joda.time.DateTime.Property property13 = dateTime11.yearOfEra();
        org.joda.time.DateTime dateTime15 = property13.setCopy(69414133);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test10989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10989");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        int int15 = localDate14.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property17 = localDate14.property(dateTimeFieldType16);
        int int18 = localDate14.size();
        org.joda.time.Interval interval19 = localDate14.toInterval();
        int int20 = localDate14.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDate14.getValue(69427551);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 69427551");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test10990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10990");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.lang.String str13 = dateTimeZone8.getShortName((-360600000L), locale11);
        boolean boolean14 = dateTimeZone8.isFixed();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone8);
        java.lang.String str16 = dateTimeZone8.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(69205874, 69339294, 69520976, 69488183, 65912, 69411206, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69488183 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+100:10" + "'", str16, "+100:10");
    }

    @Test
    public void test10991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10991");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes((int) (short) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property6.addToCopy(69269079);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMinutes(69274921);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withPeriodAdded(readablePeriod12, 69299335);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes(69418293);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69592141 + "'", int1 == 69592141);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test10992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10992");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        long long4 = mutableDateTime2.getMillis();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime2.add(readableDuration5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap12);
        boolean boolean14 = dateTimeZone10.equals((java.lang.Object) strMap12);
        boolean boolean16 = dateTimeZone10.isStandardOffset((long) (byte) -1);
        long long19 = dateTimeZone10.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str20 = dateTimeZone10.getID();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime2.toMutableDateTime(dateTimeZone10);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone10);
        org.joda.time.LocalDate.Property property24 = localDate23.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate26 = property24.setCopy("69421117");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69421117 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-360599990L) + "'", long19 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:10" + "'", str20, "+100:10");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test10993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10993");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.minusMinutes(69207073);
        org.joda.time.LocalTime localTime5 = localTime3.minusHours(69218807);
        org.joda.time.DateTime dateTime6 = localTime5.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime5.minus(readablePeriod7);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        org.joda.time.LocalTime localTime10 = property9.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test10994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10994");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap5 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneShortName(strMap5);
        boolean boolean7 = dateTimeZone3.equals((java.lang.Object) strMap5);
        boolean boolean9 = dateTimeZone3.isStandardOffset((long) (byte) -1);
        long long12 = dateTimeZone3.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str13 = dateTimeZone3.getID();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone3);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight16 = localDate14.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap22);
        boolean boolean24 = dateTimeZone20.equals((java.lang.Object) strMap22);
        boolean boolean26 = dateTimeZone20.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withZone(dateTimeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime29 = localDate14.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property32 = dateTime29.monthOfYear();
        org.joda.time.DateTime dateTime34 = property32.setCopy(2);
        org.joda.time.DateTime dateTime35 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime37 = dateTime35.minusSeconds(69411155);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((java.lang.Object) 1L, dateTimeZone39);
        mutableDateTime40.setTime((long) (short) -1);
        mutableDateTime40.setMillis((long) 1);
        boolean boolean45 = mutableDateTime40.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap51 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder50.appendTimeZoneShortName(strMap51);
        boolean boolean53 = dateTimeZone49.equals((java.lang.Object) strMap51);
        boolean boolean55 = dateTimeZone49.isStandardOffset((long) (byte) -1);
        long long58 = dateTimeZone49.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str59 = dateTimeZone49.getID();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone49);
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight62 = localDate60.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap68 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder69 = dateTimeFormatterBuilder67.appendTimeZoneShortName(strMap68);
        boolean boolean70 = dateTimeZone66.equals((java.lang.Object) strMap68);
        boolean boolean72 = dateTimeZone66.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter63.withZone(dateTimeZone66);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        org.joda.time.DateTime dateTime75 = localDate60.toDateTimeAtCurrentTime(dateTimeZone66);
        org.joda.time.DateTime dateTime77 = dateTime75.plusHours(69205127);
        org.joda.time.DateTime.Property property78 = dateTime77.monthOfYear();
        org.joda.time.DateTime dateTime80 = dateTime77.plusMinutes(69212644);
        org.joda.time.DateTime dateTime82 = dateTime77.withMillis((long) (short) 100);
        org.joda.time.DateTime dateTime84 = dateTime77.plusMonths(69221560);
        org.joda.time.DateTime dateTime86 = dateTime84.plusMinutes(69262398);
        mutableDateTime40.setMillis((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime.Property property88 = dateTime86.dayOfWeek();
        org.joda.time.DateTime dateTime90 = dateTime86.minusSeconds((int) (short) 100);
        boolean boolean91 = dateTime35.isAfter((org.joda.time.ReadableInstant) dateTime90);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-360599990L) + "'", long12 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:10" + "'", str13, "+100:10");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-360599990L) + "'", long58 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+100:10" + "'", str59, "+100:10");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test10995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10995");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test10996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10996");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        dateTimeFormatterBuilder0.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (byte) -1, true);
        org.joda.time.format.DateTimeParser dateTimeParser5 = dateTimeFormatterBuilder0.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendTwoDigitYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendFractionOfHour(100, 5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder10.appendTimeZoneOffset("ISOChronology[UTC]", "1970-01-05T23:23:30.180+100:10", true, 20, 69216412);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder10.appendTimeZoneId();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder10.appendWeekyear(69213298, 69240429);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder20.appendYearOfCentury(69257734, 69221646);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder23.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder23.appendFractionOfSecond(69511357, 65770);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeParser5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
    }

    @Test
    public void test10997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10997");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        int int1 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy("1");
        int int9 = localDateTime8.size();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plus(readablePeriod11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.minusYears(55);
        org.junit.Assert.assertNotNull(localDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 69592306 + "'", int1 == 69592306);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test10998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10998");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology2);
        java.lang.String str4 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime7 = localTime3.plusSeconds((int) (short) 0);
        org.joda.time.LocalTime localTime9 = localTime3.minusSeconds(10);
        org.joda.time.LocalTime localTime11 = localTime3.plusSeconds((int) (byte) 10);
        org.joda.time.LocalTime localTime13 = localTime3.minusSeconds(69224989);
        org.joda.time.LocalTime localTime15 = localTime13.minusHours(44668);
        org.joda.time.LocalTime localTime17 = localTime13.minusHours(69239408);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology20);
        java.lang.String str22 = dateTimeFormatter18.print((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.LocalTime.Property property23 = localTime21.millisOfDay();
        org.joda.time.LocalTime localTime25 = property23.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime26 = property23.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime28 = property23.addCopy((long) 44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((java.lang.Object) (-360599990L), chronology31);
        java.lang.String str33 = dateTimeFormatter29.print((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.LocalTime.Property property34 = localTime32.millisOfDay();
        org.joda.time.LocalTime localTime36 = property34.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime38 = property34.addCopy((long) 10);
        org.joda.time.LocalTime localTime40 = property34.addWrapFieldToCopy((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int42 = localTime40.get(dateTimeFieldType41);
        int int43 = localTime28.get(dateTimeFieldType41);
        boolean boolean44 = localTime13.isSupported(dateTimeFieldType41);
        org.joda.time.LocalTime.Property property45 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime46 = property45.getLocalTime();
        org.joda.time.LocalTime localTime47 = property45.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime49 = property45.addCopy(0);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str4, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str22, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000" + "'", str33, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT000000");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime49);
    }

    @Test
    public void test10999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test10999");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 0);
        boolean boolean2 = dateTime1.isBeforeNow();
        org.joda.time.YearMonthDay yearMonthDay3 = dateTime1.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendTimeZoneShortName(strMap9);
        boolean boolean11 = dateTimeZone7.equals((java.lang.Object) strMap9);
        boolean boolean13 = dateTimeZone7.isStandardOffset((long) (byte) -1);
        long long16 = dateTimeZone7.convertLocalToUTC((long) (short) 10, true);
        java.lang.String str17 = dateTimeZone7.getID();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone7);
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight20 = localDate18.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.ISODateTimeFormat.dateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = new org.joda.time.format.DateTimeFormatterBuilder();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap26 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder25.appendTimeZoneShortName(strMap26);
        boolean boolean28 = dateTimeZone24.equals((java.lang.Object) strMap26);
        boolean boolean30 = dateTimeZone24.isStandardOffset((long) (byte) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter21.withZone(dateTimeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.DateTime dateTime33 = localDate18.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.DateTime dateTime35 = dateTime33.plusHours(69205127);
        org.joda.time.DateTime.Property property36 = dateTime35.monthOfYear();
        org.joda.time.DateTime dateTime38 = property36.addToCopy((long) 69206325);
        org.joda.time.DateTime.Property property39 = dateTime38.year();
        org.joda.time.DateTime dateTime40 = dateTime38.withTimeAtStartOfDay();
        org.joda.time.DateMidnight dateMidnight41 = dateTime38.toDateMidnight();
        org.joda.time.DateTime dateTime42 = dateTime38.withEarlierOffsetAtOverlap();
        java.util.Locale locale43 = null;
        java.util.Calendar calendar44 = dateTime42.toCalendar(locale43);
        boolean boolean45 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.DateTime dateTime48 = dateTime1.withPeriodAdded(readablePeriod46, 56);
        org.joda.time.DateTime.Property property49 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime50 = dateTime1.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime51 = dateTime50.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime53 = dateTime51.plusMonths(69288257);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime55 = dateTime53.withEra(69404131);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69404131 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-360599990L) + "'", long16 == (-360599990L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+100:10" + "'", str17, "+100:10");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=182244194748592355,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+100:10,offset=360600000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=5777058,MONTH=7,WEEK_OF_YEAR=34,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=235,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=19,SECOND=52,MILLISECOND=355,ZONE_OFFSET=360600000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test11000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest21.test11000");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        boolean boolean2 = localDateTime0.equals((java.lang.Object) 100L);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusYears(59);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withWeekOfWeekyear((int) '#');
        int int7 = localDateTime0.size();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.withYear(54202757);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusSeconds(69267552);
        int int13 = localDateTime12.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
    }
}
